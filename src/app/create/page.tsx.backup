'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/hooks/useAuth'
import Card, { CardContent } from '@/components/ui/Card'
import Input from '@/components/ui/Input'
import Button from '@/components/ui/Button'
import { 
  Bitcoin, 
  Loader2, 
  ArrowRight, 
  Target,
  Sparkles,
  ArrowLeft,
  Save,
  Check,
  Star,
  AlertCircle
} from 'lucide-react'
import { toast } from 'sonner'
import { simpleCategories } from '@/config/categories'

export default function CreatePage() {
  const router = useRouter()
  const { user } = useAuth()
  
  const [loading, setLoading] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)
  const [error, setError] = useState<string | null>(null)
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    bitcoin_address: '',
    lightning_address: '',
    website_url: '',
    goal_amount: '',
    categories: [] as string[]
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  const handleCategoryToggle = (categoryValue: string) => {
    setFormData(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryValue)
        ? prev.categories.filter(cat => cat !== categoryValue)
        : [...prev.categories, categoryValue]
    }))
  }

  const nextStep = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setLoading(true)
    setError(null)

    try {
      if (!user) {
        throw new Error('You must be logged in to create a campaign')
      }

      if (!formData.title.trim()) {
        throw new Error('Please provide a title for your campaign')
      }

      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast.success('ðŸŽ‰ Campaign created successfully!')
      router.push('/dashboard')
    } catch (err) {
      console.error('Error creating campaign:', err)
      setError(err instanceof Error ? err.message : 'Failed to create campaign')
      toast.error('Failed to create campaign')
    } finally {
      setLoading(false)
    }
  }

  const saveDraft = () => {
    if (!user || !formData.title.trim()) return
    
    const draftData = { formData, currentStep }
    localStorage.setItem(`campaign-draft-${user.id}`, JSON.stringify(draftData))
    toast.success('Draft saved')
  }

  const canProceedToStep2 = formData.title.trim().length > 0
  const canProceedToStep3 = true

  if (!user) {
    router.push('/auth?mode=login')
    return null
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50/30">
      {/* Header */}
      <div className="bg-white/95 backdrop-blur-sm border-b border-gray-200/50 sticky top-0 z-20 lg:ml-20">
        <div className="max-w-5xl mx-auto px-4 sm:px-6">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-4">
              <h1 className="text-xl font-semibold text-gray-900">Create Campaign</h1>
              <div className="hidden sm:flex items-center text-sm text-gray-500">
                <span>Step {currentStep} of 3</span>
                <span className="mx-2">â€¢</span>
                <span>{Math.round((currentStep / 3) * 100)}% complete</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="lg:pl-20">
        <div className="max-w-5xl mx-auto px-4 sm:px-6 py-4 sm:py-8">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 sm:gap-8">
            
            {/* Sidebar */}
            <div className="lg:col-span-1 order-2 lg:order-1">
              <Card className="bg-white/90 backdrop-blur-sm border border-gray-100 shadow-lg">
                <CardContent className="p-4 sm:p-6">
                  <div className="text-center">
                    <div className="w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-3 sm:mb-4 rounded-full bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center shadow-md">
                      <Star className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
                    </div>
                    <h3 className="font-semibold text-gray-900 mb-2 text-sm sm:text-base">Campaign Progress</h3>
                    <div className="text-2xl sm:text-3xl font-bold mb-1 text-blue-600">
                      {Math.round((currentStep / 3) * 100)}%
                    </div>
                    <div className="text-sm font-medium text-blue-600">
                      Step {currentStep} of 3
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Main Form */}
            <div className="lg:col-span-3 order-1 lg:order-2">
              <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
                <CardContent className="p-4 sm:p-6 lg:p-8">
                  <form onSubmit={handleSubmit} className="space-y-6 sm:space-y-8">
                    {error && (
                      <div className="bg-red-50 border border-red-200 rounded-lg p-3 sm:p-4">
                        <div className="flex items-start">
                          <AlertCircle className="w-5 h-5 text-red-400" />
                          <div className="ml-3">
                            <h3 className="text-sm font-medium text-red-800">Error</h3>
                            <div className="mt-1 text-sm text-red-700">{error}</div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Step 1: Project Details */}
                    {currentStep === 1 && (
                      <div className="space-y-6 sm:space-y-8">
                        <div className="text-center">
                          <div className="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-teal-400 to-teal-600 rounded-full flex items-center justify-center mx-auto mb-3 sm:mb-4 shadow-lg">
                            <Sparkles className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
                          </div>
                          <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">Project Details</h2>
                          <p className="text-gray-600 text-base sm:text-lg">Share your vision and inspire supporters</p>
                        </div>

                        <div className="space-y-6 sm:space-y-8">
                          <div>
                            <Input
                              id="title"
                              name="title"
                              label="Project Title"
                              type="text"
                              value={formData.title}
                              onChange={handleChange}
                              placeholder="Enter your project title..."
                              required
                              className="text-base sm:text-lg py-3 sm:py-4 px-4 sm:px-5 min-h-[48px]"
                            />
                          </div>

                          <div>
                            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2 sm:mb-3">
                              Project Description
                            </label>
                            <textarea
                              id="description"
                              name="description"
                              value={formData.description}
                              onChange={handleChange}
                              rows={6}
                              placeholder="Describe your project, its goals, and why it matters..."
                              className="w-full px-4 sm:px-5 py-3 sm:py-4 border border-gray-300 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 resize-none min-h-[120px]"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-3 sm:mb-4">
                              Categories
                            </label>
                            <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4">
                              {simpleCategories.map((category) => (
                                <button
                                  key={category.value}
                                  type="button"
                                  onClick={() => handleCategoryToggle(category.value)}
                                  className={`relative p-3 sm:p-5 rounded-xl border-2 transition-all duration-200 min-h-[80px] sm:min-h-[100px] ${
                                    formData.categories.includes(category.value)
                                      ? 'border-teal-500 bg-teal-50 shadow-lg'
                                      : 'border-gray-200 hover:border-gray-300 bg-white'
                                  }`}
                                >
                                  {formData.categories.includes(category.value) && (
                                    <div className="absolute -top-2 -right-2 w-5 h-5 sm:w-6 sm:h-6 bg-teal-500 text-white rounded-full flex items-center justify-center shadow-lg">
                                      <Check className="w-2 h-2 sm:w-3 sm:h-3" />
                                    </div>
                                  )}
                                  <div className="text-center">
                                    <div className="text-2xl sm:text-3xl mb-2 sm:mb-3">{category.icon}</div>
                                    <h3 className="font-medium text-xs sm:text-sm text-gray-900 mb-1">{category.label}</h3>
                                    <p className="text-xs text-gray-500">{category.description}</p>
                                  </div>
                                </button>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Step 2: Payment Setup */}
                    {currentStep === 2 && (
                      <div className="space-y-6 sm:space-y-8">
                        <div className="text-center">
                          <div className="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full flex items-center justify-center mx-auto mb-3 sm:mb-4 shadow-lg">
                            <Bitcoin className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
                          </div>
                          <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">Payment Setup</h2>
                          <p className="text-gray-600 text-base sm:text-lg">Configure how you&apos;ll receive Bitcoin donations</p>
                        </div>

                        <div className="space-y-6 sm:space-y-8">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2 sm:mb-3">
                              Bitcoin Address
                            </label>
                            <Input
                              id="bitcoin_address"
                              name="bitcoin_address"
                              type="text"
                              value={formData.bitcoin_address}
                              onChange={handleChange}
                              placeholder="bc1q... or 1... or 3..."
                              className="font-mono text-sm py-3 px-4 min-h-[48px]"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2 sm:mb-3">
                              Lightning Address (Optional)
                            </label>
                            <Input
                              id="lightning_address"
                              name="lightning_address"
                              type="text"
                              value={formData.lightning_address}
                              onChange={handleChange}
                              placeholder="you@wallet.com"
                              className="font-mono text-sm py-3 px-4 min-h-[48px]"
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Step 3: Final Details */}
                    {currentStep === 3 && (
                      <div className="space-y-6 sm:space-y-8">
                        <div className="text-center">
                          <div className="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-3 sm:mb-4 shadow-lg">
                            <Target className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
                          </div>
                          <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">Final Details</h2>
                          <p className="text-gray-600 text-base sm:text-lg">Add finishing touches to your campaign</p>
                        </div>

                        <div className="space-y-6 sm:space-y-8">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2 sm:mb-3">
                              Website or Social Media
                            </label>
                            <Input
                              id="website_url"
                              name="website_url"
                              type="text"
                              value={formData.website_url}
                              onChange={handleChange}
                              placeholder="orangecat.ch"
                              className="py-3 px-4 min-h-[48px]"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2 sm:mb-3">
                              Funding Goal (Optional)
                            </label>
                            <Input
                              id="goal_amount"
                              name="goal_amount"
                              type="number"
                              step="0.00000001"
                              min="0"
                              value={formData.goal_amount}
                              onChange={handleChange}
                              placeholder="0.1"
                              className="py-3 px-4 min-h-[48px]"
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Navigation */}
                    <div className="flex flex-col space-y-3 pt-6 sm:pt-8 border-t border-gray-200">
                      <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                        {currentStep > 1 && (
                          <Button
                            type="button"
                            variant="ghost"
                            onClick={prevStep}
                            className="px-4 py-3 min-h-[44px]"
                          >
                            <ArrowLeft className="w-4 h-4 mr-2" />
                            <span>Back</span>
                          </Button>
                        )}
                        
                        <Button
                          type="button"
                          variant="ghost"
                          onClick={() => router.push('/dashboard')}
                          className="px-4 py-3 min-h-[44px]"
                        >
                          Cancel
                        </Button>
                      </div>

                      <div className="flex space-x-3">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={saveDraft}
                          disabled={!formData.title.trim()}
                          className="flex-1 sm:flex-none px-4 py-3 min-h-[48px]"
                        >
                          <Save className="w-4 h-4 mr-2" />
                          <span>Save Draft</span>
                        </Button>

                        {currentStep < 3 ? (
                          <Button
                            type="button"
                            onClick={nextStep}
                            disabled={
                              (currentStep === 1 && !canProceedToStep2) ||
                              (currentStep === 2 && !canProceedToStep3)
                            }
                            className="flex-1 sm:flex-none bg-teal-600 hover:bg-teal-700 px-6 py-3 min-h-[48px] font-semibold"
                          >
                            <span>Continue</span>
                            <ArrowRight className="w-4 h-4 ml-2" />
                          </Button>
                        ) : (
                          <Button
                            type="submit"
                            disabled={loading}
                            className="flex-1 sm:flex-none bg-green-600 hover:bg-green-700 px-6 py-3 min-h-[48px] font-semibold"
                          >
                            {loading ? (
                              <>
                                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                                <span>Creating...</span>
                              </>
                            ) : (
                              <>
                                <span>Launch Campaign</span>
                                <Sparkles className="w-4 h-4 ml-2" />
                              </>
                            )}
                          </Button>
                        )}
                      </div>
                    </div>
                  </form>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 