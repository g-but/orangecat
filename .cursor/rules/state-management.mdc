---
description: When we are working with auth and state management, zustand, etc, we want minimize possibility of errors, inconsistencies, race conditions, etc
globs: 
alwaysApply: false
---
Always use useAuth in your UI/components,
Always wait for hydrated before showing anything that depends on auth,
Hydration: Make sure your auth state is hydrated before rendering protected routes.
Zustand Store: Your Zustand store should always reflect the Supabase session state.
Profile Editing: Only allow profile edits if the user is authenticated and the session is valid.

On App Load:
After hydration, always check with Supabase if there is a valid session.
If not, clear all state and storage.
On Network/CORS Error:
If Supabase is unreachable, show a clear error and clear state.
On Any Auth State Change:
If the session is lost, clear state everywhere.



{
  "rules": {
    "authentication": {
      "centralized_auth_logic": "Keep auth state management centralized in the auth store. Avoid duplicating auth checks across components.",
      "consistent_auth_hooks": "Use the existing useAuth, useRequireAuth, useRedirectIfAuthenticated hooks consistently. Don't create new auth patterns.",
      "auth_error_handling": "Use consistent error handling patterns for auth failures. Always clear state on auth errors."
    },
    "components": {
      "component_size_limit": "Components should be under 200 lines. If larger, break into smaller components or extract logic to hooks.",
      "no_duplicate_components": "Before creating a new component, check if similar functionality exists. Reuse or refactor instead of duplicating.",
      "extract_common_patterns": "Extract repeated patterns (like outside click handling, loading states) into custom hooks."
    },
    "utilities": {
      "single_utility_location": "Each utility function should exist in only one place. The cn() function duplication should be avoided.",
      "utility_organization": "Group related utilities together. Create index files for easy imports."
    },
    "services": {
      "service_file_size": "Service files should focus on one domain. Files over 400 lines should be split into multiple focused services.",
      "separation_of_concerns": "Keep data fetching, transformation, and caching logic separate from UI components."
    },
    "supabase_integration": {
      "consistent_error_handling": "Use consistent patterns for Supabase errors across all services.",
      "centralized_client": "Always use the centralized Supabase client. Don't create new instances."
    }
  }
}
