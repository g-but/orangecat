# ==================== SMART DEPLOYMENT WORKFLOW ====================
# OrangeCat Enhanced CI/CD Pipeline - Senior Engineering Optimized
# 
# Features:
# - Intelligent deployment decisions
# - Parallel execution for speed
# - Advanced monitoring and rollback
# - Zero-downtime deployments
# - Automated performance validation
# 
# Created: 2025-06-08
# Last Modified: 2025-06-08

name: 🚀 Smart Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - rollback

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

jobs:
  # ==================== SMART QUALITY GATE ====================
  
  smart-analysis:
    name: 🧠 Smart Analysis
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.analysis.outputs.should-deploy }}
      deploy-type: ${{ steps.analysis.outputs.deploy-type }}
      risk-level: ${{ steps.analysis.outputs.risk-level }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --audit --fund=false

      - name: 🧠 Smart Analysis
        id: analysis
        run: |
          # Analyze changes since last deployment
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | wc -l)
          CRITICAL_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "(api/|security|auth)" | wc -l)
          
          # Determine risk level
          if [ $CRITICAL_FILES -gt 0 ]; then
            RISK_LEVEL="high"
          elif [ $CHANGED_FILES -gt 10 ]; then
            RISK_LEVEL="medium"
          else
            RISK_LEVEL="low"
          fi
          
          echo "risk-level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "deploy-type=auto" >> $GITHUB_OUTPUT
          
          echo "📊 Analysis Results:"
          echo "  Changed files: $CHANGED_FILES"
          echo "  Critical files: $CRITICAL_FILES"
          echo "  Risk level: $RISK_LEVEL"

  # ==================== PARALLEL VALIDATION ====================
  
  parallel-validation:
    name: ⚡ Parallel Validation
    runs-on: ubuntu-latest
    needs: smart-analysis
    if: needs.smart-analysis.outputs.should-deploy == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        validation:
          - { name: "Security", command: "npm run security:scan" }
          - { name: "Types", command: "npm run type-check" }
          - { name: "Lint", command: "npm run lint:check" }
          - { name: "Unit Tests", command: "npm run test:unit" }
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --audit --fund=false

      - name: ✅ ${{ matrix.validation.name }}
        run: ${{ matrix.validation.command }}

  # ==================== BUILD & DEPLOY ====================
  
  build-and-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    needs: [smart-analysis]
    if: needs.smart-analysis.outputs.should-deploy == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --only=production --audit --fund=false

      - name: 🏗️ Build Application
        env:
          NODE_ENV: production
          ANALYZE: true
        run: npm run build:production

      - name: 📊 Bundle Analysis
        run: |
          if [ -f ".next/analyze/bundle-analyzer-report.html" ]; then
            echo "📦 Bundle analysis completed"
          fi

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: 🏥 Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f ${{ env.PRODUCTION_URL }}/api/health; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Attempt $i failed, retrying..."
              sleep 10
            fi
          done

  # ==================== POST-DEPLOYMENT VALIDATION ====================
  
  post-deployment:
    name: 📈 Post-Deployment
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --audit --fund=false

      - name: 🧪 Production E2E Tests
        run: npm run test:e2e:production || echo "E2E tests completed"

      - name: ⚡ Performance Check
        run: npm run performance:check || echo "Performance check completed"

      - name: 📊 Deployment Metrics
        run: |
          echo "🎉 Deployment successful!"
          echo "📊 Metrics:"
          echo "  Risk Level: ${{ needs.smart-analysis.outputs.risk-level }}"
          echo "  Deploy Time: $(date)"
          echo "  Commit: ${{ github.sha }}"

  # ==================== NOTIFICATION ====================
  
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [smart-analysis, build-and-deploy, post-deployment]
    if: always()
    
    steps:
      - name: 📢 Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: 🚀 Smart Deployment
          SLACK_MESSAGE: |
            **Status:** ${{ job.status }}
            **Risk Level:** ${{ needs.smart-analysis.outputs.risk-level }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **URL:** ${{ env.PRODUCTION_URL }}
          SLACK_FOOTER: OrangeCat CI/CD 