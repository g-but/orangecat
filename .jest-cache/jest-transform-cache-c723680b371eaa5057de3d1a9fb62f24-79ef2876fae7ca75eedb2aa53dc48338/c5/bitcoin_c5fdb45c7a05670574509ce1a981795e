a55eedff752d00427250b31836e2ef7f
"use strict";

/**
 * Bitcoin Types - Proper TypeScript Definitions
 *
 * Replaces 'any' types in Bitcoin services with proper type definitions
 * for API responses from mempool.space and blockstream.info
 *
 * Created: 2025-06-08
 * Last Modified: 2025-06-08
 * Last Modified Summary: Initial creation of Bitcoin API types for TypeScript cleanup
 */
/* istanbul ignore next */
function cov_1b5qybqyb0() {
  var path = "/home/g/dev/orangecat/src/types/bitcoin.ts";
  var hash = "ce40e36577f57299666e34dd75545c6d8754a130";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/types/bitcoin.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "2": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 60
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "4": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 70
        }
      },
      "5": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "6": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 36,
          column: 33
        }
      },
      "7": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "8": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 47,
          column: 26
        }
      },
      "9": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 58,
          column: 29
        }
      },
      "10": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 58,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "isMempoolAddressInfo",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 29
          }
        },
        loc: {
          start: {
            line: 21,
            column: 36
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 21
      },
      "1": {
        name: "isBlockstreamAddressInfo",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 33
          }
        },
        loc: {
          start: {
            line: 31,
            column: 40
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 31
      },
      "2": {
        name: "isMempoolTransactionArray",
        decl: {
          start: {
            line: 41,
            column: 9
          },
          end: {
            line: 41,
            column: 34
          }
        },
        loc: {
          start: {
            line: 41,
            column: 41
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 43,
            column: 20
          }
        },
        loc: {
          start: {
            line: 43,
            column: 27
          },
          end: {
            line: 47,
            column: 26
          }
        },
        line: 43
      },
      "4": {
        name: "isBlockstreamTransactionArray",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 38
          }
        },
        loc: {
          start: {
            line: 52,
            column: 45
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 52
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 20
          }
        },
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 58,
            column: 26
          }
        },
        line: 54
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 26,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 36
          }
        }, {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 21
          }
        }, {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 25
          }
        }, {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 29
          }
        }, {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 31
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 36,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 36
          }
        }, {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 21
          }
        }, {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 25
          }
        }, {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 35,
            column: 29
          }
        }, {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 31
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 47,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 31
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 47,
            column: 27
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 27
          },
          end: {
            line: 47,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 27
          },
          end: {
            line: 43,
            column: 51
          }
        }, {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 25
          }
        }, {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 26
          }
        }, {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 25
          }
        }, {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 26
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 58,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 31
          }
        }, {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 58,
            column: 27
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 58,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 51
          }
        }, {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 25
          }
        }, {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 26
          }
        }, {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 25
          }
        }, {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 26
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0, 0, 0],
      "1": [0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/types/bitcoin.ts",
      mappings: ";AAAA;;;;;;;;;GASG;;AA0LH,oDAQC;AAKD,4DAQC;AAKD,8DAWC;AAKD,sEAWC;AA1DD,wDAAwD;AAExD;;GAEG;AACH,SAAgB,oBAAoB,CAAC,IAAa;IAChD,OAAO,CACL,OAAO,IAAI,KAAK,QAAQ;QACxB,IAAI,KAAK,IAAI;QACb,SAAS,IAAI,IAAI;QACjB,aAAa,IAAI,IAAI;QACrB,eAAe,IAAI,IAAI,CACxB,CAAA;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,wBAAwB,CAAC,IAAa;IACpD,OAAO,CACL,OAAO,IAAI,KAAK,QAAQ;QACxB,IAAI,KAAK,IAAI;QACb,SAAS,IAAI,IAAI;QACjB,aAAa,IAAI,IAAI;QACrB,eAAe,IAAI,IAAI,CACxB,CAAA;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,yBAAyB,CAAC,IAAa;IACrD,OAAO,CACL,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAChB,OAAO,IAAI,KAAK,QAAQ;YACxB,IAAI,KAAK,IAAI;YACb,MAAM,IAAI,IAAI;YACd,KAAK,IAAI,IAAI;YACb,MAAM,IAAI,IAAI,CACf,CACF,CAAA;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,6BAA6B,CAAC,IAAa;IACzD,OAAO,CACL,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAChB,OAAO,IAAI,KAAK,QAAQ;YACxB,IAAI,KAAK,IAAI;YACb,MAAM,IAAI,IAAI;YACd,KAAK,IAAI,IAAI;YACb,MAAM,IAAI,IAAI,CACf,CACF,CAAA;AACH,CAAC",
      names: [],
      sources: ["/home/g/dev/orangecat/src/types/bitcoin.ts"],
      sourcesContent: ["/**\n * Bitcoin Types - Proper TypeScript Definitions\n * \n * Replaces 'any' types in Bitcoin services with proper type definitions\n * for API responses from mempool.space and blockstream.info\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Initial creation of Bitcoin API types for TypeScript cleanup\n */\n\n// ==================== BITCOIN API RESPONSES ====================\n\n/**\n * Raw Bitcoin address info from mempool.space\n * Replaces: data: any in processBalance\n */\nexport interface MempoolAddressInfo {\n  address: string\n  chain_stats: {\n    funded_txo_count: number\n    funded_txo_sum: number\n    spent_txo_count: number\n    spent_txo_sum: number\n    tx_count: number\n  }\n  mempool_stats: {\n    funded_txo_count: number\n    funded_txo_sum: number\n    spent_txo_count: number\n    spent_txo_sum: number\n    tx_count: number\n  }\n}\n\n/**\n * Raw Bitcoin transaction from mempool.space\n * Replaces: any[] in processTransactions\n */\nexport interface MempoolTransaction {\n  txid: string\n  version: number\n  locktime: number\n  vin: MempoolInput[]\n  vout: MempoolOutput[]\n  size: number\n  weight: number\n  fee: number\n  status: {\n    confirmed: boolean\n    block_height?: number\n    block_hash?: string\n    block_time?: number\n  }\n}\n\n/**\n * Transaction input from mempool.space\n */\nexport interface MempoolInput {\n  txid: string\n  vout: number\n  prevout?: {\n    scriptpubkey: string\n    scriptpubkey_asm: string\n    scriptpubkey_type: string\n    scriptpubkey_address?: string\n    value: number\n  }\n  scriptsig: string\n  scriptsig_asm: string\n  witness?: string[]\n  is_coinbase: boolean\n  sequence: number\n}\n\n/**\n * Transaction output from mempool.space\n */\nexport interface MempoolOutput {\n  scriptpubkey: string\n  scriptpubkey_asm: string\n  scriptpubkey_type: string\n  scriptpubkey_address?: string\n  value: number\n}\n\n/**\n * Raw Bitcoin address info from blockstream.info\n * Replaces: data: any in processBalance for blockstream\n */\nexport interface BlockstreamAddressInfo {\n  address: string\n  chain_stats: {\n    funded_txo_count: number\n    funded_txo_sum: number\n    spent_txo_count: number\n    spent_txo_sum: number\n    tx_count: number\n  }\n  mempool_stats: {\n    funded_txo_count: number\n    funded_txo_sum: number\n    spent_txo_count: number\n    spent_txo_sum: number\n    tx_count: number\n  }\n}\n\n/**\n * Raw Bitcoin transaction from blockstream.info\n * Replaces: any[] in processTransactions for blockstream\n */\nexport interface BlockstreamTransaction {\n  txid: string\n  version: number\n  locktime: number\n  vin: BlockstreamInput[]\n  vout: BlockstreamOutput[]\n  size: number\n  weight: number\n  fee: number\n  status: {\n    confirmed: boolean\n    block_height?: number\n    block_hash?: string\n    block_time?: number\n  }\n}\n\n/**\n * Transaction input from blockstream.info\n */\nexport interface BlockstreamInput {\n  txid: string\n  vout: number\n  prevout?: {\n    scriptpubkey: string\n    scriptpubkey_asm: string\n    scriptpubkey_type: string\n    scriptpubkey_address?: string\n    value: number\n  }\n  scriptsig: string\n  scriptsig_asm: string\n  witness?: string[]\n  is_coinbase: boolean\n  sequence: number\n}\n\n/**\n * Transaction output from blockstream.info\n */\nexport interface BlockstreamOutput {\n  scriptpubkey: string\n  scriptpubkey_asm: string\n  scriptpubkey_type: string\n  scriptpubkey_address?: string\n  value: number\n}\n\n// ==================== BITCOIN SERVICE TYPES ====================\n\n/**\n * Bitcoin API provider configuration\n * Replaces: any in provider definitions\n */\nexport interface BitcoinProvider {\n  name: string\n  baseUrl: string\n  processBalance: (data: MempoolAddressInfo | BlockstreamAddressInfo) => number\n  processTransactions: (\n    data: MempoolTransaction[] | BlockstreamTransaction[], \n    address: string\n  ) => BitcoinTransaction[]\n}\n\n/**\n * Processed Bitcoin transaction (our internal format)\n * Already exists in codebase, but included for completeness\n */\nexport interface BitcoinTransaction {\n  txid: string\n  type: 'incoming' | 'outgoing'\n  amount: number\n  confirmations: number\n  timestamp: number\n  fee?: number\n}\n\n// ==================== TYPE GUARDS ====================\n\n/**\n * Type guard to check if data is mempool format\n */\nexport function isMempoolAddressInfo(data: unknown): data is MempoolAddressInfo {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    'address' in data &&\n    'chain_stats' in data &&\n    'mempool_stats' in data\n  )\n}\n\n/**\n * Type guard to check if data is blockstream format\n */\nexport function isBlockstreamAddressInfo(data: unknown): data is BlockstreamAddressInfo {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    'address' in data &&\n    'chain_stats' in data &&\n    'mempool_stats' in data\n  )\n}\n\n/**\n * Type guard for mempool transaction array\n */\nexport function isMempoolTransactionArray(data: unknown): data is MempoolTransaction[] {\n  return (\n    Array.isArray(data) &&\n    data.every(item => \n      typeof item === 'object' &&\n      item !== null &&\n      'txid' in item &&\n      'vin' in item &&\n      'vout' in item\n    )\n  )\n}\n\n/**\n * Type guard for blockstream transaction array\n */\nexport function isBlockstreamTransactionArray(data: unknown): data is BlockstreamTransaction[] {\n  return (\n    Array.isArray(data) &&\n    data.every(item => \n      typeof item === 'object' &&\n      item !== null &&\n      'txid' in item &&\n      'vin' in item &&\n      'vout' in item\n    )\n  )\n}\n\nexport interface BitcoinWalletData {\n  balance: number;\n  address: string;\n  transactions: BitcoinTransaction[];\n  network: 'mainnet' | 'testnet';\n  lastUpdated?: string;\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ce40e36577f57299666e34dd75545c6d8754a130"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1b5qybqyb0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1b5qybqyb0();
cov_1b5qybqyb0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1b5qybqyb0().s[1]++;
exports.isMempoolAddressInfo = isMempoolAddressInfo;
/* istanbul ignore next */
cov_1b5qybqyb0().s[2]++;
exports.isBlockstreamAddressInfo = isBlockstreamAddressInfo;
/* istanbul ignore next */
cov_1b5qybqyb0().s[3]++;
exports.isMempoolTransactionArray = isMempoolTransactionArray;
/* istanbul ignore next */
cov_1b5qybqyb0().s[4]++;
exports.isBlockstreamTransactionArray = isBlockstreamTransactionArray;
// ==================== TYPE GUARDS ====================
/**
 * Type guard to check if data is mempool format
 */
function isMempoolAddressInfo(data) {
  /* istanbul ignore next */
  cov_1b5qybqyb0().f[0]++;
  cov_1b5qybqyb0().s[5]++;
  return /* istanbul ignore next */(cov_1b5qybqyb0().b[0][0]++, typeof data === 'object') &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[0][1]++, data !== null) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[0][2]++, 'address' in data) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[0][3]++, 'chain_stats' in data) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[0][4]++, 'mempool_stats' in data);
}
/**
 * Type guard to check if data is blockstream format
 */
function isBlockstreamAddressInfo(data) {
  /* istanbul ignore next */
  cov_1b5qybqyb0().f[1]++;
  cov_1b5qybqyb0().s[6]++;
  return /* istanbul ignore next */(cov_1b5qybqyb0().b[1][0]++, typeof data === 'object') &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[1][1]++, data !== null) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[1][2]++, 'address' in data) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[1][3]++, 'chain_stats' in data) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[1][4]++, 'mempool_stats' in data);
}
/**
 * Type guard for mempool transaction array
 */
function isMempoolTransactionArray(data) {
  /* istanbul ignore next */
  cov_1b5qybqyb0().f[2]++;
  cov_1b5qybqyb0().s[7]++;
  return /* istanbul ignore next */(cov_1b5qybqyb0().b[2][0]++, Array.isArray(data)) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[2][1]++, data.every(item => {
    /* istanbul ignore next */
    cov_1b5qybqyb0().f[3]++;
    cov_1b5qybqyb0().s[8]++;
    return /* istanbul ignore next */(cov_1b5qybqyb0().b[3][0]++, typeof item === 'object') &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[3][1]++, item !== null) &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[3][2]++, 'txid' in item) &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[3][3]++, 'vin' in item) &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[3][4]++, 'vout' in item);
  }));
}
/**
 * Type guard for blockstream transaction array
 */
function isBlockstreamTransactionArray(data) {
  /* istanbul ignore next */
  cov_1b5qybqyb0().f[4]++;
  cov_1b5qybqyb0().s[9]++;
  return /* istanbul ignore next */(cov_1b5qybqyb0().b[4][0]++, Array.isArray(data)) &&
  /* istanbul ignore next */
  (cov_1b5qybqyb0().b[4][1]++, data.every(item => {
    /* istanbul ignore next */
    cov_1b5qybqyb0().f[5]++;
    cov_1b5qybqyb0().s[10]++;
    return /* istanbul ignore next */(cov_1b5qybqyb0().b[5][0]++, typeof item === 'object') &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[5][1]++, item !== null) &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[5][2]++, 'txid' in item) &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[5][3]++, 'vin' in item) &&
    /* istanbul ignore next */
    (cov_1b5qybqyb0().b[5][4]++, 'vout' in item);
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,