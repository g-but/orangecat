{"version":3,"names":["exports","PerformanceMonitor","cov_jmf946r90","s","DevPerformanceMonitor","useRenderPerformance","useAPIPerformance","useMemoryMonitor","react_1","__importStar","require","database_optimizer_1","card_1","badge_1","lucide_react_1","componentName","f","useEffect","startTime","performance","now","renderTime","performanceMonitor","recordMetric","trackAPI","useCallback","name","apiCall","result","responseTime","error","recordError","memoryInfo","setMemoryInfo","useState","updateMemoryInfo","b","memory","used","usedJSHeapSize","total","totalJSHeapSize","percentage","interval","setInterval","clearInterval","showDetailed","alertThresholds","apiTime","memoryUsage","stats","setStats","apiResponseTime","bundleSize","cacheHitRate","alerts","setAlerts","updateStats","renderStats","getStats","apiStats","cacheStats","newStats","avg","count","newAlerts","push","type","message","toFixed","timestamp","Date","prev","slice","jsx_runtime_1","jsxs","className","children","Card","jsx","CardHeader","CardTitle","Activity","CardContent","Clock","Badge","variant","Database","Gauge","Zap","length","map","alert","index","AlertTriangle","CheckCircle","isProduction","process","env","NODE_ENV","isDevelopment","NEXT_PUBLIC_SHOW_PERFORMANCE_MONITOR","PerformanceProvider","window","__performanceMonitor","clearMetrics","Fragment","default"],"sources":["/home/g/dev/orangecat/src/components/performance/PerformanceMonitor.tsx"],"sourcesContent":["/**\n * REACT PERFORMANCE MONITOR COMPONENT\n * \n * Real-time performance monitoring for Option B optimization:\n * - Component render times\n * - API response times\n * - Bundle loading metrics\n * - Memory usage tracking\n * - Performance alerts\n * \n * Created: 2025-01-14\n * Last Modified: 2025-01-14\n * Last Modified Summary: Real-time performance monitoring for production optimization\n */\n\n'use client'\n\nimport React, { useEffect, useState, useCallback } from 'react'\nimport { performanceMonitor } from '@/services/performance/database-optimizer'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Activity, \n  Clock, \n  Database, \n  Gauge, \n  TrendingUp, \n  AlertTriangle,\n  CheckCircle,\n  Zap\n} from 'lucide-react'\n\n// ==================== PERFORMANCE METRICS TYPES ====================\n\ninterface PerformanceStats {\n  renderTime: number\n  apiResponseTime: number\n  bundleSize: number\n  memoryUsage: number\n  cacheHitRate: number\n}\n\ninterface PerformanceAlert {\n  type: 'warning' | 'error' | 'info'\n  message: string\n  timestamp: number\n}\n\n// ==================== PERFORMANCE HOOKS ====================\n\n/**\n * Hook to measure component render performance\n */\nfunction useRenderPerformance(componentName: string) {\n  useEffect(() => {\n    const startTime = performance.now()\n    \n    return () => {\n      const renderTime = performance.now() - startTime\n      performanceMonitor.recordMetric(`component_render:${componentName}`, renderTime)\n    }\n  }, [componentName])\n}\n\n/**\n * Hook to track API performance\n */\nfunction useAPIPerformance() {\n  const trackAPI = useCallback(async (\n    name: string,\n    apiCall: () => Promise<any>\n  ): Promise<any> => {\n    const startTime = performance.now()\n    try {\n      const result = await apiCall()\n      const responseTime = performance.now() - startTime\n      performanceMonitor.recordMetric(`api:${name}`, responseTime)\n      return result\n    } catch (error) {\n      const responseTime = performance.now() - startTime\n      performanceMonitor.recordError(`api:${name}`, error as Error, responseTime)\n      throw error\n    }\n  }, [])\n\n  return { trackAPI }\n}\n\n/**\n * Hook to monitor memory usage\n */\nfunction useMemoryMonitor() {\n  const [memoryInfo, setMemoryInfo] = useState<{\n    used: number\n    total: number\n    percentage: number\n  } | null>(null)\n\n  useEffect(() => {\n    const updateMemoryInfo = () => {\n      if ('memory' in performance) {\n        const memory = (performance as any).memory\n        const used = memory.usedJSHeapSize / 1024 / 1024 // MB\n        const total = memory.totalJSHeapSize / 1024 / 1024 // MB\n        const percentage = (used / total) * 100\n\n        setMemoryInfo({ used, total, percentage })\n        performanceMonitor.recordMetric('memory_usage', used)\n      }\n    }\n\n    updateMemoryInfo()\n    const interval = setInterval(updateMemoryInfo, 5000) // Update every 5 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return memoryInfo\n}\n\n// ==================== PERFORMANCE MONITOR COMPONENT ====================\n\ninterface PerformanceMonitorProps {\n  componentName?: string\n  showDetailed?: boolean\n  alertThresholds?: {\n    renderTime: number\n    apiTime: number\n    memoryUsage: number\n  }\n}\n\nexport function PerformanceMonitor({ \n  componentName = 'Unknown',\n  showDetailed = false,\n  alertThresholds = {\n    renderTime: 100, // ms\n    apiTime: 2000, // ms\n    memoryUsage: 100 // MB\n  }\n}: PerformanceMonitorProps) {\n  useRenderPerformance(componentName)\n  \n  const [stats, setStats] = useState<PerformanceStats>({\n    renderTime: 0,\n    apiResponseTime: 0,\n    bundleSize: 0,\n    memoryUsage: 0,\n    cacheHitRate: 0\n  })\n  \n  const [alerts, setAlerts] = useState<PerformanceAlert[]>([])\n  const memoryInfo = useMemoryMonitor()\n\n  // Update stats periodically\n  useEffect(() => {\n    const updateStats = () => {\n      const renderStats = performanceMonitor.getStats(`component_render:${componentName}`)\n      const apiStats = performanceMonitor.getStats('api')\n      const cacheStats = performanceMonitor.getStats('cache_hit')\n      \n      const newStats: PerformanceStats = {\n        renderTime: renderStats.avg,\n        apiResponseTime: apiStats.avg,\n        bundleSize: 0, // Would be calculated from build stats\n        memoryUsage: memoryInfo?.used || 0,\n        cacheHitRate: cacheStats.count > 0 ? (cacheStats.count / (cacheStats.count + performanceMonitor.getStats('database_query').count)) * 100 : 0\n      }\n\n      setStats(newStats)\n\n      // Check for performance alerts\n      const newAlerts: PerformanceAlert[] = []\n      \n      if (newStats.renderTime > alertThresholds.renderTime) {\n        newAlerts.push({\n          type: 'warning',\n          message: `Slow render time: ${newStats.renderTime.toFixed(2)}ms`,\n          timestamp: Date.now()\n        })\n      }\n      \n      if (newStats.apiResponseTime > alertThresholds.apiTime) {\n        newAlerts.push({\n          type: 'error',\n          message: `Slow API response: ${newStats.apiResponseTime.toFixed(2)}ms`,\n          timestamp: Date.now()\n        })\n      }\n      \n      if (newStats.memoryUsage > alertThresholds.memoryUsage) {\n        newAlerts.push({\n          type: 'warning',\n          message: `High memory usage: ${newStats.memoryUsage.toFixed(2)}MB`,\n          timestamp: Date.now()\n        })\n      }\n\n      setAlerts(prev => [...prev, ...newAlerts].slice(-5)) // Keep last 5 alerts\n    }\n\n    updateStats()\n    const interval = setInterval(updateStats, 3000) // Update every 3 seconds\n\n    return () => clearInterval(interval)\n  }, [componentName, alertThresholds, memoryInfo])\n\n  if (!showDetailed) {\n    return null // Hide in production by default\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 space-y-2 max-w-sm\">\n      {/* Performance Stats Card */}\n      <Card className=\"bg-black/90 text-white border-gray-700\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Performance Monitor\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          {/* Render Performance */}\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"flex items-center gap-1\">\n              <Clock className=\"h-3 w-3\" />\n              Render\n            </span>\n            <Badge variant={stats.renderTime > alertThresholds.renderTime ? 'destructive' : 'default'}>\n              {stats.renderTime.toFixed(1)}ms\n            </Badge>\n          </div>\n\n          {/* API Performance */}\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"flex items-center gap-1\">\n              <Database className=\"h-3 w-3\" />\n              API\n            </span>\n            <Badge variant={stats.apiResponseTime > alertThresholds.apiTime ? 'destructive' : 'default'}>\n              {stats.apiResponseTime.toFixed(1)}ms\n            </Badge>\n          </div>\n\n          {/* Memory Usage */}\n          {memoryInfo && (\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"flex items-center gap-1\">\n                <Gauge className=\"h-3 w-3\" />\n                Memory\n              </span>\n              <Badge variant={memoryInfo.used > alertThresholds.memoryUsage ? 'destructive' : 'default'}>\n                {memoryInfo.used.toFixed(1)}MB\n              </Badge>\n            </div>\n          )}\n\n          {/* Cache Hit Rate */}\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"flex items-center gap-1\">\n              <Zap className=\"h-3 w-3\" />\n              Cache\n            </span>\n            <Badge variant={stats.cacheHitRate > 70 ? 'default' : 'secondary'}>\n              {stats.cacheHitRate.toFixed(1)}%\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Alerts */}\n      {alerts.length > 0 && (\n        <Card className=\"bg-red-900/90 text-white border-red-700\">\n          <CardContent className=\"p-2\">\n            {alerts.map((alert, index) => (\n              <div key={index} className=\"flex items-center gap-2 text-xs mb-1 last:mb-0\">\n                {alert.type === 'error' && <AlertTriangle className=\"h-3 w-3 text-red-400\" />}\n                {alert.type === 'warning' && <AlertTriangle className=\"h-3 w-3 text-yellow-400\" />}\n                {alert.type === 'info' && <CheckCircle className=\"h-3 w-3 text-blue-400\" />}\n                <span>{alert.message}</span>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n\n// ==================== DEVELOPMENT PERFORMANCE MONITOR ====================\n\n/**\n * Development-only performance monitor with detailed metrics\n */\nexport function DevPerformanceMonitor() {\n  const isProduction = process.env.NODE_ENV === 'production'\n  const isDevelopment = process.env.NODE_ENV === 'development'\n  \n  // Only show in development or when explicitly enabled\n  if (isProduction && !process.env.NEXT_PUBLIC_SHOW_PERFORMANCE_MONITOR) {\n    return null\n  }\n\n  return (\n    <PerformanceMonitor \n      componentName=\"Application\"\n      showDetailed={isDevelopment || !!process.env.NEXT_PUBLIC_SHOW_PERFORMANCE_MONITOR}\n      alertThresholds={{\n        renderTime: 50,\n        apiTime: 1000,\n        memoryUsage: 75\n      }}\n    />\n  )\n}\n\n// ==================== PERFORMANCE PROVIDER ====================\n\n/**\n * Context provider for performance monitoring across the app\n */\nexport const PerformanceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { trackAPI } = useAPIPerformance()\n\n  // Add performance monitoring to window for debugging\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      (window as any).__performanceMonitor = {\n        getStats: () => performanceMonitor.getStats(''),\n        trackAPI,\n        clearMetrics: () => {\n          // Clear metrics functionality could be added here\n        }\n      }\n    }\n  }, [trackAPI])\n\n  return (\n    <>\n      {children}\n      <DevPerformanceMonitor />\n    </>\n  )\n}\n\n// ==================== EXPORTS ====================\n\nexport { useRenderPerformance, useAPIPerformance, useMemoryMonitor }\nexport default PerformanceMonitor "],"mappings":"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","ignoreList":[]}