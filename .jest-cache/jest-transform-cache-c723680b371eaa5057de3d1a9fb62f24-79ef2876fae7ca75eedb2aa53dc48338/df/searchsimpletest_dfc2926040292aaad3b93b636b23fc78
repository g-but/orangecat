5bea643f53a8e6df67db8e9a2be252f6
"use strict";
/**
 * SEARCH SERVICE - SIMPLE TEST COVERAGE
 *
 * This test suite provides focused coverage for Search Service utility functions
 * and basic functionality without complex Supabase mocking.
 *
 * Created: 2025-01-08
 * Last Modified: 2025-01-08
 * Last Modified Summary: Simple Search Service tests focusing on utility functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Supabase with minimal working implementation
jest.mock('@supabase/ssr', () => ({
    createBrowserClient: jest.fn(() => ({
        from: () => ({
            select: () => ({
                or: () => ({
                    eq: () => ({
                        order: () => ({
                            range: () => Promise.resolve({
                                data: [],
                                error: null,
                                count: 0
                            })
                        })
                    })
                })
            })
        })
    }))
}));
const search_1 = require("../search");
// Import after mocking
const search_2 = require("../search");
describe('🔍 Search Service - Simple Coverage', () => {
    beforeEach(() => {
        (0, search_1.clearSearchCache)();
    });
    describe('🎯 Basic Search Operations', () => {
        test('should export search function', () => {
            expect(typeof search_2.search).toBe('function');
            expect(search_2.search).toBeDefined();
        });
        test('should export getTrending function', () => {
            expect(typeof search_2.getTrending).toBe('function');
            expect(search_2.getTrending).toBeDefined();
        });
        test('should export getSearchSuggestions function', () => {
            expect(typeof search_2.getSearchSuggestions).toBe('function');
            expect(search_2.getSearchSuggestions).toBeDefined();
        });
        test('should export clearSearchCache function', () => {
            expect(typeof search_1.clearSearchCache).toBe('function');
            expect(search_1.clearSearchCache).toBeDefined();
        });
    });
    describe('🔧 Search Configuration Validation', () => {
        test('should handle basic search options structure', async () => {
            const options = {
                query: 'test',
                type: 'profiles',
                sortBy: 'relevance',
                limit: 10
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(result).toHaveProperty('results');
            expect(result).toHaveProperty('totalCount');
            expect(result).toHaveProperty('hasMore');
            expect(Array.isArray(result.results)).toBe(true);
            expect(typeof result.totalCount).toBe('number');
            expect(typeof result.hasMore).toBe('boolean');
        });
        test('should handle campaign search type', async () => {
            const options = {
                query: 'bitcoin',
                type: 'campaigns',
                sortBy: 'recent'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
            expect(result.totalCount).toBeGreaterThanOrEqual(0);
        });
        test('should handle "all" search type', async () => {
            const options = {
                query: 'education',
                type: 'all',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
            expect(result.totalCount).toBeGreaterThanOrEqual(0);
        });
    });
    describe('🔀 Sort Options Validation', () => {
        test('should handle relevance sorting', async () => {
            const options = {
                query: 'test',
                type: 'profiles',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle recent sorting', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'recent'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle popular sorting', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'popular'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle funding sorting', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'funding'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
    });
    describe('🔍 Filter Options', () => {
        test('should handle category filters', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'relevance',
                filters: {
                    categories: ['education', 'technology']
                }
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle active status filter', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'relevance',
                filters: {
                    isActive: true
                }
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle goal requirement filter', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'relevance',
                filters: {
                    hasGoal: true
                }
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle funding range filters', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'relevance',
                filters: {
                    minFunding: 10000000, // 0.1 BTC in satoshis
                    maxFunding: 100000000 // 1 BTC in satoshis
                }
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle date range filters', async () => {
            const options = {
                query: 'test',
                type: 'campaigns',
                sortBy: 'relevance',
                filters: {
                    dateRange: {
                        start: '2024-01-01',
                        end: '2024-12-31'
                    }
                }
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
    });
    describe('📄 Pagination Support', () => {
        test('should handle limit parameter', async () => {
            const options = {
                query: 'test',
                type: 'all',
                sortBy: 'relevance',
                limit: 5
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
            expect(result.results.length).toBeLessThanOrEqual(5);
        });
        test('should handle offset parameter', async () => {
            const options = {
                query: 'test',
                type: 'all',
                sortBy: 'relevance',
                limit: 10,
                offset: 20
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should calculate hasMore correctly for small result sets', async () => {
            const options = {
                query: 'veryspecificquerythatshouldhavenoorcampaigns',
                type: 'all',
                sortBy: 'relevance',
                limit: 10
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(result.hasMore).toBe(false);
        });
    });
    describe('📊 Trending and Suggestions', () => {
        test('should get trending campaigns', async () => {
            const result = await (0, search_2.getTrending)();
            expect(result).toBeDefined();
            expect(result).toHaveProperty('results');
            expect(result).toHaveProperty('totalCount');
            expect(result).toHaveProperty('hasMore');
            expect(Array.isArray(result.results)).toBe(true);
            expect(typeof result.totalCount).toBe('number');
            expect(typeof result.hasMore).toBe('boolean');
        });
        test('should get search suggestions', async () => {
            const suggestions = await (0, search_2.getSearchSuggestions)('bit', 5);
            expect(Array.isArray(suggestions)).toBe(true);
            expect(suggestions.length).toBeLessThanOrEqual(5);
        });
        test('should handle empty suggestion query', async () => {
            const suggestions = await (0, search_2.getSearchSuggestions)('', 5);
            expect(Array.isArray(suggestions)).toBe(true);
            expect(suggestions.length).toBeGreaterThanOrEqual(0);
        });
        test('should respect suggestion limit', async () => {
            const suggestions = await (0, search_2.getSearchSuggestions)('bitcoin', 3);
            expect(Array.isArray(suggestions)).toBe(true);
            expect(suggestions.length).toBeLessThanOrEqual(3);
        });
    });
    describe('💾 Cache Management', () => {
        test('should clear cache without errors', () => {
            expect(() => {
                (0, search_1.clearSearchCache)();
            }).not.toThrow();
        });
        test('should work after cache clear', async () => {
            (0, search_1.clearSearchCache)();
            const options = {
                query: 'test',
                type: 'all',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle multiple cache clears', () => {
            expect(() => {
                (0, search_1.clearSearchCache)();
                (0, search_1.clearSearchCache)();
                (0, search_1.clearSearchCache)();
            }).not.toThrow();
        });
    });
    describe('🛡️ Error Resilience', () => {
        test('should handle empty query strings', async () => {
            const options = {
                query: '',
                type: 'all',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle undefined query', async () => {
            const options = {
                query: undefined,
                type: 'profiles',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle malformed search options gracefully', async () => {
            const options = {
                query: 'test',
                type: 'all',
                sortBy: 'relevance',
                limit: -1, // Invalid limit
                offset: -5 // Invalid offset
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
    });
    describe('🧪 Edge Cases', () => {
        test('should handle very long search queries', async () => {
            const longQuery = 'a'.repeat(1000);
            const options = {
                query: longQuery,
                type: 'all',
                sortBy: 'relevance',
                limit: 5
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle special characters in search', async () => {
            const options = {
                query: '!@#$%^&*()',
                type: 'all',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle Unicode characters', async () => {
            const options = {
                query: '比特币 ビットコイン 🚀',
                type: 'all',
                sortBy: 'relevance'
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
        test('should handle very large limit values', async () => {
            const options = {
                query: 'test',
                type: 'all',
                sortBy: 'relevance',
                limit: Number.MAX_SAFE_INTEGER
            };
            const result = await (0, search_2.search)(options);
            expect(result).toBeDefined();
            expect(Array.isArray(result.results)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,