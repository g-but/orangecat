747342c0104caeb2306709a01d8bad6e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@/stores/auth', () => ({
    useAuthStore: () => mockAuthStore
}));
jest.mock('next/navigation', () => ({
    useRouter: jest.fn(() => ({
        push: mockPush
    })),
    usePathname: jest.fn(() => mockPathname)
}));
const react_1 = require("@testing-library/react");
const navigation_1 = require("next/navigation");
const useAuth_1 = require("../useAuth");
// Mock the auth store
const mockAuthStore = {
    user: null,
    session: null,
    profile: null,
    isLoading: false,
    hydrated: false,
    signOut: jest.fn()
};
// Mock Next.js navigation
const mockPush = jest.fn();
const mockPathname = '/';
describe('useAuth', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Reset mock store to default state
        Object.assign(mockAuthStore, {
            user: null,
            session: null,
            profile: null,
            isLoading: false,
            hydrated: false,
            signOut: jest.fn()
        });
    });
    describe('useAuth - General Auth Hook', () => {
        it('should return consistent auth state when user and session exist', () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.isConsistent).toBe(true);
            expect(result.current.user).toEqual({ id: '123' });
            expect(result.current.session).toEqual({ access_token: 'token' });
        });
        it('should return unauthenticated when no user or session', () => {
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.isConsistent).toBe(true);
            expect(result.current.user).toBe(null);
            expect(result.current.session).toBe(null);
        });
        it('should detect inconsistent state when user exists but session does not', () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.isConsistent).toBe(false);
            expect(result.current.user).toEqual({ id: '123' });
            expect(result.current.session).toBe(null);
        });
        it('should detect inconsistent state when session exists but user does not', () => {
            mockAuthStore.user = null;
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.isConsistent).toBe(false);
            expect(result.current.user).toBe(null);
            expect(result.current.session).toEqual({ access_token: 'token' });
        });
        it('should provide fixInconsistentState function', async () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            // Mock window location
            Object.defineProperty(window, 'location', {
                value: { pathname: '/dashboard' },
                writable: true
            });
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            expect(result.current.fixInconsistentState).toBeInstanceOf(Function);
            await (0, react_1.act)(async () => {
                await result.current.fixInconsistentState();
            });
            expect(mockAuthStore.signOut).toHaveBeenCalled();
            expect(mockPush).toHaveBeenCalledWith('/auth');
        });
        it('should not attempt fix when not hydrated', async () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = false;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            await (0, react_1.act)(async () => {
                await result.current.fixInconsistentState();
            });
            expect(mockAuthStore.signOut).not.toHaveBeenCalled();
            expect(mockPush).not.toHaveBeenCalled();
        });
    });
    describe('useRequireAuth - Protected Routes Hook', () => {
        it('should redirect to auth when user is not authenticated', () => {
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            (0, react_1.renderHook)(() => (0, useAuth_1.useRequireAuth)());
            expect(mockPush).toHaveBeenCalledWith('/auth?from=protected');
        });
        it('should not redirect when user is authenticated', () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRequireAuth)());
            expect(mockPush).not.toHaveBeenCalled();
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.isLoading).toBe(false);
        });
        it('should show loading when not hydrated', () => {
            mockAuthStore.hydrated = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRequireAuth)());
            expect(result.current.isLoading).toBe(true);
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should show loading when still loading', () => {
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = true;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRequireAuth)());
            expect(result.current.isLoading).toBe(true);
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should redirect when state is inconsistent', () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            (0, react_1.renderHook)(() => (0, useAuth_1.useRequireAuth)());
            expect(mockPush).toHaveBeenCalledWith('/auth?from=protected');
        });
        it('should return user and profile data when authenticated', () => {
            const mockUser = { id: '123', email: 'test@example.com' };
            const mockProfile = { id: '456', username: 'testuser' };
            mockAuthStore.user = mockUser;
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.profile = mockProfile;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRequireAuth)());
            expect(result.current.user).toEqual(mockUser);
            expect(result.current.profile).toEqual(mockProfile);
            expect(result.current.isAuthenticated).toBe(true);
        });
    });
    describe('useRedirectIfAuthenticated - Login/Register Pages Hook', () => {
        beforeEach(() => {
            ;
            navigation_1.usePathname.mockReturnValue('/auth');
        });
        it('should redirect to dashboard when user is authenticated', () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(mockPush).toHaveBeenCalledWith('/dashboard');
        });
        it('should not redirect when user is not authenticated', () => {
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(mockPush).not.toHaveBeenCalled();
            expect(result.current.isAuthenticated).toBe(false);
        });
        it('should not redirect when on dashboard page', () => {
            ;
            navigation_1.usePathname.mockReturnValue('/dashboard');
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should not redirect when on home page', () => {
            ;
            navigation_1.usePathname.mockReturnValue('/');
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = { access_token: 'token' };
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should show loading when not hydrated', () => {
            mockAuthStore.hydrated = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(result.current.isLoading).toBe(true);
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should show loading when auth is loading', () => {
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = true;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(result.current.isLoading).toBe(true);
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should not redirect when state is inconsistent', () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            (0, react_1.renderHook)(() => (0, useAuth_1.useRedirectIfAuthenticated)());
            expect(mockPush).not.toHaveBeenCalled();
        });
    });
    describe('Error Handling and Edge Cases', () => {
        it('should handle signOut errors gracefully', async () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            mockAuthStore.signOut.mockRejectedValue(new Error('Sign out failed'));
            // Mock console.error to verify error logging (logger uses console.error internally)
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            Object.defineProperty(window, 'location', {
                value: { pathname: '/dashboard' },
                writable: true
            });
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            await (0, react_1.act)(async () => {
                await result.current.fixInconsistentState();
            });
            // Expect the new logger format
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('ERROR [Auth] Error during auth state fix'), expect.objectContaining({ error: 'Sign out failed' }));
            consoleSpy.mockRestore();
        });
        it('should handle missing window object gracefully', async () => {
            mockAuthStore.user = { id: '123' };
            mockAuthStore.session = null;
            mockAuthStore.hydrated = true;
            mockAuthStore.isLoading = false;
            const { result } = (0, react_1.renderHook)(() => (0, useAuth_1.useAuth)());
            // Mock the window object to be undefined during the fix
            const originalWindow = global.window;
            Object.defineProperty(global, 'window', {
                value: undefined,
                configurable: true
            });
            await (0, react_1.act)(async () => {
                await result.current.fixInconsistentState();
            });
            expect(mockAuthStore.signOut).toHaveBeenCalled();
            expect(mockPush).not.toHaveBeenCalled(); // Should not redirect without window
            // Restore window
            Object.defineProperty(global, 'window', {
                value: originalWindow,
                configurable: true
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,