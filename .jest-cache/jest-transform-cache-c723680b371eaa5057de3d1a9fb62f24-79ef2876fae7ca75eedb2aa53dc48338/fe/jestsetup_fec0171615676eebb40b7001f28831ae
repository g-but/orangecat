343bf8dc4c31977df5f99ea7ced64403
"use strict";
/**
 * Advanced Jest Setup for OrangeCat
 * Comprehensive test environment setup with advanced mocking and utilities
 *
 * Created: 2025-09-24
 * Last Modified: 2025-09-24
 * Last Modified Summary: Advanced Jest setup with comprehensive mocking
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// =============================================================================
// SUPABASE MOCKS
// =============================================================================
// Advanced Supabase client mock
globals_1.jest.mock('@/services/supabase/client', () => ({
    __esModule: true,
    default: {
        auth: {
            getSession: globals_1.jest.fn(),
            getUser: globals_1.jest.fn(),
            signIn: globals_1.jest.fn(),
            signUp: globals_1.jest.fn(),
            signOut: globals_1.jest.fn(),
            updateUser: globals_1.jest.fn(),
            onAuthStateChange: globals_1.jest.fn(() => ({
                data: {
                    subscription: {
                        unsubscribe: globals_1.jest.fn()
                    }
                }
            })),
            refreshSession: globals_1.jest.fn(),
            resend: globals_1.jest.fn(),
        },
        from: globals_1.jest.fn(() => ({
            select: globals_1.jest.fn().mockReturnThis(),
            insert: globals_1.jest.fn().mockReturnThis(),
            update: globals_1.jest.fn().mockReturnThis(),
            delete: globals_1.jest.fn().mockReturnThis(),
            eq: globals_1.jest.fn().mockReturnThis(),
            neq: globals_1.jest.fn().mockReturnThis(),
            gt: globals_1.jest.fn().mockReturnThis(),
            gte: globals_1.jest.fn().mockReturnThis(),
            lt: globals_1.jest.fn().mockReturnThis(),
            lte: globals_1.jest.fn().mockReturnThis(),
            like: globals_1.jest.fn().mockReturnThis(),
            ilike: globals_1.jest.fn().mockReturnThis(),
            in: globals_1.jest.fn().mockReturnThis(),
            contains: globals_1.jest.fn().mockReturnThis(),
            containedBy: globals_1.jest.fn().mockReturnThis(),
            rangeGt: globals_1.jest.fn().mockReturnThis(),
            rangeGte: globals_1.jest.fn().mockReturnThis(),
            rangeLt: globals_1.jest.fn().mockReturnThis(),
            rangeLte: globals_1.jest.fn().mockReturnThis(),
            rangeAdjacent: globals_1.jest.fn().mockReturnThis(),
            overlaps: globals_1.jest.fn().mockReturnThis(),
            textSearch: globals_1.jest.fn().mockReturnThis(),
            match: globals_1.jest.fn().mockReturnThis(),
            not: globals_1.jest.fn().mockReturnThis(),
            or: globals_1.jest.fn().mockReturnThis(),
            filter: globals_1.jest.fn().mockReturnThis(),
            order: globals_1.jest.fn().mockReturnThis(),
            limit: globals_1.jest.fn().mockReturnThis(),
            range: globals_1.jest.fn().mockReturnThis(),
            single: globals_1.jest.fn(() => Promise.resolve({ data: null, error: null })),
            maybeSingle: globals_1.jest.fn(() => Promise.resolve({ data: null, error: null })),
            csv: globals_1.jest.fn(),
            geojson: globals_1.jest.fn(),
            explain: globals_1.jest.fn()
        })),
        storage: {
            from: globals_1.jest.fn(() => ({
                upload: globals_1.jest.fn(),
                download: globals_1.jest.fn(),
                remove: globals_1.jest.fn(),
                list: globals_1.jest.fn(),
                getPublicUrl: globals_1.jest.fn(),
                createSignedUrl: globals_1.jest.fn(),
                createSignedUrls: globals_1.jest.fn()
            }))
        },
        rpc: globals_1.jest.fn(),
        channel: globals_1.jest.fn(() => ({
            on: globals_1.jest.fn(() => ({ subscribe: globals_1.jest.fn() })),
            subscribe: globals_1.jest.fn(),
            unsubscribe: globals_1.jest.fn()
        }))
    }
}));
// =============================================================================
// AUTH STORE MOCKS
// =============================================================================
globals_1.jest.mock('@/stores/auth', () => ({
    useAuthStore: globals_1.jest.fn(() => ({
        user: null,
        session: null,
        profile: null,
        isLoading: false,
        error: null,
        signIn: globals_1.jest.fn(),
        signUp: globals_1.jest.fn(),
        signOut: globals_1.jest.fn(),
        updateProfile: globals_1.jest.fn(),
        clearError: globals_1.jest.fn(),
        setUser: globals_1.jest.fn(),
        setSession: globals_1.jest.fn(),
        setProfile: globals_1.jest.fn(),
        setLoading: globals_1.jest.fn(),
        setError: globals_1.jest.fn()
    }))
}));
// =============================================================================
// UI COMPONENT MOCKS
// =============================================================================
// Mock Sonner toast
globals_1.jest.mock('sonner', () => ({
    toast: {
        success: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        info: globals_1.jest.fn(),
        warning: globals_1.jest.fn(),
        loading: globals_1.jest.fn(),
        dismiss: globals_1.jest.fn(),
        promise: globals_1.jest.fn()
    },
    Toaster: () => null
}));
// Mock Lucide React icons
globals_1.jest.mock('lucide-react', () => ({
    Search: 'SearchIcon',
    User: 'UserIcon',
    Settings: 'SettingsIcon',
    LogOut: 'LogOutIcon',
    Plus: 'PlusIcon',
    Edit: 'EditIcon',
    Trash: 'TrashIcon',
    Eye: 'EyeIcon',
    EyeOff: 'EyeOffIcon',
    Check: 'CheckIcon',
    X: 'XIcon',
    ChevronDown: 'ChevronDownIcon',
    ChevronUp: 'ChevronUpIcon',
    ChevronLeft: 'ChevronLeftIcon',
    ChevronRight: 'ChevronRightIcon',
    Home: 'HomeIcon',
    Mail: 'MailIcon',
    Phone: 'PhoneIcon',
    MapPin: 'MapPinIcon',
    Globe: 'GlobeIcon',
    Calendar: 'CalendarIcon',
    Clock: 'ClockIcon',
    Star: 'StarIcon',
    Heart: 'HeartIcon',
    Share: 'ShareIcon',
    Download: 'DownloadIcon',
    Upload: 'UploadIcon',
    Image: 'ImageIcon',
    File: 'FileIcon',
    Folder: 'FolderIcon',
    Link: 'LinkIcon',
    ExternalLink: 'ExternalLinkIcon',
    Copy: 'CopyIcon',
    Clipboard: 'ClipboardIcon',
    Save: 'SaveIcon',
    Refresh: 'RefreshIcon',
    RotateCcw: 'RotateCcwIcon',
    RotateCw: 'RotateCwIcon',
    Loader: 'LoaderIcon',
    Spinner: 'SpinnerIcon',
    AlertCircle: 'AlertCircleIcon',
    AlertTriangle: 'AlertTriangleIcon',
    Info: 'InfoIcon',
    HelpCircle: 'HelpCircleIcon',
    Shield: 'ShieldIcon',
    Lock: 'LockIcon',
    Unlock: 'UnlockIcon',
    Key: 'KeyIcon',
    UserCheck: 'UserCheckIcon',
    UserX: 'UserXIcon',
    Users: 'UsersIcon',
    UserPlus: 'UserPlusIcon',
    UserMinus: 'UserMinusIcon',
    Bitcoin: 'BitcoinIcon',
    Wallet: 'WalletIcon',
    Zap: 'ZapIcon',
    QrCode: 'QrCodeIcon'
}));
// =============================================================================
// EXTERNAL LIBRARY MOCKS
// =============================================================================
// Mock Framer Motion
globals_1.jest.mock('framer-motion', () => ({
    motion: {
        div: 'div',
        span: 'span',
        button: 'button',
        input: 'input',
        form: 'form',
        img: 'img',
        a: 'a',
        p: 'p',
        h1: 'h1',
        h2: 'h2',
        h3: 'h3',
        h4: 'h4',
        h5: 'h5',
        h6: 'h6',
        ul: 'ul',
        ol: 'ol',
        li: 'li',
        section: 'section',
        article: 'article',
        aside: 'aside',
        nav: 'nav',
        header: 'header',
        footer: 'footer',
        main: 'main'
    },
    AnimatePresence: ({ children }) => children,
    useAnimation: () => ({
        start: globals_1.jest.fn(),
        stop: globals_1.jest.fn(),
        set: globals_1.jest.fn()
    }),
    useMotionValue: () => ({
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        onChange: globals_1.jest.fn()
    }),
    useTransform: () => globals_1.jest.fn(),
    useSpring: () => ({
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn()
    })
}));
// Mock Bitcoin.js library
globals_1.jest.mock('bitcoinjs-lib', () => ({
    networks: {
        bitcoin: { bech32: 'bc', pubKeyHash: 0x00, scriptHash: 0x05 },
        testnet: { bech32: 'tb', pubKeyHash: 0x6f, scriptHash: 0xc4 },
        regtest: { bech32: 'bcrt', pubKeyHash: 0x6f, scriptHash: 0xc4 }
    },
    address: {
        fromBech32: globals_1.jest.fn(),
        fromBase58Check: globals_1.jest.fn(),
        toBech32: globals_1.jest.fn(),
        toBase58Check: globals_1.jest.fn()
    },
    payments: {
        p2wpkh: globals_1.jest.fn(),
        p2pkh: globals_1.jest.fn(),
        p2sh: globals_1.jest.fn()
    },
    script: {
        compile: globals_1.jest.fn(),
        decompile: globals_1.jest.fn()
    },
    Transaction: globals_1.jest.fn(),
    Psbt: globals_1.jest.fn()
}));
// Mock QR Code library
globals_1.jest.mock('qrcode', () => ({
    toDataURL: globals_1.jest.fn(),
    toString: globals_1.jest.fn(),
    toBuffer: globals_1.jest.fn()
}));
globals_1.jest.mock('qrcode.react', () => ({
    QRCodeCanvas: 'QRCodeCanvas',
    QRCodeSVG: 'QRCodeSVG'
}));
// =============================================================================
// SUPABASE-JS GLOBAL MOCK
// =============================================================================
globals_1.jest.mock('@supabase/supabase-js', () => {
    const inMemoryDB = {};
    function tableStore(name) {
        if (!inMemoryDB[name])
            inMemoryDB[name] = [];
        return inMemoryDB[name];
    }
    const buildQuery = (table, dataset) => {
        const builder = {
            _table: table,
            _store: tableStore(table),
            _results: dataset,
            select(_columns = '*', opts) {
                if (opts && opts.count) {
                    return Promise.resolve({ data: this._results, count: this._results.length, error: null });
                }
                return buildQuery(this._table, this._results);
            },
            eq(column, value) {
                const filtered = this._results.filter((row) => row[column] === value);
                return buildQuery(this._table, filtered);
            },
            order(column, { ascending = true } = {}) {
                const sorted = [...this._results].sort((a, b) => {
                    if (a[column] === b[column])
                        return 0;
                    return ascending ? (a[column] > b[column] ? 1 : -1) : (a[column] < b[column] ? 1 : -1);
                });
                return buildQuery(this._table, sorted);
            },
            range(from, to) {
                const ranged = this._results.slice(from, to + 1);
                return buildQuery(this._table, ranged);
            },
            limit(count) {
                const limited = this._results.slice(0, count);
                return Promise.resolve({ data: limited, error: null });
            },
            single() {
                if (this._results.length === 0)
                    return Promise.resolve({ data: null, error: null });
                return Promise.resolve({ data: this._results[0], error: null });
            },
            maybeSingle() {
                if (this._results.length === 0)
                    return Promise.resolve({ data: null, error: null });
                return Promise.resolve({ data: this._results[0], error: null });
            },
            update(values) {
                this._results.forEach((row) => Object.assign(row, values));
                return buildQuery(this._table, this._results);
            },
            upsert(obj) {
                const targetArr = this._store;
                const items = Array.isArray(obj) ? obj : [obj];
                items.forEach(item => {
                    const existingIdx = targetArr.findIndex((r) => r.id === item.id);
                    if (existingIdx !== -1)
                        targetArr[existingIdx] = Object.assign(Object.assign({}, targetArr[existingIdx]), item);
                    else
                        targetArr.push(item);
                });
                return buildQuery(this._table, items);
            },
            delete() {
                this._results.forEach((row) => {
                    const idx = this._store.indexOf(row);
                    if (idx !== -1)
                        this._store.splice(idx, 1);
                });
                return Promise.resolve({ data: null, error: null });
            },
            count() {
                return Promise.resolve({ count: this._results.length, error: null });
            }
        };
        return builder;
    };
    function from(tableName) {
        const storeRef = tableStore(tableName);
        const baseBuilder = buildQuery(tableName, storeRef);
        return Object.assign(Object.assign({}, baseBuilder), { insert(rows) {
                const arr = tableStore(tableName);
                const inserted = Array.isArray(rows) ? rows : [rows];
                arr.push(...inserted);
                return buildQuery(tableName, inserted);
            } });
    }
    // Seed base data for tests
    const seedProfiles = () => {
        const profiles = tableStore('profiles');
        if (profiles.length === 0) {
            profiles.push({ id: 'test-user', username: 'orangecat', full_name: 'Orange Cat', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }, { id: 'search-1', username: 'searchtest1', full_name: 'Search User 1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }, { id: 'search-2', username: 'searchtest2', full_name: 'Search User 2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }, { id: 'user-123', username: 'existinguser', full_name: 'Existing User', created_at: new Date().toISOString(), updated_at: new Date().toISOString() });
        }
    };
    seedProfiles();
    const mockClient = {
        from,
        auth: {
            signInWithPassword: globals_1.jest.fn(({ email }) => Promise.resolve({ data: { user: { id: 'test-user', email } }, error: null })),
            signUp: globals_1.jest.fn(({ email }) => Promise.resolve({ data: { user: { id: 'test-user', email }, session: { access_token: 'token' } }, error: null })),
            signInWithOAuth: globals_1.jest.fn(),
            signOut: globals_1.jest.fn(() => Promise.resolve({ error: null })),
            getUser: globals_1.jest.fn(() => Promise.resolve({ data: { user: { id: 'test-user', email: 'test@example.com' } }, error: null })),
            getSession: globals_1.jest.fn(() => Promise.resolve({ data: { session: { access_token: 'token' } }, error: null })),
            updateUser: globals_1.jest.fn(() => Promise.resolve({ data: { user: { id: 'test-user' } }, error: null })),
            resetPasswordForEmail: globals_1.jest.fn(() => Promise.resolve({ error: null })),
            onAuthStateChange: globals_1.jest.fn(() => ({ data: { subscription: { unsubscribe: globals_1.jest.fn() } } }))
        },
        storage: {
            from: globals_1.jest.fn(() => ({
                upload: globals_1.jest.fn(() => Promise.resolve({ data: { path: 'test-path' }, error: null })),
                getPublicUrl: globals_1.jest.fn(() => ({ data: { publicUrl: 'https://test-url.com' } }))
            }))
        },
        rpc: globals_1.jest.fn(() => Promise.resolve({ data: null, error: null })),
        channel: globals_1.jest.fn(() => ({
            on: globals_1.jest.fn(() => ({ subscribe: globals_1.jest.fn() })),
            subscribe: globals_1.jest.fn(),
            unsubscribe: globals_1.jest.fn()
        }))
    };
    return {
        __esModule: true,
        createClient: globals_1.jest.fn(() => mockClient)
    };
});
// =============================================================================
// ADDITIONAL MOCKS
// =============================================================================
// Mock Zustand stores
globals_1.jest.mock('zustand', () => ({
    create: globals_1.jest.fn(() => globals_1.jest.fn()),
    subscribeWithSelector: globals_1.jest.fn(() => globals_1.jest.fn()),
    devtools: globals_1.jest.fn(() => globals_1.jest.fn()),
    persist: globals_1.jest.fn(() => globals_1.jest.fn())
}));
// Mock date-fns
globals_1.jest.mock('date-fns', () => ({
    format: globals_1.jest.fn((date, format) => '2023-01-01'),
    parseISO: globals_1.jest.fn((date) => new Date(date)),
    isValid: globals_1.jest.fn(() => true),
    differenceInDays: globals_1.jest.fn(() => 1),
    addDays: globals_1.jest.fn((date, days) => new Date(date.getTime() + days * 24 * 60 * 60 * 1000)),
    subDays: globals_1.jest.fn((date, days) => new Date(date.getTime() - days * 24 * 60 * 60 * 1000))
}));
// Mock React Router
globals_1.jest.mock('react-router-dom', () => ({
    BrowserRouter: ({ children }) => children,
    Routes: ({ children }) => children,
    Route: () => null,
    Link: ({ children, to }) => children,
    useNavigate: () => globals_1.jest.fn(),
    useLocation: () => ({ pathname: '/', search: '', hash: '', state: null }),
    useParams: () => ({}),
    useSearchParams: () => [new URLSearchParams(), globals_1.jest.fn()],
    Navigate: () => null,
    Outlet: () => null
}));
require("@testing-library/jest-dom");
require("jest-environment-jsdom");
// =============================================================================
// ENVIRONMENT CONFIGURATION
// =============================================================================
// Set up test environment variables
process.env.NODE_ENV = 'test';
process.env.NEXT_PUBLIC_SITE_URL = 'http://localhost:3000';
process.env.NEXT_PUBLIC_SITE_NAME = 'OrangeCat';
process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';
process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';
// =============================================================================
// STORAGE MOCKS
// =============================================================================
// Enhanced localStorage mock
const createStorageMock = () => {
    const storage = {};
    return {
        getItem: globals_1.jest.fn((key) => storage[key] || null),
        setItem: globals_1.jest.fn((key, value) => {
            storage[key] = value;
        }),
        removeItem: globals_1.jest.fn((key) => {
            delete storage[key];
        }),
        clear: globals_1.jest.fn(() => {
            Object.keys(storage).forEach(key => delete storage[key]);
        }),
        key: globals_1.jest.fn((index) => Object.keys(storage)[index] || null),
        get length() {
            return Object.keys(storage).length;
        }
    };
};
// Replace browser storage with mocks
Object.defineProperty(window, 'localStorage', {
    value: createStorageMock(),
    writable: true
});
Object.defineProperty(window, 'sessionStorage', {
    value: createStorageMock(),
    writable: true
});
// =============================================================================
// WINDOW OBJECT MOCKS
// =============================================================================
// Mock window.location
delete window.location;
window.location = {
    href: 'http://localhost:3000',
    origin: 'http://localhost:3000',
    protocol: 'http:',
    host: 'localhost:3000',
    hostname: 'localhost',
    port: '3000',
    pathname: '/',
    search: '',
    hash: '',
    assign: globals_1.jest.fn(),
    replace: globals_1.jest.fn(),
    reload: globals_1.jest.fn()
};
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: globals_1.jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: globals_1.jest.fn(), // deprecated
        removeListener: globals_1.jest.fn(), // deprecated
        addEventListener: globals_1.jest.fn(),
        removeEventListener: globals_1.jest.fn(),
        dispatchEvent: globals_1.jest.fn(),
    })),
});
// Mock window.ResizeObserver
global.ResizeObserver = globals_1.jest.fn().mockImplementation(() => ({
    observe: globals_1.jest.fn(),
    unobserve: globals_1.jest.fn(),
    disconnect: globals_1.jest.fn(),
}));
// Mock window.IntersectionObserver
global.IntersectionObserver = globals_1.jest.fn().mockImplementation(() => ({
    observe: globals_1.jest.fn(),
    unobserve: globals_1.jest.fn(),
    disconnect: globals_1.jest.fn(),
}));
// =============================================================================
// CONSOLE MOCKS
// =============================================================================
// Mock console methods to reduce noise in tests
const originalConsole = Object.assign({}, console);
global.console = Object.assign(Object.assign({}, console), { log: globals_1.jest.fn(), warn: globals_1.jest.fn(), error: globals_1.jest.fn(), info: globals_1.jest.fn(), debug: globals_1.jest.fn() });
// =============================================================================
// GLOBAL MOCKS
// =============================================================================
// Mock fetch globally
global.fetch = globals_1.jest.fn();
// Mock URL constructor
global.URL = class URL {
    constructor(url) {
        return Object.assign(new window.URL(url), {
            searchParams: {
                get: globals_1.jest.fn(),
                set: globals_1.jest.fn(),
                delete: globals_1.jest.fn(),
                append: globals_1.jest.fn(),
                has: globals_1.jest.fn(),
                toString: globals_1.jest.fn(() => ''),
                sort: globals_1.jest.fn(),
                forEach: globals_1.jest.fn(),
            }
        });
    }
};
// Mock Request constructor
global.Request = globals_1.jest.fn().mockImplementation((url, options) => ({
    url,
    options,
    clone: globals_1.jest.fn(),
    arrayBuffer: globals_1.jest.fn(),
    blob: globals_1.jest.fn(),
    formData: globals_1.jest.fn(),
    json: globals_1.jest.fn(),
    text: globals_1.jest.fn(),
}));
// Mock Response constructor
global.Response = globals_1.jest.fn().mockImplementation((body, options) => ({
    body,
    options,
    ok: true,
    status: 200,
    statusText: 'OK',
    headers: new Map(),
    clone: globals_1.jest.fn(),
    arrayBuffer: globals_1.jest.fn(),
    blob: globals_1.jest.fn(),
    formData: globals_1.jest.fn(),
    json: globals_1.jest.fn(),
    text: globals_1.jest.fn(),
}));
// =============================================================================
// TEST UTILITIES
// =============================================================================
// Global test utilities
global.testUtils = {
    // Reset all mocks
    resetMocks: () => {
        globals_1.jest.clearAllMocks();
        global.fetch.mockClear();
    },
    // Mock successful API responses
    mockSuccessResponse: (data, status = 200) => {
        global.fetch.mockResolvedValueOnce({
            ok: true,
            status,
            json: async () => data,
            text: async () => JSON.stringify(data)
        });
    },
    // Mock error API responses
    mockErrorResponse: (status, message) => {
        global.fetch.mockResolvedValueOnce({
            ok: false,
            status,
            json: async () => ({ error: message }),
            text: async () => message
        });
    },
    // Mock network error
    mockNetworkError: (message = 'Network error') => {
        global.fetch.mockRejectedValueOnce(new Error(message));
    },
    // Create mock user
    createMockUser: (overrides = {}) => (Object.assign({ id: 'test-user-id', email: 'test@example.com', username: 'testuser', full_name: 'Test User', avatar_url: null, bio: 'Test bio', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }, overrides)),
    // Create mock campaign
    createMockCampaign: (overrides = {}) => (Object.assign({ id: 'test-campaign-id', title: 'Test Campaign', description: 'Test Description', bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', lightning_address: 'test@getalby.com', website_url: 'https://example.com', goal_amount: 50000, raised_amount: 0, categories: ['technology', 'bitcoin'], status: 'active', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }, overrides)),
    // Wait for next tick
    waitForNextTick: () => new Promise(resolve => setTimeout(resolve, 0)),
    // Wait for component to update
    waitForComponentUpdate: () => new Promise(resolve => setTimeout(resolve, 16)),
    // Create mock event
    createMockEvent: (type, data = {}) => (Object.assign({ type, target: { value: data.value || '' }, preventDefault: globals_1.jest.fn(), stopPropagation: globals_1.jest.fn() }, data))
};
// =============================================================================
// SETUP & TEARDOWN
// =============================================================================
// Before each test
beforeEach(() => {
    var _a, _b;
    // Reset all mocks
    globals_1.jest.clearAllMocks();
    // Reset fetch mock
    if (global.fetch && global.fetch.mockClear) {
        global.fetch.mockClear();
    }
    // Reset storage mocks
    const localStorageMock = window.localStorage;
    const sessionStorageMock = window.sessionStorage;
    if ((_a = localStorageMock.getItem) === null || _a === void 0 ? void 0 : _a.mockClear) {
        localStorageMock.getItem.mockClear();
        localStorageMock.setItem.mockClear();
        localStorageMock.removeItem.mockClear();
        localStorageMock.clear.mockClear();
    }
    if ((_b = sessionStorageMock.getItem) === null || _b === void 0 ? void 0 : _b.mockClear) {
        sessionStorageMock.getItem.mockClear();
        sessionStorageMock.setItem.mockClear();
        sessionStorageMock.removeItem.mockClear();
        sessionStorageMock.clear.mockClear();
    }
    // Reset console mocks
    if (console.log.mockClear) {
        console.log.mockClear();
        console.warn.mockClear();
        console.error.mockClear();
        console.info.mockClear();
        console.debug.mockClear();
    }
});
// After all tests
afterAll(() => {
    // Restore original console
    global.console = originalConsole;
});
// =============================================================================
// CUSTOM MATCHERS
// =============================================================================
// Add custom matchers for better assertions
expect.extend({
    toHaveBeenCalledWithMatch(received, expected) {
        const calls = received.mock.calls;
        const match = calls.some(call => JSON.stringify(call).includes(JSON.stringify(expected)));
        return {
            message: () => `expected ${received} to have been called with something matching ${expected}`,
            pass: match
        };
    }
});
// =============================================================================
// PERFORMANCE MONITORING
// =============================================================================
// Mock performance API
Object.defineProperty(window, 'performance', {
    writable: true,
    value: {
        mark: globals_1.jest.fn(),
        measure: globals_1.jest.fn(),
        getEntriesByName: globals_1.jest.fn(() => []),
        getEntriesByType: globals_1.jest.fn(() => []),
        now: globals_1.jest.fn(() => Date.now()),
        timing: {
            navigationStart: 0,
            loadEventEnd: 1000,
            domContentLoadedEventEnd: 500
        }
    }
});
// =============================================================================
// ERROR HANDLING
// =============================================================================
// Mock error event
window.addEventListener = globals_1.jest.fn();
window.removeEventListener = globals_1.jest.fn();
window.dispatchEvent = globals_1.jest.fn();
// =============================================================================
// CRYPTO MOCKS
// =============================================================================
// Mock crypto for Bitcoin operations
Object.defineProperty(window, 'crypto', {
    writable: true,
    value: {
        getRandomValues: globals_1.jest.fn((array) => {
            for (let i = 0; i < array.length; i++) {
                array[i] = Math.floor(Math.random() * 256);
            }
            return array;
        }),
        subtle: {
            digest: globals_1.jest.fn(),
            importKey: globals_1.jest.fn(),
            sign: globals_1.jest.fn(),
            verify: globals_1.jest.fn()
        }
    }
});
console.log('✅ Advanced Jest setup loaded successfully');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,