19b17f4bdad2c3eeb0183d6ec38feaa9
"use strict";

/* istanbul ignore next */
function cov_vl9yren8p() {
  var path = "/home/g/dev/orangecat/src/services/analytics/index.ts";
  var hash = "2291c15e0f8f4bd034b38ac57a8dabc71c5b403d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/services/analytics/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 47
        }
      },
      "4": {
        start: {
          line: 6,
          column: 27
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "9": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "11": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 31
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 20
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 61
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 41,
          column: 10
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "17": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 40
        }
      },
      "18": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "19": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 107
        }
      },
      "20": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 32
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 91
        }
      },
      "23": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 28
        }
      },
      "24": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 48
        }
      },
      "25": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 51
        }
      },
      "26": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 61,
          column: 26
        }
      },
      "27": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 26
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "29": {
        start: {
          line: 63,
          column: 60
        },
        end: {
          line: 67,
          column: 14
        }
      },
      "30": {
        start: {
          line: 68,
          column: 36
        },
        end: {
          line: 68,
          column: 171
        }
      },
      "31": {
        start: {
          line: 68,
          column: 63
        },
        end: {
          line: 68,
          column: 148
        }
      },
      "32": {
        start: {
          line: 69,
          column: 32
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "33": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "34": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "35": {
        start: {
          line: 72,
          column: 35
        },
        end: {
          line: 72,
          column: 126
        }
      },
      "36": {
        start: {
          line: 72,
          column: 60
        },
        end: {
          line: 72,
          column: 118
        }
      },
      "37": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 73
        }
      },
      "38": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "39": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 50
        }
      },
      "40": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 27
        }
      },
      "41": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 92
        }
      },
      "42": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 56
        }
      },
      "43": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "45": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "46": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 128,
          column: 50
        }
      },
      "47": {
        start: {
          line: 129,
          column: 23
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 131,
          column: 26
        }
      },
      "49": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 26
        }
      },
      "50": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "51": {
        start: {
          line: 133,
          column: 31
        },
        end: {
          line: 133,
          column: 89
        }
      },
      "52": {
        start: {
          line: 134,
          column: 28
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "53": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 50
        }
      },
      "54": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 27
        }
      },
      "55": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 87
        }
      },
      "56": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 158,
          column: 14
        }
      },
      "57": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "58": {
        start: {
          line: 168,
          column: 80
        },
        end: {
          line: 168,
          column: 159
        }
      },
      "59": {
        start: {
          line: 168,
          column: 138
        },
        end: {
          line: 168,
          column: 155
        }
      },
      "60": {
        start: {
          line: 169,
          column: 87
        },
        end: {
          line: 169,
          column: 192
        }
      },
      "61": {
        start: {
          line: 169,
          column: 146
        },
        end: {
          line: 169,
          column: 164
        }
      },
      "62": {
        start: {
          line: 170,
          column: 83
        },
        end: {
          line: 170,
          column: 164
        }
      },
      "63": {
        start: {
          line: 170,
          column: 141
        },
        end: {
          line: 170,
          column: 160
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 185,
          column: 10
        }
      },
      "65": {
        start: {
          line: 181,
          column: 82
        },
        end: {
          line: 181,
          column: 160
        }
      },
      "66": {
        start: {
          line: 181,
          column: 135
        },
        end: {
          line: 181,
          column: 156
        }
      },
      "67": {
        start: {
          line: 182,
          column: 83
        },
        end: {
          line: 182,
          column: 184
        }
      },
      "68": {
        start: {
          line: 182,
          column: 137
        },
        end: {
          line: 182,
          column: 156
        }
      },
      "69": {
        start: {
          line: 183,
          column: 97
        },
        end: {
          line: 183,
          column: 120
        }
      },
      "70": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 198,
          column: 10
        }
      },
      "71": {
        start: {
          line: 194,
          column: 85
        },
        end: {
          line: 194,
          column: 172
        }
      },
      "72": {
        start: {
          line: 194,
          column: 142
        },
        end: {
          line: 194,
          column: 168
        }
      },
      "73": {
        start: {
          line: 195,
          column: 83
        },
        end: {
          line: 195,
          column: 190
        }
      },
      "74": {
        start: {
          line: 195,
          column: 141
        },
        end: {
          line: 195,
          column: 162
        }
      },
      "75": {
        start: {
          line: 196,
          column: 82
        },
        end: {
          line: 196,
          column: 218
        }
      },
      "76": {
        start: {
          line: 196,
          column: 150
        },
        end: {
          line: 196,
          column: 172
        }
      },
      "77": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 211,
          column: 10
        }
      },
      "78": {
        start: {
          line: 207,
          column: 84
        },
        end: {
          line: 207,
          column: 191
        }
      },
      "79": {
        start: {
          line: 207,
          column: 138
        },
        end: {
          line: 207,
          column: 163
        }
      },
      "80": {
        start: {
          line: 208,
          column: 80
        },
        end: {
          line: 208,
          column: 156
        }
      },
      "81": {
        start: {
          line: 208,
          column: 133
        },
        end: {
          line: 208,
          column: 152
        }
      },
      "82": {
        start: {
          line: 209,
          column: 98
        },
        end: {
          line: 209,
          column: 122
        }
      },
      "83": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 224,
          column: 10
        }
      },
      "84": {
        start: {
          line: 220,
          column: 90
        },
        end: {
          line: 220,
          column: 117
        }
      },
      "85": {
        start: {
          line: 221,
          column: 93
        },
        end: {
          line: 221,
          column: 123
        }
      },
      "86": {
        start: {
          line: 222,
          column: 85
        },
        end: {
          line: 222,
          column: 173
        }
      },
      "87": {
        start: {
          line: 222,
          column: 139
        },
        end: {
          line: 222,
          column: 169
        }
      },
      "88": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "89": {
        start: {
          line: 228,
          column: 42
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "90": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "91": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 84
        }
      },
      "92": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 24
        }
      },
      "93": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "94": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 57
        }
      },
      "95": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 56
        }
      },
      "96": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 27
        }
      },
      "97": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 261,
          column: 10
        }
      },
      "98": {
        start: {
          line: 265,
          column: 0
        },
        end: {
          line: 265,
          column: 50
        }
      },
      "99": {
        start: {
          line: 266,
          column: 0
        },
        end: {
          line: 266,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 29
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 58
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 52
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 43
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 40
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 68,
            column: 57
          },
          end: {
            line: 68,
            column: 58
          }
        },
        loc: {
          start: {
            line: 68,
            column: 63
          },
          end: {
            line: 68,
            column: 148
          }
        },
        line: 68
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 53
          },
          end: {
            line: 69,
            column: 54
          }
        },
        loc: {
          start: {
            line: 69,
            column: 59
          },
          end: {
            line: 74,
            column: 13
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 72,
            column: 52
          },
          end: {
            line: 72,
            column: 53
          }
        },
        loc: {
          start: {
            line: 72,
            column: 60
          },
          end: {
            line: 72,
            column: 118
          }
        },
        line: 72
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 36
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 97
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 113
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 30
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 161
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 168,
            column: 74
          },
          end: {
            line: 168,
            column: 75
          }
        },
        loc: {
          start: {
            line: 168,
            column: 80
          },
          end: {
            line: 168,
            column: 159
          }
        },
        line: 168
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 168,
            column: 124
          },
          end: {
            line: 168,
            column: 125
          }
        },
        loc: {
          start: {
            line: 168,
            column: 138
          },
          end: {
            line: 168,
            column: 155
          }
        },
        line: 168
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 169,
            column: 81
          },
          end: {
            line: 169,
            column: 82
          }
        },
        loc: {
          start: {
            line: 169,
            column: 87
          },
          end: {
            line: 169,
            column: 192
          }
        },
        line: 169
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 169,
            column: 132
          },
          end: {
            line: 169,
            column: 133
          }
        },
        loc: {
          start: {
            line: 169,
            column: 146
          },
          end: {
            line: 169,
            column: 164
          }
        },
        line: 169
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 170,
            column: 77
          },
          end: {
            line: 170,
            column: 78
          }
        },
        loc: {
          start: {
            line: 170,
            column: 83
          },
          end: {
            line: 170,
            column: 164
          }
        },
        line: 170
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 170,
            column: 127
          },
          end: {
            line: 170,
            column: 128
          }
        },
        loc: {
          start: {
            line: 170,
            column: 141
          },
          end: {
            line: 170,
            column: 160
          }
        },
        line: 170
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 23
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 174
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 181,
            column: 76
          },
          end: {
            line: 181,
            column: 77
          }
        },
        loc: {
          start: {
            line: 181,
            column: 82
          },
          end: {
            line: 181,
            column: 160
          }
        },
        line: 181
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 181,
            column: 119
          },
          end: {
            line: 181,
            column: 120
          }
        },
        loc: {
          start: {
            line: 181,
            column: 135
          },
          end: {
            line: 181,
            column: 156
          }
        },
        line: 181
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 182,
            column: 77
          },
          end: {
            line: 182,
            column: 78
          }
        },
        loc: {
          start: {
            line: 182,
            column: 83
          },
          end: {
            line: 182,
            column: 184
          }
        },
        line: 182
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 182,
            column: 121
          },
          end: {
            line: 182,
            column: 122
          }
        },
        loc: {
          start: {
            line: 182,
            column: 137
          },
          end: {
            line: 182,
            column: 156
          }
        },
        line: 182
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 183,
            column: 92
          },
          end: {
            line: 183,
            column: 93
          }
        },
        loc: {
          start: {
            line: 183,
            column: 97
          },
          end: {
            line: 183,
            column: 120
          }
        },
        line: 183
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 25
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 187
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 194,
            column: 79
          },
          end: {
            line: 194,
            column: 80
          }
        },
        loc: {
          start: {
            line: 194,
            column: 85
          },
          end: {
            line: 194,
            column: 172
          }
        },
        line: 194
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 194,
            column: 124
          },
          end: {
            line: 194,
            column: 125
          }
        },
        loc: {
          start: {
            line: 194,
            column: 142
          },
          end: {
            line: 194,
            column: 168
          }
        },
        line: 194
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 195,
            column: 77
          },
          end: {
            line: 195,
            column: 78
          }
        },
        loc: {
          start: {
            line: 195,
            column: 83
          },
          end: {
            line: 195,
            column: 190
          }
        },
        line: 195
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 195,
            column: 123
          },
          end: {
            line: 195,
            column: 124
          }
        },
        loc: {
          start: {
            line: 195,
            column: 141
          },
          end: {
            line: 195,
            column: 162
          }
        },
        line: 195
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 196,
            column: 76
          },
          end: {
            line: 196,
            column: 77
          }
        },
        loc: {
          start: {
            line: 196,
            column: 82
          },
          end: {
            line: 196,
            column: 218
          }
        },
        line: 196
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 196,
            column: 132
          },
          end: {
            line: 196,
            column: 133
          }
        },
        loc: {
          start: {
            line: 196,
            column: 150
          },
          end: {
            line: 196,
            column: 172
          }
        },
        line: 196
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 23
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 200
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 207,
            column: 78
          },
          end: {
            line: 207,
            column: 79
          }
        },
        loc: {
          start: {
            line: 207,
            column: 84
          },
          end: {
            line: 207,
            column: 191
          }
        },
        line: 207
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 207,
            column: 122
          },
          end: {
            line: 207,
            column: 123
          }
        },
        loc: {
          start: {
            line: 207,
            column: 138
          },
          end: {
            line: 207,
            column: 163
          }
        },
        line: 207
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 208,
            column: 74
          },
          end: {
            line: 208,
            column: 75
          }
        },
        loc: {
          start: {
            line: 208,
            column: 80
          },
          end: {
            line: 208,
            column: 156
          }
        },
        line: 208
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 208,
            column: 117
          },
          end: {
            line: 208,
            column: 118
          }
        },
        loc: {
          start: {
            line: 208,
            column: 133
          },
          end: {
            line: 208,
            column: 152
          }
        },
        line: 208
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 209,
            column: 93
          },
          end: {
            line: 209,
            column: 94
          }
        },
        loc: {
          start: {
            line: 209,
            column: 98
          },
          end: {
            line: 209,
            column: 122
          }
        },
        line: 209
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 23
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 213
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 220,
            column: 85
          },
          end: {
            line: 220,
            column: 86
          }
        },
        loc: {
          start: {
            line: 220,
            column: 90
          },
          end: {
            line: 220,
            column: 117
          }
        },
        line: 220
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 221,
            column: 88
          },
          end: {
            line: 221,
            column: 89
          }
        },
        loc: {
          start: {
            line: 221,
            column: 93
          },
          end: {
            line: 221,
            column: 123
          }
        },
        line: 221
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 222,
            column: 79
          },
          end: {
            line: 222,
            column: 80
          }
        },
        loc: {
          start: {
            line: 222,
            column: 85
          },
          end: {
            line: 222,
            column: 173
          }
        },
        line: 222
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 222,
            column: 122
          },
          end: {
            line: 222,
            column: 123
          }
        },
        loc: {
          start: {
            line: 222,
            column: 139
          },
          end: {
            line: 222,
            column: 169
          }
        },
        line: 222
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 47
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 226
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 46
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 248
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 17
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 254
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 257
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 18
          }
        }, {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 68
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 37
          },
          end: {
            line: 34,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 34,
            column: 50
          },
          end: {
            line: 34,
            column: 56
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 42
          }
        }, {
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 60
          }
        }, {
          start: {
            line: 46,
            column: 64
          },
          end: {
            line: 46,
            column: 81
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 61,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 61,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 63
          },
          end: {
            line: 68,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 95
          },
          end: {
            line: 68,
            column: 144
          }
        }, {
          start: {
            line: 68,
            column: 147
          },
          end: {
            line: 68,
            column: 148
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 71,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 71,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 60
          },
          end: {
            line: 72,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 60
          },
          end: {
            line: 72,
            column: 76
          }
        }, {
          start: {
            line: 72,
            column: 80
          },
          end: {
            line: 72,
            column: 118
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "10": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 26
          }
        }, {
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 114,
            column: 57
          }
        }],
        line: 114
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 131,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 131,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 56
          },
          end: {
            line: 141,
            column: 146
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 81
          },
          end: {
            line: 141,
            column: 134
          }
        }, {
          start: {
            line: 141,
            column: 137
          },
          end: {
            line: 141,
            column: 146
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 248,
            column: 27
          },
          end: {
            line: 248,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 248,
            column: 38
          },
          end: {
            line: 248,
            column: 44
          }
        }],
        line: 248
      },
      "14": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/services/analytics/index.ts",
      mappings: ";;;AAAA,iEAKwC;AACxC,gDAA2D;AAC3D,8DAOgC;AAChC,2CAAuC;AA4BvC,sCAAsC;AACtC,MAAM,aAAa,GAAG;IACpB,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE;IACzD,aAAa,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IACtD,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IAC/C,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IACjD,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IAC/C,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IAC/C,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE;CACrD,CAAA;AAED,MAAM,gBAAgB;IAAtB;QACU,UAAK,GAAG,IAAI,GAAG,EAA4C,CAAA;QAClD,cAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA,CAAC,YAAY;IAkXzD,CAAC;IAhXS,aAAa,CAAI,GAAW;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAClC,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC7D,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACtB,OAAO,IAAI,CAAA;IACb,CAAC;IAEO,aAAa,CAAI,GAAW,EAAE,IAAO;QAC3C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAEO,iBAAiB,CACvB,KAAsB,EACtB,MAAmC,EACnC,aAAwC,MAAM;QAE9C,OAAO;YACL,KAAK;YACL,UAAU;YACV,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,MAAM;YACN,MAAM,EAAE,MAAM,KAAK,MAAM;SAC1B,CAAA;IACH,CAAC;IAEO,eAAe,CACrB,WAAoB,EACpB,QAAW,EACX,OAAe;QAEf,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,WAAW,EAAE,CAAA;YAC5B,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;gBACvE,eAAM,CAAC,IAAI,CAAC,kCAAkC,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,WAAW,CAAC,CAAA;gBACjF,OAAO,QAAQ,CAAA;YACjB,CAAC;YACD,OAAO,MAAM,CAAA;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,0BAA0B,OAAO,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC,CAAA;YACrE,OAAO,QAAQ,CAAA;QACjB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,MAAc;QACxC,MAAM,QAAQ,GAAG,eAAe,MAAM,EAAE,CAAA;QACxC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAiB,QAAQ,CAAC,CAAA;QAC3D,IAAI,MAAM;YAAE,OAAO,MAAM,CAAA;QAEzB,IAAI,CAAC;YACH,MAAM,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChE,IAAA,qCAAuB,EAAC,MAAM,CAAC;gBAC/B,IAAA,iCAAmB,EAAC,MAAM,CAAC;gBAC3B,IAAA,qCAAuB,EAAC,MAAM,CAAC;aAChC,CAAC,CAAA;YAEF,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAC1C,GAAG,EAAE,CAAC,SAAS,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAC3F,CAAC,EACD,iBAAiB,CAClB,CAAA;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CACtC,GAAG,EAAE;gBACH,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;oBAAE,OAAO,CAAC,CAAA;gBACpC,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CACzC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAC3D,CAAC,MAAM,CAAA;gBACR,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAA;YAC1D,CAAC,EACD,CAAC,EACD,aAAa,CACd,CAAA;YAED,MAAM,OAAO,GAAmB;gBAC9B,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,aAAa,CAAC,WAAW,CAAC,QAAQ;gBAC5C,KAAK,EAAE;oBACL,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,cAAc,EAAE,UAAU,CAAC;oBAC5E,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC;oBACtE,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC;oBAC9E,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC;oBAC9E,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,UAAU,CAAC;oBACpE,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,UAAU,CAAC;oBACpE,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,UAAU,CAAC;iBAC7D;aACF,CAAA;YAED,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;YACrC,OAAO,OAAO,CAAA;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,EAAE,WAAW,CAAC,CAAA;YACtE,OAAO,IAAI,CAAC,6BAA6B,EAAE,CAAA;QAC7C,CAAC;IACH,CAAC;IAEO,6BAA6B;QACnC,OAAO;YACL,SAAS,EAAE,IAAI;YACf,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,aAAa,CAAC,WAAW,CAAC,QAAQ;YAC5C,KAAK,EAAE;gBACL,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;gBAC5D,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;gBACzD,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;gBAC7D,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;gBAC7D,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;gBAC7D,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;gBAC7D,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC;aAC1D;SACF,CAAA;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,aAAsB;QAC3C,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YAClD,OAAO;gBACL,SAAS,EAAE,KAAK;gBAChB,MAAM,EAAE,IAAI;gBACZ,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ;gBACvC,KAAK,EAAE;oBACL,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC;oBACjE,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC;oBACrE,kBAAkB,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC;oBACvE,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC;oBAC5D,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC;iBACjE;aACF,CAAA;QACH,CAAC;QAED,MAAM,QAAQ,GAAG,UAAU,aAAa,EAAE,CAAA;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAiB,QAAQ,CAAC,CAAA;QAC3D,IAAI,MAAM;YAAE,OAAO,MAAM,CAAA;QAEzB,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,IAAA,gCAAsB,EAAC,aAAa,CAAC,CAAA;YAE9D,MAAM,OAAO,GAAmB;gBAC9B,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ;gBACvC,KAAK,EAAE;oBACK,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;oBACpE,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC;oBAC/E,WAAW,EAAE,IAAI,CAAC,iBAAiB,CACjC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,SAAS,EAC1F,KAAK,CACN;iBACF;aACF,CAAA;YAED,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;YACrC,OAAO,OAAO,CAAA;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,EAAE,WAAW,CAAC,CAAA;YACjE,OAAO;gBACL,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ;gBACvC,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC;oBAChD,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC;oBACzD,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC;iBAC3D;aACF,CAAA;QACH,CAAC;IACH,CAAC;IAED,uBAAuB;QACrB,OAAO;YACL,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,aAAa,CAAC,aAAa,CAAC,QAAQ;YAC9C,KAAK,EAAE;gBACL,kBAAkB,EAAE,IAAI,CAAC,iBAAiB,CAAC,oCAAiB,CAAC,MAAM,EAAE,MAAM,CAAC;gBAC5E,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAClC,IAAI,CAAC,eAAe,CAClB,GAAG,EAAE,CAAC,oCAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAClE,CAAC,EACD,cAAc,CACf,EACD,MAAM,CACP;gBACD,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CACtC,GAAG,IAAI,CAAC,eAAe,CACrB,GAAG,EAAE,CAAC,CAAC,oCAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC5F,OAAO,EACP,kBAAkB,CACnB,MAAM,EACP,MAAM,CACP;gBACD,eAAe,EAAE,IAAI,CAAC,iBAAiB,CACrC,IAAI,CAAC,eAAe,CAClB,GAAG,EAAE,CAAC,oCAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,EACpE,CAAC,EACD,iBAAiB,CAClB,EACD,MAAM,CACP;aACF;SACF,CAAA;IACH,CAAC;IAED,gBAAgB;QACd,OAAO;YACL,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ;YACvC,KAAK,EAAE;gBACL,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,6BAAU,CAAC,MAAM,EAAE,MAAM,CAAC;gBAC9D,cAAc,EAAE,IAAI,CAAC,iBAAiB,CACpC,IAAI,CAAC,eAAe,CAClB,GAAG,EAAE,CAAC,6BAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,EACjE,CAAC,EACD,gBAAgB,CACjB,EACD,MAAM,CACP;gBACD,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAClC,GAAG,IAAI,CAAC,eAAe,CACrB,GAAG,EAAE,CAAC,CAAC,6BAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EACxF,OAAO,EACP,cAAc,CACf,MAAM,EACP,MAAM,CACP;gBACD,cAAc,EAAE,IAAI,CAAC,iBAAiB,CACpC,6BAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,MAAM,EACtD,MAAM,CACP;aACF;SACF,CAAA;IACH,CAAC;IAED,kBAAkB;QAChB,OAAO;YACL,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ;YACzC,KAAK,EAAE;gBACL,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,+BAAY,CAAC,MAAM,EAAE,MAAM,CAAC;gBAClE,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CACvC,IAAI,CAAC,eAAe,CAClB,GAAG,EAAE,CAAC,+BAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC,EAC1E,CAAC,EACD,mBAAmB,CACpB,EACD,MAAM,CACP;gBACD,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAClC,GAAG,IAAI,CAAC,eAAe,CACrB,GAAG,EAAE,CAAC,CAAC,+BAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC9F,OAAO,EACP,cAAc,CACf,MAAM,EACP,MAAM,CACP;gBACD,WAAW,EAAE,IAAI,CAAC,iBAAiB,CACjC,GAAG,IAAI,CAAC,eAAe,CACrB,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,+BAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,+BAAY,CAAC,MAAM,CAAC,EACxG,CAAC,EACD,aAAa,CACd,GAAG,EACJ,MAAM,CACP;aACF;SACF,CAAA;IACH,CAAC;IAED,gBAAgB;QACd,OAAO;YACL,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ;YACvC,KAAK,EAAE;gBACL,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,6BAAU,CAAC,MAAM,EAAE,MAAM,CAAC;gBAC9D,aAAa,EAAE,IAAI,CAAC,iBAAiB,CACnC,GAAG,IAAI,CAAC,eAAe,CACrB,GAAG,EAAE,CAAC,CAAC,6BAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC9F,OAAO,EACP,eAAe,CAChB,MAAM,EACP,MAAM,CACP;gBACD,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAClC,IAAI,CAAC,eAAe,CAClB,GAAG,EAAE,CAAC,6BAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,EAC/D,CAAC,EACD,cAAc,CACf,EACD,MAAM,CACP;gBACD,eAAe,EAAE,IAAI,CAAC,iBAAiB,CACrC,6BAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,MAAM,EACvD,MAAM,CACP;aACF;SACF,CAAA;IACH,CAAC;IAED,gBAAgB;QACd,OAAO;YACL,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ;YACvC,KAAK,EAAE;gBACL,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,6BAAU,CAAC,MAAM,EAAE,MAAM,CAAC;gBACnE,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAC7B,6BAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,MAAM,EAC1D,MAAM,CACP;gBACD,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAChC,6BAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,WAAW,CAAC,CAAC,MAAM,EAC7D,MAAM,CACP;gBACD,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CACvC,IAAI,CAAC,eAAe,CAClB,GAAG,EAAE,CAAC,6BAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAC3E,CAAC,EACD,mBAAmB,CACpB,EACD,MAAM,CACP;aACF;SACF,CAAA;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,aAAsB;QACxD,IAAI,CAAC;YACH,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC9C,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC;gBAClC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC;aACrC,CAAC,CAAA;YAEF,OAAO;gBACL,WAAW;gBACX,MAAM;gBACN,aAAa,EAAE,IAAI,CAAC,uBAAuB,EAAE;gBAC7C,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE;gBAC/B,QAAQ,EAAE,IAAI,CAAC,kBAAkB,EAAE;gBACnC,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE;gBAC/B,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE;aAChC,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,EAAE,WAAW,CAAC,CAAA;YAC9D,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,cAAc,CAAC,MAAc,EAAE,WAAmB,MAAM;QACtD,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAA;QAC9C,CAAC;QACD,OAAO,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAA;IACjD,CAAC;IAED,UAAU;QACR,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC;IAED,aAAa;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;SACpC,CAAA;IACH,CAAC;CACF;AAED,4BAA4B;AACf,QAAA,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAA;AACtD,kBAAe,wBAAgB,CAAA",
      names: [],
      sources: ["/home/g/dev/orangecat/src/services/analytics/index.ts"],
      sourcesContent: ["import { \n  getUserFundraisingStats, \n  getUserFundingPages, \n  getRecentDonationsCount,\n  FundraisingStats \n} from '@/services/supabase/fundraising'\nimport { fetchBitcoinWalletData } from '@/services/bitcoin'\nimport { \n  demoOrganizations, \n  demoEvents, \n  demoProjects, \n  demoAssets, \n  demoPeople, \n  demoCampaigns \n} from '@/data/dashboardConfigs'\nimport { logger } from '@/utils/logger'\n\n// Types for our analytics system\nexport interface MetricValue {\n  value: number | string\n  confidence: 'high' | 'medium' | 'low'\n  lastUpdated: Date\n  source: 'database' | 'api' | 'demo'\n  isDemo: boolean\n}\n\nexport interface FeatureMetrics {\n  isEnabled: boolean\n  isDemo: boolean\n  timeline?: string\n  stats: Record<string, MetricValue>\n}\n\nexport interface DashboardMetrics {\n  fundraising: FeatureMetrics\n  organizations: FeatureMetrics\n  events: FeatureMetrics\n  projects: FeatureMetrics\n  assets: FeatureMetrics\n  people: FeatureMetrics\n  wallet: FeatureMetrics\n}\n\n// Feature flags - easily configurable\nconst FEATURE_FLAGS = {\n  fundraising: { enabled: true, timeline: 'Available Now' },\n  organizations: { enabled: false, timeline: 'Q1 2026' },\n  events: { enabled: false, timeline: 'Q2 2026' },\n  projects: { enabled: false, timeline: 'Q1 2026' },\n  assets: { enabled: false, timeline: 'Q2 2026' },\n  people: { enabled: false, timeline: 'Q2 2026' },\n  wallet: { enabled: true, timeline: 'Available Now' }\n}\n\nclass AnalyticsService {\n  private cache = new Map<string, { data: any; timestamp: number }>()\n  private readonly CACHE_TTL = 5 * 60 * 1000 // 5 minutes\n\n  private getCachedData<T>(key: string): T | null {\n    const cached = this.cache.get(key)\n    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {\n      return cached.data\n    }\n    this.cache.delete(key)\n    return null\n  }\n\n  private setCachedData<T>(key: string, data: T): void {\n    this.cache.set(key, { data, timestamp: Date.now() })\n  }\n\n  private createMetricValue(\n    value: number | string,\n    source: 'database' | 'api' | 'demo',\n    confidence: 'high' | 'medium' | 'low' = 'high'\n  ): MetricValue {\n    return {\n      value,\n      confidence,\n      lastUpdated: new Date(),\n      source,\n      isDemo: source === 'demo'\n    }\n  }\n\n  private safeCalculation<T>(\n    calculation: () => T,\n    fallback: T,\n    context: string\n  ): T {\n    try {\n      const result = calculation()\n      if (typeof result === 'number' && (isNaN(result) || !isFinite(result))) {\n        logger.warn(`Invalid calculation result for ${context}`, { result }, 'Analytics')\n        return fallback\n      }\n      return result\n    } catch (error) {\n      logger.error(`Calculation failed for ${context}`, error, 'Analytics')\n      return fallback\n    }\n  }\n\n  async getFundraisingMetrics(userId: string): Promise<FeatureMetrics> {\n    const cacheKey = `fundraising-${userId}`\n    const cached = this.getCachedData<FeatureMetrics>(cacheKey)\n    if (cached) return cached\n\n    try {\n      const [statsData, pagesData, recentDonations] = await Promise.all([\n        getUserFundraisingStats(userId),\n        getUserFundingPages(userId),\n        getRecentDonationsCount(userId)\n      ])\n\n      const avgDonationSize = this.safeCalculation(\n        () => statsData.totalSupporters > 0 ? statsData.totalRaised / statsData.totalSupporters : 0,\n        0,\n        'avgDonationSize'\n      )\n\n      const successRate = this.safeCalculation(\n        () => {\n          if (pagesData.length === 0) return 0\n          const successful = pagesData.filter(page => \n            page.goal_amount && page.total_funding >= page.goal_amount\n          ).length\n          return Math.round((successful / pagesData.length) * 100)\n        },\n        0,\n        'successRate'\n      )\n\n      const metrics: FeatureMetrics = {\n        isEnabled: true,\n        isDemo: false,\n        timeline: FEATURE_FLAGS.fundraising.timeline,\n        stats: {\n          totalCampaigns: this.createMetricValue(statsData.totalCampaigns, 'database'),\n          totalRaised: this.createMetricValue(statsData.totalRaised, 'database'),\n          totalSupporters: this.createMetricValue(statsData.totalSupporters, 'database'),\n          activeCampaigns: this.createMetricValue(statsData.activeCampaigns, 'database'),\n          recentDonations: this.createMetricValue(recentDonations, 'database'),\n          avgDonationSize: this.createMetricValue(avgDonationSize, 'database'),\n          successRate: this.createMetricValue(successRate, 'database')\n        }\n      }\n\n      this.setCachedData(cacheKey, metrics)\n      return metrics\n    } catch (error) {\n      logger.error('Error fetching fundraising metrics', error, 'Analytics')\n      return this.getFallbackFundraisingMetrics()\n    }\n  }\n\n  private getFallbackFundraisingMetrics(): FeatureMetrics {\n    return {\n      isEnabled: true,\n      isDemo: false,\n      timeline: FEATURE_FLAGS.fundraising.timeline,\n      stats: {\n        totalCampaigns: this.createMetricValue(0, 'database', 'low'),\n        totalRaised: this.createMetricValue(0, 'database', 'low'),\n        totalSupporters: this.createMetricValue(0, 'database', 'low'),\n        activeCampaigns: this.createMetricValue(0, 'database', 'low'),\n        recentDonations: this.createMetricValue(0, 'database', 'low'),\n        avgDonationSize: this.createMetricValue(0, 'database', 'low'),\n        successRate: this.createMetricValue(0, 'database', 'low')\n      }\n    }\n  }\n\n  async getWalletMetrics(walletAddress?: string): Promise<FeatureMetrics> {\n    if (!walletAddress || walletAddress.trim() === '') {\n      return {\n        isEnabled: false,\n        isDemo: true,\n        timeline: FEATURE_FLAGS.wallet.timeline,\n        stats: {\n          totalBalance: this.createMetricValue('0.000 BTC', 'demo', 'high'),\n          confirmedBalance: this.createMetricValue('0.000 BTC', 'demo', 'high'),\n          unconfirmedBalance: this.createMetricValue('0.000 BTC', 'demo', 'high'),\n          totalTransactions: this.createMetricValue(0, 'demo', 'high'),\n          lastUpdated: this.createMetricValue('Demo Data', 'demo', 'high')\n        }\n      }\n    }\n\n    const cacheKey = `wallet-${walletAddress}`\n    const cached = this.getCachedData<FeatureMetrics>(cacheKey)\n    if (cached) return cached\n\n    try {\n      const walletData = await fetchBitcoinWalletData(walletAddress)\n      \n      const metrics: FeatureMetrics = {\n        isEnabled: true,\n        isDemo: false,\n        timeline: FEATURE_FLAGS.wallet.timeline,\n        stats: {\n                    balance: this.createMetricValue(walletData.balance, 'api'),\n          transactionCount: this.createMetricValue(walletData.transactions.length, 'api'),\n          lastUpdated: this.createMetricValue(\n            walletData.lastUpdated ? new Date(walletData.lastUpdated).toLocaleTimeString() : 'Unknown',\n            'api'\n          )\n        }\n      }\n\n      this.setCachedData(cacheKey, metrics)\n      return metrics\n    } catch (error) {\n      logger.error('Error fetching wallet metrics', error, 'Analytics')\n      return {\n        isEnabled: true,\n        isDemo: false,\n        timeline: FEATURE_FLAGS.wallet.timeline,\n        stats: {\n          balance: this.createMetricValue(0, 'api', 'low'),\n          transactionCount: this.createMetricValue(0, 'api', 'low'),\n          lastUpdated: this.createMetricValue('Error', 'api', 'low')\n        }\n      }\n    }\n  }\n\n  getOrganizationsMetrics(): FeatureMetrics {\n    return {\n      isEnabled: false,\n      isDemo: true,\n      timeline: FEATURE_FLAGS.organizations.timeline,\n      stats: {\n        totalOrganizations: this.createMetricValue(demoOrganizations.length, 'demo'),\n        totalMembers: this.createMetricValue(\n          this.safeCalculation(\n            () => demoOrganizations.reduce((sum, org) => sum + org.members, 0),\n            0,\n            'totalMembers'\n          ),\n          'demo'\n        ),\n        combinedTreasury: this.createMetricValue(\n          `${this.safeCalculation(\n            () => (demoOrganizations.reduce((sum, org) => sum + org.treasury, 0) / 100000000).toFixed(3),\n            '0.000',\n            'combinedTreasury'\n          )} BTC`,\n          'demo'\n        ),\n        activeProposals: this.createMetricValue(\n          this.safeCalculation(\n            () => demoOrganizations.reduce((sum, org) => sum + org.proposals, 0),\n            0,\n            'activeProposals'\n          ),\n          'demo'\n        )\n      }\n    }\n  }\n\n  getEventsMetrics(): FeatureMetrics {\n    return {\n      isEnabled: false,\n      isDemo: true,\n      timeline: FEATURE_FLAGS.events.timeline,\n      stats: {\n        totalEvents: this.createMetricValue(demoEvents.length, 'demo'),\n        totalAttendees: this.createMetricValue(\n          this.safeCalculation(\n            () => demoEvents.reduce((sum, event) => sum + event.attendees, 0),\n            0,\n            'totalAttendees'\n          ),\n          'demo'\n        ),\n        totalRevenue: this.createMetricValue(\n          `${this.safeCalculation(\n            () => (demoEvents.reduce((sum, event) => sum + event.revenue, 0) / 100000000).toFixed(3),\n            '0.000',\n            'totalRevenue'\n          )} BTC`,\n          'demo'\n        ),\n        upcomingEvents: this.createMetricValue(\n          demoEvents.filter(e => e.status === \"Upcoming\").length,\n          'demo'\n        )\n      }\n    }\n  }\n\n  getProjectsMetrics(): FeatureMetrics {\n    return {\n      isEnabled: false,\n      isDemo: true,\n      timeline: FEATURE_FLAGS.projects.timeline,\n      stats: {\n        totalProjects: this.createMetricValue(demoProjects.length, 'demo'),\n        totalContributors: this.createMetricValue(\n          this.safeCalculation(\n            () => demoProjects.reduce((sum, project) => sum + project.contributors, 0),\n            0,\n            'totalContributors'\n          ),\n          'demo'\n        ),\n        totalFunding: this.createMetricValue(\n          `${this.safeCalculation(\n            () => (demoProjects.reduce((sum, project) => sum + project.funding, 0) / 100000000).toFixed(3),\n            '0.000',\n            'totalFunding'\n          )} BTC`,\n          'demo'\n        ),\n        avgProgress: this.createMetricValue(\n          `${this.safeCalculation(\n            () => Math.round(demoProjects.reduce((sum, project) => sum + project.progress, 0) / demoProjects.length),\n            0,\n            'avgProgress'\n          )}%`,\n          'demo'\n        )\n      }\n    }\n  }\n\n  getAssetsMetrics(): FeatureMetrics {\n    return {\n      isEnabled: false,\n      isDemo: true,\n      timeline: FEATURE_FLAGS.assets.timeline,\n      stats: {\n        totalAssets: this.createMetricValue(demoAssets.length, 'demo'),\n        totalEarnings: this.createMetricValue(\n          `${this.safeCalculation(\n            () => (demoAssets.reduce((sum, asset) => sum + asset.totalEarnings, 0) / 100000000).toFixed(3),\n            '0.000',\n            'totalEarnings'\n          )} BTC`,\n          'demo'\n        ),\n        totalRentals: this.createMetricValue(\n          this.safeCalculation(\n            () => demoAssets.reduce((sum, asset) => sum + asset.rentals, 0),\n            0,\n            'totalRentals'\n          ),\n          'demo'\n        ),\n        availableAssets: this.createMetricValue(\n          demoAssets.filter(a => a.status === \"Available\").length,\n          'demo'\n        )\n      }\n    }\n  }\n\n  getPeopleMetrics(): FeatureMetrics {\n    return {\n      isEnabled: false,\n      isDemo: true,\n      timeline: FEATURE_FLAGS.people.timeline,\n      stats: {\n        totalConnections: this.createMetricValue(demoPeople.length, 'demo'),\n        friends: this.createMetricValue(\n          demoPeople.filter(p => p.relationship === \"Friend\").length,\n          'demo'\n        ),\n        colleagues: this.createMetricValue(\n          demoPeople.filter(p => p.relationship === \"Colleague\").length,\n          'demo'\n        ),\n        mutualConnections: this.createMetricValue(\n          this.safeCalculation(\n            () => demoPeople.reduce((sum, person) => sum + person.mutualConnections, 0),\n            0,\n            'mutualConnections'\n          ),\n          'demo'\n        )\n      }\n    }\n  }\n\n  async getAllMetrics(userId: string, walletAddress?: string): Promise<DashboardMetrics> {\n    try {\n      const [fundraising, wallet] = await Promise.all([\n        this.getFundraisingMetrics(userId),\n        this.getWalletMetrics(walletAddress)\n      ])\n\n      return {\n        fundraising,\n        wallet,\n        organizations: this.getOrganizationsMetrics(),\n        events: this.getEventsMetrics(),\n        projects: this.getProjectsMetrics(),\n        assets: this.getAssetsMetrics(),\n        people: this.getPeopleMetrics()\n      }\n    } catch (error) {\n      logger.error('Error fetching all metrics', error, 'Analytics')\n      throw error\n    }\n  }\n\n  // Utility methods\n  formatCurrency(amount: number, currency: string = 'SATS'): string {\n    if (currency === 'BTC') {\n      return `\u20BF${(amount / 100000000).toFixed(6)}`\n    }\n    return `${amount.toLocaleString('en-US')} sats`\n  }\n\n  clearCache(): void {\n    this.cache.clear()\n  }\n\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    }\n  }\n}\n\n// Export singleton instance\nexport const analyticsService = new AnalyticsService()\nexport default analyticsService "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2291c15e0f8f4bd034b38ac57a8dabc71c5b403d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vl9yren8p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vl9yren8p();
cov_vl9yren8p().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_vl9yren8p().s[1]++;
exports.analyticsService = void 0;
const fundraising_1 =
/* istanbul ignore next */
(cov_vl9yren8p().s[2]++, require("@/services/supabase/fundraising"));
const bitcoin_1 =
/* istanbul ignore next */
(cov_vl9yren8p().s[3]++, require("@/services/bitcoin"));
const dashboardConfigs_1 =
/* istanbul ignore next */
(cov_vl9yren8p().s[4]++, require("@/data/dashboardConfigs"));
const logger_1 =
/* istanbul ignore next */
(cov_vl9yren8p().s[5]++, require("@/utils/logger"));
// Feature flags - easily configurable
const FEATURE_FLAGS =
/* istanbul ignore next */
(cov_vl9yren8p().s[6]++, {
  fundraising: {
    enabled: true,
    timeline: 'Available Now'
  },
  organizations: {
    enabled: false,
    timeline: 'Q1 2026'
  },
  events: {
    enabled: false,
    timeline: 'Q2 2026'
  },
  projects: {
    enabled: false,
    timeline: 'Q1 2026'
  },
  assets: {
    enabled: false,
    timeline: 'Q2 2026'
  },
  people: {
    enabled: false,
    timeline: 'Q2 2026'
  },
  wallet: {
    enabled: true,
    timeline: 'Available Now'
  }
});
class AnalyticsService {
  constructor() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[0]++;
    cov_vl9yren8p().s[7]++;
    this.cache = new Map();
    /* istanbul ignore next */
    cov_vl9yren8p().s[8]++;
    this.CACHE_TTL = 5 * 60 * 1000; // 5 minutes
  }
  getCachedData(key) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[1]++;
    const cached =
    /* istanbul ignore next */
    (cov_vl9yren8p().s[9]++, this.cache.get(key));
    /* istanbul ignore next */
    cov_vl9yren8p().s[10]++;
    if (
    /* istanbul ignore next */
    (cov_vl9yren8p().b[1][0]++, cached) &&
    /* istanbul ignore next */
    (cov_vl9yren8p().b[1][1]++, Date.now() - cached.timestamp < this.CACHE_TTL)) {
      /* istanbul ignore next */
      cov_vl9yren8p().b[0][0]++;
      cov_vl9yren8p().s[11]++;
      return cached.data;
    } else
    /* istanbul ignore next */
    {
      cov_vl9yren8p().b[0][1]++;
    }
    cov_vl9yren8p().s[12]++;
    this.cache.delete(key);
    /* istanbul ignore next */
    cov_vl9yren8p().s[13]++;
    return null;
  }
  setCachedData(key, data) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[2]++;
    cov_vl9yren8p().s[14]++;
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }
  createMetricValue(value, source, confidence =
  /* istanbul ignore next */
  (cov_vl9yren8p().b[2][0]++, 'high')) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[3]++;
    cov_vl9yren8p().s[15]++;
    return {
      value,
      confidence,
      lastUpdated: new Date(),
      source,
      isDemo: source === 'demo'
    };
  }
  safeCalculation(calculation, fallback, context) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[4]++;
    cov_vl9yren8p().s[16]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[17]++, calculation());
      /* istanbul ignore next */
      cov_vl9yren8p().s[18]++;
      if (
      /* istanbul ignore next */
      (cov_vl9yren8p().b[4][0]++, typeof result === 'number') && (
      /* istanbul ignore next */
      (cov_vl9yren8p().b[4][1]++, isNaN(result)) ||
      /* istanbul ignore next */
      (cov_vl9yren8p().b[4][2]++, !isFinite(result)))) {
        /* istanbul ignore next */
        cov_vl9yren8p().b[3][0]++;
        cov_vl9yren8p().s[19]++;
        logger_1.logger.warn(`Invalid calculation result for ${context}`, {
          result
        }, 'Analytics');
        /* istanbul ignore next */
        cov_vl9yren8p().s[20]++;
        return fallback;
      } else
      /* istanbul ignore next */
      {
        cov_vl9yren8p().b[3][1]++;
      }
      cov_vl9yren8p().s[21]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_vl9yren8p().s[22]++;
      logger_1.logger.error(`Calculation failed for ${context}`, error, 'Analytics');
      /* istanbul ignore next */
      cov_vl9yren8p().s[23]++;
      return fallback;
    }
  }
  async getFundraisingMetrics(userId) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[5]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_vl9yren8p().s[24]++, `fundraising-${userId}`);
    const cached =
    /* istanbul ignore next */
    (cov_vl9yren8p().s[25]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_vl9yren8p().s[26]++;
    if (cached) {
      /* istanbul ignore next */
      cov_vl9yren8p().b[5][0]++;
      cov_vl9yren8p().s[27]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_vl9yren8p().b[5][1]++;
    }
    cov_vl9yren8p().s[28]++;
    try {
      const [statsData, pagesData, recentDonations] =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[29]++, await Promise.all([(0, fundraising_1.getUserFundraisingStats)(userId), (0, fundraising_1.getUserFundingPages)(userId), (0, fundraising_1.getRecentDonationsCount)(userId)]));
      const avgDonationSize =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[30]++, this.safeCalculation(() => {
        /* istanbul ignore next */
        cov_vl9yren8p().f[6]++;
        cov_vl9yren8p().s[31]++;
        return statsData.totalSupporters > 0 ?
        /* istanbul ignore next */
        (cov_vl9yren8p().b[6][0]++, statsData.totalRaised / statsData.totalSupporters) :
        /* istanbul ignore next */
        (cov_vl9yren8p().b[6][1]++, 0);
      }, 0, 'avgDonationSize'));
      const successRate =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[32]++, this.safeCalculation(() => {
        /* istanbul ignore next */
        cov_vl9yren8p().f[7]++;
        cov_vl9yren8p().s[33]++;
        if (pagesData.length === 0) {
          /* istanbul ignore next */
          cov_vl9yren8p().b[7][0]++;
          cov_vl9yren8p().s[34]++;
          return 0;
        } else
        /* istanbul ignore next */
        {
          cov_vl9yren8p().b[7][1]++;
        }
        const successful =
        /* istanbul ignore next */
        (cov_vl9yren8p().s[35]++, pagesData.filter(page => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[8]++;
          cov_vl9yren8p().s[36]++;
          return /* istanbul ignore next */(cov_vl9yren8p().b[8][0]++, page.goal_amount) &&
          /* istanbul ignore next */
          (cov_vl9yren8p().b[8][1]++, page.total_funding >= page.goal_amount);
        }).length);
        /* istanbul ignore next */
        cov_vl9yren8p().s[37]++;
        return Math.round(successful / pagesData.length * 100);
      }, 0, 'successRate'));
      const metrics =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[38]++, {
        isEnabled: true,
        isDemo: false,
        timeline: FEATURE_FLAGS.fundraising.timeline,
        stats: {
          totalCampaigns: this.createMetricValue(statsData.totalCampaigns, 'database'),
          totalRaised: this.createMetricValue(statsData.totalRaised, 'database'),
          totalSupporters: this.createMetricValue(statsData.totalSupporters, 'database'),
          activeCampaigns: this.createMetricValue(statsData.activeCampaigns, 'database'),
          recentDonations: this.createMetricValue(recentDonations, 'database'),
          avgDonationSize: this.createMetricValue(avgDonationSize, 'database'),
          successRate: this.createMetricValue(successRate, 'database')
        }
      });
      /* istanbul ignore next */
      cov_vl9yren8p().s[39]++;
      this.setCachedData(cacheKey, metrics);
      /* istanbul ignore next */
      cov_vl9yren8p().s[40]++;
      return metrics;
    } catch (error) {
      /* istanbul ignore next */
      cov_vl9yren8p().s[41]++;
      logger_1.logger.error('Error fetching fundraising metrics', error, 'Analytics');
      /* istanbul ignore next */
      cov_vl9yren8p().s[42]++;
      return this.getFallbackFundraisingMetrics();
    }
  }
  getFallbackFundraisingMetrics() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[9]++;
    cov_vl9yren8p().s[43]++;
    return {
      isEnabled: true,
      isDemo: false,
      timeline: FEATURE_FLAGS.fundraising.timeline,
      stats: {
        totalCampaigns: this.createMetricValue(0, 'database', 'low'),
        totalRaised: this.createMetricValue(0, 'database', 'low'),
        totalSupporters: this.createMetricValue(0, 'database', 'low'),
        activeCampaigns: this.createMetricValue(0, 'database', 'low'),
        recentDonations: this.createMetricValue(0, 'database', 'low'),
        avgDonationSize: this.createMetricValue(0, 'database', 'low'),
        successRate: this.createMetricValue(0, 'database', 'low')
      }
    };
  }
  async getWalletMetrics(walletAddress) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[10]++;
    cov_vl9yren8p().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_vl9yren8p().b[10][0]++, !walletAddress) ||
    /* istanbul ignore next */
    (cov_vl9yren8p().b[10][1]++, walletAddress.trim() === '')) {
      /* istanbul ignore next */
      cov_vl9yren8p().b[9][0]++;
      cov_vl9yren8p().s[45]++;
      return {
        isEnabled: false,
        isDemo: true,
        timeline: FEATURE_FLAGS.wallet.timeline,
        stats: {
          totalBalance: this.createMetricValue('0.000 BTC', 'demo', 'high'),
          confirmedBalance: this.createMetricValue('0.000 BTC', 'demo', 'high'),
          unconfirmedBalance: this.createMetricValue('0.000 BTC', 'demo', 'high'),
          totalTransactions: this.createMetricValue(0, 'demo', 'high'),
          lastUpdated: this.createMetricValue('Demo Data', 'demo', 'high')
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_vl9yren8p().b[9][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_vl9yren8p().s[46]++, `wallet-${walletAddress}`);
    const cached =
    /* istanbul ignore next */
    (cov_vl9yren8p().s[47]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_vl9yren8p().s[48]++;
    if (cached) {
      /* istanbul ignore next */
      cov_vl9yren8p().b[11][0]++;
      cov_vl9yren8p().s[49]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_vl9yren8p().b[11][1]++;
    }
    cov_vl9yren8p().s[50]++;
    try {
      const walletData =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[51]++, await (0, bitcoin_1.fetchBitcoinWalletData)(walletAddress));
      const metrics =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[52]++, {
        isEnabled: true,
        isDemo: false,
        timeline: FEATURE_FLAGS.wallet.timeline,
        stats: {
          balance: this.createMetricValue(walletData.balance, 'api'),
          transactionCount: this.createMetricValue(walletData.transactions.length, 'api'),
          lastUpdated: this.createMetricValue(walletData.lastUpdated ?
          /* istanbul ignore next */
          (cov_vl9yren8p().b[12][0]++, new Date(walletData.lastUpdated).toLocaleTimeString()) :
          /* istanbul ignore next */
          (cov_vl9yren8p().b[12][1]++, 'Unknown'), 'api')
        }
      });
      /* istanbul ignore next */
      cov_vl9yren8p().s[53]++;
      this.setCachedData(cacheKey, metrics);
      /* istanbul ignore next */
      cov_vl9yren8p().s[54]++;
      return metrics;
    } catch (error) {
      /* istanbul ignore next */
      cov_vl9yren8p().s[55]++;
      logger_1.logger.error('Error fetching wallet metrics', error, 'Analytics');
      /* istanbul ignore next */
      cov_vl9yren8p().s[56]++;
      return {
        isEnabled: true,
        isDemo: false,
        timeline: FEATURE_FLAGS.wallet.timeline,
        stats: {
          balance: this.createMetricValue(0, 'api', 'low'),
          transactionCount: this.createMetricValue(0, 'api', 'low'),
          lastUpdated: this.createMetricValue('Error', 'api', 'low')
        }
      };
    }
  }
  getOrganizationsMetrics() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[11]++;
    cov_vl9yren8p().s[57]++;
    return {
      isEnabled: false,
      isDemo: true,
      timeline: FEATURE_FLAGS.organizations.timeline,
      stats: {
        totalOrganizations: this.createMetricValue(dashboardConfigs_1.demoOrganizations.length, 'demo'),
        totalMembers: this.createMetricValue(this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[12]++;
          cov_vl9yren8p().s[58]++;
          return dashboardConfigs_1.demoOrganizations.reduce((sum, org) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[13]++;
            cov_vl9yren8p().s[59]++;
            return sum + org.members;
          }, 0);
        }, 0, 'totalMembers'), 'demo'),
        combinedTreasury: this.createMetricValue(`${this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[14]++;
          cov_vl9yren8p().s[60]++;
          return (dashboardConfigs_1.demoOrganizations.reduce((sum, org) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[15]++;
            cov_vl9yren8p().s[61]++;
            return sum + org.treasury;
          }, 0) / 100000000).toFixed(3);
        }, '0.000', 'combinedTreasury')} BTC`, 'demo'),
        activeProposals: this.createMetricValue(this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[16]++;
          cov_vl9yren8p().s[62]++;
          return dashboardConfigs_1.demoOrganizations.reduce((sum, org) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[17]++;
            cov_vl9yren8p().s[63]++;
            return sum + org.proposals;
          }, 0);
        }, 0, 'activeProposals'), 'demo')
      }
    };
  }
  getEventsMetrics() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[18]++;
    cov_vl9yren8p().s[64]++;
    return {
      isEnabled: false,
      isDemo: true,
      timeline: FEATURE_FLAGS.events.timeline,
      stats: {
        totalEvents: this.createMetricValue(dashboardConfigs_1.demoEvents.length, 'demo'),
        totalAttendees: this.createMetricValue(this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[19]++;
          cov_vl9yren8p().s[65]++;
          return dashboardConfigs_1.demoEvents.reduce((sum, event) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[20]++;
            cov_vl9yren8p().s[66]++;
            return sum + event.attendees;
          }, 0);
        }, 0, 'totalAttendees'), 'demo'),
        totalRevenue: this.createMetricValue(`${this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[21]++;
          cov_vl9yren8p().s[67]++;
          return (dashboardConfigs_1.demoEvents.reduce((sum, event) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[22]++;
            cov_vl9yren8p().s[68]++;
            return sum + event.revenue;
          }, 0) / 100000000).toFixed(3);
        }, '0.000', 'totalRevenue')} BTC`, 'demo'),
        upcomingEvents: this.createMetricValue(dashboardConfigs_1.demoEvents.filter(e => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[23]++;
          cov_vl9yren8p().s[69]++;
          return e.status === "Upcoming";
        }).length, 'demo')
      }
    };
  }
  getProjectsMetrics() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[24]++;
    cov_vl9yren8p().s[70]++;
    return {
      isEnabled: false,
      isDemo: true,
      timeline: FEATURE_FLAGS.projects.timeline,
      stats: {
        totalProjects: this.createMetricValue(dashboardConfigs_1.demoProjects.length, 'demo'),
        totalContributors: this.createMetricValue(this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[25]++;
          cov_vl9yren8p().s[71]++;
          return dashboardConfigs_1.demoProjects.reduce((sum, project) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[26]++;
            cov_vl9yren8p().s[72]++;
            return sum + project.contributors;
          }, 0);
        }, 0, 'totalContributors'), 'demo'),
        totalFunding: this.createMetricValue(`${this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[27]++;
          cov_vl9yren8p().s[73]++;
          return (dashboardConfigs_1.demoProjects.reduce((sum, project) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[28]++;
            cov_vl9yren8p().s[74]++;
            return sum + project.funding;
          }, 0) / 100000000).toFixed(3);
        }, '0.000', 'totalFunding')} BTC`, 'demo'),
        avgProgress: this.createMetricValue(`${this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[29]++;
          cov_vl9yren8p().s[75]++;
          return Math.round(dashboardConfigs_1.demoProjects.reduce((sum, project) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[30]++;
            cov_vl9yren8p().s[76]++;
            return sum + project.progress;
          }, 0) / dashboardConfigs_1.demoProjects.length);
        }, 0, 'avgProgress')}%`, 'demo')
      }
    };
  }
  getAssetsMetrics() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[31]++;
    cov_vl9yren8p().s[77]++;
    return {
      isEnabled: false,
      isDemo: true,
      timeline: FEATURE_FLAGS.assets.timeline,
      stats: {
        totalAssets: this.createMetricValue(dashboardConfigs_1.demoAssets.length, 'demo'),
        totalEarnings: this.createMetricValue(`${this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[32]++;
          cov_vl9yren8p().s[78]++;
          return (dashboardConfigs_1.demoAssets.reduce((sum, asset) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[33]++;
            cov_vl9yren8p().s[79]++;
            return sum + asset.totalEarnings;
          }, 0) / 100000000).toFixed(3);
        }, '0.000', 'totalEarnings')} BTC`, 'demo'),
        totalRentals: this.createMetricValue(this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[34]++;
          cov_vl9yren8p().s[80]++;
          return dashboardConfigs_1.demoAssets.reduce((sum, asset) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[35]++;
            cov_vl9yren8p().s[81]++;
            return sum + asset.rentals;
          }, 0);
        }, 0, 'totalRentals'), 'demo'),
        availableAssets: this.createMetricValue(dashboardConfigs_1.demoAssets.filter(a => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[36]++;
          cov_vl9yren8p().s[82]++;
          return a.status === "Available";
        }).length, 'demo')
      }
    };
  }
  getPeopleMetrics() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[37]++;
    cov_vl9yren8p().s[83]++;
    return {
      isEnabled: false,
      isDemo: true,
      timeline: FEATURE_FLAGS.people.timeline,
      stats: {
        totalConnections: this.createMetricValue(dashboardConfigs_1.demoPeople.length, 'demo'),
        friends: this.createMetricValue(dashboardConfigs_1.demoPeople.filter(p => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[38]++;
          cov_vl9yren8p().s[84]++;
          return p.relationship === "Friend";
        }).length, 'demo'),
        colleagues: this.createMetricValue(dashboardConfigs_1.demoPeople.filter(p => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[39]++;
          cov_vl9yren8p().s[85]++;
          return p.relationship === "Colleague";
        }).length, 'demo'),
        mutualConnections: this.createMetricValue(this.safeCalculation(() => {
          /* istanbul ignore next */
          cov_vl9yren8p().f[40]++;
          cov_vl9yren8p().s[86]++;
          return dashboardConfigs_1.demoPeople.reduce((sum, person) => {
            /* istanbul ignore next */
            cov_vl9yren8p().f[41]++;
            cov_vl9yren8p().s[87]++;
            return sum + person.mutualConnections;
          }, 0);
        }, 0, 'mutualConnections'), 'demo')
      }
    };
  }
  async getAllMetrics(userId, walletAddress) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[42]++;
    cov_vl9yren8p().s[88]++;
    try {
      const [fundraising, wallet] =
      /* istanbul ignore next */
      (cov_vl9yren8p().s[89]++, await Promise.all([this.getFundraisingMetrics(userId), this.getWalletMetrics(walletAddress)]));
      /* istanbul ignore next */
      cov_vl9yren8p().s[90]++;
      return {
        fundraising,
        wallet,
        organizations: this.getOrganizationsMetrics(),
        events: this.getEventsMetrics(),
        projects: this.getProjectsMetrics(),
        assets: this.getAssetsMetrics(),
        people: this.getPeopleMetrics()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vl9yren8p().s[91]++;
      logger_1.logger.error('Error fetching all metrics', error, 'Analytics');
      /* istanbul ignore next */
      cov_vl9yren8p().s[92]++;
      throw error;
    }
  }
  // Utility methods
  formatCurrency(amount, currency =
  /* istanbul ignore next */
  (cov_vl9yren8p().b[13][0]++, 'SATS')) {
    /* istanbul ignore next */
    cov_vl9yren8p().f[43]++;
    cov_vl9yren8p().s[93]++;
    if (currency === 'BTC') {
      /* istanbul ignore next */
      cov_vl9yren8p().b[14][0]++;
      cov_vl9yren8p().s[94]++;
      return `₿${(amount / 100000000).toFixed(6)}`;
    } else
    /* istanbul ignore next */
    {
      cov_vl9yren8p().b[14][1]++;
    }
    cov_vl9yren8p().s[95]++;
    return `${amount.toLocaleString('en-US')} sats`;
  }
  clearCache() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[44]++;
    cov_vl9yren8p().s[96]++;
    this.cache.clear();
  }
  getCacheStats() {
    /* istanbul ignore next */
    cov_vl9yren8p().f[45]++;
    cov_vl9yren8p().s[97]++;
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_vl9yren8p().s[98]++;
exports.analyticsService = new AnalyticsService();
/* istanbul ignore next */
cov_vl9yren8p().s[99]++;
exports.default = exports.analyticsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,