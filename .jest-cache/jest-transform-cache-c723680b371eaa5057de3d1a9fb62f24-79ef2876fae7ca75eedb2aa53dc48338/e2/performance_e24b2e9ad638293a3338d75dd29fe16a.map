{"version":3,"names":["cov_201k99y8ix","actualCoverage","exports","createLazyComponent","s","preloadComponent","debounce","throttle","importWithFallback","prefetchOnInteraction","useDebounce","useThrottle","usePerformanceCache","isSlowConnection","isLowEndDevice","getOptimalImageQuality","createOptimizedEventHandler","react_1","require","react_2","__importDefault","logger_1","importFn","fallback","f","LazyComponent","lazy","LazyWrapper","props","jsx_runtime_1","jsx","Suspense","b","default","createElement","children","Object","assign","window","requestIdleCallback","setTimeout","PerformanceCache","constructor","options","cache","Map","ttl","maxSize","onEvict","set","key","value","cleanup","size","evictOldest","timestamp","Date","now","hitCount","get","entry","delete","has","clear","entries","Array","from","oldestKey","oldestTimestamp","lowestHitCount","Infinity","getStats","totalHits","reduce","sum","totalAge","averageAge","length","RequestDeduplicator","pendingRequests","dedupe","requestFn","request","finally","PerformanceMonitor","metrics","mark","name","push","values","shift","measure","fn","start","performance","result","measureAsync","sorted","sort","a","count","min","max","avg","val","p50","Math","floor","p95","p99","getAllStats","stats","keys","func","wait","immediate","timeout","args","later","callNow","clearTimeout","lastTime","retries","i","error","logger","warn","Promise","resolve","urls","prefetch","forEach","url","link","document","rel","href","head","appendChild","events","handler","event","removeEventListener","addEventListener","WeakCache","WeakMap","globalCache","requestDeduplicator","performanceMonitor","react_3","delay","debouncedValue","setDebouncedValue","useState","useEffect","callback","lastRun","useRef","useCallback","current","factory","deps","cached","navigator","connection","effectiveType","memory","deviceMemory","rafId","cancelAnimationFrame","requestAnimationFrame"],"sources":["/home/g/dev/orangecat/src/utils/performance.tsx"],"sourcesContent":["/**\n * PERFORMANCE OPTIMIZATION UTILITIES\n * \n * This module provides utilities for improving application performance:\n * - Lazy loading components\n * - Code splitting\n * - Caching strategies\n * - Bundle optimization\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Performance optimization utilities for Option B implementation\n */\n\nimport { lazy, ComponentType, Suspense, ReactNode } from 'react'\nimport React from 'react'\nimport { logger } from './logger'\n\n// ==================== LAZY LOADING UTILITIES ====================\n\n/**\n * Enhanced lazy loading with error boundary and loading states\n */\nexport function createLazyComponent<T = any>(\n  importFn: () => Promise<{ default: ComponentType<T> }>,\n  fallback?: ComponentType\n) {\n  const LazyComponent = lazy(importFn)\n  \n  return function LazyWrapper(props: T) {\n    return (\n      <Suspense fallback={fallback ? React.createElement(fallback) : <div>Loading...</div>}>\n        <LazyComponent {...(props as any)} />\n      </Suspense>\n    )\n  }\n}\n\n/**\n * Preload component for better UX\n */\nexport function preloadComponent(importFn: () => Promise<{ default: ComponentType<any> }>) {\n  // Preload on idle or interaction\n  if (typeof window !== 'undefined') {\n    if ('requestIdleCallback' in window) {\n      window.requestIdleCallback(() => importFn())\n    } else {\n      setTimeout(() => importFn(), 100)\n    }\n  }\n}\n\n// ==================== CACHING UTILITIES ====================\n\ninterface CacheOptions {\n  ttl?: number // Time to live in milliseconds\n  maxSize?: number // Maximum number of entries\n  onEvict?: (key: string, value: any) => void\n}\n\n/**\n * Enhanced caching utility with TTL and size limits\n */\nexport class PerformanceCache<T = any> {\n  private cache = new Map<string, { value: T; timestamp: number; hitCount: number }>()\n  private readonly ttl: number\n  private readonly maxSize: number\n  private readonly onEvict?: (key: string, value: T) => void\n\n  constructor(options: CacheOptions = {}) {\n    this.ttl = options.ttl || 5 * 60 * 1000 // 5 minutes default\n    this.maxSize = options.maxSize || 100\n    this.onEvict = options.onEvict\n  }\n\n  set(key: string, value: T): void {\n    // Clean expired entries before adding new ones\n    this.cleanup()\n    \n    // Remove oldest entries if cache is full\n    if (this.cache.size >= this.maxSize) {\n      this.evictOldest()\n    }\n\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now(),\n      hitCount: 0\n    })\n  }\n\n  get(key: string): T | null {\n    const entry = this.cache.get(key)\n    \n    if (!entry) return null\n    \n    // Check if expired\n    if (Date.now() - entry.timestamp > this.ttl) {\n      this.cache.delete(key)\n      return null\n    }\n    \n    // Update hit count for LRU\n    entry.hitCount++\n    return entry.value\n  }\n\n  has(key: string): boolean {\n    return this.get(key) !== null\n  }\n\n  delete(key: string): boolean {\n    const entry = this.cache.get(key)\n    if (entry && this.onEvict) {\n      this.onEvict(key, entry.value)\n    }\n    return this.cache.delete(key)\n  }\n\n  clear(): void {\n    if (this.onEvict) {\n      const entries = Array.from(this.cache.entries())\n      for (const [key, entry] of entries) {\n        this.onEvict(key, entry.value)\n      }\n    }\n    this.cache.clear()\n  }\n\n  size(): number {\n    this.cleanup()\n    return this.cache.size\n  }\n\n  private cleanup(): void {\n    const now = Date.now()\n    const entries = Array.from(this.cache.entries())\n    for (const [key, entry] of entries) {\n      if (now - entry.timestamp > this.ttl) {\n        if (this.onEvict) {\n          this.onEvict(key, entry.value)\n        }\n        this.cache.delete(key)\n      }\n    }\n  }\n\n  private evictOldest(): void {\n    let oldestKey: string | null = null\n    let oldestTimestamp = Date.now()\n    let lowestHitCount = Infinity\n\n    const entries = Array.from(this.cache.entries())\n    for (const [key, entry] of entries) {\n      if (entry.timestamp < oldestTimestamp || \n          (entry.timestamp === oldestTimestamp && entry.hitCount < lowestHitCount)) {\n        oldestKey = key\n        oldestTimestamp = entry.timestamp\n        lowestHitCount = entry.hitCount\n      }\n    }\n\n    if (oldestKey) {\n      this.delete(oldestKey)\n    }\n  }\n\n  getStats() {\n    const entries = Array.from(this.cache.entries())\n    const totalHits = entries.reduce((sum, [, entry]) => sum + entry.hitCount, 0)\n    const totalAge = entries.reduce((sum, [, entry]) => sum + entry.timestamp, 0)\n    const averageAge = totalAge / entries.length\n\n    return {\n      size: entries.length,\n      totalHits,\n      averageAge\n    }\n  }\n}\n\n// ==================== REQUEST DEDUPLICATION ====================\n\n/**\n * Deduplicate concurrent requests to the same resource\n */\nexport class RequestDeduplicator {\n  private pendingRequests = new Map<string, Promise<any>>()\n\n  async dedupe<T>(key: string, requestFn: () => Promise<T>): Promise<T> {\n    // If request is already pending, return the same promise\n    if (this.pendingRequests.has(key)) {\n      return this.pendingRequests.get(key)!\n    }\n\n    // Create new request\n    const request = requestFn().finally(() => {\n      // Clean up when request completes\n      this.pendingRequests.delete(key)\n    })\n\n    this.pendingRequests.set(key, request)\n    return request\n  }\n\n  clear(): void {\n    this.pendingRequests.clear()\n  }\n}\n\n// ==================== PERFORMANCE MONITORING ====================\n\n/**\n * Performance metrics collection\n */\nexport class PerformanceMonitor {\n  private metrics = new Map<string, number[]>()\n\n  mark(name: string, value: number): void {\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, [])\n    }\n    this.metrics.get(name)!.push(value)\n    \n    // Keep only last 100 measurements\n    const values = this.metrics.get(name)!\n    if (values.length > 100) {\n      values.shift()\n    }\n  }\n\n  measure<T>(name: string, fn: () => T): T {\n    const start = performance.now()\n    const result = fn()\n    this.mark(name, performance.now() - start)\n    return result\n  }\n\n  async measureAsync<T>(name: string, fn: () => Promise<T>): Promise<T> {\n    const start = performance.now()\n    const result = await fn()\n    this.mark(name, performance.now() - start)\n    return result\n  }\n\n  getStats(name: string) {\n    const values = this.metrics.get(name) || []\n    if (values.length === 0) return null\n\n    const sorted = [...values].sort((a, b) => a - b)\n    return {\n      count: values.length,\n      min: sorted[0],\n      max: sorted[sorted.length - 1],\n      avg: values.reduce((sum, val) => sum + val, 0) / values.length,\n      p50: sorted[Math.floor(sorted.length * 0.5)],\n      p95: sorted[Math.floor(sorted.length * 0.95)],\n      p99: sorted[Math.floor(sorted.length * 0.99)]\n    }\n  }\n\n  getAllStats() {\n    const stats: Record<string, any> = {}\n    const keys = Array.from(this.metrics.keys())\n    for (const name of keys) {\n      stats[name] = this.getStats(name)\n    }\n    return stats\n  }\n}\n\n// ==================== DEBOUNCING & THROTTLING ====================\n\n/**\n * Enhanced debounce with immediate execution option\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  immediate = false\n): T {\n  let timeout: NodeJS.Timeout | null = null\n  \n  return ((...args: Parameters<T>) => {\n    const later = () => {\n      timeout = null\n      if (!immediate) func(...args)\n    }\n    \n    const callNow = immediate && !timeout\n    \n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    \n    if (callNow) func(...args)\n  }) as T\n}\n\n/**\n * Throttle function execution\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): T {\n  let lastTime = 0\n  \n  return ((...args: Parameters<T>) => {\n    const now = Date.now()\n    if (now - lastTime >= wait) {\n      lastTime = now\n      return func(...args)\n    }\n  }) as T\n}\n\n// ==================== BUNDLE OPTIMIZATION UTILITIES ====================\n\n/**\n * Dynamic imports with error handling\n */\nexport async function importWithFallback<T>(\n  importFn: () => Promise<T>,\n  fallback: T,\n  retries = 3\n): Promise<T> {\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await importFn()\n    } catch (error) {\n              logger.warn(`Import failed (attempt ${i + 1}/${retries})`, { error })\n      if (i === retries - 1) {\n        return fallback\n      }\n      // Wait before retry\n      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)))\n    }\n  }\n  return fallback\n}\n\n/**\n * Prefetch resources on interaction\n */\nexport function prefetchOnInteraction(urls: string[]) {\n  if (typeof window === 'undefined') return\n\n  const prefetch = () => {\n    urls.forEach(url => {\n      const link = document.createElement('link')\n      link.rel = 'prefetch'\n      link.href = url\n      document.head.appendChild(link)\n    })\n  }\n\n  // Prefetch on first user interaction\n  const events = ['mousedown', 'touchstart', 'keydown']\n  const handler = () => {\n    prefetch()\n    events.forEach(event => {\n      document.removeEventListener(event, handler, true)\n    })\n  }\n\n  events.forEach(event => {\n    document.addEventListener(event, handler, true)\n  })\n}\n\n// ==================== MEMORY OPTIMIZATION ====================\n\n/**\n * Weak reference cache for preventing memory leaks\n */\nexport class WeakCache<K extends object, V> {\n  private cache = new WeakMap<K, V>()\n\n  set(key: K, value: V): void {\n    this.cache.set(key, value)\n  }\n\n  get(key: K): V | undefined {\n    return this.cache.get(key)\n  }\n\n  has(key: K): boolean {\n    return this.cache.has(key)\n  }\n\n  delete(key: K): boolean {\n    return this.cache.delete(key)\n  }\n}\n\n// ==================== GLOBAL INSTANCES ====================\n\n// Global instances for common use cases\nexport const globalCache = new PerformanceCache({ ttl: 5 * 60 * 1000, maxSize: 100 })\nexport const requestDeduplicator = new RequestDeduplicator()\nexport const performanceMonitor = new PerformanceMonitor()\n\n// ==================== REACT HOOKS ====================\n\nimport { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * Hook for debounced values\n */\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n\n/**\n * Hook for throttled callbacks\n */\nexport function useThrottle<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number\n): T {\n  const lastRun = useRef(Date.now())\n\n  return useCallback(\n    ((...args) => {\n      if (Date.now() - lastRun.current >= delay) {\n        callback(...args)\n        lastRun.current = Date.now()\n      }\n    }) as T,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [delay]\n  )\n}\n\n/**\n * Hook for performance-aware cached values\n */\nexport function usePerformanceCache<T>(\n  key: string,\n  factory: () => T,\n  deps: any[] = []\n): T {\n  const cached = globalCache.get(key)\n  \n  return useCallback(() => {\n    if (cached) return cached\n    \n    const value = factory()\n    globalCache.set(key, value)\n    return value\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [key, ...deps])()\n}\n\n// ==================== UTILITY FUNCTIONS ====================\n\n/**\n * Check if device has slow network connection\n */\nexport function isSlowConnection(): boolean {\n  if (typeof navigator === 'undefined') return false\n  \n  const connection = (navigator as any).connection\n  if (!connection) return false\n  \n  return connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g'\n}\n\n/**\n * Check if device is low-end\n */\nexport function isLowEndDevice(): boolean {\n  if (typeof navigator === 'undefined') return false\n  \n  const memory = (navigator as any).deviceMemory\n  return memory && memory < 4 // Less than 4GB RAM\n}\n\n/**\n * Get optimal image quality based on device capabilities\n */\nexport function getOptimalImageQuality(): 'low' | 'medium' | 'high' {\n  if (isLowEndDevice() || isSlowConnection()) return 'low'\n  if (isSlowConnection()) return 'medium'\n  return 'high'\n}\n\n/**\n * Create optimized event handler that prevents excessive re-renders\n */\nexport function createOptimizedEventHandler<T extends (...args: any[]) => void>(\n  handler: T,\n  delay = 16 // ~60fps\n): T {\n  let rafId: number | null = null\n  \n  return ((...args: Parameters<T>) => {\n    if (rafId) cancelAnimationFrame(rafId)\n    \n    rafId = requestAnimationFrame(() => {\n      handler(...args)\n      rafId = null\n    })\n  }) as T\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}