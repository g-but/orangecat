{"file":"/home/g/dev/orangecat/src/services/__tests__/search.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/search.comprehensive.test.ts"],"sourcesContent":["/**\n * SEARCH SERVICE - COMPREHENSIVE TEST COVERAGE\n * \n * This test suite provides comprehensive coverage for the SearchService,\n * testing all search operations, caching, filtering, trending content,\n * suggestions, and error handling scenarios.\n * \n * Created: 2025-01-08\n * Last Modified: 2025-01-08\n * Last Modified Summary: Comprehensive SearchService tests for production readiness\n */\n\n// Mock Supabase client\njest.mock('@/services/supabase/client', () => ({\n  __esModule: true,\n  default: {\n    from: jest.fn(),\n    auth: { getUser: jest.fn() },\n    rpc: jest.fn()\n  }\n}))\n\n// Get the mocked client\nimport supabase from '@/services/supabase/client'\nconst mockSupabase = supabase as jest.Mocked<typeof supabase>\n\n// Import after mocking\nimport { \n  search, \n  getTrending, \n  getSearchSuggestions, \n  clearSearchCache,\n  SearchOptions,\n  SearchResponse,\n  SearchProfile,\n  SearchFundingPage\n} from '../search'\n\n// Helper function to create consistent mock chain\nconst createMockQuery = (data: any[], error: any = null) => ({\n  select: jest.fn().mockReturnThis(),\n  eq: jest.fn().mockReturnThis(),\n  or: jest.fn().mockReturnThis(),\n  order: jest.fn().mockReturnThis(),\n  range: jest.fn().mockResolvedValue({ data, error }),\n  limit: jest.fn().mockResolvedValue({ data, error }),\n  not: jest.fn().mockReturnThis(),\n  gte: jest.fn().mockReturnThis(),\n  lte: jest.fn().mockReturnThis(),\n  in: jest.fn().mockReturnThis(),\n})\n\ndescribe('🔍 Search Service - Comprehensive Coverage', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    clearSearchCache() // Clear cache between tests\n    \n    // Reset console methods to avoid test noise\n    jest.spyOn(console, 'warn').mockImplementation(() => {})\n    jest.spyOn(console, 'error').mockImplementation(() => {})\n    \n    // Setup default mock responses\n    mockSupabase.from.mockReturnValue(createMockQuery([], null))\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('🎯 Service Architecture', () => {\n    \n    test('should export all required functions', () => {\n      expect(typeof search).toBe('function')\n      expect(typeof getTrending).toBe('function')\n      expect(typeof getSearchSuggestions).toBe('function')\n      expect(typeof clearSearchCache).toBe('function')\n    })\n\n    test('should have proper TypeScript types exported', () => {\n      // This test ensures our types are properly exported\n      const searchOptions: SearchOptions = {\n        query: 'test',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n      expect(searchOptions).toBeDefined()\n    })\n\n  })\n\n  describe('🔍 Search Operations', () => {\n    \n    test('should search profiles successfully', async () => {\n      const mockProfiles = [\n        {\n          id: 'prof-1',\n          username: 'testuser',\n          display_name: 'Test User',\n          bio: 'Test bio',\n          avatar_url: 'avatar.jpg',\n          created_at: '2024-01-01T00:00:00.000Z'\n        }\n      ]\n\n      // Use consistent mock pattern\n      mockSupabase.from.mockReturnValue(createMockQuery(mockProfiles, null))\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'profiles',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result.results).toHaveLength(1)\n      expect(result.results[0].type).toBe('profile')\n      expect(result.results[0].data).toEqual(mockProfiles[0])\n      expect(result.totalCount).toBe(1)\n    })\n\n    test('should search campaigns successfully', async () => {\n      const mockCampaigns = [\n        {\n          id: 'camp-1',\n          user_id: 'user-1',\n          title: 'Test Campaign',\n          description: 'Test description',\n          category: 'technology',\n          tags: ['test'],\n          goal_amount: 10000,\n          total_funding: 5000,\n          contributor_count: 25,\n          is_active: true,\n          is_public: true,\n          featured_image_url: 'image.jpg',\n          created_at: '2024-01-01T00:00:00.000Z',\n          slug: 'test-campaign',\n          profiles: [{\n            username: 'creator',\n            display_name: 'Creator',\n            avatar_url: 'creator.jpg'\n          }]\n        }\n      ]\n\n      // Use consistent mock pattern\n      mockSupabase.from.mockReturnValue(createMockQuery(mockCampaigns, null))\n\n      const options: SearchOptions = {\n        query: 'campaign',\n        type: 'campaigns',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result.results).toHaveLength(1)\n      expect(result.results[0].type).toBe('campaign')\n      expect((result.results[0].data as any).title).toBe('Test Campaign')\n    })\n\n    test('should search all types simultaneously', async () => {\n      const mockProfiles = [{ \n        id: 'prof-1',\n        username: 'testuser', \n        display_name: 'Test User',\n        bio: 'Test bio',\n        avatar_url: 'avatar.jpg',\n        created_at: '2024-01-01T00:00:00.000Z'\n      }]\n      \n      const mockCampaigns = [{\n        id: 'camp-1',\n        user_id: 'user-1',\n        title: 'Test Campaign',\n        description: 'Test description',\n        category: 'technology',\n        tags: ['test'],\n        goal_amount: 10000,\n        total_funding: 5000,\n        contributor_count: 25,\n        is_active: true,\n        is_public: true,\n        featured_image_url: 'image.jpg',\n        created_at: '2024-01-01T00:00:00.000Z',\n        slug: 'test-campaign',\n        profiles: [{\n          username: 'creator',\n          display_name: 'Creator',\n          avatar_url: 'creator.jpg'\n        }]\n      }]\n\n      // Mock both profile and campaign queries consistently\n      let callCount = 0\n      mockSupabase.from.mockImplementation((table) => {\n        callCount++\n        if (table === 'profiles') {\n          return createMockQuery(mockProfiles, null)\n        } else if (table === 'funding_pages') {\n          return createMockQuery(mockCampaigns, null)\n        }\n        return createMockQuery([], null)\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result.results).toHaveLength(2) // Both profile and campaign\n      expect(result.results.some(r => r.type === 'profile')).toBe(true)\n      expect(result.results.some(r => r.type === 'campaign')).toBe(true)\n    })\n\n    test('should handle empty search query', async () => {\n      const options: SearchOptions = {\n        type: 'all',\n        sortBy: 'recent'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(Array.isArray(result.results)).toBe(true)\n    })\n\n    test('should handle search with filters', async () => {\n      const mockCampaigns = [{\n        id: 'camp-1',\n        user_id: 'user-1',\n        title: 'Test Campaign',\n        description: 'Test description',\n        category: 'technology',\n          tags: ['test'],\n        goal_amount: 10000,\n        total_funding: 5000,\n        contributor_count: 25,\n          is_active: true,\n          is_public: true,\n        featured_image_url: 'image.jpg',\n        created_at: '2024-01-01T00:00:00.000Z',\n        slug: 'test-campaign',\n        profiles: [{\n          username: 'creator',\n          display_name: 'Creator',\n          avatar_url: 'creator.jpg'\n        }]\n      }]\n\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n            in: jest.fn(() => ({\n              eq: jest.fn(() => ({\n                not: jest.fn(() => ({\n                  gte: jest.fn(() => ({\n                    lte: jest.fn(() => ({\n                      gte: jest.fn(() => ({\n                        lte: jest.fn(() => ({\n              order: jest.fn(() => ({\n                            range: jest.fn(() => Promise.resolve({ data: mockCampaigns, error: null }))\n                          }))\n                        }))\n                      }))\n                    }))\n                  }))\n                }))\n              }))\n            }))\n          }))\n        }))\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'campaigns',\n        sortBy: 'funding',\n        filters: {\n          categories: ['technology'],\n          isActive: true,\n          hasGoal: true,\n          minFunding: 1000,\n          maxFunding: 20000,\n          dateRange: {\n            start: '2024-01-01',\n            end: '2024-12-31'\n          }\n        }\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(Array.isArray(result.results)).toBe(true)\n    })\n\n  })\n\n  describe('📊 Search Sorting', () => {\n    \n    test('should sort by relevance', async () => {\n      const mockCampaigns = [\n        {\n          id: 'camp-1',\n          title: 'Bitcoin Project', // High relevance for \"bitcoin\"\n          description: 'About cryptocurrency',\n          total_funding: 1000,\n          contributor_count: 10,\n          created_at: '2024-01-01T00:00:00.000Z'\n        },\n        {\n          id: 'camp-2', \n          title: 'Random Project',\n          description: 'Contains bitcoin keyword', // Lower relevance\n          total_funding: 2000,\n          contributor_count: 20,\n          created_at: '2024-01-02T00:00:00.000Z'\n        }\n      ]\n\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n            or: jest.fn(() => ({\n              order: jest.fn(() => ({\n                range: jest.fn(() => Promise.resolve({ \n                  data: mockCampaigns.map(c => ({\n                    ...c,\n                    user_id: 'user-1',\n                    category: 'technology',\n                    tags: ['test'],\n                    goal_amount: 10000,\n                    is_active: true,\n                    is_public: true,\n                    featured_image_url: 'image.jpg',\n                    slug: 'test-campaign',\n                    profiles: [{ username: 'creator', display_name: 'Creator', avatar_url: 'creator.jpg' }]\n                  })),\n                  error: null \n                }))\n              }))\n            }))\n          }))\n        }))\n      })\n\n      const options: SearchOptions = {\n        query: 'bitcoin',\n        type: 'campaigns',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result.results.length).toBeGreaterThan(0)\n      if (result.results.length > 1) {\n        const firstResult = result.results[0]\n        if (firstResult.type === 'campaign') {\n          const campaignData = firstResult.data as SearchFundingPage\n          expect(campaignData.title).toBe('Bitcoin Project') // Higher relevance first\n        }\n      }\n    })\n\n    test('should sort by recent', async () => {\n      const options: SearchOptions = {\n        type: 'all',\n        sortBy: 'recent'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      // Results should be sorted by created_at (most recent first)\n    })\n\n    test('should sort by popular', async () => {\n      const options: SearchOptions = {\n        type: 'campaigns',\n        sortBy: 'popular'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      // Results should be sorted by contributor_count (highest first)\n    })\n\n    test('should sort by funding', async () => {\n      const options: SearchOptions = {\n        type: 'campaigns',\n        sortBy: 'funding'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      // Results should be sorted by total_funding (highest first)\n    })\n\n  })\n\n  describe('💾 Caching System', () => {\n    \n    test('should cache search results', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n          or: jest.fn(() => ({\n                order: jest.fn(() => ({\n              range: jest.fn(() => Promise.resolve({ data: [], error: null }))\n            }))\n          }))\n        }))\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'profiles',\n        sortBy: 'relevance'\n      }\n\n      // First call\n      await search(options)\n      const firstCallCount = mockSupabase.from.mock.calls.length\n\n      // Second call should use cache\n      await search(options)\n      const secondCallCount = mockSupabase.from.mock.calls.length\n\n      expect(secondCallCount).toBe(firstCallCount) // No additional calls\n    })\n\n    test('should clear cache', () => {\n      clearSearchCache()\n      expect(true).toBe(true) // Function should execute without error\n    })\n\n    test('should cache with different options separately', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n          or: jest.fn(() => ({\n              order: jest.fn(() => ({\n              range: jest.fn(() => Promise.resolve({ data: [], error: null }))\n            }))\n          }))\n        }))\n      })\n\n      const options1: SearchOptions = {\n        query: 'test1',\n        type: 'profiles',\n        sortBy: 'relevance'\n      }\n\n      const options2: SearchOptions = {\n        query: 'test2',\n        type: 'profiles',\n        sortBy: 'relevance'\n      }\n\n      await search(options1)\n      const firstCallCount = mockSupabase.from.mock.calls.length\n\n      await search(options2)\n      const secondCallCount = mockSupabase.from.mock.calls.length\n\n      expect(secondCallCount).toBeGreaterThan(firstCallCount) // Different cache keys\n    })\n\n  })\n\n  describe('🔥 Trending Content', () => {\n    \n    test('should get trending content successfully', async () => {\n      const mockCampaigns = [{\n        id: 'camp-1',\n        user_id: 'user-1',\n        title: 'Trending Campaign',\n          description: 'Popular campaign',\n          category: 'technology',\n        tags: ['trending'],\n        goal_amount: 10000,\n        total_funding: 8000,\n          contributor_count: 100,\n          is_active: true,\n          is_public: true,\n        featured_image_url: 'image.jpg',\n        created_at: '2024-01-01T00:00:00.000Z',\n        slug: 'trending-campaign',\n        profiles: [{ username: 'creator', display_name: 'Creator', avatar_url: 'creator.jpg' }]\n      }]\n\n      const mockProfiles = [{\n        id: 'prof-1',\n        username: 'trendinguser',\n        display_name: 'Trending User',\n        bio: 'Popular user',\n        avatar_url: 'avatar.jpg',\n        created_at: '2024-01-01T00:00:00.000Z'\n      }]\n\n      let callCount = 0\n      mockSupabase.from.mockImplementation((table) => {\n        callCount++\n        if (table === 'funding_pages') {\n          return {\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            order: jest.fn(() => ({\n                  limit: jest.fn(() => Promise.resolve({ data: mockCampaigns, error: null }))\n              }))\n            }))\n          }))\n          }\n        } else if (table === 'profiles') {\n          return {\n            select: jest.fn(() => ({\n              order: jest.fn(() => ({\n                limit: jest.fn(() => Promise.resolve({ data: mockProfiles, error: null }))\n              }))\n            }))\n          }\n        }\n        return { select: () => ({ data: [], error: null }) }\n      })\n\n      const result = await getTrending()\n\n      expect(result).toBeDefined()\n      expect(result.results).toBeDefined()\n      expect(Array.isArray(result.results)).toBe(true)\n      expect(result.totalCount).toBeGreaterThanOrEqual(0)\n      expect(result.hasMore).toBe(false)\n    })\n\n    test('should handle trending content errors gracefully', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n              order: jest.fn(() => ({\n              limit: jest.fn(() => Promise.resolve({ data: null, error: { message: 'Database error' } }))\n                }))\n              }))\n            }))\n      })\n\n      const result = await getTrending()\n\n      expect(result).toBeDefined()\n      expect(result.results).toEqual([])\n      expect(result.totalCount).toBe(0)\n      expect(result.hasMore).toBe(false)\n    })\n\n  })\n\n  describe('💡 Search Suggestions', () => {\n    \n    test('should get search suggestions successfully', async () => {\n      const mockProfiles = [{\n        username: 'testuser',\n        display_name: 'Test User'\n      }]\n\n      const mockCampaigns = [{\n        title: 'Test Campaign',\n        category: 'technology'\n      }]\n\n      let callCount = 0\n      mockSupabase.from.mockImplementation((table) => {\n        callCount++\n        if (table === 'profiles') {\n          return {\n            select: jest.fn(() => ({\n              or: jest.fn(() => ({\n                limit: jest.fn(() => Promise.resolve({ data: mockProfiles, error: null }))\n          }))\n        }))\n          }\n        } else if (table === 'funding_pages') {\n          return {\n            select: jest.fn(() => ({\n              eq: jest.fn(() => ({\n                or: jest.fn(() => ({\n                  limit: jest.fn(() => Promise.resolve({ data: mockCampaigns, error: null }))\n                }))\n              }))\n            }))\n          }\n        }\n        return { select: () => ({ data: [], error: null }) }\n      })\n\n      const suggestions = await getSearchSuggestions('test')\n\n      expect(Array.isArray(suggestions)).toBe(true)\n      expect(suggestions.length).toBeGreaterThanOrEqual(0)\n    })\n\n    test('should return empty array for short queries', async () => {\n      const suggestions = await getSearchSuggestions('a')\n\n      expect(suggestions).toEqual([])\n    })\n\n    test('should return empty array for empty queries', async () => {\n      const suggestions = await getSearchSuggestions('')\n\n      expect(suggestions).toEqual([])\n    })\n\n    test('should handle suggestion errors gracefully', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n          or: jest.fn(() => ({\n            limit: jest.fn(() => Promise.reject(new Error('Database error')))\n                }))\n              }))\n      })\n\n      const suggestions = await getSearchSuggestions('test')\n\n      expect(suggestions).toEqual([])\n    })\n\n    test('should limit suggestion results', async () => {\n      const mockProfiles = Array.from({ length: 20 }, (_, i) => ({\n        username: `testuser${i}`,\n        display_name: `Test User ${i}`\n      }))\n\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n          or: jest.fn(() => ({\n            limit: jest.fn(() => Promise.resolve({ data: mockProfiles, error: null }))\n          }))\n        }))\n      })\n\n      const suggestions = await getSearchSuggestions('test', 3)\n\n      expect(suggestions.length).toBeLessThanOrEqual(3)\n    })\n\n  })\n\n  describe('🚨 Error Handling', () => {\n    \n    test('should handle profile search errors gracefully', async () => {\n      mockSupabase.from.mockImplementation((table) => {\n        if (table === 'profiles') {\n          return {\n            select: jest.fn(() => ({\n              or: jest.fn(() => ({\n                order: jest.fn(() => ({\n                  range: jest.fn(() => Promise.reject(new Error('Profile search failed')))\n                }))\n              }))\n            }))\n          }\n        }\n        return {\n          select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n              or: jest.fn(() => ({\n                order: jest.fn(() => ({\n                  range: jest.fn(() => Promise.resolve({ data: [], error: null }))\n                }))\n              }))\n            }))\n          }))\n        }\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(result.results).toBeDefined()\n      // Should continue with campaign search even if profile search fails\n    })\n\n    test('should handle campaign search errors gracefully', async () => {\n      mockSupabase.from.mockImplementation((table) => {\n        if (table === 'funding_pages') {\n          return {\n        select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n                or: jest.fn(() => ({\n              order: jest.fn(() => ({\n                    range: jest.fn(() => Promise.reject(new Error('Campaign search failed')))\n                }))\n              }))\n            }))\n          }))\n          }\n        }\n        return {\n          select: jest.fn(() => ({\n            or: jest.fn(() => ({\n              order: jest.fn(() => ({\n                range: jest.fn(() => Promise.resolve({ data: [], error: null }))\n              }))\n            }))\n          }))\n        }\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(result.results).toBeDefined()\n      // Should continue with profile search even if campaign search fails\n    })\n\n    test('should handle facets errors gracefully', async () => {\n      mockSupabase.from.mockImplementation((table) => {\n        if (table === 'profiles' || table === 'funding_pages') {\n          // For search queries, return successfully\n          return {\n            select: jest.fn(() => ({\n              or: jest.fn(() => ({\n                order: jest.fn(() => ({\n                  range: jest.fn(() => Promise.resolve({ data: [], error: null }))\n                }))\n              })),\n              eq: jest.fn(() => ({\n                or: jest.fn(() => ({\n                  order: jest.fn(() => ({\n                    range: jest.fn(() => Promise.resolve({ data: [], error: null }))\n                  }))\n                })),\n                not: jest.fn(() => Promise.resolve({ data: [], error: null }))\n              }))\n            }))\n          }\n        }\n        return {\n          select: jest.fn(() => Promise.reject(new Error('Facets failed')))\n        }\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(result.facets).toBeDefined()\n      expect(result.facets.categories).toEqual([])\n      expect(result.facets.totalProfiles).toBe(0)\n      expect(result.facets.totalCampaigns).toBe(0)\n    })\n\n    test('should handle complete search failure gracefully', async () => {\n      mockSupabase.from.mockImplementation(() => {\n        throw new Error('Complete database failure')\n      })\n\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(result.results).toEqual([])\n      expect(result.totalCount).toBe(0)\n      expect(result.hasMore).toBe(false)\n      expect(result.facets).toBeDefined()\n    })\n\n  })\n\n  describe('📏 Pagination', () => {\n    \n    test('should handle pagination correctly', async () => {\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'profiles',\n        sortBy: 'relevance',\n        limit: 10,\n        offset: 20\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(typeof result.hasMore).toBe('boolean')\n      expect(typeof result.totalCount).toBe('number')\n    })\n\n    test('should handle large offset gracefully', async () => {\n      const options: SearchOptions = {\n        query: 'test',\n        type: 'profiles',\n        sortBy: 'relevance',\n        limit: 10,\n        offset: 10000\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(result.results).toBeDefined()\n    })\n\n  })\n\n  describe('🔤 Unicode & Special Characters', () => {\n    \n    test('should handle unicode queries', async () => {\n      const options: SearchOptions = {\n        query: '🚀 émojis and ünicode',\n        type: 'all',\n        sortBy: 'relevance'\n      }\n\n      const result = await search(options)\n\n      expect(result).toBeDefined()\n      expect(result.results).toBeDefined()\n    })\n\n    test('should handle special characters in queries', async () => {\n      const specialQueries = [\n        'test@example.com',\n        'user-name_123',\n        'query with spaces',\n        'query(with)parentheses',\n        'query[with]brackets',\n        'query{with}braces',\n        'query|with|pipes'\n      ]\n\n      for (const query of specialQueries) {\n        const options: SearchOptions = {\n          query,\n          type: 'all',\n          sortBy: 'relevance'\n        }\n\n        const result = await search(options)\n        expect(result).toBeDefined()\n      }\n    })\n\n  })\n\n}) "],"version":3}