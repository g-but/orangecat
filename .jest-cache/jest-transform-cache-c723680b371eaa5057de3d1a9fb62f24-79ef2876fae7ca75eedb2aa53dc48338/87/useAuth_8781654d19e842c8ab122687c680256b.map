{"version":3,"names":["cov_2og2u5b3aj","actualCoverage","s","exports","useRequireAuth","useRedirectIfAuthenticated","useAuth","auth_1","require","navigation_1","react_1","logger_1","useThrottledLog","logFn","delay","b","f","lastLogTime","useRef","now","Date","current","useOptimizedAuthComparison","currentState","previousState","setIsConsistent","useEffect","currentStateKey","user","session","profile","isLoading","hydrated","hasInconsistentState","timeoutId","setTimeout","latestState","useAuthStore","getState","stillInconsistent","clearTimeout","isConsistent","useState","router","useRouter","checkedAuth","setCheckedAuth","isAuthenticated","push","pathname","usePathname","authState","lastLoggedState","lastStateKey","throttledLog","process","env","NODE_ENV","stateSignature","isSignificantChange","logger","debug","hasUser","hasSession","hasProfile","stateChange","timestamp","toISOString","shouldLog","fixInconsistentState","warn","signOut","currentPath","window","location","startsWith","error","Error","message","String","Object","assign"],"sources":["/home/g/dev/orangecat/src/hooks/useAuth.ts"],"sourcesContent":["import { useAuthStore } from '@/stores/auth'\nimport { useRouter, usePathname } from 'next/navigation'\nimport { useEffect, useState, useRef } from 'react'\nimport { logger } from '@/utils/logger'\n\n  // Throttle function to prevent excessive logging - optimized performance\n  function useThrottledLog(logFn: () => void, delay: number = 10000) {\n    const lastLogTime = useRef(0);\n\n    return () => {\n      const now = Date.now();\n      if (now - lastLogTime.current >= delay) {\n        logFn();\n        lastLogTime.current = now;\n      }\n    };\n  }\n\n  // Optimized state comparison to reduce unnecessary re-renders\n  function useOptimizedAuthComparison(\n    currentState: any,\n    previousState: React.MutableRefObject<any>,\n    setIsConsistent: (consistent: boolean) => void\n  ) {\n    useEffect(() => {\n      // Only check consistency when state actually changes\n      const currentStateKey = `${!!currentState.user}-${!!currentState.session}-${!!currentState.profile}-${currentState.isLoading}-${currentState.hydrated}`;\n\n      if (currentStateKey !== previousState.current) {\n        previousState.current = currentStateKey;\n\n        const hasInconsistentState =\n          (currentState.user && !currentState.session) ||\n          (!currentState.user && currentState.session);\n\n        if (hasInconsistentState && currentState.hydrated && !currentState.isLoading) {\n          const timeoutId = setTimeout(() => {\n            const latestState = useAuthStore.getState();\n            const stillInconsistent =\n              (latestState.user && !latestState.session) ||\n              (!latestState.user && latestState.session);\n\n            if (stillInconsistent && latestState.hydrated && !latestState.isLoading) {\n              setIsConsistent(false);\n            } else {\n              setIsConsistent(true);\n            }\n          }, 1000); // Reduced timeout for faster feedback\n\n          return () => clearTimeout(timeoutId);\n        } else {\n          setIsConsistent(true);\n        }\n      }\n    }, [currentState.user, currentState.session, currentState.isLoading, currentState.hydrated, setIsConsistent, previousState]);\n  }\n\n// Hook for protected routes - redirects to login if not authenticated\nexport function useRequireAuth() {\n  // IMPORTANT: Keep all hooks in the exact same order\n  const { user, session, profile, isLoading, hydrated } = useAuthStore();\n  const [isConsistent, setIsConsistent] = useState(true);\n  const router = useRouter();\n  const [checkedAuth, setCheckedAuth] = useState(false);\n\n  // Simplified consistency check - allow transitional states\n  useEffect(() => {\n    if (hydrated && !isLoading) {\n      // Be more lenient - only flag as inconsistent after a delay\n      const hasInconsistentState = \n        (user && !session) || \n        (!user && session);\n        \n      if (hasInconsistentState) {\n        const timeoutId = setTimeout(() => {\n          setIsConsistent(false);\n        }, 2000);\n        return () => clearTimeout(timeoutId);\n      } else {\n        setIsConsistent(true);\n      }\n    }\n  }, [user, session, isLoading, hydrated]);\n\n  // Then handle redirection based on auth state\n  useEffect(() => {\n    // Wait until hydration and initial loading completes\n    if (!hydrated || isLoading) return;\n    \n    // More lenient authentication check - focus on user presence\n    const isAuthenticated = !!user;\n    \n    if (!isAuthenticated) {\n      router.push('/auth?from=protected');\n    }\n    \n    // Mark that we've checked authentication\n    setCheckedAuth(true);\n  }, [user, session, isLoading, hydrated, router]);\n\n  return { \n    user, \n    profile, \n    session, \n    isLoading: isLoading || !hydrated || !checkedAuth, \n    hydrated, \n    isAuthenticated: !!user && hydrated && !isLoading\n  };\n}\n\n// Hook for login/register pages - redirects to dashboard if already authenticated\nexport function useRedirectIfAuthenticated() {\n  // IMPORTANT: Keep all hooks in the exact same order\n  const { user, session, isLoading, hydrated, profile } = useAuthStore();\n  const [isConsistent, setIsConsistent] = useState(true);\n  const router = useRouter();\n  const pathname = usePathname();\n\n  // Simplified consistency check\n  useEffect(() => {\n    if (hydrated && !isLoading) {\n      const hasInconsistentState = \n        (user && !session) || \n        (!user && session);\n        \n      if (hasInconsistentState) {\n        const timeoutId = setTimeout(() => {\n          setIsConsistent(false);\n        }, 2000);\n        return () => clearTimeout(timeoutId);\n      } else {\n        setIsConsistent(true);\n      }\n    }\n  }, [user, session, isLoading, hydrated]);\n\n  useEffect(() => {\n    // Wait for hydration and initial load\n    if (!hydrated || isLoading) return;\n    \n    // More lenient authentication check - focus on user presence\n    const isAuthenticated = !!user;\n    \n    if (isAuthenticated && pathname !== '/dashboard' && pathname !== '/') {\n      router.push('/dashboard');\n    }\n  }, [user, session, isLoading, hydrated, router, pathname, profile]);\n\n  return { \n    isLoading: isLoading || !hydrated, \n    hydrated,\n    isAuthenticated: !!user && hydrated && !isLoading\n  };\n}\n\n// General auth hook with optimized consistency checks - reduces excessive updates\nexport function useAuth() {\n  // IMPORTANT: Keep all hooks in the exact same order\n  const authState = useAuthStore();\n  const [isConsistent, setIsConsistent] = useState(true);\n  const router = useRouter(); // Always declare this hook third\n  const lastLoggedState = useRef<string>('');\n  const lastStateKey = useRef<string>('');\n\n  // Use optimized comparison to reduce unnecessary re-renders\n  useOptimizedAuthComparison(authState, lastStateKey, setIsConsistent);\n\n  // Throttled logging to prevent console spam - only log every 10 seconds for truly significant changes\n  const throttledLog = useThrottledLog(() => {\n    if (process.env.NODE_ENV === 'development') {\n      // Create a signature of the current state to avoid duplicate logs\n      const stateSignature = `${!!authState.user}-${!!authState.session}-${!!authState.profile}-${authState.isLoading}-${authState.hydrated}-${isConsistent}`;\n\n      // Only log if state signature has changed significantly\n      if (stateSignature !== lastLoggedState.current) {\n        // Only log when there's a meaningful state change\n        const isSignificantChange =\n          authState.hydrated &&\n          (!authState.isLoading ||\n           !isConsistent ||\n           (authState.user && authState.session));\n\n        if (isSignificantChange) {\n          logger.debug('Significant auth state change', {\n            hasUser: !!authState.user,\n            hasSession: !!authState.session,\n            hasProfile: !!authState.profile,\n            isLoading: authState.isLoading,\n            hydrated: authState.hydrated,\n            isConsistent,\n            stateChange: lastLoggedState.current ? `${lastLoggedState.current} â†’ ${stateSignature}` : 'initial',\n            timestamp: new Date().toISOString()\n          });\n          lastLoggedState.current = stateSignature;\n        }\n      }\n    }\n  }, 10000); // Increased to 10 seconds to greatly reduce spam\n  \n  // Optimized logging - only log very significant auth state changes with much less frequency\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development' && authState.hydrated) {\n      // Only call throttled log for critical state changes\n      const shouldLog =\n        !authState.isLoading && (\n          !isConsistent ||\n          (authState.user && authState.session && authState.profile)\n        );\n\n      if (shouldLog) {\n        throttledLog();\n      }\n    }\n  }, [authState.user, authState.session, authState.profile, authState.isLoading, authState.hydrated, isConsistent, throttledLog]);\n\n  // Simple function to fix inconsistent state - no auto-fix to avoid race conditions\n  const fixInconsistentState = async () => {\n    if (!authState.hydrated || authState.isLoading) {\n      return;\n    }\n\n    logger.warn('Manually fixing inconsistent auth state', {}, 'Auth');\n    \n    try {\n      // Force sign out to clean everything up\n      await authState.signOut();\n      \n      // Redirect to auth page if on a protected route\n      const currentPath = window.location.pathname;\n      if (currentPath.startsWith('/dashboard') || \n          currentPath.startsWith('/profile') || \n          currentPath.startsWith('/settings')) {\n        router.push('/auth');\n      }\n    } catch (error) {\n      logger.error('Error during auth state fix', { error: error instanceof Error ? error.message : String(error) }, 'Auth');\n    }\n  };\n\n  // Require both user AND session for authentication\n  // If user exists but session doesn't, consider it not authenticated (inconsistent state)\n  const isAuthenticated = authState.hydrated && !authState.isLoading && !!authState.user && !!authState.session;\n\n  return {\n    ...authState,\n    isAuthenticated,\n    isConsistent,\n    fixInconsistentState\n  };\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}