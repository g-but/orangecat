{"file":"/home/g/dev/orangecat/src/services/search.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/search.ts"],"sourcesContent":["import supabase from '@/services/supabase/client'\nimport { logger } from '@/utils/logger'\n\n// Search interfaces\nexport interface SearchProfile {\n  id: string\n  username: string | null\n  display_name: string | null\n  bio: string | null\n  avatar_url: string | null\n  created_at: string\n}\n\nexport interface SearchFundingPage {\n  id: string\n  user_id: string\n  title: string\n  description: string | null\n  category: string | null\n  tags: string[] | null\n  goal_amount: number | null\n  total_funding: number\n  contributor_count: number\n  is_active: boolean\n  is_public: boolean\n  featured_image_url: string | null\n  created_at: string\n  slug: string | null\n  profiles?: {\n    username: string | null\n    display_name: string | null\n    avatar_url: string | null\n  }\n}\n\n// Raw type from Supabase (before transformation)\ninterface RawSearchFundingPage {\n  id: string\n  user_id: string\n  title: string\n  description: string | null\n  category: string | null\n  tags: string[] | null\n  goal_amount: number | null\n  total_funding: number\n  contributor_count: number\n  is_active: boolean\n  is_public: boolean\n  featured_image_url: string | null\n  created_at: string\n  slug: string | null\n  profiles: Array<{\n    username: string | null\n    display_name: string | null\n    avatar_url: string | null\n  }>\n}\n\nexport type SearchResult = {\n  type: 'profile' | 'campaign'\n  data: SearchProfile | SearchFundingPage\n  relevanceScore?: number\n}\n\nexport type SearchType = 'all' | 'profiles' | 'campaigns'\nexport type SortOption = 'relevance' | 'recent' | 'popular' | 'funding'\n\nexport interface SearchFilters {\n  categories?: string[]\n  isActive?: boolean\n  hasGoal?: boolean\n  minFunding?: number\n  maxFunding?: number\n  dateRange?: {\n    start: string\n    end: string\n  }\n}\n\nexport interface SearchOptions {\n  query?: string\n  type: SearchType\n  sortBy: SortOption\n  filters?: SearchFilters\n  limit?: number\n  offset?: number\n}\n\nexport interface SearchResponse {\n  results: SearchResult[]\n  totalCount: number\n  hasMore: boolean\n  facets?: {\n    categories: Array<{ name: string; count: number }>\n    totalProfiles: number\n    totalCampaigns: number\n  }\n}\n\n// ==================== PERFORMANCE OPTIMIZATIONS ====================\n\n// Enhanced cache with better performance characteristics\ninterface CacheEntry {\n  data: SearchResponse\n  timestamp: number\n  hitCount: number\n  size: number\n}\n\nconst searchCache = new Map<string, CacheEntry>()\nconst CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\nconst MAX_CACHE_SIZE = 100 // Maximum number of cached entries\nconst MAX_CACHE_MEMORY = 10 * 1024 * 1024 // 10MB max cache size\n\n// Cache cleanup for memory management\nfunction cleanupCache(): void {\n  if (searchCache.size <= MAX_CACHE_SIZE) return\n  \n  // Remove oldest entries\n  const entries = Array.from(searchCache.entries())\n    .sort((a, b) => a[1].timestamp - b[1].timestamp)\n  \n  // Remove oldest 20% of entries\n  const toRemove = Math.floor(entries.length * 0.2)\n  for (let i = 0; i < toRemove; i++) {\n    searchCache.delete(entries[i][0])\n  }\n}\n\n// Generate optimized cache key with shorter hash for better performance\nfunction generateCacheKey(options: SearchOptions): string {\n  const keyData = {\n    q: options.query?.toLowerCase().trim(),\n    t: options.type,\n    s: options.sortBy,\n    f: options.filters,\n    l: options.limit,\n    o: options.offset\n  }\n  return JSON.stringify(keyData)\n}\n\n// Enhanced cache with hit tracking\nfunction getCachedResult(key: string): SearchResponse | null {\n  const cached = searchCache.get(key)\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    // Update hit count for cache analytics\n    cached.hitCount++\n    return cached.data\n  }\n  \n  // Remove expired entry\n  if (cached) {\n    searchCache.delete(key)\n  }\n  \n  return null\n}\n\n// Enhanced cache storage with size tracking\nfunction setCachedResult(key: string, data: SearchResponse): void {\n  const size = JSON.stringify(data).length\n  \n  searchCache.set(key, {\n    data,\n    timestamp: Date.now(),\n    hitCount: 0,\n    size\n  })\n  \n  cleanupCache()\n}\n\n// ==================== OPTIMIZED DATABASE QUERIES ====================\n\n// Calculate relevance score (moved up for better optimization)\nfunction calculateRelevanceScore(result: SearchResult, query: string): number {\n  if (!query) return 0\n  \n  const lowerQuery = query.toLowerCase()\n  let score = 0\n  \n  if (result.type === 'profile') {\n    const profile = result.data as SearchProfile\n    \n    // Exact username match gets highest score\n    if (profile.username?.toLowerCase() === lowerQuery) score += 100\n    else if (profile.username?.toLowerCase().includes(lowerQuery)) score += 50\n    \n    // Display name matches\n    if (profile.display_name?.toLowerCase() === lowerQuery) score += 80\n    else if (profile.display_name?.toLowerCase().includes(lowerQuery)) score += 40\n    \n    // Bio matches\n    if (profile.bio?.toLowerCase().includes(lowerQuery)) score += 20\n    \n    // Boost for profiles with avatars (more complete profiles)\n    if (profile.avatar_url) score += 5\n    \n  } else {\n    const campaign = result.data as SearchFundingPage\n    \n    // Title matches get high score\n    if (campaign.title.toLowerCase() === lowerQuery) score += 100\n    else if (campaign.title.toLowerCase().includes(lowerQuery)) score += 60\n    \n    // Description matches\n    if (campaign.description?.toLowerCase().includes(lowerQuery)) score += 30\n    \n    // Category matches\n    if (campaign.category?.toLowerCase().includes(lowerQuery)) score += 25\n    \n    // Tag matches\n    if (campaign.tags?.some(tag => tag.toLowerCase().includes(lowerQuery))) score += 20\n    \n    // Boost for active campaigns\n    if (campaign.is_active) score += 10\n    \n    // Boost for campaigns with funding\n    if (campaign.total_funding > 0) score += 5\n    \n    // Boost for campaigns with images\n    if (campaign.featured_image_url) score += 3\n  }\n  \n  return score\n}\n\n// Optimized profile search with better indexing usage\nasync function searchProfiles(\n  query?: string, \n  limit: number = 20, \n  offset: number = 0\n): Promise<SearchProfile[]> {\n  // Start with minimal columns for better performance\n  let profileQuery = supabase\n    .from('profiles')\n    .select('id, username, display_name, bio, avatar_url, created_at')\n  \n  if (query) {\n    // OPTIMIZATION: Use tsvector for full-text search when available\n    // For now, optimize ILIKE queries with proper ordering\n    const sanitizedQuery = query.replace(/[%_]/g, '\\\\$&') // Escape SQL wildcards\n    profileQuery = profileQuery.or(\n      `username.ilike.%${sanitizedQuery}%,display_name.ilike.%${sanitizedQuery}%,bio.ilike.%${sanitizedQuery}%`\n    )\n  }\n  \n  // OPTIMIZATION: Use created_at index for better performance\n  const { data: profiles, error } = await profileQuery\n    .order('created_at', { ascending: false })\n    .range(offset, offset + limit - 1)\n  \n  if (error) throw error\n  return profiles || []\n}\n\n// Optimized campaign search with better query structure\nasync function searchFundingPages(\n  query?: string,\n  filters?: SearchFilters,\n  limit: number = 20,\n  offset: number = 0\n): Promise<SearchFundingPage[]> {\n  // OPTIMIZATION: Only select necessary columns to reduce payload\n  let campaignQuery = supabase\n    .from('funding_pages')\n    .select(`\n      id, user_id, title, description, category, tags, goal_amount, \n      total_funding, contributor_count, is_active, is_public, \n      featured_image_url, created_at, slug,\n      profiles!inner(username, display_name, avatar_url)\n    `)\n    .eq('is_public', true) // OPTIMIZATION: This should use an index\n  \n  if (query) {\n    const sanitizedQuery = query.replace(/[%_]/g, '\\\\$&')\n    campaignQuery = campaignQuery.or(\n      `title.ilike.%${sanitizedQuery}%,description.ilike.%${sanitizedQuery}%,category.ilike.%${sanitizedQuery}%`\n    )\n  }\n  \n  // OPTIMIZATION: Apply most selective filters first\n  if (filters) {\n    // Most selective filters first for better query performance\n    if (filters.isActive !== undefined) {\n      campaignQuery = campaignQuery.eq('is_active', filters.isActive)\n    }\n    \n    if (filters.categories && filters.categories.length > 0) {\n      campaignQuery = campaignQuery.in('category', filters.categories)\n    }\n    \n    if (filters.hasGoal) {\n      campaignQuery = campaignQuery.not('goal_amount', 'is', null)\n    }\n    \n    if (filters.minFunding !== undefined) {\n      campaignQuery = campaignQuery.gte('total_funding', filters.minFunding)\n    }\n    \n    if (filters.maxFunding !== undefined) {\n      campaignQuery = campaignQuery.lte('total_funding', filters.maxFunding)\n    }\n    \n    if (filters.dateRange) {\n      campaignQuery = campaignQuery\n        .gte('created_at', filters.dateRange.start)\n        .lte('created_at', filters.dateRange.end)\n    }\n  }\n  \n  // OPTIMIZATION: Use index-friendly ordering\n  const { data: rawCampaigns, error } = await campaignQuery\n    .order('created_at', { ascending: false })\n    .range(offset, offset + limit - 1)\n  \n  if (error) throw error\n  \n  // OPTIMIZATION: Minimize data transformation overhead\n  const campaigns: SearchFundingPage[] = (rawCampaigns as RawSearchFundingPage[] || []).map(campaign => ({\n    ...campaign,\n    profiles: campaign.profiles?.[0] || undefined\n  }))\n  \n  return campaigns\n}\n\n// OPTIMIZATION: Cached facets with smarter update strategy\nlet facetsCache: { data: SearchResponse['facets']; timestamp: number } | null = null\nconst FACETS_CACHE_DURATION = 10 * 60 * 1000 // 10 minutes for facets\n\nasync function getSearchFacets(): Promise<SearchResponse['facets']> {\n  // Return cached facets if available\n  if (facetsCache && Date.now() - facetsCache.timestamp < FACETS_CACHE_DURATION) {\n    return facetsCache.data\n  }\n  \n  try {\n    // OPTIMIZATION: Use Promise.all for parallel queries\n    const [categoryData, profilesResult, campaignsResult] = await Promise.all([\n      // Only get categories for active public campaigns\n      supabase\n      .from('funding_pages')\n      .select('category')\n      .eq('is_public', true)\n        .eq('is_active', true) // OPTIMIZATION: More selective filter\n        .not('category', 'is', null),\n      \n      // Use count queries with head:true for better performance\n      supabase.from('profiles').select('id', { count: 'exact', head: true }),\n      supabase.from('funding_pages').select('id', { count: 'exact', head: true }).eq('is_public', true)\n    ])\n    \n    if (categoryData.error) throw categoryData.error\n    \n    // OPTIMIZATION: Use Map for O(1) lookups instead of repeated array operations\n    const categoryMap = new Map<string, number>()\n    categoryData.data?.forEach(item => {\n      if (item.category) {\n        categoryMap.set(item.category, (categoryMap.get(item.category) || 0) + 1)\n      }\n    })\n    \n    const categories = Array.from(categoryMap.entries())\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count)\n    \n    const facets = {\n      categories,\n      totalProfiles: profilesResult.count || 0,\n      totalCampaigns: campaignsResult.count || 0\n    }\n    \n    // Cache the facets\n    facetsCache = {\n      data: facets,\n      timestamp: Date.now()\n    }\n    \n    return facets\n  } catch (error) {\n    logger.error('Error getting search facets', error, 'Search')\n    return {\n      categories: [],\n      totalProfiles: 0,\n      totalCampaigns: 0\n    }\n  }\n}\n\n// Sort results (optimized for performance)\nfunction sortResults(results: SearchResult[], sortBy: SortOption, query?: string): SearchResult[] {\n  // OPTIMIZATION: Avoid array copying when possible\n  if (results.length <= 1) return results\n  \n  return [...results].sort((a, b) => {\n    switch (sortBy) {\n      case 'relevance':\n        if (query) {\n          const scoreA = a.relevanceScore ?? calculateRelevanceScore(a, query)\n          const scoreB = b.relevanceScore ?? calculateRelevanceScore(b, query)\n          if (scoreA !== scoreB) return scoreB - scoreA\n        }\n        // Fall back to recent for same relevance scores\n        return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime()\n        \n      case 'recent':\n        return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime()\n        \n      case 'popular':\n        if (a.type === 'campaign' && b.type === 'campaign') {\n          const campaignA = a.data as SearchFundingPage\n          const campaignB = b.data as SearchFundingPage\n          return campaignB.contributor_count - campaignA.contributor_count\n        }\n        // Profiles don't have popularity metric, fall back to recent\n        return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime()\n        \n      case 'funding':\n        if (a.type === 'campaign' && b.type === 'campaign') {\n          const campaignA = a.data as SearchFundingPage\n          const campaignB = b.data as SearchFundingPage\n          return campaignB.total_funding - campaignA.total_funding\n        }\n        return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime()\n        \n      default:\n        return 0\n    }\n  })\n}\n\n// OPTIMIZATION: Main search function with improved performance\nexport async function search(options: SearchOptions): Promise<SearchResponse> {\n  const {\n    query,\n    type,\n    sortBy,\n    filters,\n    limit = 20,\n    offset = 0\n  } = options\n  \n  // Check cache first with optimized cache key\n  const cacheKey = generateCacheKey(options)\n  const cachedResult = getCachedResult(cacheKey)\n  if (cachedResult) {\n    return cachedResult\n  }\n  \n  try {\n    const results: SearchResult[] = []\n    let totalCount = 0\n    \n    // OPTIMIZATION: Use Promise.all for parallel searches when type is 'all'\n    if (type === 'all') {\n      const [profiles, campaigns] = await Promise.all([\n        searchProfiles(query, limit, offset).catch(error => {\n          logger.warn('Error searching profiles', error, 'Search')\n          return []\n        }),\n        searchFundingPages(query, filters, limit, offset).catch(error => {\n          logger.warn('Error searching campaigns', error, 'Search')\n          return []\n        })\n      ])\n      \n      // Process profiles\n      profiles.forEach(profile => {\n        const result: SearchResult = { type: 'profile', data: profile }\n        if (query) {\n          result.relevanceScore = calculateRelevanceScore(result, query)\n        }\n        results.push(result)\n      })\n      \n      // Process campaigns\n      campaigns.forEach(campaign => {\n        const result: SearchResult = { type: 'campaign', data: campaign }\n        if (query) {\n          result.relevanceScore = calculateRelevanceScore(result, query)\n        }\n        results.push(result)\n      })\n    } else {\n      // Single type searches\n      if (type === 'profiles') {\n      try {\n        const profiles = await searchProfiles(query, limit, offset)\n        profiles.forEach(profile => {\n          const result: SearchResult = { type: 'profile', data: profile }\n          if (query) {\n            result.relevanceScore = calculateRelevanceScore(result, query)\n          }\n          results.push(result)\n        })\n      } catch (profileError) {\n        logger.warn('Error searching profiles', profileError, 'Search')\n        }\n    }\n    \n      if (type === 'campaigns') {\n      try {\n        const campaigns = await searchFundingPages(query, filters, limit, offset)\n        campaigns.forEach(campaign => {\n          const result: SearchResult = { type: 'campaign', data: campaign }\n          if (query) {\n            result.relevanceScore = calculateRelevanceScore(result, query)\n          }\n          results.push(result)\n        })\n      } catch (campaignError) {\n        logger.warn('Error searching campaigns', campaignError, 'Search')\n        }\n      }\n    }\n    \n    // Sort results\n    const sortedResults = sortResults(results, sortBy, query)\n    \n    // Apply pagination after sorting (for mixed results)\n    const paginatedResults = sortedResults.slice(offset, offset + limit)\n    totalCount = sortedResults.length\n    \n    // Get facets only if needed (not for every search)\n    let facets: SearchResponse['facets'] | undefined\n    if (type === 'all' || type === 'campaigns') {\n    try {\n      facets = await getSearchFacets()\n      } catch (facetsError) {\n        logger.warn('Error getting facets', facetsError, 'Search')\n      }\n    }\n    \n    const response: SearchResponse = {\n      results: paginatedResults,\n      totalCount,\n      hasMore: totalCount > offset + limit,\n      facets\n    }\n    \n    // Cache the result\n    setCachedResult(cacheKey, response)\n    \n    return response\n  } catch (error) {\n    logger.error('Search error', error, 'Search')\n    \n    // Return empty results on error\n    const errorResponse: SearchResponse = {\n      results: [],\n      totalCount: 0,\n      hasMore: false\n    }\n    \n    return errorResponse\n  }\n}\n\n// ==================== REMAINING FUNCTIONS (OPTIMIZED) ====================\n\n// Optimized trending function with better performance\nexport async function getTrending(): Promise<SearchResponse> {\n  try {\n    const results: SearchResult[] = []\n    \n    // OPTIMIZATION: Use Promise.all for parallel queries\n    const [campaignsData, profilesData] = await Promise.all([\n    // Get popular campaigns (by contributor count)\n      supabase\n      .from('funding_pages')\n      .select(`\n        id, user_id, title, description, category, tags, goal_amount, \n        total_funding, contributor_count, is_active, is_public, \n        featured_image_url, created_at, slug,\n        profiles!inner(username, display_name, avatar_url)\n      `)\n      .eq('is_public', true)\n      .eq('is_active', true)\n      .order('contributor_count', { ascending: false })\n        .limit(10),\n      \n      // Get recent profiles\n      supabase\n        .from('profiles')\n        .select('id, username, display_name, bio, avatar_url, created_at')\n        .order('created_at', { ascending: false })\n      .limit(10)\n    ])\n    \n    // Process campaigns\n    if (!campaignsData.error && campaignsData.data) {\n      const popularCampaigns: SearchFundingPage[] = (campaignsData.data as RawSearchFundingPage[]).map(campaign => ({\n        ...campaign,\n        profiles: campaign.profiles?.[0] || undefined\n      }))\n      \n      popularCampaigns.forEach(campaign => {\n        results.push({ type: 'campaign', data: campaign })\n      })\n    } else if (campaignsData.error) {\n      logger.warn('Error fetching campaigns for trending', { error: campaignsData.error.message }, 'Search')\n    }\n    \n    // Process profiles\n    if (!profilesData.error && profilesData.data) {\n      profilesData.data.forEach(profile => {\n        results.push({ type: 'profile', data: profile })\n      })\n    } else if (profilesData.error) {\n      logger.warn('Error fetching profiles for trending', { error: profilesData.error.message }, 'Search')\n    }\n    \n    return {\n      results,\n      totalCount: results.length,\n      hasMore: false // Trending is always a fixed set\n    }\n  } catch (error) {\n    logger.error('Error getting trending content', error, 'Search')\n    return {\n      results: [],\n      totalCount: 0,\n      hasMore: false\n    }\n  }\n}\n\n// Clear cache with cleanup\nexport function clearSearchCache(): void {\n  searchCache.clear()\n  facetsCache = null\n}\n\n// Optimized search suggestions\nexport async function getSearchSuggestions(query: string, limit: number = 5): Promise<string[]> {\n  if (!query || query.length < 2) return []\n  \n  try {\n    const sanitizedQuery = query.replace(/[%_]/g, '\\\\$&')\n    \n    // OPTIMIZATION: Use Promise.all for parallel suggestion queries\n    const [profileSuggestions, campaignSuggestions] = await Promise.all([\n      supabase\n      .from('profiles')\n      .select('username, display_name')\n        .or(`username.ilike.%${sanitizedQuery}%,display_name.ilike.%${sanitizedQuery}%`)\n        .not('username', 'is', null)\n        .limit(limit),\n      \n      supabase\n      .from('funding_pages')\n      .select('title, category')\n        .or(`title.ilike.%${sanitizedQuery}%,category.ilike.%${sanitizedQuery}%`)\n      .eq('is_public', true)\n      .limit(limit)\n    ])\n    \n    const suggestions: Set<string> = new Set()\n    \n    // Add profile suggestions\n    if (!profileSuggestions.error && profileSuggestions.data) {\n      profileSuggestions.data.forEach(profile => {\n        if (profile.username) suggestions.add(profile.username)\n        if (profile.display_name) suggestions.add(profile.display_name)\n      })\n    }\n    \n    // Add campaign suggestions\n    if (!campaignSuggestions.error && campaignSuggestions.data) {\n      campaignSuggestions.data.forEach(campaign => {\n        if (campaign.title) suggestions.add(campaign.title)\n        if (campaign.category) suggestions.add(campaign.category)\n      })\n    }\n    \n    return Array.from(suggestions).slice(0, limit)\n  } catch (error) {\n    logger.error('Error getting search suggestions', error, 'Search')\n    return []\n  }\n} "],"version":3}