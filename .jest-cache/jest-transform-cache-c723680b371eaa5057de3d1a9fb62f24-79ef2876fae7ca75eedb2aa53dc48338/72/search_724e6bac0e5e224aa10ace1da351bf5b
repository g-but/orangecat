64590cd4f9758ebd03764e1161c7809a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = search;
exports.getTrending = getTrending;
exports.clearSearchCache = clearSearchCache;
exports.getSearchSuggestions = getSearchSuggestions;
const client_1 = __importDefault(require("@/services/supabase/client"));
const logger_1 = require("@/utils/logger");
const searchCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
const MAX_CACHE_SIZE = 100; // Maximum number of cached entries
const MAX_CACHE_MEMORY = 10 * 1024 * 1024; // 10MB max cache size
// Cache cleanup for memory management
function cleanupCache() {
    if (searchCache.size <= MAX_CACHE_SIZE)
        return;
    // Remove oldest entries
    const entries = Array.from(searchCache.entries())
        .sort((a, b) => a[1].timestamp - b[1].timestamp);
    // Remove oldest 20% of entries
    const toRemove = Math.floor(entries.length * 0.2);
    for (let i = 0; i < toRemove; i++) {
        searchCache.delete(entries[i][0]);
    }
}
// Generate optimized cache key with shorter hash for better performance
function generateCacheKey(options) {
    var _a;
    const keyData = {
        q: (_a = options.query) === null || _a === void 0 ? void 0 : _a.toLowerCase().trim(),
        t: options.type,
        s: options.sortBy,
        f: options.filters,
        l: options.limit,
        o: options.offset
    };
    return JSON.stringify(keyData);
}
// Enhanced cache with hit tracking
function getCachedResult(key) {
    const cached = searchCache.get(key);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
        // Update hit count for cache analytics
        cached.hitCount++;
        return cached.data;
    }
    // Remove expired entry
    if (cached) {
        searchCache.delete(key);
    }
    return null;
}
// Enhanced cache storage with size tracking
function setCachedResult(key, data) {
    const size = JSON.stringify(data).length;
    searchCache.set(key, {
        data,
        timestamp: Date.now(),
        hitCount: 0,
        size
    });
    cleanupCache();
}
// ==================== OPTIMIZED DATABASE QUERIES ====================
// Calculate relevance score (moved up for better optimization)
function calculateRelevanceScore(result, query) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!query)
        return 0;
    const lowerQuery = query.toLowerCase();
    let score = 0;
    if (result.type === 'profile') {
        const profile = result.data;
        // Exact username match gets highest score
        if (((_a = profile.username) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === lowerQuery)
            score += 100;
        else if ((_b = profile.username) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(lowerQuery))
            score += 50;
        // Display name matches
        if (((_c = profile.display_name) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === lowerQuery)
            score += 80;
        else if ((_d = profile.display_name) === null || _d === void 0 ? void 0 : _d.toLowerCase().includes(lowerQuery))
            score += 40;
        // Bio matches
        if ((_e = profile.bio) === null || _e === void 0 ? void 0 : _e.toLowerCase().includes(lowerQuery))
            score += 20;
        // Boost for profiles with avatars (more complete profiles)
        if (profile.avatar_url)
            score += 5;
    }
    else {
        const campaign = result.data;
        // Title matches get high score
        if (campaign.title.toLowerCase() === lowerQuery)
            score += 100;
        else if (campaign.title.toLowerCase().includes(lowerQuery))
            score += 60;
        // Description matches
        if ((_f = campaign.description) === null || _f === void 0 ? void 0 : _f.toLowerCase().includes(lowerQuery))
            score += 30;
        // Category matches
        if ((_g = campaign.category) === null || _g === void 0 ? void 0 : _g.toLowerCase().includes(lowerQuery))
            score += 25;
        // Tag matches
        if ((_h = campaign.tags) === null || _h === void 0 ? void 0 : _h.some(tag => tag.toLowerCase().includes(lowerQuery)))
            score += 20;
        // Boost for active campaigns
        if (campaign.is_active)
            score += 10;
        // Boost for campaigns with funding
        if (campaign.total_funding > 0)
            score += 5;
        // Boost for campaigns with images
        if (campaign.featured_image_url)
            score += 3;
    }
    return score;
}
// Optimized profile search with better indexing usage
async function searchProfiles(query, limit = 20, offset = 0) {
    // Start with minimal columns for better performance
    let profileQuery = client_1.default
        .from('profiles')
        .select('id, username, display_name, bio, avatar_url, created_at');
    if (query) {
        // OPTIMIZATION: Use tsvector for full-text search when available
        // For now, optimize ILIKE queries with proper ordering
        const sanitizedQuery = query.replace(/[%_]/g, '\\$&'); // Escape SQL wildcards
        profileQuery = profileQuery.or(`username.ilike.%${sanitizedQuery}%,display_name.ilike.%${sanitizedQuery}%,bio.ilike.%${sanitizedQuery}%`);
    }
    // OPTIMIZATION: Use created_at index for better performance
    const { data: profiles, error } = await profileQuery
        .order('created_at', { ascending: false })
        .range(offset, offset + limit - 1);
    if (error)
        throw error;
    return profiles || [];
}
// Optimized campaign search with better query structure
async function searchFundingPages(query, filters, limit = 20, offset = 0) {
    // OPTIMIZATION: Only select necessary columns to reduce payload
    let campaignQuery = client_1.default
        .from('funding_pages')
        .select(`
      id, user_id, title, description, category, tags, goal_amount, 
      total_funding, contributor_count, is_active, is_public, 
      featured_image_url, created_at, slug,
      profiles!inner(username, display_name, avatar_url)
    `)
        .eq('is_public', true); // OPTIMIZATION: This should use an index
    if (query) {
        const sanitizedQuery = query.replace(/[%_]/g, '\\$&');
        campaignQuery = campaignQuery.or(`title.ilike.%${sanitizedQuery}%,description.ilike.%${sanitizedQuery}%,category.ilike.%${sanitizedQuery}%`);
    }
    // OPTIMIZATION: Apply most selective filters first
    if (filters) {
        // Most selective filters first for better query performance
        if (filters.isActive !== undefined) {
            campaignQuery = campaignQuery.eq('is_active', filters.isActive);
        }
        if (filters.categories && filters.categories.length > 0) {
            campaignQuery = campaignQuery.in('category', filters.categories);
        }
        if (filters.hasGoal) {
            campaignQuery = campaignQuery.not('goal_amount', 'is', null);
        }
        if (filters.minFunding !== undefined) {
            campaignQuery = campaignQuery.gte('total_funding', filters.minFunding);
        }
        if (filters.maxFunding !== undefined) {
            campaignQuery = campaignQuery.lte('total_funding', filters.maxFunding);
        }
        if (filters.dateRange) {
            campaignQuery = campaignQuery
                .gte('created_at', filters.dateRange.start)
                .lte('created_at', filters.dateRange.end);
        }
    }
    // OPTIMIZATION: Use index-friendly ordering
    const { data: rawCampaigns, error } = await campaignQuery
        .order('created_at', { ascending: false })
        .range(offset, offset + limit - 1);
    if (error)
        throw error;
    // OPTIMIZATION: Minimize data transformation overhead
    const campaigns = (rawCampaigns || []).map(campaign => {
        var _a;
        return (Object.assign(Object.assign({}, campaign), { profiles: ((_a = campaign.profiles) === null || _a === void 0 ? void 0 : _a[0]) || undefined }));
    });
    return campaigns;
}
// OPTIMIZATION: Cached facets with smarter update strategy
let facetsCache = null;
const FACETS_CACHE_DURATION = 10 * 60 * 1000; // 10 minutes for facets
async function getSearchFacets() {
    var _a;
    // Return cached facets if available
    if (facetsCache && Date.now() - facetsCache.timestamp < FACETS_CACHE_DURATION) {
        return facetsCache.data;
    }
    try {
        // OPTIMIZATION: Use Promise.all for parallel queries
        const [categoryData, profilesResult, campaignsResult] = await Promise.all([
            // Only get categories for active public campaigns
            client_1.default
                .from('funding_pages')
                .select('category')
                .eq('is_public', true)
                .eq('is_active', true) // OPTIMIZATION: More selective filter
                .not('category', 'is', null),
            // Use count queries with head:true for better performance
            client_1.default.from('profiles').select('id', { count: 'exact', head: true }),
            client_1.default.from('funding_pages').select('id', { count: 'exact', head: true }).eq('is_public', true)
        ]);
        if (categoryData.error)
            throw categoryData.error;
        // OPTIMIZATION: Use Map for O(1) lookups instead of repeated array operations
        const categoryMap = new Map();
        (_a = categoryData.data) === null || _a === void 0 ? void 0 : _a.forEach(item => {
            if (item.category) {
                categoryMap.set(item.category, (categoryMap.get(item.category) || 0) + 1);
            }
        });
        const categories = Array.from(categoryMap.entries())
            .map(([name, count]) => ({ name, count }))
            .sort((a, b) => b.count - a.count);
        const facets = {
            categories,
            totalProfiles: profilesResult.count || 0,
            totalCampaigns: campaignsResult.count || 0
        };
        // Cache the facets
        facetsCache = {
            data: facets,
            timestamp: Date.now()
        };
        return facets;
    }
    catch (error) {
        logger_1.logger.error('Error getting search facets', error, 'Search');
        return {
            categories: [],
            totalProfiles: 0,
            totalCampaigns: 0
        };
    }
}
// Sort results (optimized for performance)
function sortResults(results, sortBy, query) {
    // OPTIMIZATION: Avoid array copying when possible
    if (results.length <= 1)
        return results;
    return [...results].sort((a, b) => {
        var _a, _b;
        switch (sortBy) {
            case 'relevance':
                if (query) {
                    const scoreA = (_a = a.relevanceScore) !== null && _a !== void 0 ? _a : calculateRelevanceScore(a, query);
                    const scoreB = (_b = b.relevanceScore) !== null && _b !== void 0 ? _b : calculateRelevanceScore(b, query);
                    if (scoreA !== scoreB)
                        return scoreB - scoreA;
                }
                // Fall back to recent for same relevance scores
                return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime();
            case 'recent':
                return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime();
            case 'popular':
                if (a.type === 'campaign' && b.type === 'campaign') {
                    const campaignA = a.data;
                    const campaignB = b.data;
                    return campaignB.contributor_count - campaignA.contributor_count;
                }
                // Profiles don't have popularity metric, fall back to recent
                return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime();
            case 'funding':
                if (a.type === 'campaign' && b.type === 'campaign') {
                    const campaignA = a.data;
                    const campaignB = b.data;
                    return campaignB.total_funding - campaignA.total_funding;
                }
                return new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime();
            default:
                return 0;
        }
    });
}
// OPTIMIZATION: Main search function with improved performance
async function search(options) {
    const { query, type, sortBy, filters, limit = 20, offset = 0 } = options;
    // Check cache first with optimized cache key
    const cacheKey = generateCacheKey(options);
    const cachedResult = getCachedResult(cacheKey);
    if (cachedResult) {
        return cachedResult;
    }
    try {
        const results = [];
        let totalCount = 0;
        // OPTIMIZATION: Use Promise.all for parallel searches when type is 'all'
        if (type === 'all') {
            const [profiles, campaigns] = await Promise.all([
                searchProfiles(query, limit, offset).catch(error => {
                    logger_1.logger.warn('Error searching profiles', error, 'Search');
                    return [];
                }),
                searchFundingPages(query, filters, limit, offset).catch(error => {
                    logger_1.logger.warn('Error searching campaigns', error, 'Search');
                    return [];
                })
            ]);
            // Process profiles
            profiles.forEach(profile => {
                const result = { type: 'profile', data: profile };
                if (query) {
                    result.relevanceScore = calculateRelevanceScore(result, query);
                }
                results.push(result);
            });
            // Process campaigns
            campaigns.forEach(campaign => {
                const result = { type: 'campaign', data: campaign };
                if (query) {
                    result.relevanceScore = calculateRelevanceScore(result, query);
                }
                results.push(result);
            });
        }
        else {
            // Single type searches
            if (type === 'profiles') {
                try {
                    const profiles = await searchProfiles(query, limit, offset);
                    profiles.forEach(profile => {
                        const result = { type: 'profile', data: profile };
                        if (query) {
                            result.relevanceScore = calculateRelevanceScore(result, query);
                        }
                        results.push(result);
                    });
                }
                catch (profileError) {
                    logger_1.logger.warn('Error searching profiles', profileError, 'Search');
                }
            }
            if (type === 'campaigns') {
                try {
                    const campaigns = await searchFundingPages(query, filters, limit, offset);
                    campaigns.forEach(campaign => {
                        const result = { type: 'campaign', data: campaign };
                        if (query) {
                            result.relevanceScore = calculateRelevanceScore(result, query);
                        }
                        results.push(result);
                    });
                }
                catch (campaignError) {
                    logger_1.logger.warn('Error searching campaigns', campaignError, 'Search');
                }
            }
        }
        // Sort results
        const sortedResults = sortResults(results, sortBy, query);
        // Apply pagination after sorting (for mixed results)
        const paginatedResults = sortedResults.slice(offset, offset + limit);
        totalCount = sortedResults.length;
        // Get facets only if needed (not for every search)
        let facets;
        if (type === 'all' || type === 'campaigns') {
            try {
                facets = await getSearchFacets();
            }
            catch (facetsError) {
                logger_1.logger.warn('Error getting facets', facetsError, 'Search');
            }
        }
        const response = {
            results: paginatedResults,
            totalCount,
            hasMore: totalCount > offset + limit,
            facets
        };
        // Cache the result
        setCachedResult(cacheKey, response);
        return response;
    }
    catch (error) {
        logger_1.logger.error('Search error', error, 'Search');
        // Return empty results on error
        const errorResponse = {
            results: [],
            totalCount: 0,
            hasMore: false
        };
        return errorResponse;
    }
}
// ==================== REMAINING FUNCTIONS (OPTIMIZED) ====================
// Optimized trending function with better performance
async function getTrending() {
    try {
        const results = [];
        // OPTIMIZATION: Use Promise.all for parallel queries
        const [campaignsData, profilesData] = await Promise.all([
            // Get popular campaigns (by contributor count)
            client_1.default
                .from('funding_pages')
                .select(`
        id, user_id, title, description, category, tags, goal_amount, 
        total_funding, contributor_count, is_active, is_public, 
        featured_image_url, created_at, slug,
        profiles!inner(username, display_name, avatar_url)
      `)
                .eq('is_public', true)
                .eq('is_active', true)
                .order('contributor_count', { ascending: false })
                .limit(10),
            // Get recent profiles
            client_1.default
                .from('profiles')
                .select('id, username, display_name, bio, avatar_url, created_at')
                .order('created_at', { ascending: false })
                .limit(10)
        ]);
        // Process campaigns
        if (!campaignsData.error && campaignsData.data) {
            const popularCampaigns = campaignsData.data.map(campaign => {
                var _a;
                return (Object.assign(Object.assign({}, campaign), { profiles: ((_a = campaign.profiles) === null || _a === void 0 ? void 0 : _a[0]) || undefined }));
            });
            popularCampaigns.forEach(campaign => {
                results.push({ type: 'campaign', data: campaign });
            });
        }
        else if (campaignsData.error) {
            logger_1.logger.warn('Error fetching campaigns for trending', { error: campaignsData.error.message }, 'Search');
        }
        // Process profiles
        if (!profilesData.error && profilesData.data) {
            profilesData.data.forEach(profile => {
                results.push({ type: 'profile', data: profile });
            });
        }
        else if (profilesData.error) {
            logger_1.logger.warn('Error fetching profiles for trending', { error: profilesData.error.message }, 'Search');
        }
        return {
            results,
            totalCount: results.length,
            hasMore: false // Trending is always a fixed set
        };
    }
    catch (error) {
        logger_1.logger.error('Error getting trending content', error, 'Search');
        return {
            results: [],
            totalCount: 0,
            hasMore: false
        };
    }
}
// Clear cache with cleanup
function clearSearchCache() {
    searchCache.clear();
    facetsCache = null;
}
// Optimized search suggestions
async function getSearchSuggestions(query, limit = 5) {
    if (!query || query.length < 2)
        return [];
    try {
        const sanitizedQuery = query.replace(/[%_]/g, '\\$&');
        // OPTIMIZATION: Use Promise.all for parallel suggestion queries
        const [profileSuggestions, campaignSuggestions] = await Promise.all([
            client_1.default
                .from('profiles')
                .select('username, display_name')
                .or(`username.ilike.%${sanitizedQuery}%,display_name.ilike.%${sanitizedQuery}%`)
                .not('username', 'is', null)
                .limit(limit),
            client_1.default
                .from('funding_pages')
                .select('title, category')
                .or(`title.ilike.%${sanitizedQuery}%,category.ilike.%${sanitizedQuery}%`)
                .eq('is_public', true)
                .limit(limit)
        ]);
        const suggestions = new Set();
        // Add profile suggestions
        if (!profileSuggestions.error && profileSuggestions.data) {
            profileSuggestions.data.forEach(profile => {
                if (profile.username)
                    suggestions.add(profile.username);
                if (profile.display_name)
                    suggestions.add(profile.display_name);
            });
        }
        // Add campaign suggestions
        if (!campaignSuggestions.error && campaignSuggestions.data) {
            campaignSuggestions.data.forEach(campaign => {
                if (campaign.title)
                    suggestions.add(campaign.title);
                if (campaign.category)
                    suggestions.add(campaign.category);
            });
        }
        return Array.from(suggestions).slice(0, limit);
    }
    catch (error) {
        logger_1.logger.error('Error getting search suggestions', error, 'Search');
        return [];
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,