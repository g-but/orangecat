{"version":3,"names":["cov_12ez6h4cyt","actualCoverage","s","exports","normalizeUrl","validateUrl","isValidUrl","verification_1","require","BECH32_FORMAT_REGEX","BASE58_FORMAT_REGEX","LIGHTNING_FORMAT_REGEX","isValidBitcoinAddress","address","f","b","valid","error","startsWith","burnAddresses","includes","formatRegex","test","endsWith","length","isValidLightningAddress","domain","split","forbiddenDomains","some","forbidden","suspiciousDomains","suspicious","toLowerCase","isValidUsername","username","usernameRegex","protectionCheck","isProtectedUsername","isProtected","reason","suggestedAlternatives","reservedUsernames","substitutionMap","substitutionReversed","num","letter","Object","entries","replace","RegExp","celebrityCheck","isValidBio","bio","dangerousPatterns","pattern","btcAddressPattern","foundAddresses","match","verificationSpoof","authorityTerms","bioLower","term","impersonationCheck","validateBioForImpersonation","celebrityImpersonationPatterns","sanitizeBioForDisplay","isValidBitcoinAddressLegacy","result","isValidLightningAddressLegacy","url","trim","normalized","isValid","urlObj","URL","protocol","hostname"],"sources":["/home/g/dev/orangecat/src/utils/validation.ts"],"sourcesContent":["import { isProtectedUsername, validateBioForImpersonation } from './verification';\n\n// Pre-compiled regex patterns for performance (avoid creating new regex objects on each call)\nconst BECH32_FORMAT_REGEX = /^bc1[02-9ac-hj-np-z]+$/;\nconst BASE58_FORMAT_REGEX = /^[13][1-9A-HJ-NP-Za-km-z]+$/;\nconst LIGHTNING_FORMAT_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n// Enhanced Bitcoin address validation with comprehensive security\nexport const isValidBitcoinAddress = (address: string): { valid: boolean; error?: string } => {\n  if (!address) {\n    return { valid: false, error: 'Bitcoin address required' };\n  }\n\n  // 1. Prevent testnet addresses on mainnet (check before format validation)\n  if (address.startsWith('tb1') || address.startsWith('bcrt1')) {\n    return { valid: false, error: 'Testnet addresses not allowed' };\n  }\n\n  // 2. Check for known burn addresses FIRST (before format validation)\n  const burnAddresses = [\n    '1111111111111111111114oLvT2',\n    '1BitcoinEaterAddressDontSendf59kuE',\n    'bc1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq9424r'\n  ];\n  if (burnAddresses.includes(address)) {\n    return { valid: false, error: 'Burn addresses not allowed' };\n  }\n\n  // 3. Basic format validation with proper character sets\n  let formatRegex: RegExp;\n  \n  if (address.startsWith('bc1')) {\n    // Bech32 addresses: lowercase only, proper bech32 character set  \n    // Valid bech32 chars: 0-9 and a-z except 1, b, i, o \n    formatRegex = BECH32_FORMAT_REGEX;\n  } else if (address.startsWith('1') || address.startsWith('3')) {\n    // Base58 addresses: exclude 0, O, I, l to prevent confusion\n    formatRegex = BASE58_FORMAT_REGEX;\n  } else {\n    return { valid: false, error: 'Invalid Bitcoin address format' };\n  }\n  \n  if (!formatRegex.test(address)) {\n    return { valid: false, error: 'Invalid Bitcoin address format' };\n  }\n\n  // 3.5. Additional validation for specific invalid patterns\n  if (address.startsWith('bc1')) {\n    // Reject addresses with invalid bech32 patterns\n    // But allow Taproot addresses (bc1p) to have different rules\n    if (address.startsWith('bc1q') && address.endsWith('0')) {\n      return { valid: false, error: 'Invalid Bitcoin address format' };\n    }\n    if (address.includes('0I') || address.includes('Ol')) {\n      return { valid: false, error: 'Invalid Bitcoin address format' };\n    }\n  } else {\n    // Reject Base58 addresses with confusing character combinations\n    if (address.includes('0O') || address.includes('Il') || address.includes('I0')) {\n      return { valid: false, error: 'Invalid Bitcoin address format' };\n    }\n  }\n\n  // 4. Length validation by address type\n  if (address.startsWith('bc1')) {\n    // Bech32 (SegWit) addresses - more strict validation\n    // P2WPKH: exactly 42 chars, P2WSH: exactly 62 chars, Taproot: exactly 62 chars\n    // Anything else in between is likely invalid\n    if (address.length < 42 || address.length > 62) {\n      return { valid: false, error: 'Invalid bech32 address length' };\n    }\n    // Additional check: reject addresses that are not standard lengths\n    if (address.length !== 42 && address.length !== 62) {\n      return { valid: false, error: 'Invalid bech32 address length' };\n    }\n  } else if (address.startsWith('3')) {\n    // P2SH addresses (SegWit wrapped)\n    if (address.length !== 34) {\n      return { valid: false, error: 'Invalid P2SH address length' };\n    }\n  } else if (address.startsWith('1')) {\n    // Legacy P2PKH addresses\n    if (address.length !== 34) {\n      return { valid: false, error: 'Invalid P2PKH address length' };\n    }\n  }\n\n  return { valid: true };\n};\n\n// Enhanced Lightning address validation with security checks\nexport const isValidLightningAddress = (address: string): { valid: boolean; error?: string } => {\n  if (!address) {\n    return { valid: false, error: 'Lightning address required' };\n  }\n\n  // 1. Prevent local/private addresses (check before format validation)\n  const domain = address.split('@')[1];\n  if (domain) {\n    const forbiddenDomains = ['localhost', '127.0.0.1', '0.0.0.0', '10.', '192.168.', '172.'];\n    if (forbiddenDomains.some(forbidden => domain.includes(forbidden))) {\n      return { valid: false, error: 'Local addresses not allowed' };\n    }\n  }\n\n  // 2. Basic format validation\n  if (!LIGHTNING_FORMAT_REGEX.test(address)) {\n    return { valid: false, error: 'Invalid Lightning address format' };\n  }\n\n  // 3. Domain length validation\n  if (domain && domain.length > 253) {\n    return { valid: false, error: 'Domain name too long' };\n  }\n\n  // 4. Prevent obviously suspicious domains\n  const suspiciousDomains = ['tempmail', 'guerrillamail', '10minutemail', 'throwaway'];\n  if (domain && suspiciousDomains.some(suspicious => domain.toLowerCase().includes(suspicious))) {\n    return { valid: false, error: 'Temporary email domains not allowed' };\n  }\n\n  return { valid: true };\n};\n\n// Enhanced username validation with anti-impersonation protection\nexport const isValidUsername = (username: string): { valid: boolean; error?: string; suggestedAlternatives?: string[] } => {\n  if (!username) {\n    return { valid: false, error: 'Username required' };\n  }\n\n  // 1. Length validation\n  if (username.length < 3) {\n    return { valid: false, error: 'Username must be at least 3 characters long' };\n  }\n  if (username.length > 30) {\n    return { valid: false, error: 'Username must be 30 characters or less' };\n  }\n\n  // 2. Check for Unicode attacks and character substitutions FIRST\n  // Check for non-ASCII characters that could be lookalikes\n  if (!/^[\\x00-\\x7F]*$/.test(username)) {\n    return { valid: false, error: 'Cyrillic, Greek, and other non-ASCII characters not allowed' };\n  }\n\n  // 3. Character validation (after Unicode check)\n  const usernameRegex = /^[a-zA-Z0-9_-]+$/;\n  if (!usernameRegex.test(username)) {\n    return { valid: false, error: 'Username can only contain letters, numbers, hyphens, and underscores' };\n  }\n\n  // 4. Check for protected usernames using the verification system\n  const protectionCheck = isProtectedUsername(username);\n  if (protectionCheck.isProtected) {\n    return { \n      valid: false, \n      error: protectionCheck.reason || 'Username is protected',\n      suggestedAlternatives: protectionCheck.suggestedAlternatives\n    };\n  }\n\n  // 5. Reserved usernames (platform-specific)\n  const reservedUsernames = [\n    'admin', 'administrator', 'root', 'mod', 'moderator', 'support',\n    'help', 'api', 'www', 'mail', 'email', 'official', 'verified', \n    'staff', 'team', 'orangecat', 'orange-cat', 'orange_cat'\n  ];\n  \n  if (reservedUsernames.includes(username.toLowerCase())) {\n    return { valid: false, error: 'Username is reserved' };\n  }\n\n  // 6. Check for character substitution patterns that might be celebrity impersonation\n  // Common substitutions: 0->o, 3->e, 4->a, 1->i, 5->s, etc.\n  const substitutionMap: Record<string, string> = {\n    '0': 'o', '3': 'e', '4': 'a', '1': 'i', '5': 's', '6': 'g', '7': 't', '9': 'g'\n  };\n  \n  // Create a version with substitutions reversed to check against protected names\n  let substitutionReversed = username.toLowerCase();\n  for (const [num, letter] of Object.entries(substitutionMap)) {\n    substitutionReversed = substitutionReversed.replace(new RegExp(num, 'g'), letter);\n  }\n  \n  // If the substitution-reversed version is protected, block it\n  if (substitutionReversed !== username.toLowerCase()) {\n    const celebrityCheck = isProtectedUsername(substitutionReversed);\n    if (celebrityCheck.isProtected) {\n      return { \n        valid: false, \n        error: 'Username resembles protected celebrity name',\n        suggestedAlternatives: celebrityCheck.suggestedAlternatives\n      };\n    }\n  }\n\n  return { valid: true };\n};\n\n// Enhanced bio content validation and sanitization\nexport const isValidBio = (bio: string): { valid: boolean; error?: string } => {\n  if (!bio) {\n    return { valid: true }; // Bio is optional\n  }\n\n  // 1. Length limits\n  if (bio.length > 500) {\n    return { valid: false, error: 'Bio must be under 500 characters' };\n  }\n\n  // 2. HTML/Script injection prevention\n  const dangerousPatterns = [\n    /<script[^>]*>.*?<\\/script>/gi,\n    /javascript:/gi,\n    /on\\w+\\s*=/gi,  // onclick, onload, etc.\n    /<iframe/gi,\n    /<object/gi,\n    /<embed/gi,\n    /<link/gi,\n    /<meta/gi\n  ];\n\n  for (const pattern of dangerousPatterns) {\n    if (pattern.test(bio)) {\n      return { valid: false, error: 'Bio contains prohibited content' };\n    }\n  }\n\n  // 3. Prevent alternative Bitcoin address injection\n  const btcAddressPattern = /\\b(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}\\b/g;\n  const foundAddresses = bio.match(btcAddressPattern);\n  if (foundAddresses && foundAddresses.length > 0) {\n    return { valid: false, error: 'Bitcoin addresses not allowed in bio' };\n  }\n\n  // 4. Prevent verification badge spoofing (check before authority terms)\n  const verificationSpoof = /(verified|official|certified|authentic).*[✓✔☑]|[✓✔☑].*(verified|official|certified|authentic)/gi;\n  if (verificationSpoof.test(bio)) {\n    return { valid: false, error: 'Verification claims not allowed' };\n  }\n\n  // 5. Prevent authority impersonation\n  const authorityTerms = [\n    'official bitcoin', 'bitcoin foundation', 'bitcoin core',\n    'satoshi nakamoto', 'bitcoin developer', 'core developer', \n    'lightning labs', 'blockstream', 'bitcoin.org'\n  ];\n\n  const bioLower = bio.toLowerCase();\n  for (const term of authorityTerms) {\n    if (bioLower.includes(term)) {\n      return { valid: false, error: 'Authority claims not allowed in bio' };\n    }\n  }\n\n  // 6. Use verification system for additional impersonation checks\n  const impersonationCheck = validateBioForImpersonation(bio);\n  if (!impersonationCheck.valid) {\n    return impersonationCheck;\n  }\n\n  // 7. Additional celebrity impersonation detection\n  const celebrityImpersonationPatterns = [\n    /i am (elon|jack|satoshi|michael|andreas)/i,\n    /this is (elon|jack|satoshi|michael|andreas)/i,\n    /real (elon|jack|satoshi|michael|andreas)/i,\n    /actual (elon|jack|satoshi|michael|andreas)/i,\n    /genuine (elon|jack|satoshi|michael|andreas)/i,\n    /not fake.*i am/i\n  ];\n\n  for (const pattern of celebrityImpersonationPatterns) {\n    if (pattern.test(bio)) {\n      return { valid: false, error: 'Celebrity impersonation claims not allowed' };\n    }\n  }\n\n  return { valid: true };\n};\n\n// Client-side sanitization for bio display (additional security layer)\nexport const sanitizeBioForDisplay = (bio: string): string => {\n  if (!bio) return '';\n  \n  return bio\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n};\n\n// Legacy compatibility functions (maintain existing API)\nexport const isValidBitcoinAddressLegacy = (address: string): boolean => {\n  const result = isValidBitcoinAddress(address);\n  return result.valid;\n};\n\nexport const isValidLightningAddressLegacy = (address: string): boolean => {\n  const result = isValidLightningAddress(address);\n  return result.valid;\n};\n\n// URL validation utilities for seamless user experience\n\nexport function normalizeUrl(url: string): string {\n  if (!url.trim()) return ''\n  \n  let normalized = url.trim()\n  \n  // Remove any surrounding quotes or spaces\n  normalized = normalized.replace(/^[\"'\\s]+|[\"'\\s]+$/g, '')\n  \n  // If it doesn't start with a protocol, add https://\n  if (normalized && !normalized.match(/^https?:\\/\\//i)) {\n    normalized = `https://${normalized}`\n  }\n  \n  return normalized\n}\n\nexport function validateUrl(url: string): { isValid: boolean; normalized: string; error?: string } {\n  if (!url.trim()) {\n    return { isValid: true, normalized: '' } // Empty is valid (optional field)\n  }\n  \n  const normalized = normalizeUrl(url)\n  \n  try {\n    const urlObj = new URL(normalized)\n    \n    // Check if it's a valid HTTP/HTTPS URL\n    if (!['http:', 'https:'].includes(urlObj.protocol)) {\n      return {\n        isValid: false,\n        normalized,\n        error: 'URL must use http:// or https://'\n      }\n    }\n    \n    // Check if hostname exists\n    if (!urlObj.hostname || urlObj.hostname.length < 3) {\n      return {\n        isValid: false,\n        normalized,\n        error: 'Please enter a valid domain name'\n      }\n    }\n    \n    return { isValid: true, normalized }\n  } catch (error) {\n    return {\n      isValid: false,\n      normalized,\n      error: 'Please enter a valid URL'\n    }\n  }\n}\n\nexport function isValidUrl(url: string): boolean {\n  return validateUrl(url).isValid\n} "],"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","ignoreList":[]}