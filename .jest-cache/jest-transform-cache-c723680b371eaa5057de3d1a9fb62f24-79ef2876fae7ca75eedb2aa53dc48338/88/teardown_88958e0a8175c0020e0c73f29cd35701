f7cd47af30e0635c22c345cf16aef39c
"use strict";
/**
 * Global Test Teardown for OrangeCat
 * Cleanup after all tests have completed
 *
 * Created: 2025-09-24
 * Last Modified: 2025-09-24
 * Last Modified Summary: Global test teardown for comprehensive testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalTeardown;
/**
 * Global teardown function
 * This runs after all tests have completed
 */
async function globalTeardown() {
    console.log('üßπ Global test teardown starting...');
    try {
        // Clean up test databases
        if (process.env.TEST_DATABASE_URL) {
            console.log('Cleaning up test database...');
            // Add database cleanup logic here
        }
        // Clean up test files
        const fs = require('fs');
        const path = require('path');
        // Clean up temporary test files
        const testDirs = ['test-results', 'coverage', 'playwright-report'];
        testDirs.forEach(dir => {
            const dirPath = path.join(process.cwd(), dir);
            if (fs.existsSync(dirPath)) {
                // Keep reports for CI/CD but clean up temporary files
                console.log(`Keeping test results in: ${dir}`);
            }
        });
        // Clean up environment variables
        const testEnvVars = [
            'TEST_DATABASE_URL',
            'TEST_SUPABASE_URL',
            'TEST_SUPABASE_KEY',
            'MOCK_SERVER_PORT'
        ];
        testEnvVars.forEach(envVar => {
            if (process.env[envVar]) {
                console.log(`Cleaning up environment variable: ${envVar}`);
                delete process.env[envVar];
            }
        });
        console.log('‚úÖ Global test teardown completed successfully');
    }
    catch (error) {
        console.error('‚ùå Global test teardown failed:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3Rlc3RzL3RlYXJkb3duLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztHQU9HOztBQU1ILGlDQTRDQztBQWhERDs7O0dBR0c7QUFDWSxLQUFLLFVBQVUsY0FBYztJQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFFbkQsSUFBSSxDQUFDO1FBQ0gsMEJBQTBCO1FBQzFCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztZQUM1QyxrQ0FBa0M7UUFDcEMsQ0FBQztRQUVELHNCQUFzQjtRQUN0QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdCLGdDQUFnQztRQUNoQyxNQUFNLFFBQVEsR0FBRyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUNuRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUMzQixzREFBc0Q7Z0JBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDakQsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsaUNBQWlDO1FBQ2pDLE1BQU0sV0FBVyxHQUFHO1lBQ2xCLG1CQUFtQjtZQUNuQixtQkFBbUI7WUFDbkIsbUJBQW1CO1lBQ25CLGtCQUFrQjtTQUNuQixDQUFDO1FBRUYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDM0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsK0NBQStDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkQsTUFBTSxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9nL2Rldi9vcmFuZ2VjYXQvdGVzdHMvdGVhcmRvd24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHbG9iYWwgVGVzdCBUZWFyZG93biBmb3IgT3JhbmdlQ2F0XG4gKiBDbGVhbnVwIGFmdGVyIGFsbCB0ZXN0cyBoYXZlIGNvbXBsZXRlZFxuICpcbiAqIENyZWF0ZWQ6IDIwMjUtMDktMjRcbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDktMjRcbiAqIExhc3QgTW9kaWZpZWQgU3VtbWFyeTogR2xvYmFsIHRlc3QgdGVhcmRvd24gZm9yIGNvbXByZWhlbnNpdmUgdGVzdGluZ1xuICovXG5cbi8qKlxuICogR2xvYmFsIHRlYXJkb3duIGZ1bmN0aW9uXG4gKiBUaGlzIHJ1bnMgYWZ0ZXIgYWxsIHRlc3RzIGhhdmUgY29tcGxldGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGdsb2JhbFRlYXJkb3duKCkge1xuICBjb25zb2xlLmxvZygn8J+nuSBHbG9iYWwgdGVzdCB0ZWFyZG93biBzdGFydGluZy4uLicpO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2xlYW4gdXAgdGVzdCBkYXRhYmFzZXNcbiAgICBpZiAocHJvY2Vzcy5lbnYuVEVTVF9EQVRBQkFTRV9VUkwpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDbGVhbmluZyB1cCB0ZXN0IGRhdGFiYXNlLi4uJyk7XG4gICAgICAvLyBBZGQgZGF0YWJhc2UgY2xlYW51cCBsb2dpYyBoZXJlXG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgdGVzdCBmaWxlc1xuICAgIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICBjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4gICAgLy8gQ2xlYW4gdXAgdGVtcG9yYXJ5IHRlc3QgZmlsZXNcbiAgICBjb25zdCB0ZXN0RGlycyA9IFsndGVzdC1yZXN1bHRzJywgJ2NvdmVyYWdlJywgJ3BsYXl3cmlnaHQtcmVwb3J0J107XG4gICAgdGVzdERpcnMuZm9yRWFjaChkaXIgPT4ge1xuICAgICAgY29uc3QgZGlyUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBkaXIpO1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZGlyUGF0aCkpIHtcbiAgICAgICAgLy8gS2VlcCByZXBvcnRzIGZvciBDSS9DRCBidXQgY2xlYW4gdXAgdGVtcG9yYXJ5IGZpbGVzXG4gICAgICAgIGNvbnNvbGUubG9nKGBLZWVwaW5nIHRlc3QgcmVzdWx0cyBpbjogJHtkaXJ9YCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhbiB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICBjb25zdCB0ZXN0RW52VmFycyA9IFtcbiAgICAgICdURVNUX0RBVEFCQVNFX1VSTCcsXG4gICAgICAnVEVTVF9TVVBBQkFTRV9VUkwnLFxuICAgICAgJ1RFU1RfU1VQQUJBU0VfS0VZJyxcbiAgICAgICdNT0NLX1NFUlZFUl9QT1JUJ1xuICAgIF07XG5cbiAgICB0ZXN0RW52VmFycy5mb3JFYWNoKGVudlZhciA9PiB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnZbZW52VmFyXSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgQ2xlYW5pbmcgdXAgZW52aXJvbm1lbnQgdmFyaWFibGU6ICR7ZW52VmFyfWApO1xuICAgICAgICBkZWxldGUgcHJvY2Vzcy5lbnZbZW52VmFyXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCfinIUgR2xvYmFsIHRlc3QgdGVhcmRvd24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBHbG9iYWwgdGVzdCB0ZWFyZG93biBmYWlsZWQ6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=