{"version":3,"names":["cov_g2f6d1opo","actualCoverage","s","exports","useNavigation","react_1","require","navigation_1","useAuth_1","STORAGE_KEYS","SIDEBAR_OPEN","COLLAPSED_SECTIONS","sections","f","pathname","usePathname","user","profile","hydrated","useAuth","navigationState","setNavigationState","useState","isSidebarOpen","collapsedSections","Set","activeSection","activeItem","useEffect","b","savedSidebarState","localStorage","getItem","JSON","parse","savedCollapsedSections","collapsedFromStorage","initialCollapsed","forEach","section","collapsible","has","id","add","defaultExpanded","size","prev","Object","assign","error","defaultCollapsed","item","items","href","startsWith","persistSidebarState","useCallback","isOpen","setItem","stringify","persistCollapsedSections","collapsed","Array","from","toggleSidebar","newIsOpen","setSidebarOpen","open","toggleSection","sectionId","newCollapsed","delete","isItemActive","getFilteredSections","filter","requiresAuth","filteredItems","requiresProfile","length","map","sort","a","priority","resetNavigation","removeItem","useMemo"],"sources":["/home/g/dev/orangecat/src/hooks/useNavigation.ts"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { usePathname } from 'next/navigation'\nimport { useAuth } from './useAuth'\n\n// Navigation types\nexport interface NavItem {\n  name: string\n  href: string\n  icon: React.ComponentType<{ className?: string }>\n  comingSoon?: boolean\n  badge?: string\n  description?: string\n  requiresAuth?: boolean\n  requiresProfile?: boolean\n}\n\nexport interface NavSection {\n  id: string\n  title: string\n  items: NavItem[]\n  collapsible?: boolean\n  defaultExpanded?: boolean\n  priority: number\n  requiresAuth?: boolean\n}\n\n// Navigation state interface\nexport interface NavigationState {\n  isSidebarOpen: boolean\n  collapsedSections: Set<string>\n  activeSection: string | null\n  activeItem: string | null\n}\n\n// Hook return type\nexport interface UseNavigationReturn {\n  navigationState: NavigationState\n  toggleSidebar: () => void\n  toggleSection: (sectionId: string) => void\n  setSidebarOpen: (open: boolean) => void\n  isItemActive: (href: string) => boolean\n  getFilteredSections: () => NavSection[]\n  resetNavigation: () => void\n}\n\n// Local storage keys\nconst STORAGE_KEYS = {\n  SIDEBAR_OPEN: 'orangecat_sidebar_open',\n  COLLAPSED_SECTIONS: 'orangecat_collapsed_sections',\n} as const\n\nexport function useNavigation(sections: NavSection[]): UseNavigationReturn {\n  const pathname = usePathname()\n  const { user, profile, hydrated } = useAuth()\n\n  // Initialize state\n  const [navigationState, setNavigationState] = useState<NavigationState>({\n    isSidebarOpen: true,\n    collapsedSections: new Set<string>(),\n    activeSection: null,\n    activeItem: null,\n  })\n\n  // Initialize navigation state from localStorage and defaults\n  useEffect(() => {\n    if (!hydrated) return\n\n    try {\n      // Load sidebar state from localStorage\n      const savedSidebarState = localStorage.getItem(STORAGE_KEYS.SIDEBAR_OPEN)\n      const isSidebarOpen = savedSidebarState ? JSON.parse(savedSidebarState) : true\n\n      // Load collapsed sections from localStorage\n      const savedCollapsedSections = localStorage.getItem(STORAGE_KEYS.COLLAPSED_SECTIONS)\n      const collapsedFromStorage = savedCollapsedSections \n        ? new Set<string>(JSON.parse(savedCollapsedSections))\n        : new Set<string>()\n\n      // Initialize collapsed sections based on defaults and saved state\n      const initialCollapsed = new Set<string>()\n      sections.forEach(section => {\n        if (section.collapsible) {\n          if (collapsedFromStorage.has(section.id)) {\n            initialCollapsed.add(section.id)\n          } else if (!section.defaultExpanded && !collapsedFromStorage.size) {\n            // Only use defaults if no saved state exists\n            initialCollapsed.add(section.id)\n          }\n        }\n      })\n\n      setNavigationState(prev => ({\n        ...prev,\n        isSidebarOpen,\n        collapsedSections: initialCollapsed,\n      }))\n    } catch (error) {\n      // Fall back to defaults\n      const defaultCollapsed = new Set<string>()\n      sections.forEach(section => {\n        if (section.collapsible && !section.defaultExpanded) {\n          defaultCollapsed.add(section.id)\n        }\n      })\n      setNavigationState(prev => ({\n        ...prev,\n        collapsedSections: defaultCollapsed,\n      }))\n    }\n  }, [hydrated, sections])\n\n  // Update active section and item based on pathname\n  useEffect(() => {\n    if (!pathname) return\n\n    let activeSection: string | null = null\n    let activeItem: string | null = null\n\n    for (const section of sections) {\n      for (const item of section.items) {\n        if (pathname === item.href || (item.href !== '/dashboard' && pathname.startsWith(item.href))) {\n          activeSection = section.id\n          activeItem = item.href\n          break\n        }\n      }\n      if (activeSection) break\n    }\n\n    setNavigationState(prev => ({\n      ...prev,\n      activeSection,\n      activeItem,\n    }))\n  }, [pathname, sections])\n\n  // Persist sidebar state to localStorage\n  const persistSidebarState = useCallback((isOpen: boolean) => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.SIDEBAR_OPEN, JSON.stringify(isOpen))\n    } catch (error) {\n    }\n  }, [])\n\n  // Persist collapsed sections to localStorage\n  const persistCollapsedSections = useCallback((collapsed: Set<string>) => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.COLLAPSED_SECTIONS, JSON.stringify(Array.from(collapsed)))\n    } catch (error) {\n    }\n  }, [])\n\n  // Toggle sidebar\n  const toggleSidebar = useCallback(() => {\n    setNavigationState(prev => {\n      const newIsOpen = !prev.isSidebarOpen\n      persistSidebarState(newIsOpen)\n      return {\n        ...prev,\n        isSidebarOpen: newIsOpen,\n      }\n    })\n  }, [persistSidebarState])\n\n  // Set sidebar open state\n  const setSidebarOpen = useCallback((open: boolean) => {\n    setNavigationState(prev => {\n      if (prev.isSidebarOpen === open) return prev\n      persistSidebarState(open)\n      return {\n        ...prev,\n        isSidebarOpen: open,\n      }\n    })\n  }, [persistSidebarState])\n\n  // Toggle section collapse\n  const toggleSection = useCallback((sectionId: string) => {\n    setNavigationState(prev => {\n      const newCollapsed = new Set(prev.collapsedSections)\n      if (newCollapsed.has(sectionId)) {\n        newCollapsed.delete(sectionId)\n      } else {\n        newCollapsed.add(sectionId)\n      }\n      persistCollapsedSections(newCollapsed)\n      return {\n        ...prev,\n        collapsedSections: newCollapsed,\n      }\n    })\n  }, [persistCollapsedSections])\n\n  // Check if item is active\n  const isItemActive = useCallback((href: string) => {\n    return pathname === href || (href !== '/dashboard' && pathname.startsWith(href))\n  }, [pathname])\n\n  // Filter sections based on auth state and requirements\n  const getFilteredSections = useCallback(() => {\n    if (!hydrated) return []\n\n    return sections.filter(section => {\n      // Check section-level auth requirements\n      if (section.requiresAuth && !user) return false\n\n      // Filter items within the section\n      const filteredItems = section.items.filter(item => {\n        if (item.requiresAuth && !user) return false\n        if (item.requiresProfile && !profile) return false\n        return true\n      })\n\n      // Only include section if it has visible items\n      return filteredItems.length > 0\n    }).map(section => ({\n      ...section,\n      items: section.items.filter(item => {\n        if (item.requiresAuth && !user) return false\n        if (item.requiresProfile && !profile) return false\n        return true\n      })\n    })).sort((a, b) => a.priority - b.priority)\n  }, [sections, user, profile, hydrated])\n\n  // Reset navigation state\n  const resetNavigation = useCallback(() => {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.SIDEBAR_OPEN)\n      localStorage.removeItem(STORAGE_KEYS.COLLAPSED_SECTIONS)\n    } catch (error) {\n    }\n\n    const defaultCollapsed = new Set<string>()\n    sections.forEach(section => {\n      if (section.collapsible && !section.defaultExpanded) {\n        defaultCollapsed.add(section.id)\n      }\n    })\n\n    setNavigationState({\n      isSidebarOpen: true,\n      collapsedSections: defaultCollapsed,\n      activeSection: null,\n      activeItem: null,\n    })\n  }, [sections])\n\n  // Memoize the return value to prevent unnecessary re-renders\n  return useMemo(() => ({\n    navigationState,\n    toggleSidebar,\n    toggleSection,\n    setSidebarOpen,\n    isItemActive,\n    getFilteredSections,\n    resetNavigation,\n  }), [\n    navigationState,\n    toggleSidebar,\n    toggleSection,\n    setSidebarOpen,\n    isItemActive,\n    getFilteredSections,\n    resetNavigation,\n  ])\n} "],"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","ignoreList":[]}