f3533815845e932f25f0ec75c4ef5e7c
"use strict";
/**
 * FEATURED SERVICE - SIMPLE TEST COVERAGE
 *
 * This test suite provides comprehensive coverage for the Featured Service,
 * testing different featured types, content curation, and functionality.
 *
 * Created: 2025-01-08
 * Last Modified: 2025-01-08
 * Last Modified Summary: Simple Featured Service tests for content curation
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Supabase with minimal working implementation
jest.mock('@supabase/ssr', () => ({
    createBrowserClient: jest.fn(() => ({
        from: () => ({
            select: () => ({
                eq: () => ({
                    order: () => ({
                        limit: () => Promise.resolve({
                            data: [],
                            error: null
                        })
                    })
                }),
                not: () => ({
                    order: () => ({
                        limit: () => Promise.resolve({
                            data: [],
                            error: null
                        })
                    })
                })
            })
        })
    }))
}));
// Mock logger
jest.mock('@/utils/logger', () => ({
    logger: {
        info: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
        debug: jest.fn()
    }
}));
// Import after mocking
const featured_1 = require("../featured");
describe('⭐ Featured Service - Simple Coverage', () => {
    describe('🎯 Featured Campaign Functions', () => {
        test('should export getFeaturedCampaigns function', () => {
            expect(typeof featured_1.getFeaturedCampaigns).toBe('function');
            expect(featured_1.getFeaturedCampaigns).toBeDefined();
        });
        test('should export getTrendingCampaigns function', () => {
            expect(typeof featured_1.getTrendingCampaigns).toBe('function');
            expect(featured_1.getTrendingCampaigns).toBeDefined();
        });
        test('should export getStaffPicks function', () => {
            expect(typeof featured_1.getStaffPicks).toBe('function');
            expect(featured_1.getStaffPicks).toBeDefined();
        });
        test('should export getNearlyFundedCampaigns function', () => {
            expect(typeof featured_1.getNearlyFundedCampaigns).toBe('function');
            expect(featured_1.getNearlyFundedCampaigns).toBeDefined();
        });
        test('should export getNewAndNoteworthy function', () => {
            expect(typeof featured_1.getNewAndNoteworthy).toBe('function');
            expect(featured_1.getNewAndNoteworthy).toBeDefined();
        });
        test('should export featureCampaign function', () => {
            expect(typeof featured_1.featureCampaign).toBe('function');
            expect(featured_1.featureCampaign).toBeDefined();
        });
        test('should export unfeatureCampaign function', () => {
            expect(typeof featured_1.unfeatureCampaign).toBe('function');
            expect(featured_1.unfeatureCampaign).toBeDefined();
        });
    });
    describe('🎬 Featured Campaigns', () => {
        test('should get featured campaigns with default limit', async () => {
            const result = await (0, featured_1.getFeaturedCampaigns)();
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(6); // Default limit
        });
        test('should get featured campaigns with custom limit', async () => {
            const customLimit = 3;
            const result = await (0, featured_1.getFeaturedCampaigns)(customLimit);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(customLimit);
        });
        test('should handle zero limit', async () => {
            const result = await (0, featured_1.getFeaturedCampaigns)(0);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBe(0);
        });
        test('should handle large limit values', async () => {
            const result = await (0, featured_1.getFeaturedCampaigns)(100);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(100);
        });
    });
    describe('📈 Trending Campaigns', () => {
        test('should get trending campaigns with default limit', async () => {
            const result = await (0, featured_1.getTrendingCampaigns)();
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(3); // Default limit
        });
        test('should get trending campaigns with custom limit', async () => {
            const customLimit = 5;
            const result = await (0, featured_1.getTrendingCampaigns)(customLimit);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(customLimit);
        });
        test('should return trending featured type', async () => {
            const result = await (0, featured_1.getTrendingCampaigns)(1);
            // Even if empty, the function should work
            expect(Array.isArray(result)).toBe(true);
            // If there are results, they should have trending type
            if (result.length > 0) {
                expect(result[0]).toHaveProperty('featured_type', 'trending');
                expect(result[0]).toHaveProperty('featured_priority');
            }
        });
    });
    describe('👨‍💼 Staff Picks', () => {
        test('should get staff picks with default limit', async () => {
            const result = await (0, featured_1.getStaffPicks)();
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(3); // Default limit
        });
        test('should get staff picks with custom limit', async () => {
            const customLimit = 2;
            const result = await (0, featured_1.getStaffPicks)(customLimit);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(customLimit);
        });
        test('should return staff_pick featured type', async () => {
            const result = await (0, featured_1.getStaffPicks)(1);
            // Even if empty, the function should work
            expect(Array.isArray(result)).toBe(true);
            // If there are results, they should have staff_pick type
            if (result.length > 0) {
                expect(result[0]).toHaveProperty('featured_type', 'staff_pick');
                expect(result[0]).toHaveProperty('featured_priority');
            }
        });
    });
    describe('🎯 Nearly Funded Campaigns', () => {
        test('should get nearly funded campaigns with default limit', async () => {
            const result = await (0, featured_1.getNearlyFundedCampaigns)();
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(3); // Default limit
        });
        test('should get nearly funded campaigns with custom limit', async () => {
            const customLimit = 4;
            const result = await (0, featured_1.getNearlyFundedCampaigns)(customLimit);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(customLimit);
        });
        test('should return nearly_funded featured type', async () => {
            const result = await (0, featured_1.getNearlyFundedCampaigns)(1);
            // Even if empty, the function should work
            expect(Array.isArray(result)).toBe(true);
            // If there are results, they should have nearly_funded type
            if (result.length > 0) {
                expect(result[0]).toHaveProperty('featured_type', 'nearly_funded');
                expect(result[0]).toHaveProperty('featured_priority');
            }
        });
    });
    describe('🆕 New and Noteworthy', () => {
        test('should get new and noteworthy campaigns with default limit', async () => {
            const result = await (0, featured_1.getNewAndNoteworthy)();
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(3); // Default limit
        });
        test('should get new and noteworthy campaigns with custom limit', async () => {
            const customLimit = 6;
            const result = await (0, featured_1.getNewAndNoteworthy)(customLimit);
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeLessThanOrEqual(customLimit);
        });
        test('should return new_and_noteworthy featured type', async () => {
            const result = await (0, featured_1.getNewAndNoteworthy)(1);
            // Even if empty, the function should work
            expect(Array.isArray(result)).toBe(true);
            // If there are results, they should have new_and_noteworthy type
            if (result.length > 0) {
                expect(result[0]).toHaveProperty('featured_type', 'new_and_noteworthy');
                expect(result[0]).toHaveProperty('featured_priority');
            }
        });
    });
    describe('🏷️ Featured Types Validation', () => {
        test('should handle all valid featured types', () => {
            const validTypes = [
                'trending',
                'staff_pick',
                'community_choice',
                'nearly_funded',
                'new_and_noteworthy',
                'featured'
            ];
            // This test validates that the types are properly defined
            validTypes.forEach(type => {
                expect(typeof type).toBe('string');
                expect(type.length).toBeGreaterThan(0);
            });
        });
    });
    describe('⚙️ Campaign Management', () => {
        test('should attempt to feature a campaign', async () => {
            const campaignId = 'test-campaign-id';
            const featuredType = 'staff_pick';
            const priority = 1;
            const result = await (0, featured_1.featureCampaign)(campaignId, featuredType, priority);
            // Since we're using mocks, this should not throw
            expect(typeof result).toBe('boolean');
        });
        test('should attempt to feature a campaign with featured_until date', async () => {
            const campaignId = 'test-campaign-id';
            const featuredType = 'trending';
            const priority = 2;
            const featuredUntil = '2024-12-31';
            const result = await (0, featured_1.featureCampaign)(campaignId, featuredType, priority, featuredUntil);
            // Since we're using mocks, this should not throw
            expect(typeof result).toBe('boolean');
        });
        test('should attempt to unfeature a campaign', async () => {
            const campaignId = 'test-campaign-id';
            const result = await (0, featured_1.unfeatureCampaign)(campaignId);
            // Since we're using mocks, this should not throw
            expect(typeof result).toBe('boolean');
        });
        test('should handle different featured types in featureCampaign', async () => {
            const campaignId = 'test-campaign-id';
            const featuredTypes = [
                'trending',
                'staff_pick',
                'community_choice',
                'nearly_funded',
                'new_and_noteworthy',
                'featured'
            ];
            for (const type of featuredTypes) {
                const result = await (0, featured_1.featureCampaign)(campaignId, type, 1);
                expect(typeof result).toBe('boolean');
            }
        });
    });
    describe('🛡️ Error Handling', () => {
        test('should handle invalid campaign IDs gracefully', async () => {
            const invalidId = '';
            const result = await (0, featured_1.featureCampaign)(invalidId, 'featured', 1);
            expect(typeof result).toBe('boolean');
        });
        test('should handle negative priorities', async () => {
            const campaignId = 'test-campaign-id';
            const negativePriority = -1;
            const result = await (0, featured_1.featureCampaign)(campaignId, 'featured', negativePriority);
            expect(typeof result).toBe('boolean');
        });
        test('should handle very high priorities', async () => {
            const campaignId = 'test-campaign-id';
            const highPriority = 999999;
            const result = await (0, featured_1.featureCampaign)(campaignId, 'featured', highPriority);
            expect(typeof result).toBe('boolean');
        });
        test('should handle null/undefined campaign IDs for unfeaturing', async () => {
            // These should not throw, even if they fail silently
            const result1 = await (0, featured_1.unfeatureCampaign)('');
            const result2 = await (0, featured_1.unfeatureCampaign)('non-existent-id');
            expect(typeof result1).toBe('boolean');
            expect(typeof result2).toBe('boolean');
        });
    });
    describe('📊 Data Structure Validation', () => {
        test('should return consistent data structure for featured campaigns', async () => {
            const result = await (0, featured_1.getFeaturedCampaigns)(1);
            expect(Array.isArray(result)).toBe(true);
            // If there are results, validate structure
            if (result.length > 0) {
                const campaign = result[0];
                expect(campaign).toHaveProperty('featured_type');
                expect(campaign).toHaveProperty('featured_priority');
                expect(typeof campaign.featured_priority).toBe('number');
            }
        });
        test('should return consistent data structure for trending campaigns', async () => {
            const result = await (0, featured_1.getTrendingCampaigns)(1);
            expect(Array.isArray(result)).toBe(true);
            // If there are results, validate structure
            if (result.length > 0) {
                const campaign = result[0];
                expect(campaign.featured_type).toBe('trending');
                expect(typeof campaign.featured_priority).toBe('number');
            }
        });
        test('should return consistent data structure for staff picks', async () => {
            const result = await (0, featured_1.getStaffPicks)(1);
            expect(Array.isArray(result)).toBe(true);
            // If there are results, validate structure
            if (result.length > 0) {
                const campaign = result[0];
                expect(campaign.featured_type).toBe('staff_pick');
                expect(typeof campaign.featured_priority).toBe('number');
            }
        });
    });
    describe('🧪 Edge Cases', () => {
        test('should handle zero and negative limits gracefully', async () => {
            const zeroResult = await (0, featured_1.getFeaturedCampaigns)(0);
            const negativeResult = await (0, featured_1.getFeaturedCampaigns)(-1);
            expect(Array.isArray(zeroResult)).toBe(true);
            expect(Array.isArray(negativeResult)).toBe(true);
            expect(zeroResult.length).toBe(0);
        });
        test('should handle very large limit values', async () => {
            const result = await (0, featured_1.getFeaturedCampaigns)(Number.MAX_SAFE_INTEGER);
            expect(Array.isArray(result)).toBe(true);
            // Should not crash, even with extreme values
        });
        test('should handle concurrent featured campaign requests', async () => {
            const promises = [
                (0, featured_1.getFeaturedCampaigns)(2),
                (0, featured_1.getTrendingCampaigns)(2),
                (0, featured_1.getStaffPicks)(2),
                (0, featured_1.getNearlyFundedCampaigns)(2),
                (0, featured_1.getNewAndNoteworthy)(2)
            ];
            const results = await Promise.all(promises);
            // All should resolve without errors
            results.forEach(result => {
                expect(Array.isArray(result)).toBe(true);
            });
        });
        test('should handle special characters in campaign IDs', async () => {
            const specialId = 'campaign-with-special-chars!@#$%';
            const result = await (0, featured_1.featureCampaign)(specialId, 'featured', 1);
            expect(typeof result).toBe('boolean');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,