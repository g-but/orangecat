1e0c57d40bc8357ba6b7bedd8f2507b3
"use strict";

/* istanbul ignore next */
function cov_gm9bbhm2j() {
  var path = "/home/g/dev/orangecat/src/services/transparency.ts";
  var hash = "9f4215709700fe54ac2967fb9e49cb9c06835a32";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/services/transparency.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 81
        }
      },
      "2": {
        start: {
          line: 4,
          column: 35
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "3": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "4": {
        start: {
          line: 6,
          column: 52
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "5": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 77
        }
      },
      "6": {
        start: {
          line: 8,
          column: 47
        },
        end: {
          line: 8,
          column: 57
        }
      },
      "7": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 11,
          column: 6
        }
      },
      "8": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 64
        }
      },
      "9": {
        start: {
          line: 14,
          column: 35
        },
        end: {
          line: 20,
          column: 1
        }
      },
      "10": {
        start: {
          line: 15,
          column: 18
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "11": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "12": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 35
          },
          end: {
            line: 4,
            column: 36
          }
        },
        loc: {
          start: {
            line: 4,
            column: 51
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 43
          },
          end: {
            line: 6,
            column: 44
          }
        },
        loc: {
          start: {
            line: 6,
            column: 52
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 8,
            column: 32
          },
          end: {
            line: 8,
            column: 33
          }
        },
        loc: {
          start: {
            line: 8,
            column: 47
          },
          end: {
            line: 8,
            column: 57
          }
        },
        line: 8
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 36
          }
        },
        loc: {
          start: {
            line: 14,
            column: 51
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 6,
            column: 52
          },
          end: {
            line: 6,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 6,
            column: 60
          },
          end: {
            line: 6,
            column: 61
          }
        }, {
          start: {
            line: 6,
            column: 64
          },
          end: {
            line: 6,
            column: 65
          }
        }],
        line: 6
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/services/transparency.ts",
      mappings: ";;;AAsBO,MAAM,0BAA0B,GAAG,KAAK,EAAE,IAAsB,EAA8B,EAAE;IACrG,8DAA8D;IAC9D,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAE9D,8BAA8B;IAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAW,EAAE,IAAY,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAA;IAEzF,OAAO;QACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;KACrC,CAAA;AACH,CAAC,CAAA;AAVY,QAAA,0BAA0B,8BAUtC;AAEM,MAAM,0BAA0B,GAAG,KAAK,EAAE,IAAsB,EAAE,EAAE;IACzE,MAAM,KAAK,GAAG,MAAM,IAAA,kCAA0B,EAAC,IAAI,CAAC,CAAA;IAEpD,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACvC,CAAA;AACH,CAAC,CAAA;AAPY,QAAA,0BAA0B,8BAOtC",
      names: [],
      sources: ["/home/g/dev/orangecat/src/services/transparency.ts"],
      sourcesContent: ["import supabase from '@/services/supabase/client'\nimport { Profile } from '@/types/database'\n\nexport interface TransparencyData {\n  isOpenSource: boolean\n  hasContributionGuidelines: boolean\n  hasIssueTracking: boolean\n  hasMissionStatement: boolean\n  hasKPIs: boolean\n  hasProgressUpdates: boolean\n  hasTransactionHistory: boolean\n  hasTransactionComments: boolean\n  hasFinancialReports: boolean\n  hasPublicChannels: boolean\n  hasCommunityUpdates: boolean\n  isResponsiveToFeedback: boolean\n}\n\nexport interface TransparencyScore {\n  score: number\n}\n\nexport const calculateTransparencyScore = async (data: TransparencyData): Promise<TransparencyScore> => {\n  // Convert boolean values to numbers (1 for true, 0 for false)\n  const scores = Object.values(data).map(value => value ? 1 : 0)\n  \n  // Calculate the average score\n  const score = scores.reduce((acc: number, curr: number) => acc + curr, 0) / scores.length\n  \n  return {\n    score: Math.round(score * 100) / 100\n  }\n}\n\nexport const generateTransparencyReport = async (data: TransparencyData) => {\n  const score = await calculateTransparencyScore(data)\n  \n  return {\n    score: score.score,\n    last_updated: new Date().toISOString()\n  }\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f4215709700fe54ac2967fb9e49cb9c06835a32"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gm9bbhm2j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gm9bbhm2j();
cov_gm9bbhm2j().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_gm9bbhm2j().s[1]++;
exports.generateTransparencyReport = exports.calculateTransparencyScore = void 0;
/* istanbul ignore next */
cov_gm9bbhm2j().s[2]++;
const calculateTransparencyScore = async data => {
  /* istanbul ignore next */
  cov_gm9bbhm2j().f[0]++;
  // Convert boolean values to numbers (1 for true, 0 for false)
  const scores =
  /* istanbul ignore next */
  (cov_gm9bbhm2j().s[3]++, Object.values(data).map(value => {
    /* istanbul ignore next */
    cov_gm9bbhm2j().f[1]++;
    cov_gm9bbhm2j().s[4]++;
    return value ?
    /* istanbul ignore next */
    (cov_gm9bbhm2j().b[0][0]++, 1) :
    /* istanbul ignore next */
    (cov_gm9bbhm2j().b[0][1]++, 0);
  }));
  // Calculate the average score
  const score =
  /* istanbul ignore next */
  (cov_gm9bbhm2j().s[5]++, scores.reduce((acc, curr) => {
    /* istanbul ignore next */
    cov_gm9bbhm2j().f[2]++;
    cov_gm9bbhm2j().s[6]++;
    return acc + curr;
  }, 0) / scores.length);
  /* istanbul ignore next */
  cov_gm9bbhm2j().s[7]++;
  return {
    score: Math.round(score * 100) / 100
  };
};
/* istanbul ignore next */
cov_gm9bbhm2j().s[8]++;
exports.calculateTransparencyScore = calculateTransparencyScore;
/* istanbul ignore next */
cov_gm9bbhm2j().s[9]++;
const generateTransparencyReport = async data => {
  /* istanbul ignore next */
  cov_gm9bbhm2j().f[3]++;
  const score =
  /* istanbul ignore next */
  (cov_gm9bbhm2j().s[10]++, await (0, exports.calculateTransparencyScore)(data));
  /* istanbul ignore next */
  cov_gm9bbhm2j().s[11]++;
  return {
    score: score.score,
    last_updated: new Date().toISOString()
  };
};
/* istanbul ignore next */
cov_gm9bbhm2j().s[12]++;
exports.generateTransparencyReport = generateTransparencyReport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZ205YmJobTJqIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiY2FsY3VsYXRlVHJhbnNwYXJlbmN5U2NvcmUiLCJkYXRhIiwiZiIsInNjb3JlcyIsIk9iamVjdCIsInZhbHVlcyIsIm1hcCIsInZhbHVlIiwiYiIsInNjb3JlIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsImxlbmd0aCIsIk1hdGgiLCJyb3VuZCIsImV4cG9ydHMiLCJnZW5lcmF0ZVRyYW5zcGFyZW5jeVJlcG9ydCIsImxhc3RfdXBkYXRlZCIsIkRhdGUiLCJ0b0lTT1N0cmluZyJdLCJzb3VyY2VzIjpbIi9ob21lL2cvZGV2L29yYW5nZWNhdC9zcmMvc2VydmljZXMvdHJhbnNwYXJlbmN5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdXBhYmFzZSBmcm9tICdAL3NlcnZpY2VzL3N1cGFiYXNlL2NsaWVudCdcbmltcG9ydCB7IFByb2ZpbGUgfSBmcm9tICdAL3R5cGVzL2RhdGFiYXNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zcGFyZW5jeURhdGEge1xuICBpc09wZW5Tb3VyY2U6IGJvb2xlYW5cbiAgaGFzQ29udHJpYnV0aW9uR3VpZGVsaW5lczogYm9vbGVhblxuICBoYXNJc3N1ZVRyYWNraW5nOiBib29sZWFuXG4gIGhhc01pc3Npb25TdGF0ZW1lbnQ6IGJvb2xlYW5cbiAgaGFzS1BJczogYm9vbGVhblxuICBoYXNQcm9ncmVzc1VwZGF0ZXM6IGJvb2xlYW5cbiAgaGFzVHJhbnNhY3Rpb25IaXN0b3J5OiBib29sZWFuXG4gIGhhc1RyYW5zYWN0aW9uQ29tbWVudHM6IGJvb2xlYW5cbiAgaGFzRmluYW5jaWFsUmVwb3J0czogYm9vbGVhblxuICBoYXNQdWJsaWNDaGFubmVsczogYm9vbGVhblxuICBoYXNDb21tdW5pdHlVcGRhdGVzOiBib29sZWFuXG4gIGlzUmVzcG9uc2l2ZVRvRmVlZGJhY2s6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc3BhcmVuY3lTY29yZSB7XG4gIHNjb3JlOiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRyYW5zcGFyZW5jeVNjb3JlID0gYXN5bmMgKGRhdGE6IFRyYW5zcGFyZW5jeURhdGEpOiBQcm9taXNlPFRyYW5zcGFyZW5jeVNjb3JlPiA9PiB7XG4gIC8vIENvbnZlcnQgYm9vbGVhbiB2YWx1ZXMgdG8gbnVtYmVycyAoMSBmb3IgdHJ1ZSwgMCBmb3IgZmFsc2UpXG4gIGNvbnN0IHNjb3JlcyA9IE9iamVjdC52YWx1ZXMoZGF0YSkubWFwKHZhbHVlID0+IHZhbHVlID8gMSA6IDApXG4gIFxuICAvLyBDYWxjdWxhdGUgdGhlIGF2ZXJhZ2Ugc2NvcmVcbiAgY29uc3Qgc2NvcmUgPSBzY29yZXMucmVkdWNlKChhY2M6IG51bWJlciwgY3VycjogbnVtYmVyKSA9PiBhY2MgKyBjdXJyLCAwKSAvIHNjb3Jlcy5sZW5ndGhcbiAgXG4gIHJldHVybiB7XG4gICAgc2NvcmU6IE1hdGgucm91bmQoc2NvcmUgKiAxMDApIC8gMTAwXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVHJhbnNwYXJlbmN5UmVwb3J0ID0gYXN5bmMgKGRhdGE6IFRyYW5zcGFyZW5jeURhdGEpID0+IHtcbiAgY29uc3Qgc2NvcmUgPSBhd2FpdCBjYWxjdWxhdGVUcmFuc3BhcmVuY3lTY29yZShkYXRhKVxuICBcbiAgcmV0dXJuIHtcbiAgICBzY29yZTogc2NvcmUuc2NvcmUsXG4gICAgbGFzdF91cGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgfVxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFxQ1M7SUFBQUEsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsYUFBQTtBQUFBQSxhQUFBLEdBQUFFLENBQUE7Ozs7Ozs7OztBQWZGLE1BQU1DLDBCQUEwQixHQUFHLE1BQU9DLElBQXNCLElBQWdDO0VBQUE7RUFBQUosYUFBQSxHQUFBSyxDQUFBO0VBQ3JHO0VBQ0EsTUFBTUMsTUFBTTtFQUFBO0VBQUEsQ0FBQU4sYUFBQSxHQUFBRSxDQUFBLE9BQUdLLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixJQUFJLENBQUMsQ0FBQ0ssR0FBRyxDQUFDQyxLQUFLLElBQUk7SUFBQTtJQUFBVixhQUFBLEdBQUFLLENBQUE7SUFBQUwsYUFBQSxHQUFBRSxDQUFBO0lBQUEsT0FBQVEsS0FBSztJQUFBO0lBQUEsQ0FBQVYsYUFBQSxHQUFBVyxDQUFBLFVBQUcsQ0FBQztJQUFBO0lBQUEsQ0FBQVgsYUFBQSxHQUFBVyxDQUFBLFVBQUcsQ0FBQztFQUFELENBQUMsQ0FBQztFQUU5RDtFQUNBLE1BQU1DLEtBQUs7RUFBQTtFQUFBLENBQUFaLGFBQUEsR0FBQUUsQ0FBQSxPQUFHSSxNQUFNLENBQUNPLE1BQU0sQ0FBQyxDQUFDQyxHQUFXLEVBQUVDLElBQVksS0FBSztJQUFBO0lBQUFmLGFBQUEsR0FBQUssQ0FBQTtJQUFBTCxhQUFBLEdBQUFFLENBQUE7SUFBQSxPQUFBWSxHQUFHLEdBQUdDLElBQUk7RUFBSixDQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUdULE1BQU0sQ0FBQ1UsTUFBTTtFQUFBO0VBQUFoQixhQUFBLEdBQUFFLENBQUE7RUFFekYsT0FBTztJQUNMVSxLQUFLLEVBQUVLLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUc7R0FDbEM7QUFDSCxDQUFDO0FBQUE7QUFBQVosYUFBQSxHQUFBRSxDQUFBO0FBVllpQixPQUFBLENBQUFoQiwwQkFBMEIsR0FBQUEsMEJBQUE7QUFVdEM7QUFBQUgsYUFBQSxHQUFBRSxDQUFBO0FBRU0sTUFBTWtCLDBCQUEwQixHQUFHLE1BQU9oQixJQUFzQixJQUFJO0VBQUE7RUFBQUosYUFBQSxHQUFBSyxDQUFBO0VBQ3pFLE1BQU1PLEtBQUs7RUFBQTtFQUFBLENBQUFaLGFBQUEsR0FBQUUsQ0FBQSxRQUFHLE1BQU0sSUFBQWlCLE9BQUEsQ0FBQWhCLDBCQUEwQixFQUFDQyxJQUFJLENBQUM7RUFBQTtFQUFBSixhQUFBLEdBQUFFLENBQUE7RUFFcEQsT0FBTztJQUNMVSxLQUFLLEVBQUVBLEtBQUssQ0FBQ0EsS0FBSztJQUNsQlMsWUFBWSxFQUFFLElBQUlDLElBQUksRUFBRSxDQUFDQyxXQUFXO0dBQ3JDO0FBQ0gsQ0FBQztBQUFBO0FBQUF2QixhQUFBLEdBQUFFLENBQUE7QUFQWWlCLE9BQUEsQ0FBQUMsMEJBQTBCLEdBQUFBLDBCQUFBIiwiaWdub3JlTGlzdCI6W119