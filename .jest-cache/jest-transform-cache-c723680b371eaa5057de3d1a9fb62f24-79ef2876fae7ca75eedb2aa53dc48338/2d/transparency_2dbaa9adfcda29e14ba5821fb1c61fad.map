{"version":3,"names":["cov_gm9bbhm2j","actualCoverage","s","calculateTransparencyScore","data","f","scores","Object","values","map","value","b","score","reduce","acc","curr","length","Math","round","exports","generateTransparencyReport","last_updated","Date","toISOString"],"sources":["/home/g/dev/orangecat/src/services/transparency.ts"],"sourcesContent":["import supabase from '@/services/supabase/client'\nimport { Profile } from '@/types/database'\n\nexport interface TransparencyData {\n  isOpenSource: boolean\n  hasContributionGuidelines: boolean\n  hasIssueTracking: boolean\n  hasMissionStatement: boolean\n  hasKPIs: boolean\n  hasProgressUpdates: boolean\n  hasTransactionHistory: boolean\n  hasTransactionComments: boolean\n  hasFinancialReports: boolean\n  hasPublicChannels: boolean\n  hasCommunityUpdates: boolean\n  isResponsiveToFeedback: boolean\n}\n\nexport interface TransparencyScore {\n  score: number\n}\n\nexport const calculateTransparencyScore = async (data: TransparencyData): Promise<TransparencyScore> => {\n  // Convert boolean values to numbers (1 for true, 0 for false)\n  const scores = Object.values(data).map(value => value ? 1 : 0)\n  \n  // Calculate the average score\n  const score = scores.reduce((acc: number, curr: number) => acc + curr, 0) / scores.length\n  \n  return {\n    score: Math.round(score * 100) / 100\n  }\n}\n\nexport const generateTransparencyReport = async (data: TransparencyData) => {\n  const score = await calculateTransparencyScore(data)\n  \n  return {\n    score: score.score,\n    last_updated: new Date().toISOString()\n  }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCS;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;AAfF,MAAMC,0BAA0B,GAAG,MAAOC,IAAsB,IAAgC;EAAA;EAAAJ,aAAA,GAAAK,CAAA;EACrG;EACA,MAAMC,MAAM;EAAA;EAAA,CAAAN,aAAA,GAAAE,CAAA,OAAGK,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAACK,GAAG,CAACC,KAAK,IAAI;IAAA;IAAAV,aAAA,GAAAK,CAAA;IAAAL,aAAA,GAAAE,CAAA;IAAA,OAAAQ,KAAK;IAAA;IAAA,CAAAV,aAAA,GAAAW,CAAA,UAAG,CAAC;IAAA;IAAA,CAAAX,aAAA,GAAAW,CAAA,UAAG,CAAC;EAAD,CAAC,CAAC;EAE9D;EACA,MAAMC,KAAK;EAAA;EAAA,CAAAZ,aAAA,GAAAE,CAAA,OAAGI,MAAM,CAACO,MAAM,CAAC,CAACC,GAAW,EAAEC,IAAY,KAAK;IAAA;IAAAf,aAAA,GAAAK,CAAA;IAAAL,aAAA,GAAAE,CAAA;IAAA,OAAAY,GAAG,GAAGC,IAAI;EAAJ,CAAI,EAAE,CAAC,CAAC,GAAGT,MAAM,CAACU,MAAM;EAAA;EAAAhB,aAAA,GAAAE,CAAA;EAEzF,OAAO;IACLU,KAAK,EAAEK,IAAI,CAACC,KAAK,CAACN,KAAK,GAAG,GAAG,CAAC,GAAG;GAClC;AACH,CAAC;AAAA;AAAAZ,aAAA,GAAAE,CAAA;AAVYiB,OAAA,CAAAhB,0BAA0B,GAAAA,0BAAA;AAUtC;AAAAH,aAAA,GAAAE,CAAA;AAEM,MAAMkB,0BAA0B,GAAG,MAAOhB,IAAsB,IAAI;EAAA;EAAAJ,aAAA,GAAAK,CAAA;EACzE,MAAMO,KAAK;EAAA;EAAA,CAAAZ,aAAA,GAAAE,CAAA,QAAG,MAAM,IAAAiB,OAAA,CAAAhB,0BAA0B,EAACC,IAAI,CAAC;EAAA;EAAAJ,aAAA,GAAAE,CAAA;EAEpD,OAAO;IACLU,KAAK,EAAEA,KAAK,CAACA,KAAK;IAClBS,YAAY,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;GACrC;AACH,CAAC;AAAA;AAAAvB,aAAA,GAAAE,CAAA;AAPYiB,OAAA,CAAAC,0BAA0B,GAAAA,0BAAA","ignoreList":[]}