{"file":"/home/g/dev/orangecat/src/utils/__tests__/currency.comprehensive.test.ts","mappings":";AAAA;;;;;GAKG;;AAEH,0CAUoB;AAEpB,QAAQ,CAAC,gDAAgD,EAAE,GAAG,EAAE;IAE9D,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBACzC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBAC3C,MAAM,CAAC,IAAA,oBAAS,EAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;gBAC7C,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAC7C,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;gBAC3C,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBAC7C,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBACpD,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YACtD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;gBACtC,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,CAAC,YAAY;gBACjE,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,CAAC,WAAW;YAClE,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;gBACtC,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAA;gBACzD,MAAM,CAAC,IAAA,oBAAS,EAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;YAChE,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;gBACpC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;gBAC7C,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;YACjD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBAC7C,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBAClD,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YACrD,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;YAC1B,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;gBACnC,MAAM,CAAC,IAAA,qBAAU,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA,CAAC,QAAQ;gBAC/D,MAAM,CAAC,IAAA,qBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBACpC,MAAM,CAAC,IAAA,qBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;gBAC7C,MAAM,CAAC,IAAA,qBAAU,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;gBAC3C,MAAM,CAAC,IAAA,qBAAU,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBAClD,MAAM,CAAC,IAAA,qBAAU,EAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA,CAAC,UAAU;YACpF,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;gBAC5C,MAAM,CAAC,IAAA,qBAAU,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;gBAC7C,MAAM,CAAC,IAAA,qBAAU,EAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;YAC1D,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,qBAAU,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBACtC,MAAM,CAAC,IAAA,qBAAU,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAC3C,MAAM,CAAC,IAAA,qBAAU,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC9C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;gBAC1C,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBACtC,MAAM,CAAC,IAAA,oBAAS,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBACrC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACpC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACrC,MAAM,CAAC,IAAA,oBAAS,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;gBACzC,MAAM,CAAC,IAAA,oBAAS,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;gBAChD,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YAChD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;gBACxC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBACxC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACzC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBACpC,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBACzC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAC5C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;gBAC9C,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC,oBAAoB;gBACzD,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,qBAAqB;gBAC3D,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,QAAQ;gBAC9C,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC9B,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;gBAC/C,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAC5C,MAAM,CAAC,IAAA,oBAAS,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACzC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;gBACpC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAA;gBACtC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAA;YACzC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAC9B,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;gBAC9C,MAAM,CAAC,IAAA,oBAAS,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,oBAAoB;gBACzD,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAC,qBAAqB;gBAC3D,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA,CAAC,QAAQ;gBAC9C,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC9B,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBACzC,MAAM,CAAC,IAAA,oBAAS,EAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,iBAAiB;gBACpE,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAC9C,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;gBACpC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBACtC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACzC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,oBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAC9B,MAAM,CAAC,IAAA,oBAAS,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnC,MAAM,CAAC,IAAA,oBAAS,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC9B,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;gBACxC,MAAM,CAAC,IAAA,yBAAc,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBAClD,MAAM,CAAC,IAAA,yBAAc,EAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBACvD,MAAM,CAAC,IAAA,yBAAc,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YACzD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;gBACjD,MAAM,CAAC,IAAA,yBAAc,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;gBACrD,MAAM,CAAC,IAAA,yBAAc,EAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YACrD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,yBAAc,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBAChD,MAAM,CAAC,IAAA,yBAAc,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;gBAC9D,MAAM,CAAC,IAAA,yBAAc,EAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC1D,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC9B,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;gBACpC,MAAM,CAAC,IAAA,yBAAc,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnC,MAAM,CAAC,IAAA,yBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBACvC,MAAM,CAAC,IAAA,yBAAc,EAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBACrD,MAAM,CAAC,IAAA,yBAAc,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACnD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;gBAC1C,MAAM,CAAC,IAAA,yBAAc,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACvC,MAAM,CAAC,IAAA,yBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBAC3C,MAAM,CAAC,IAAA,yBAAc,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACxC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,yBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACrC,MAAM,CAAC,IAAA,yBAAc,EAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;gBAClC,MAAM,CAAC,IAAA,yBAAc,EAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAClC,MAAM,CAAC,IAAA,yBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACzC,MAAM,CAAC,IAAA,yBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACrC,MAAM,CAAC,IAAA,yBAAc,EAAC,IAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAC3C,MAAM,CAAC,IAAA,yBAAc,EAAC,SAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,yBAAc,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnC,MAAM,CAAC,IAAA,yBAAc,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBACrC,MAAM,CAAC,IAAA,yBAAc,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAC1C,MAAM,CAAC,IAAA,yBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACvC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;YACjC,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBACzC,MAAM,CAAC,IAAA,4BAAiB,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACvC,MAAM,CAAC,IAAA,4BAAiB,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACzC,MAAM,CAAC,IAAA,4BAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,YAAY;gBAC7D,MAAM,CAAC,IAAA,4BAAiB,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACzC,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;gBACxC,MAAM,CAAC,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,aAAa;gBAC5D,MAAM,CAAC,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC,kBAAkB;YACpE,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;gBACtC,MAAM,CAAC,IAAA,4BAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,kBAAkB;gBACnE,MAAM,CAAC,IAAA,4BAAiB,EAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC,cAAc;YACnE,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;gBACpC,MAAM,CAAC,IAAA,4BAAiB,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBACzC,MAAM,CAAC,IAAA,4BAAiB,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC7C,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;gBACnC,MAAM,CAAC,IAAA,4BAAiB,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAC1C,MAAM,CAAC,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAC/C,MAAM,CAAC,IAAA,4BAAiB,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE;gBACjC,MAAM,CAAC,IAAA,4BAAiB,EAAC,GAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC,mBAAmB;gBACrE,MAAM,CAAC,IAAA,4BAAiB,EAAC,SAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACzD,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBACzC,MAAM,CAAC,IAAA,0BAAe,EAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBACzD,MAAM,CAAC,IAAA,0BAAe,EAAC,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC3D,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;gBACxC,MAAM,aAAa,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,CAAA;gBAE9D,MAAM,CAAC,IAAA,0BAAe,EAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBACnE,MAAM,CAAC,IAAA,0BAAe,EAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrE,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;gBAC5C,MAAM,CAAC,IAAA,0BAAe,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBACpD,MAAM,CAAC,IAAA,0BAAe,EAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;gBAC1C,MAAM,CAAC,IAAA,0BAAe,EAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,oBAAoB;gBACrE,MAAM,CAAC,IAAA,0BAAe,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,oBAAoB;YACzE,CAAC,CAAC,CAAA;YAEF,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAA,0BAAe,EAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAChD,MAAM,CAAC,IAAA,0BAAe,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBAClD,MAAM,CAAC,IAAA,0BAAe,EAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACzD,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,MAAM,GAAG,WAAW,CAAA,CAAC,aAAa;YACxC,MAAM,SAAS,GAAG,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAA;YACnC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,CAAC,wBAAwB;QACnE,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,MAAM,MAAM,GAAG,MAAM,CAAA,CAAC,kBAAkB;YACxC,MAAM,SAAS,GAAG,IAAA,qBAAU,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;YAChD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA,CAAC,0BAA0B;QACjE,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,MAAM,MAAM,GAAG,GAAG,GAAG,GAAG,CAAA,CAAC,kCAAkC;YAC3D,MAAM,IAAI,GAAG,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAA;YAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,oCAAoC;QAClE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,oCAAoC;YACpC,MAAM,CAAC,IAAA,qBAAU,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAClD,MAAM,CAAC,IAAA,oBAAS,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAChD,iDAAiD;YACjD,MAAM,MAAM,GAAG,GAAG,CAAA;YAClB,MAAM,CAAC,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAA,CAAC,YAAY;QAChE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;YAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/B,IAAA,oBAAS,EAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAA;gBACnC,IAAA,qBAAU,EAAC,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAgB,CAAC,CAAA;gBAC5C,IAAA,oBAAS,EAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAA;YACpC,CAAC;YAED,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;YACjC,MAAM,SAAS,GAAG,OAAO,GAAG,SAAS,CAAA;YAErC,8CAA8C;YAC9C,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;YAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/B,IAAA,oBAAS,EAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;gBAC7B,IAAA,oBAAS,EAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,CAAA;YACvC,CAAC;YAED,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;YACjC,MAAM,SAAS,GAAG,OAAO,GAAG,SAAS,CAAA;YAErC,8CAA8C;YAC9C,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,eAAe,GAAG,+BAA+B,CAAA;YACvD,MAAM,MAAM,GAAG,IAAA,yBAAc,EAAC,GAAG,EAAE,eAAe,CAAC,CAAA;YAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;YACxC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,SAAS,GAAG,MAAM,CAAC,gBAAgB,CAAA;YAEzC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,oBAAS,EAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;YAChD,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,qBAAU,EAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;YACjD,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,oBAAS,EAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;QAClD,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAA;YAElC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,oBAAS,EAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;YAChD,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,qBAAU,EAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;YACjD,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,oBAAS,EAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;QAClD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA,CAAC,qBAAqB;YAE/D,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,CAAC,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;gBACrD,MAAM,CAAC,IAAA,4BAAiB,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC5C,MAAM,CAAC,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC9C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,YAAY,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAA,CAAC,kBAAkB;YAE5E,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC5B,MAAM,CAAC,IAAA,4BAAiB,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC5C,MAAM,CAAC,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;gBACnD,MAAM,CAAC,IAAA,oBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YAC5C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA,CAAC,cAAc;YACpD,MAAM,QAAQ,GAAG,KAAK,CAAA,CAAC,eAAe;YAEtC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC7B,MAAM,SAAS,GAAG,SAAS,GAAG,QAAQ,CAAA;gBACtC,MAAM,CAAC,IAAA,4BAAiB,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC/C,MAAM,CAAC,IAAA,oBAAS,EAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;YAC3D,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/home/g/dev/orangecat/src/utils/__tests__/currency.comprehensive.test.ts"],"sourcesContent":["/**\n * Currency Utilities - Comprehensive Tests\n * \n * Testing all currency conversion, formatting, and validation functions\n * which are critical for Bitcoin platform financial operations.\n */\n\nimport {\n  formatBTC,\n  formatSats,\n  formatUSD,\n  btcToSats,\n  satsToBTC,\n  formatCurrency,\n  parseBTCAmount,\n  validateBTCAmount,\n  convertCurrency\n} from '../currency'\n\ndescribe('🪙 Currency Utilities - Comprehensive Coverage', () => {\n  \n  describe('💰 Bitcoin Formatting', () => {\n    describe('formatBTC', () => {\n      test('formats whole Bitcoin amounts', () => {\n        expect(formatBTC(1)).toBe('1.00000000 BTC')\n        expect(formatBTC(21)).toBe('21.00000000 BTC')\n        expect(formatBTC(0)).toBe('0.00000000 BTC')\n      })\n\n      test('formats decimal Bitcoin amounts', () => {\n        expect(formatBTC(0.5)).toBe('0.50000000 BTC')\n        expect(formatBTC(0.00000001)).toBe('0.00000001 BTC')\n        expect(formatBTC(1.23456789)).toBe('1.23456789 BTC')\n      })\n\n      test('handles very small amounts', () => {\n        expect(formatBTC(0.00000001)).toBe('0.00000001 BTC') // 1 satoshi\n        expect(formatBTC(0.00000100)).toBe('0.00000100 BTC') // 100 sats\n      })\n\n      test('handles very large amounts', () => {\n        expect(formatBTC(21000000)).toBe('21000000.00000000 BTC')\n        expect(formatBTC(999999.99999999)).toBe('999999.99999999 BTC')\n      })\n\n      test('handles negative amounts', () => {\n        expect(formatBTC(-1)).toBe('-1.00000000 BTC')\n        expect(formatBTC(-0.5)).toBe('-0.50000000 BTC')\n      })\n\n      test('handles edge cases', () => {\n        expect(formatBTC(NaN)).toBe('0.00000000 BTC')\n        expect(formatBTC(Infinity)).toBe('0.00000000 BTC')\n        expect(formatBTC(-Infinity)).toBe('0.00000000 BTC')\n      })\n    })\n\n    describe('formatSats', () => {\n      test('formats satoshi amounts', () => {\n        expect(formatSats(100000000)).toBe('100,000,000 sats') // 1 BTC\n        expect(formatSats(1)).toBe('1 sats')\n        expect(formatSats(0)).toBe('0 sats')\n      })\n\n      test('formats with thousands separators', () => {\n        expect(formatSats(1000)).toBe('1,000 sats')\n        expect(formatSats(1000000)).toBe('1,000,000 sats')\n        expect(formatSats(2100000000000000)).toBe('2,100,000,000,000,000 sats') // 21M BTC\n      })\n\n      test('handles negative satoshi amounts', () => {\n        expect(formatSats(-1000)).toBe('-1,000 sats')\n        expect(formatSats(-100000000)).toBe('-100,000,000 sats')\n      })\n\n      test('handles edge cases', () => {\n        expect(formatSats(NaN)).toBe('0 sats')\n        expect(formatSats(Infinity)).toBe('0 sats')\n        expect(formatSats(-Infinity)).toBe('0 sats')\n      })\n    })\n  })\n\n  describe('💵 USD Formatting', () => {\n    describe('formatUSD', () => {\n      test('formats USD amounts with cents', () => {\n        expect(formatUSD(100)).toBe('$100.00')\n        expect(formatUSD(1.50)).toBe('$1.50')\n        expect(formatUSD(0)).toBe('$0.00')\n      })\n\n      test('formats large USD amounts', () => {\n        expect(formatUSD(1000)).toBe('$1,000.00')\n        expect(formatUSD(1000000)).toBe('$1,000,000.00')\n        expect(formatUSD(50000.99)).toBe('$50,000.99')\n      })\n\n      test('handles negative USD amounts', () => {\n        expect(formatUSD(-100)).toBe('-$100.00')\n        expect(formatUSD(-1.50)).toBe('-$1.50')\n      })\n\n      test('handles edge cases', () => {\n        expect(formatUSD(NaN)).toBe('$0.00')\n        expect(formatUSD(Infinity)).toBe('$0.00')\n        expect(formatUSD(-Infinity)).toBe('$0.00')\n      })\n    })\n  })\n\n  describe('🔄 Unit Conversions', () => {\n    describe('btcToSats', () => {\n      test('converts BTC to satoshis correctly', () => {\n        expect(btcToSats(1)).toBe(100000000) // 1 BTC = 100M sats\n        expect(btcToSats(0.5)).toBe(50000000) // 0.5 BTC = 50M sats\n        expect(btcToSats(0.00000001)).toBe(1) // 1 sat\n        expect(btcToSats(0)).toBe(0)\n      })\n\n      test('handles decimal precision correctly', () => {\n        expect(btcToSats(0.12345678)).toBe(12345678)\n        expect(btcToSats(0.00000100)).toBe(100)\n      })\n\n      test('handles negative amounts', () => {\n        expect(btcToSats(-1)).toBe(-100000000)\n        expect(btcToSats(-0.5)).toBe(-50000000)\n      })\n\n      test('handles edge cases', () => {\n        expect(btcToSats(NaN)).toBe(0)\n        expect(btcToSats(Infinity)).toBe(0)\n        expect(btcToSats(-Infinity)).toBe(0)\n      })\n    })\n\n    describe('satsToBTC', () => {\n      test('converts satoshis to BTC correctly', () => {\n        expect(satsToBTC(100000000)).toBe(1) // 100M sats = 1 BTC\n        expect(satsToBTC(50000000)).toBe(0.5) // 50M sats = 0.5 BTC\n        expect(satsToBTC(1)).toBe(0.00000001) // 1 sat\n        expect(satsToBTC(0)).toBe(0)\n      })\n\n      test('handles large satoshi amounts', () => {\n        expect(satsToBTC(2100000000000000)).toBe(21000000) // 21M BTC supply\n        expect(satsToBTC(12345678)).toBe(0.12345678)\n      })\n\n      test('handles negative amounts', () => {\n        expect(satsToBTC(-100000000)).toBe(-1)\n        expect(satsToBTC(-50000000)).toBe(-0.5)\n      })\n\n      test('handles edge cases', () => {\n        expect(satsToBTC(NaN)).toBe(0)\n        expect(satsToBTC(Infinity)).toBe(0)\n        expect(satsToBTC(-Infinity)).toBe(0)\n      })\n    })\n  })\n\n  describe('🎨 Generic Currency Formatting', () => {\n    describe('formatCurrency', () => {\n      test('formats different currencies', () => {\n        expect(formatCurrency(100, 'USD')).toBe('$100.00')\n        expect(formatCurrency(1, 'BTC')).toBe('1.00000000 BTC')\n        expect(formatCurrency(1000, 'SATS')).toBe('1,000 sats')\n      })\n\n      test('handles unknown currencies gracefully', () => {\n        expect(formatCurrency(100, 'EUR')).toBe('100.00 EUR')\n        expect(formatCurrency(50, 'GBP')).toBe('50.00 GBP')\n      })\n\n      test('handles edge cases', () => {\n        expect(formatCurrency(NaN, 'USD')).toBe('$0.00')\n        expect(formatCurrency(Infinity, 'BTC')).toBe('0.00000000 BTC')\n        expect(formatCurrency(-Infinity, 'SATS')).toBe('0 sats')\n      })\n    })\n  })\n\n  describe('📝 Amount Parsing', () => {\n    describe('parseBTCAmount', () => {\n      test('parses valid BTC amounts', () => {\n        expect(parseBTCAmount('1')).toBe(1)\n        expect(parseBTCAmount('0.5')).toBe(0.5)\n        expect(parseBTCAmount('0.00000001')).toBe(0.00000001)\n        expect(parseBTCAmount('21000000')).toBe(21000000)\n      })\n\n      test('parses amounts with BTC suffix', () => {\n        expect(parseBTCAmount('1 BTC')).toBe(1)\n        expect(parseBTCAmount('0.5 BTC')).toBe(0.5)\n        expect(parseBTCAmount('1BTC')).toBe(1)\n      })\n\n      test('handles whitespace', () => {\n        expect(parseBTCAmount(' 1 ')).toBe(1)\n        expect(parseBTCAmount('  0.5  BTC  ')).toBe(0.5)\n      })\n\n      test('handles invalid inputs', () => {\n        expect(parseBTCAmount('')).toBe(0)\n        expect(parseBTCAmount('invalid')).toBe(0)\n        expect(parseBTCAmount('abc')).toBe(0)\n        expect(parseBTCAmount(null as any)).toBe(0)\n        expect(parseBTCAmount(undefined as any)).toBe(0)\n      })\n\n      test('handles edge cases', () => {\n        expect(parseBTCAmount('0')).toBe(0)\n        expect(parseBTCAmount('-1')).toBe(-1)\n        expect(parseBTCAmount('Infinity')).toBe(0)\n        expect(parseBTCAmount('NaN')).toBe(0)\n      })\n    })\n  })\n\n  describe('✅ Amount Validation', () => {\n    describe('validateBTCAmount', () => {\n      test('validates correct BTC amounts', () => {\n        expect(validateBTCAmount(1)).toBe(true)\n        expect(validateBTCAmount(0.5)).toBe(true)\n        expect(validateBTCAmount(0.00000001)).toBe(true) // 1 satoshi\n        expect(validateBTCAmount(0)).toBe(true)\n      })\n\n      test('validates maximum BTC supply', () => {\n        expect(validateBTCAmount(21000000)).toBe(true) // Max supply\n        expect(validateBTCAmount(21000001)).toBe(false) // Over max supply\n      })\n\n      test('validates precision limits', () => {\n        expect(validateBTCAmount(0.00000001)).toBe(true) // 1 sat precision\n        expect(validateBTCAmount(0.000000001)).toBe(false) // Too precise\n      })\n\n      test('rejects negative amounts', () => {\n        expect(validateBTCAmount(-1)).toBe(false)\n        expect(validateBTCAmount(-0.1)).toBe(false)\n      })\n\n      test('rejects invalid numbers', () => {\n        expect(validateBTCAmount(NaN)).toBe(false)\n        expect(validateBTCAmount(Infinity)).toBe(false)\n        expect(validateBTCAmount(-Infinity)).toBe(false)\n      })\n\n      test('handles string inputs', () => {\n        expect(validateBTCAmount('1' as any)).toBe(false) // Should be number\n        expect(validateBTCAmount('invalid' as any)).toBe(false)\n      })\n    })\n  })\n\n  describe('💱 Currency Conversion', () => {\n    describe('convertCurrency', () => {\n      test('converts between BTC and SATS', () => {\n        expect(convertCurrency(1, 'BTC', 'SATS')).toBe(100000000)\n        expect(convertCurrency(100000000, 'SATS', 'BTC')).toBe(1)\n      })\n\n      test('converts with exchange rates', () => {\n        const exchangeRates = { 'BTC/USD': 50000, 'USD/BTC': 0.00002 }\n        \n        expect(convertCurrency(1, 'BTC', 'USD', exchangeRates)).toBe(50000)\n        expect(convertCurrency(50000, 'USD', 'BTC', exchangeRates)).toBe(1)\n      })\n\n      test('handles same currency conversion', () => {\n        expect(convertCurrency(100, 'USD', 'USD')).toBe(100)\n        expect(convertCurrency(1, 'BTC', 'BTC')).toBe(1)\n      })\n\n      test('handles missing exchange rates', () => {\n        expect(convertCurrency(1, 'BTC', 'EUR')).toBe(0) // No rate available\n        expect(convertCurrency(100, 'USD', 'GBP')).toBe(0) // No rate available\n      })\n\n      test('handles edge cases', () => {\n        expect(convertCurrency(0, 'BTC', 'USD')).toBe(0)\n        expect(convertCurrency(NaN, 'BTC', 'USD')).toBe(0)\n        expect(convertCurrency(Infinity, 'BTC', 'USD')).toBe(0)\n      })\n    })\n  })\n\n  describe('🔢 Precision and Rounding', () => {\n    test('maintains Bitcoin precision (8 decimals)', () => {\n      const amount = 1.123456789 // 9 decimals\n      const formatted = formatBTC(amount)\n      expect(formatted).toBe('1.12345679 BTC') // Rounded to 8 decimals\n    })\n\n    test('maintains satoshi precision (whole numbers)', () => {\n      const amount = 1000.7 // Fractional sats\n      const formatted = formatSats(Math.round(amount))\n      expect(formatted).toBe('1,001 sats') // Rounded to whole number\n    })\n\n    test('handles floating point precision issues', () => {\n      const amount = 0.1 + 0.2 // JavaScript floating point issue\n      const sats = btcToSats(amount)\n      expect(sats).toBe(30000000) // Should handle precision correctly\n    })\n  })\n\n  describe('🌍 Internationalization', () => {\n    test('formats numbers with locale-specific separators', () => {\n      // Test assumes US locale formatting\n      expect(formatSats(1234567)).toBe('1,234,567 sats')\n      expect(formatUSD(1234.56)).toBe('$1,234.56')\n    })\n\n    test('handles different decimal separators', () => {\n      // This would need locale-specific implementation\n      const amount = 1.5\n      expect(formatBTC(amount)).toContain('1.50000000') // US format\n    })\n  })\n\n  describe('⚡ Performance Tests', () => {\n    test('formats large numbers of amounts quickly', () => {\n      const startTime = performance.now()\n      \n      for (let i = 0; i < 10000; i++) {\n        formatBTC(Math.random() * 21000000)\n        formatSats(Math.random() * 2100000000000000)\n        formatUSD(Math.random() * 1000000)\n      }\n      \n      const endTime = performance.now()\n      const totalTime = endTime - startTime\n      \n      // Should format 30,000 amounts in under 100ms\n      expect(totalTime).toBeLessThan(100)\n    })\n\n    test('converts large numbers of amounts quickly', () => {\n      const startTime = performance.now()\n      \n      for (let i = 0; i < 10000; i++) {\n        btcToSats(Math.random() * 21)\n        satsToBTC(Math.random() * 2100000000)\n      }\n      \n      const endTime = performance.now()\n      const totalTime = endTime - startTime\n      \n      // Should convert 20,000 amounts in under 50ms\n      expect(totalTime).toBeLessThan(50)\n    })\n  })\n\n  describe('🛡️ Security Tests', () => {\n    test('prevents injection in currency symbols', () => {\n      const maliciousSymbol = '<script>alert(\"xss\")</script>'\n      const result = formatCurrency(100, maliciousSymbol)\n      \n      expect(result).not.toContain('<script>')\n      expect(result).toContain('100.00')\n    })\n\n    test('handles extremely large numbers safely', () => {\n      const veryLarge = Number.MAX_SAFE_INTEGER\n      \n      expect(() => formatBTC(veryLarge)).not.toThrow()\n      expect(() => formatSats(veryLarge)).not.toThrow()\n      expect(() => formatUSD(veryLarge)).not.toThrow()\n    })\n\n    test('handles extremely small numbers safely', () => {\n      const verySmall = Number.MIN_VALUE\n      \n      expect(() => formatBTC(verySmall)).not.toThrow()\n      expect(() => formatSats(verySmall)).not.toThrow()\n      expect(() => formatUSD(verySmall)).not.toThrow()\n    })\n  })\n\n  describe('📊 Real-world Scenarios', () => {\n    test('handles typical Bitcoin transaction amounts', () => {\n      const amounts = [0.001, 0.01, 0.1, 1, 10] // Common BTC amounts\n      \n      amounts.forEach(amount => {\n        expect(formatBTC(amount)).toMatch(/^\\d+\\.\\d{8} BTC$/)\n        expect(validateBTCAmount(amount)).toBe(true)\n        expect(btcToSats(amount)).toBeGreaterThan(0)\n      })\n    })\n\n    test('handles Lightning Network micro-payments', () => {\n      const microAmounts = [0.00000001, 0.00000010, 0.00000100] // 1, 10, 100 sats\n      \n      microAmounts.forEach(amount => {\n        expect(validateBTCAmount(amount)).toBe(true)\n        expect(btcToSats(amount)).toBeGreaterThanOrEqual(1)\n        expect(formatBTC(amount)).toContain('BTC')\n      })\n    })\n\n    test('handles DCA (Dollar Cost Averaging) scenarios', () => {\n      const dcaAmounts = [25, 50, 100, 500] // USD amounts\n      const btcPrice = 50000 // $50k per BTC\n      \n      dcaAmounts.forEach(usdAmount => {\n        const btcAmount = usdAmount / btcPrice\n        expect(validateBTCAmount(btcAmount)).toBe(true)\n        expect(formatUSD(usdAmount)).toMatch(/^\\$[\\d,]+\\.\\d{2}$/)\n      })\n    })\n  })\n}) "],"version":3}