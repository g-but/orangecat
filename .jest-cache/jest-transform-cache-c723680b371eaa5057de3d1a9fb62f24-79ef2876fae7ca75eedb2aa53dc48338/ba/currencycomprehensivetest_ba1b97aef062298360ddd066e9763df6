e07d107f49a985853b0613cc780e363a
"use strict";
/**
 * Currency Utilities - Comprehensive Tests
 *
 * Testing all currency conversion, formatting, and validation functions
 * which are critical for Bitcoin platform financial operations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const currency_1 = require("../currency");
describe('🪙 Currency Utilities - Comprehensive Coverage', () => {
    describe('💰 Bitcoin Formatting', () => {
        describe('formatBTC', () => {
            test('formats whole Bitcoin amounts', () => {
                expect((0, currency_1.formatBTC)(1)).toBe('1.00000000 BTC');
                expect((0, currency_1.formatBTC)(21)).toBe('21.00000000 BTC');
                expect((0, currency_1.formatBTC)(0)).toBe('0.00000000 BTC');
            });
            test('formats decimal Bitcoin amounts', () => {
                expect((0, currency_1.formatBTC)(0.5)).toBe('0.50000000 BTC');
                expect((0, currency_1.formatBTC)(0.00000001)).toBe('0.00000001 BTC');
                expect((0, currency_1.formatBTC)(1.23456789)).toBe('1.23456789 BTC');
            });
            test('handles very small amounts', () => {
                expect((0, currency_1.formatBTC)(0.00000001)).toBe('0.00000001 BTC'); // 1 satoshi
                expect((0, currency_1.formatBTC)(0.00000100)).toBe('0.00000100 BTC'); // 100 sats
            });
            test('handles very large amounts', () => {
                expect((0, currency_1.formatBTC)(21000000)).toBe('21000000.00000000 BTC');
                expect((0, currency_1.formatBTC)(999999.99999999)).toBe('999999.99999999 BTC');
            });
            test('handles negative amounts', () => {
                expect((0, currency_1.formatBTC)(-1)).toBe('-1.00000000 BTC');
                expect((0, currency_1.formatBTC)(-0.5)).toBe('-0.50000000 BTC');
            });
            test('handles edge cases', () => {
                expect((0, currency_1.formatBTC)(NaN)).toBe('0.00000000 BTC');
                expect((0, currency_1.formatBTC)(Infinity)).toBe('0.00000000 BTC');
                expect((0, currency_1.formatBTC)(-Infinity)).toBe('0.00000000 BTC');
            });
        });
        describe('formatSats', () => {
            test('formats satoshi amounts', () => {
                expect((0, currency_1.formatSats)(100000000)).toBe('100,000,000 sats'); // 1 BTC
                expect((0, currency_1.formatSats)(1)).toBe('1 sats');
                expect((0, currency_1.formatSats)(0)).toBe('0 sats');
            });
            test('formats with thousands separators', () => {
                expect((0, currency_1.formatSats)(1000)).toBe('1,000 sats');
                expect((0, currency_1.formatSats)(1000000)).toBe('1,000,000 sats');
                expect((0, currency_1.formatSats)(2100000000000000)).toBe('2,100,000,000,000,000 sats'); // 21M BTC
            });
            test('handles negative satoshi amounts', () => {
                expect((0, currency_1.formatSats)(-1000)).toBe('-1,000 sats');
                expect((0, currency_1.formatSats)(-100000000)).toBe('-100,000,000 sats');
            });
            test('handles edge cases', () => {
                expect((0, currency_1.formatSats)(NaN)).toBe('0 sats');
                expect((0, currency_1.formatSats)(Infinity)).toBe('0 sats');
                expect((0, currency_1.formatSats)(-Infinity)).toBe('0 sats');
            });
        });
    });
    describe('💵 USD Formatting', () => {
        describe('formatUSD', () => {
            test('formats USD amounts with cents', () => {
                expect((0, currency_1.formatUSD)(100)).toBe('$100.00');
                expect((0, currency_1.formatUSD)(1.50)).toBe('$1.50');
                expect((0, currency_1.formatUSD)(0)).toBe('$0.00');
            });
            test('formats large USD amounts', () => {
                expect((0, currency_1.formatUSD)(1000)).toBe('$1,000.00');
                expect((0, currency_1.formatUSD)(1000000)).toBe('$1,000,000.00');
                expect((0, currency_1.formatUSD)(50000.99)).toBe('$50,000.99');
            });
            test('handles negative USD amounts', () => {
                expect((0, currency_1.formatUSD)(-100)).toBe('-$100.00');
                expect((0, currency_1.formatUSD)(-1.50)).toBe('-$1.50');
            });
            test('handles edge cases', () => {
                expect((0, currency_1.formatUSD)(NaN)).toBe('$0.00');
                expect((0, currency_1.formatUSD)(Infinity)).toBe('$0.00');
                expect((0, currency_1.formatUSD)(-Infinity)).toBe('$0.00');
            });
        });
    });
    describe('🔄 Unit Conversions', () => {
        describe('btcToSats', () => {
            test('converts BTC to satoshis correctly', () => {
                expect((0, currency_1.btcToSats)(1)).toBe(100000000); // 1 BTC = 100M sats
                expect((0, currency_1.btcToSats)(0.5)).toBe(50000000); // 0.5 BTC = 50M sats
                expect((0, currency_1.btcToSats)(0.00000001)).toBe(1); // 1 sat
                expect((0, currency_1.btcToSats)(0)).toBe(0);
            });
            test('handles decimal precision correctly', () => {
                expect((0, currency_1.btcToSats)(0.12345678)).toBe(12345678);
                expect((0, currency_1.btcToSats)(0.00000100)).toBe(100);
            });
            test('handles negative amounts', () => {
                expect((0, currency_1.btcToSats)(-1)).toBe(-100000000);
                expect((0, currency_1.btcToSats)(-0.5)).toBe(-50000000);
            });
            test('handles edge cases', () => {
                expect((0, currency_1.btcToSats)(NaN)).toBe(0);
                expect((0, currency_1.btcToSats)(Infinity)).toBe(0);
                expect((0, currency_1.btcToSats)(-Infinity)).toBe(0);
            });
        });
        describe('satsToBTC', () => {
            test('converts satoshis to BTC correctly', () => {
                expect((0, currency_1.satsToBTC)(100000000)).toBe(1); // 100M sats = 1 BTC
                expect((0, currency_1.satsToBTC)(50000000)).toBe(0.5); // 50M sats = 0.5 BTC
                expect((0, currency_1.satsToBTC)(1)).toBe(0.00000001); // 1 sat
                expect((0, currency_1.satsToBTC)(0)).toBe(0);
            });
            test('handles large satoshi amounts', () => {
                expect((0, currency_1.satsToBTC)(2100000000000000)).toBe(21000000); // 21M BTC supply
                expect((0, currency_1.satsToBTC)(12345678)).toBe(0.12345678);
            });
            test('handles negative amounts', () => {
                expect((0, currency_1.satsToBTC)(-100000000)).toBe(-1);
                expect((0, currency_1.satsToBTC)(-50000000)).toBe(-0.5);
            });
            test('handles edge cases', () => {
                expect((0, currency_1.satsToBTC)(NaN)).toBe(0);
                expect((0, currency_1.satsToBTC)(Infinity)).toBe(0);
                expect((0, currency_1.satsToBTC)(-Infinity)).toBe(0);
            });
        });
    });
    describe('🎨 Generic Currency Formatting', () => {
        describe('formatCurrency', () => {
            test('formats different currencies', () => {
                expect((0, currency_1.formatCurrency)(100, 'USD')).toBe('$100.00');
                expect((0, currency_1.formatCurrency)(1, 'BTC')).toBe('1.00000000 BTC');
                expect((0, currency_1.formatCurrency)(1000, 'SATS')).toBe('1,000 sats');
            });
            test('handles unknown currencies gracefully', () => {
                expect((0, currency_1.formatCurrency)(100, 'EUR')).toBe('100.00 EUR');
                expect((0, currency_1.formatCurrency)(50, 'GBP')).toBe('50.00 GBP');
            });
            test('handles edge cases', () => {
                expect((0, currency_1.formatCurrency)(NaN, 'USD')).toBe('$0.00');
                expect((0, currency_1.formatCurrency)(Infinity, 'BTC')).toBe('0.00000000 BTC');
                expect((0, currency_1.formatCurrency)(-Infinity, 'SATS')).toBe('0 sats');
            });
        });
    });
    describe('📝 Amount Parsing', () => {
        describe('parseBTCAmount', () => {
            test('parses valid BTC amounts', () => {
                expect((0, currency_1.parseBTCAmount)('1')).toBe(1);
                expect((0, currency_1.parseBTCAmount)('0.5')).toBe(0.5);
                expect((0, currency_1.parseBTCAmount)('0.00000001')).toBe(0.00000001);
                expect((0, currency_1.parseBTCAmount)('21000000')).toBe(21000000);
            });
            test('parses amounts with BTC suffix', () => {
                expect((0, currency_1.parseBTCAmount)('1 BTC')).toBe(1);
                expect((0, currency_1.parseBTCAmount)('0.5 BTC')).toBe(0.5);
                expect((0, currency_1.parseBTCAmount)('1BTC')).toBe(1);
            });
            test('handles whitespace', () => {
                expect((0, currency_1.parseBTCAmount)(' 1 ')).toBe(1);
                expect((0, currency_1.parseBTCAmount)('  0.5  BTC  ')).toBe(0.5);
            });
            test('handles invalid inputs', () => {
                expect((0, currency_1.parseBTCAmount)('')).toBe(0);
                expect((0, currency_1.parseBTCAmount)('invalid')).toBe(0);
                expect((0, currency_1.parseBTCAmount)('abc')).toBe(0);
                expect((0, currency_1.parseBTCAmount)(null)).toBe(0);
                expect((0, currency_1.parseBTCAmount)(undefined)).toBe(0);
            });
            test('handles edge cases', () => {
                expect((0, currency_1.parseBTCAmount)('0')).toBe(0);
                expect((0, currency_1.parseBTCAmount)('-1')).toBe(-1);
                expect((0, currency_1.parseBTCAmount)('Infinity')).toBe(0);
                expect((0, currency_1.parseBTCAmount)('NaN')).toBe(0);
            });
        });
    });
    describe('✅ Amount Validation', () => {
        describe('validateBTCAmount', () => {
            test('validates correct BTC amounts', () => {
                expect((0, currency_1.validateBTCAmount)(1)).toBe(true);
                expect((0, currency_1.validateBTCAmount)(0.5)).toBe(true);
                expect((0, currency_1.validateBTCAmount)(0.00000001)).toBe(true); // 1 satoshi
                expect((0, currency_1.validateBTCAmount)(0)).toBe(true);
            });
            test('validates maximum BTC supply', () => {
                expect((0, currency_1.validateBTCAmount)(21000000)).toBe(true); // Max supply
                expect((0, currency_1.validateBTCAmount)(21000001)).toBe(false); // Over max supply
            });
            test('validates precision limits', () => {
                expect((0, currency_1.validateBTCAmount)(0.00000001)).toBe(true); // 1 sat precision
                expect((0, currency_1.validateBTCAmount)(0.000000001)).toBe(false); // Too precise
            });
            test('rejects negative amounts', () => {
                expect((0, currency_1.validateBTCAmount)(-1)).toBe(false);
                expect((0, currency_1.validateBTCAmount)(-0.1)).toBe(false);
            });
            test('rejects invalid numbers', () => {
                expect((0, currency_1.validateBTCAmount)(NaN)).toBe(false);
                expect((0, currency_1.validateBTCAmount)(Infinity)).toBe(false);
                expect((0, currency_1.validateBTCAmount)(-Infinity)).toBe(false);
            });
            test('handles string inputs', () => {
                expect((0, currency_1.validateBTCAmount)('1')).toBe(false); // Should be number
                expect((0, currency_1.validateBTCAmount)('invalid')).toBe(false);
            });
        });
    });
    describe('💱 Currency Conversion', () => {
        describe('convertCurrency', () => {
            test('converts between BTC and SATS', () => {
                expect((0, currency_1.convertCurrency)(1, 'BTC', 'SATS')).toBe(100000000);
                expect((0, currency_1.convertCurrency)(100000000, 'SATS', 'BTC')).toBe(1);
            });
            test('converts with exchange rates', () => {
                const exchangeRates = { 'BTC/USD': 50000, 'USD/BTC': 0.00002 };
                expect((0, currency_1.convertCurrency)(1, 'BTC', 'USD', exchangeRates)).toBe(50000);
                expect((0, currency_1.convertCurrency)(50000, 'USD', 'BTC', exchangeRates)).toBe(1);
            });
            test('handles same currency conversion', () => {
                expect((0, currency_1.convertCurrency)(100, 'USD', 'USD')).toBe(100);
                expect((0, currency_1.convertCurrency)(1, 'BTC', 'BTC')).toBe(1);
            });
            test('handles missing exchange rates', () => {
                expect((0, currency_1.convertCurrency)(1, 'BTC', 'EUR')).toBe(0); // No rate available
                expect((0, currency_1.convertCurrency)(100, 'USD', 'GBP')).toBe(0); // No rate available
            });
            test('handles edge cases', () => {
                expect((0, currency_1.convertCurrency)(0, 'BTC', 'USD')).toBe(0);
                expect((0, currency_1.convertCurrency)(NaN, 'BTC', 'USD')).toBe(0);
                expect((0, currency_1.convertCurrency)(Infinity, 'BTC', 'USD')).toBe(0);
            });
        });
    });
    describe('🔢 Precision and Rounding', () => {
        test('maintains Bitcoin precision (8 decimals)', () => {
            const amount = 1.123456789; // 9 decimals
            const formatted = (0, currency_1.formatBTC)(amount);
            expect(formatted).toBe('1.12345679 BTC'); // Rounded to 8 decimals
        });
        test('maintains satoshi precision (whole numbers)', () => {
            const amount = 1000.7; // Fractional sats
            const formatted = (0, currency_1.formatSats)(Math.round(amount));
            expect(formatted).toBe('1,001 sats'); // Rounded to whole number
        });
        test('handles floating point precision issues', () => {
            const amount = 0.1 + 0.2; // JavaScript floating point issue
            const sats = (0, currency_1.btcToSats)(amount);
            expect(sats).toBe(30000000); // Should handle precision correctly
        });
    });
    describe('🌍 Internationalization', () => {
        test('formats numbers with locale-specific separators', () => {
            // Test assumes US locale formatting
            expect((0, currency_1.formatSats)(1234567)).toBe('1,234,567 sats');
            expect((0, currency_1.formatUSD)(1234.56)).toBe('$1,234.56');
        });
        test('handles different decimal separators', () => {
            // This would need locale-specific implementation
            const amount = 1.5;
            expect((0, currency_1.formatBTC)(amount)).toContain('1.50000000'); // US format
        });
    });
    describe('⚡ Performance Tests', () => {
        test('formats large numbers of amounts quickly', () => {
            const startTime = performance.now();
            for (let i = 0; i < 10000; i++) {
                (0, currency_1.formatBTC)(Math.random() * 21000000);
                (0, currency_1.formatSats)(Math.random() * 2100000000000000);
                (0, currency_1.formatUSD)(Math.random() * 1000000);
            }
            const endTime = performance.now();
            const totalTime = endTime - startTime;
            // Should format 30,000 amounts in under 100ms
            expect(totalTime).toBeLessThan(100);
        });
        test('converts large numbers of amounts quickly', () => {
            const startTime = performance.now();
            for (let i = 0; i < 10000; i++) {
                (0, currency_1.btcToSats)(Math.random() * 21);
                (0, currency_1.satsToBTC)(Math.random() * 2100000000);
            }
            const endTime = performance.now();
            const totalTime = endTime - startTime;
            // Should convert 20,000 amounts in under 50ms
            expect(totalTime).toBeLessThan(50);
        });
    });
    describe('🛡️ Security Tests', () => {
        test('prevents injection in currency symbols', () => {
            const maliciousSymbol = '<script>alert("xss")</script>';
            const result = (0, currency_1.formatCurrency)(100, maliciousSymbol);
            expect(result).not.toContain('<script>');
            expect(result).toContain('100.00');
        });
        test('handles extremely large numbers safely', () => {
            const veryLarge = Number.MAX_SAFE_INTEGER;
            expect(() => (0, currency_1.formatBTC)(veryLarge)).not.toThrow();
            expect(() => (0, currency_1.formatSats)(veryLarge)).not.toThrow();
            expect(() => (0, currency_1.formatUSD)(veryLarge)).not.toThrow();
        });
        test('handles extremely small numbers safely', () => {
            const verySmall = Number.MIN_VALUE;
            expect(() => (0, currency_1.formatBTC)(verySmall)).not.toThrow();
            expect(() => (0, currency_1.formatSats)(verySmall)).not.toThrow();
            expect(() => (0, currency_1.formatUSD)(verySmall)).not.toThrow();
        });
    });
    describe('📊 Real-world Scenarios', () => {
        test('handles typical Bitcoin transaction amounts', () => {
            const amounts = [0.001, 0.01, 0.1, 1, 10]; // Common BTC amounts
            amounts.forEach(amount => {
                expect((0, currency_1.formatBTC)(amount)).toMatch(/^\d+\.\d{8} BTC$/);
                expect((0, currency_1.validateBTCAmount)(amount)).toBe(true);
                expect((0, currency_1.btcToSats)(amount)).toBeGreaterThan(0);
            });
        });
        test('handles Lightning Network micro-payments', () => {
            const microAmounts = [0.00000001, 0.00000010, 0.00000100]; // 1, 10, 100 sats
            microAmounts.forEach(amount => {
                expect((0, currency_1.validateBTCAmount)(amount)).toBe(true);
                expect((0, currency_1.btcToSats)(amount)).toBeGreaterThanOrEqual(1);
                expect((0, currency_1.formatBTC)(amount)).toContain('BTC');
            });
        });
        test('handles DCA (Dollar Cost Averaging) scenarios', () => {
            const dcaAmounts = [25, 50, 100, 500]; // USD amounts
            const btcPrice = 50000; // $50k per BTC
            dcaAmounts.forEach(usdAmount => {
                const btcAmount = usdAmount / btcPrice;
                expect((0, currency_1.validateBTCAmount)(btcAmount)).toBe(true);
                expect((0, currency_1.formatUSD)(usdAmount)).toMatch(/^\$[\d,]+\.\d{2}$/);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,