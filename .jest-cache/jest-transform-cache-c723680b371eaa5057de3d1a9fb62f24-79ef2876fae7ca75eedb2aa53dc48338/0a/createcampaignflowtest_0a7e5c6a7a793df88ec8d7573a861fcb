80a88b1079aa55588752150dd9426730
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock dependencies
jest.mock('next/navigation', () => ({
    useRouter: jest.fn()
}));
jest.mock('@/hooks/useAuth', () => ({
    useAuth: jest.fn()
}));
jest.mock('sonner', () => ({
    toast: {
        success: jest.fn(),
        error: jest.fn()
    }
}));
// Mock UI components
jest.mock('@/components/ui/Card', () => ({
    __esModule: true,
    default: ({ children, className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "card", className: className, children: children }),
    CardContent: ({ children, className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "card-content", className: className, children: children })
}));
jest.mock('@/components/ui/Input', () => ({
    __esModule: true,
    default: (_a) => {
        var { label } = _a, props = __rest(_a, ["label"]);
        return ((0, jsx_runtime_1.jsxs)("div", { children: [label && (0, jsx_runtime_1.jsx)("label", { children: label }), (0, jsx_runtime_1.jsx)("input", Object.assign({ "data-testid": `input-${props.name || props.id}` }, props))] }));
    }
}));
jest.mock('@/components/ui/Button', () => ({
    __esModule: true,
    default: ({ children, onClick, disabled, type, variant, className }) => {
        var _a;
        return ((0, jsx_runtime_1.jsx)("button", { "data-testid": `button-${((_a = children === null || children === void 0 ? void 0 : children.props) === null || _a === void 0 ? void 0 : _a.children) || children}`, onClick: onClick, disabled: disabled, type: type, className: className, children: children }));
    }
}));
// Mock categories
jest.mock('@/config/categories', () => ({
    simpleCategories: [
        { value: 'health', label: 'Health', icon: '🏥', description: 'Medical expenses' },
        { value: 'creative', label: 'Creative', icon: '🎨', description: 'Art, music, writing' },
        { value: 'technology', label: 'Technology', icon: '💻', description: 'Apps, websites' },
        { value: 'community', label: 'Community', icon: '🏘️', description: 'Local initiatives' }
    ]
}));
const react_1 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const navigation_1 = require("next/navigation");
const sonner_1 = require("sonner");
const page_1 = __importDefault(require("../page"));
const useAuth_1 = require("@/hooks/useAuth");
describe('Create Campaign Flow - Comprehensive Test Suite', () => {
    const mockPush = jest.fn();
    const mockUser = {
        id: 'test-user-id',
        email: 'test@example.com',
        user_metadata: { full_name: 'Test User' }
    };
    beforeEach(() => {
        jest.clearAllMocks();
        navigation_1.useRouter.mockReturnValue({
            push: mockPush
        });
        useAuth_1.useAuth.mockReturnValue({
            user: mockUser
        });
    });
    describe('🔐 Authentication Requirements', () => {
        it('redirects to auth page when user is not authenticated', () => {
            ;
            useAuth_1.useAuth.mockReturnValue({
                user: null
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            expect(mockPush).toHaveBeenCalledWith('/auth?mode=login');
        });
        it('renders create form when user is authenticated', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            expect(react_1.screen.getByText('Create Campaign')).toBeInTheDocument();
            expect(react_1.screen.getByText('Step 1 of 3')).toBeInTheDocument();
            expect(react_1.screen.getByText('Project Details')).toBeInTheDocument();
        });
    });
    describe('📝 Step 1: Project Details', () => {
        it('renders all required form fields', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            expect(react_1.screen.getByTestId('input-title')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('input-description')).toBeInTheDocument();
            expect(react_1.screen.getByText('Categories')).toBeInTheDocument();
            // Check category buttons
            expect(react_1.screen.getByText('Health')).toBeInTheDocument();
            expect(react_1.screen.getByText('Creative')).toBeInTheDocument();
            expect(react_1.screen.getByText('Technology')).toBeInTheDocument();
            expect(react_1.screen.getByText('Community')).toBeInTheDocument();
        });
        it('validates required title field for Continue button', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            const continueButton = react_1.screen.getByTestId('button-Continue');
            expect(continueButton).toBeDisabled();
            // Add title
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            expect(continueButton).not.toBeDisabled();
        });
        it('allows category selection and deselection', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            const healthCategory = react_1.screen.getByText('Health').closest('button');
            // Select category
            await user_event_1.default.click(healthCategory);
            expect(healthCategory).toHaveClass('border-teal-500');
            // Deselect category
            await user_event_1.default.click(healthCategory);
            expect(healthCategory).not.toHaveClass('border-teal-500');
        });
        it('proceeds to step 2 when continue button is clicked', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Fill required fields
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            const continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            expect(react_1.screen.getByText('Step 2 of 3')).toBeInTheDocument();
            expect(react_1.screen.getByText('Payment Setup')).toBeInTheDocument();
        });
    });
    describe('₿ Step 2: Payment Setup', () => {
        beforeEach(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Navigate to step 2
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            const continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
        });
        it('renders Bitcoin payment fields', () => {
            expect(react_1.screen.getByText('Bitcoin Address')).toBeInTheDocument();
            expect(react_1.screen.getByText('Lightning Address (Optional)')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('input-bitcoin_address')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('input-lightning_address')).toBeInTheDocument();
        });
        it('allows navigation back to step 1', async () => {
            const backButton = react_1.screen.getByTestId('button-Back');
            await user_event_1.default.click(backButton);
            expect(react_1.screen.getByText('Step 1 of 3')).toBeInTheDocument();
            expect(react_1.screen.getByText('Project Details')).toBeInTheDocument();
        });
        it('proceeds to step 3 when continue button is clicked', async () => {
            const continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            expect(react_1.screen.getByText('Step 3 of 3')).toBeInTheDocument();
            expect(react_1.screen.getByText('Final Details')).toBeInTheDocument();
        });
    });
    describe('🎯 Step 3: Final Details', () => {
        beforeEach(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Navigate to step 3
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            // Step 1 -> 2
            let continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            // Step 2 -> 3
            continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
        });
        it('renders final detail fields', () => {
            expect(react_1.screen.getByText('Website or Social Media')).toBeInTheDocument();
            expect(react_1.screen.getByText('Funding Goal (Optional)')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('input-website_url')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('input-goal_amount')).toBeInTheDocument();
        });
        it('shows Launch Campaign button instead of Continue', () => {
            expect(react_1.screen.getByTestId('button-Launch Campaign')).toBeInTheDocument();
            expect(react_1.screen.queryByTestId('button-Continue')).not.toBeInTheDocument();
        });
        it('allows navigation back to step 2', async () => {
            const backButton = react_1.screen.getByTestId('button-Back');
            await user_event_1.default.click(backButton);
            expect(react_1.screen.getByText('Step 2 of 3')).toBeInTheDocument();
            expect(react_1.screen.getByText('Payment Setup')).toBeInTheDocument();
        });
    });
    describe('🚀 Form Submission', () => {
        it('successfully submits campaign and redirects to dashboard', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Fill out complete form
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            const descriptionInput = react_1.screen.getByTestId('input-description');
            await user_event_1.default.type(descriptionInput, 'This is a test campaign description');
            // Navigate through steps
            let continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            // Step 2: Add Bitcoin address
            const bitcoinInput = react_1.screen.getByTestId('input-bitcoin_address');
            await user_event_1.default.type(bitcoinInput, 'bc1qtest123address');
            continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            // Step 3: Submit
            const launchButton = react_1.screen.getByTestId('button-Launch Campaign');
            await user_event_1.default.click(launchButton);
            await (0, react_1.waitFor)(() => {
                expect(sonner_1.toast.success).toHaveBeenCalledWith('🎉 Campaign created successfully!');
                expect(mockPush).toHaveBeenCalledWith('/dashboard');
            });
        });
        it('validates title requirement on submission', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Try to proceed without title
            const continueButton = react_1.screen.getByTestId('button-Continue');
            expect(continueButton).toBeDisabled();
        });
    });
    describe('💾 Draft Functionality', () => {
        it('saves draft when Save Draft button is clicked', async () => {
            const localStorageMock = {
                setItem: jest.fn()
            };
            Object.defineProperty(window, 'localStorage', {
                value: localStorageMock
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Add title to enable save draft
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            const saveDraftButton = react_1.screen.getByTestId('button-Save Draft');
            expect(saveDraftButton).not.toBeDisabled();
            await user_event_1.default.click(saveDraftButton);
            expect(localStorageMock.setItem).toHaveBeenCalledWith(`campaign-draft-${mockUser.id}`, expect.stringContaining('Test Campaign'));
            expect(sonner_1.toast.success).toHaveBeenCalledWith('Draft saved');
        });
        it('disables save draft when no title is provided', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            const saveDraftButton = react_1.screen.getByTestId('button-Save Draft');
            expect(saveDraftButton).toBeDisabled();
        });
    });
    describe('🧭 Navigation', () => {
        it('allows canceling and returning to dashboard', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            const cancelButton = react_1.screen.getByTestId('button-Cancel');
            await user_event_1.default.click(cancelButton);
            expect(mockPush).toHaveBeenCalledWith('/dashboard');
        });
    });
    describe('📊 Progress Tracking', () => {
        it('shows correct progress percentage for each step', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            // Step 1: 33%
            expect(react_1.screen.getByText('33% complete')).toBeInTheDocument();
            // Navigate to step 2
            const titleInput = react_1.screen.getByTestId('input-title');
            await user_event_1.default.type(titleInput, 'Test Campaign');
            let continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            // Step 2: 67%
            expect(react_1.screen.getByText('67% complete')).toBeInTheDocument();
            // Navigate to step 3
            continueButton = react_1.screen.getByTestId('button-Continue');
            await user_event_1.default.click(continueButton);
            // Step 3: 100%
            expect(react_1.screen.getByText('100% complete')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,