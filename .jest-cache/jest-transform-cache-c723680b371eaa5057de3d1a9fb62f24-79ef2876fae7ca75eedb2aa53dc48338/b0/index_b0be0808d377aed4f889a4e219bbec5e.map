{"file":"/home/g/dev/orangecat/src/services/profile/index.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/profile/index.ts"],"sourcesContent":["/**\n * PROFILE SERVICE - MODULAR ARCHITECTURE\n * \n * Created: 2025-01-09\n * Last Modified: 2025-01-09\n * Last Modified Summary: ‚úÖ REFACTORED from 808-line monolith to modular architecture - Option A Phase 1 Complete\n * \n * BEFORE: 808 lines in single file (102% over 400-line limit)\n * AFTER: 6 focused modules with single responsibilities\n * \n * Architecture Benefits:\n * - Single Responsibility Principle\n * - Better testability\n * - Easier maintenance\n * - Improved code reuse\n * - Clear separation of concerns\n */\n\n// Export all types\nexport type {\n  ScalableProfile,\n  ScalableProfileFormData,\n  ProfileAnalytics,\n  ProfileServiceResponse\n} from './types';\n\n// Export all modules\nexport { ProfileMapper } from './mapper';\nexport { ProfileReader } from './reader';\nexport { ProfileWriter } from './writer';\n\n// Main service class that combines all operations\nimport supabase from '@/services/supabase/client';\nimport { ProfileReader } from './reader';\nimport { ProfileWriter } from './writer';\nimport type { ScalableProfile, ScalableProfileFormData, ProfileAnalytics, ProfileServiceResponse } from './types';\nimport { logger } from '@/utils/logger';\n\nexport class ProfileService {\n  // =====================================================================\n  // üìñ READ OPERATIONS\n  // =====================================================================\n  \n  static async getProfile(userId: string): Promise<ScalableProfile | null> {\n    // TODO: Re-enable logger after Jest mocking is fixed\n    // logger.debug('ProfileService.getProfile called', { userId }, 'ProfileService');\n    return ProfileReader.getProfile(userId);\n  }\n\n  static async getProfiles(options: {\n    limit?: number;\n    offset?: number;\n    orderBy?: string;\n    orderDirection?: 'asc' | 'desc';\n  } = {}): Promise<ScalableProfile[]> {\n    return ProfileReader.getProfiles(options);\n  }\n\n  static async searchProfiles(\n    searchTerm: string,\n    limit: number = 20,\n    offset: number = 0\n  ): Promise<ScalableProfile[]> {\n    return ProfileReader.searchProfiles(searchTerm, limit, offset);\n  }\n\n  static async getAllProfiles(): Promise<ScalableProfile[]> {\n    return ProfileReader.getAllProfiles();\n  }\n\n  static async incrementProfileViews(userId: string): Promise<void> {\n    return ProfileReader.incrementProfileViews(userId);\n  }\n\n  // =====================================================================\n  // ‚úèÔ∏è WRITE OPERATIONS\n  // =====================================================================\n\n  static async updateProfile(\n    userId: string,\n    formData: ScalableProfileFormData\n  ): Promise<ProfileServiceResponse<ScalableProfile>> {\n    return ProfileWriter.updateProfile(userId, formData);\n  }\n\n  static async createProfile(\n    userId: string,\n    formData: ScalableProfileFormData\n  ): Promise<ProfileServiceResponse<ScalableProfile>> {\n    return ProfileWriter.createProfile(userId, formData);\n  }\n\n  static async updateAnalytics(\n    userId: string,\n    analytics: ProfileAnalytics\n  ): Promise<ProfileServiceResponse<void>> {\n    return ProfileWriter.updateAnalytics(userId, analytics);\n  }\n\n  static async deleteProfile(userId: string): Promise<ProfileServiceResponse<void>> {\n    return ProfileWriter.deleteProfile(userId);\n  }\n\n  static async fallbackProfileUpdate(\n    userId: string,\n    updates: Record<string, any>\n  ): Promise<ProfileServiceResponse<any>> {\n    return ProfileWriter.fallbackUpdate(userId, updates);\n  }\n\n  // =====================================================================\n  // üîê LEGACY COMPATIBILITY METHODS\n  // =====================================================================\n\n  static async updatePassword(newPassword: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const result = await supabase.auth.updateUser({ password: newPassword })\n\n      if (result && result.error) {\n        return { success: false, error: result.error.message || String(result.error) }\n      }\n\n      return { success: true }\n    } catch (err) {\n      // Network/authentication or other runtime errors\n      const message = (err as Error)?.message || 'Unexpected error'\n      return { success: false, error: message }\n    }\n  }\n} "],"version":3}