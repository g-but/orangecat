0692bbe757928c8f93a85eb6709e6f92
"use strict";
/**
 * PROFILE SERVICE - MODULAR ARCHITECTURE
 *
 * Created: 2025-01-09
 * Last Modified: 2025-01-09
 * Last Modified Summary: ‚úÖ REFACTORED from 808-line monolith to modular architecture - Option A Phase 1 Complete
 *
 * BEFORE: 808 lines in single file (102% over 400-line limit)
 * AFTER: 6 focused modules with single responsibilities
 *
 * Architecture Benefits:
 * - Single Responsibility Principle
 * - Better testability
 * - Easier maintenance
 * - Improved code reuse
 * - Clear separation of concerns
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileService = exports.ProfileWriter = exports.ProfileReader = exports.ProfileMapper = void 0;
// Export all modules
var mapper_1 = require("./mapper");
Object.defineProperty(exports, "ProfileMapper", { enumerable: true, get: function () { return mapper_1.ProfileMapper; } });
var reader_1 = require("./reader");
Object.defineProperty(exports, "ProfileReader", { enumerable: true, get: function () { return reader_1.ProfileReader; } });
var writer_1 = require("./writer");
Object.defineProperty(exports, "ProfileWriter", { enumerable: true, get: function () { return writer_1.ProfileWriter; } });
// Main service class that combines all operations
const client_1 = __importDefault(require("@/services/supabase/client"));
const reader_2 = require("./reader");
const writer_2 = require("./writer");
class ProfileService {
    // =====================================================================
    // üìñ READ OPERATIONS
    // =====================================================================
    static async getProfile(userId) {
        // TODO: Re-enable logger after Jest mocking is fixed
        // logger.debug('ProfileService.getProfile called', { userId }, 'ProfileService');
        return reader_2.ProfileReader.getProfile(userId);
    }
    static async getProfiles(options = {}) {
        return reader_2.ProfileReader.getProfiles(options);
    }
    static async searchProfiles(searchTerm, limit = 20, offset = 0) {
        return reader_2.ProfileReader.searchProfiles(searchTerm, limit, offset);
    }
    static async getAllProfiles() {
        return reader_2.ProfileReader.getAllProfiles();
    }
    static async incrementProfileViews(userId) {
        return reader_2.ProfileReader.incrementProfileViews(userId);
    }
    // =====================================================================
    // ‚úèÔ∏è WRITE OPERATIONS
    // =====================================================================
    static async updateProfile(userId, formData) {
        return writer_2.ProfileWriter.updateProfile(userId, formData);
    }
    static async createProfile(userId, formData) {
        return writer_2.ProfileWriter.createProfile(userId, formData);
    }
    static async updateAnalytics(userId, analytics) {
        return writer_2.ProfileWriter.updateAnalytics(userId, analytics);
    }
    static async deleteProfile(userId) {
        return writer_2.ProfileWriter.deleteProfile(userId);
    }
    static async fallbackProfileUpdate(userId, updates) {
        return writer_2.ProfileWriter.fallbackUpdate(userId, updates);
    }
    // =====================================================================
    // üîê LEGACY COMPATIBILITY METHODS
    // =====================================================================
    static async updatePassword(newPassword) {
        try {
            const result = await client_1.default.auth.updateUser({ password: newPassword });
            if (result && result.error) {
                return { success: false, error: result.error.message || String(result.error) };
            }
            return { success: true };
        }
        catch (err) {
            // Network/authentication or other runtime errors
            const message = (err === null || err === void 0 ? void 0 : err.message) || 'Unexpected error';
            return { success: false, error: message };
        }
    }
}
exports.ProfileService = ProfileService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,