47c52ac54b0646fd704892241d76e291
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock Next.js Link component
jest.mock('next/link', () => {
    return function MockLink(_a) {
        var { children, href } = _a, props = __rest(_a, ["children", "href"]);
        return (0, jsx_runtime_1.jsx)("a", Object.assign({ href: href }, props, { children: children }));
    };
});
/**
 * Button Component Tests
 *
 * Testing core UI component used throughout the Bitcoin funding platform
 * Critical for user interaction, accessibility, and platform branding
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const Button_1 = __importDefault(require("../Button"));
describe('🎨 Button Component - UI Foundation Tests', () => {
    describe('✅ Basic Rendering', () => {
        test('should render button with text', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Click me" }));
            expect(react_2.screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument();
        });
        test('should render button with custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { className: "custom-class", children: "Test" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('custom-class');
        });
        test('should have proper display name', () => {
            expect(Button_1.default.displayName).toBe('Button');
        });
        test('should render as Link when href is provided', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { href: "/test", children: "Link Button" }));
            const link = react_2.screen.getByRole('link');
            expect(link).toBeInTheDocument();
            expect(link).toHaveAttribute('href', '/test');
        });
    });
    describe('🎨 Variant Styling - Platform Branding', () => {
        test('should apply primary variant (tiffany brand color)', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { variant: "primary", children: "Primary" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('bg-tiffany-600', 'text-white', 'hover:bg-tiffany-700');
        });
        test('should apply secondary variant styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { variant: "secondary", children: "Secondary" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('bg-gray-100', 'text-gray-900', 'hover:bg-gray-200');
        });
        test('should apply ghost variant styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { variant: "ghost", children: "Ghost" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('hover:bg-gray-100', 'text-gray-700');
        });
        test('should apply danger variant styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { variant: "danger", children: "Delete" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('bg-red-600', 'text-white', 'hover:bg-red-700');
        });
        test('should apply outline variant styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { variant: "outline", children: "Outline" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('border-2', 'border-gray-300', 'bg-transparent');
        });
        test('should apply gradient variant (Bitcoin orange to tiffany)', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { variant: "gradient", children: "Gradient" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('bg-gradient-to-r', 'from-tiffany-600', 'to-orange-600');
        });
        test('should default to primary variant', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Default" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('bg-tiffany-600');
        });
    });
    describe('📏 Size Variants - Responsive Design', () => {
        test('should apply small size styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { size: "sm", children: "Small" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('h-9', 'min-h-[36px]', 'px-4', 'text-sm', 'min-w-[80px]');
        });
        test('should apply medium size (default)', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Medium" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('h-11', 'min-h-[44px]', 'px-6', 'text-base', 'min-w-[100px]');
        });
        test('should apply large size styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { size: "lg", children: "Large" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('h-12', 'min-h-[48px]', 'px-8', 'text-lg', 'min-w-[120px]');
        });
        test('should apply extra large size styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { size: "xl", children: "Extra Large" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('h-14', 'min-h-[56px]', 'px-10', 'text-xl', 'min-w-[140px]');
        });
    });
    describe('🔄 Loading State - UX Enhancement', () => {
        test('should show loading spinner when isLoading is true', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { isLoading: true, children: "Submit" }));
            expect(react_2.screen.getByText('Loading...')).toBeInTheDocument();
            // Check for spinner animation class
            const spinner = document.querySelector('.animate-spin');
            expect(spinner).toBeInTheDocument();
        });
        test('should disable button when loading', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { isLoading: true, children: "Submit" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toBeDisabled();
        });
        test('should not show loading text when not loading', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Submit" }));
            expect(react_2.screen.queryByText('Loading...')).not.toBeInTheDocument();
        });
        test('should display original content when not loading', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Submit Form" }));
            expect(react_2.screen.getByText('Submit Form')).toBeInTheDocument();
        });
    });
    describe('🔄 Interactive States - User Experience', () => {
        test('should handle click events', () => {
            const handleClick = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { onClick: handleClick, children: "Click me" }));
            react_2.fireEvent.click(react_2.screen.getByRole('button'));
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        test('should be disabled when disabled prop is true', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { disabled: true, children: "Disabled" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toBeDisabled();
            expect(button).toHaveClass('disabled:pointer-events-none', 'disabled:opacity-50');
        });
        test('should not call onClick when disabled', () => {
            const handleClick = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { disabled: true, onClick: handleClick, children: "Disabled" }));
            react_2.fireEvent.click(react_2.screen.getByRole('button'));
            expect(handleClick).not.toHaveBeenCalled();
        });
        test('should have transform and hover effects', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Hover me" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('transform', 'hover:scale-102', 'active:scale-95');
        });
        test('should have transition effects', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Animated" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('transition-all', 'duration-300');
        });
    });
    describe('♿ Accessibility - Platform Standards', () => {
        test('should have proper button role', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Accessible" }));
            expect(react_2.screen.getByRole('button')).toBeInTheDocument();
        });
        test('should support focus management', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Focusable" }));
            const button = react_2.screen.getByRole('button');
            button.focus();
            expect(button).toHaveFocus();
            expect(button).toHaveClass('focus-visible:outline-none', 'focus-visible:ring-2');
        });
        test('should support aria attributes', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { "aria-label": "Custom label", "aria-describedby": "desc", children: "Icon" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveAttribute('aria-label', 'Custom label');
            expect(button).toHaveAttribute('aria-describedby', 'desc');
        });
        test('should have touch-friendly design', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { children: "Touch" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('touch-manipulation', 'select-none');
        });
        test('should have proper minimum touch target size', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { size: "sm", children: "Small Touch" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('min-h-[36px]', 'min-w-[80px]');
        });
    });
    describe('🔗 Link Functionality - Navigation', () => {
        test('should render as link with href', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { href: "/dashboard", children: "Go to Dashboard" }));
            const link = react_2.screen.getByRole('link');
            expect(link).toHaveAttribute('href', '/dashboard');
            expect(link).toHaveTextContent('Go to Dashboard');
        });
        test('should apply styles to link variant', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { href: "/test", variant: "primary", children: "Link" }));
            const link = react_2.screen.getByRole('link');
            expect(link).toHaveClass('bg-tiffany-600', 'text-white');
        });
        test('should support loading state in link mode', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { href: "/test", isLoading: true, children: "Loading Link" }));
            expect(react_2.screen.getByText('Loading...')).toBeInTheDocument();
        });
    });
    describe('💼 Real-world Bitcoin Platform Scenarios', () => {
        test('should work as Bitcoin donation button', () => {
            const handleDonate = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { onClick: handleDonate, variant: "gradient", size: "lg", children: "\u20BF Donate Bitcoin" }));
            const button = react_2.screen.getByRole('button', { name: '₿ Donate Bitcoin' });
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('bg-gradient-to-r', 'from-tiffany-600', 'to-orange-600');
            react_2.fireEvent.click(button);
            expect(handleDonate).toHaveBeenCalled();
        });
        test('should work as campaign creation button', () => {
            const handleCreate = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { onClick: handleCreate, variant: "primary", size: "xl", children: "Create Campaign" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('h-14', 'min-h-[56px]', 'bg-tiffany-600');
            react_2.fireEvent.click(button);
            expect(handleCreate).toHaveBeenCalled();
        });
        test('should work as form submission with loading', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { type: "submit", variant: "primary", children: "Submit Campaign" }));
            expect(react_2.screen.getByText('Submit Campaign')).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(Button_1.default, { type: "submit", variant: "primary", isLoading: true, children: "Submit Campaign" }));
            expect(react_2.screen.getByText('Loading...')).toBeInTheDocument();
            expect(react_2.screen.getByRole('button')).toBeDisabled();
        });
        test('should work as danger action (delete campaign)', () => {
            const handleDelete = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { onClick: handleDelete, variant: "danger", size: "sm", children: "Delete Campaign" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('bg-red-600', 'text-white');
            react_2.fireEvent.click(button);
            expect(handleDelete).toHaveBeenCalled();
        });
        test('should work as navigation link to campaign page', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { href: "/campaign/123", variant: "outline", children: "View Campaign" }));
            const link = react_2.screen.getByRole('link');
            expect(link).toHaveAttribute('href', '/campaign/123');
            expect(link).toHaveClass('border-2', 'border-gray-300');
        });
    });
    describe('🎨 Custom Styling & Integration', () => {
        test('should merge custom classes properly', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { className: "custom-margin bg-purple-500", variant: "primary", children: "Custom" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveClass('custom-margin', 'bg-purple-500');
        });
        test('should support style prop', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { style: { backgroundColor: 'red', fontSize: '20px' }, children: "Styled" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveStyle({
                backgroundColor: 'red',
                fontSize: '20px'
            });
        });
        test('should support all standard button attributes', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Button_1.default, { type: "submit", name: "submitBtn", value: "submit", "data-testid": "submit-button", children: "Submit" }));
            const button = react_2.screen.getByRole('button');
            expect(button).toHaveAttribute('type', 'submit');
            expect(button).toHaveAttribute('name', 'submitBtn');
            expect(button).toHaveAttribute('value', 'submit');
            expect(button).toHaveAttribute('data-testid', 'submit-button');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,