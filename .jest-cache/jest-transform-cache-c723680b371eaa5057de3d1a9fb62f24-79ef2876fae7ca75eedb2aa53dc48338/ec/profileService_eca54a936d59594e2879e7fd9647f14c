f2a7ff0652971f259685d55be97acaed
"use strict";
/**
 * PROFILE SERVICE - CLEAN MODULAR ARCHITECTURE
 *
 * Created: 2025-01-08
 * Last Modified: 2025-01-09
 * Last Modified Summary: âœ… REFACTORED from 808-line monolith to modular architecture - Option A Phase 1 Complete
 *
 * BEFORE: 808 lines in single file (102% over 400-line limit)
 * AFTER: Clean imports from 5 focused modules (~200 lines each)
 *
 * Performance Impact: Improved tree-shaking, better code splitting, easier maintenance
 * Architecture: Follows Single Responsibility Principle, DRY principles
 *
 * Module Structure:
 * - types.ts: All TypeScript interfaces and types
 * - mapper.ts: Database schema mapping logic
 * - reader.ts: All read operations (getProfile, searchProfiles, etc.)
 * - writer.ts: All write operations (updateProfile, createProfile, etc.)
 * - index.ts: Combined service interface
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fallbackProfileUpdate = exports.incrementProfileViews = exports.updateAnalytics = exports.searchProfiles = exports.getAllProfiles = exports.deleteProfile = exports.createProfile = exports.updateProfile = exports.getProfile = exports.ProfileWriter = exports.ProfileReader = exports.ProfileMapper = exports.ProfileService = void 0;
// Export everything from the modular architecture
var index_1 = require("./profile/index");
Object.defineProperty(exports, "ProfileService", { enumerable: true, get: function () { return index_1.ProfileService; } });
Object.defineProperty(exports, "ProfileMapper", { enumerable: true, get: function () { return index_1.ProfileMapper; } });
Object.defineProperty(exports, "ProfileReader", { enumerable: true, get: function () { return index_1.ProfileReader; } });
Object.defineProperty(exports, "ProfileWriter", { enumerable: true, get: function () { return index_1.ProfileWriter; } });
// Re-export some common functions for backward compatibility
const index_2 = require("./profile/index");
exports.getProfile = index_2.ProfileService.getProfile.bind(index_2.ProfileService);
exports.updateProfile = index_2.ProfileService.updateProfile.bind(index_2.ProfileService);
exports.createProfile = index_2.ProfileService.createProfile.bind(index_2.ProfileService);
exports.deleteProfile = index_2.ProfileService.deleteProfile.bind(index_2.ProfileService);
exports.getAllProfiles = index_2.ProfileService.getAllProfiles.bind(index_2.ProfileService);
exports.searchProfiles = index_2.ProfileService.searchProfiles.bind(index_2.ProfileService);
exports.updateAnalytics = index_2.ProfileService.updateAnalytics.bind(index_2.ProfileService);
exports.incrementProfileViews = index_2.ProfileService.incrementProfileViews.bind(index_2.ProfileService);
exports.fallbackProfileUpdate = index_2.ProfileService.fallbackProfileUpdate.bind(index_2.ProfileService);
// Default export for backward compatibility
exports.default = index_2.ProfileService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3NyYy9zZXJ2aWNlcy9wcm9maWxlU2VydmljZS50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7OztBQUVILGtEQUFrRDtBQUNsRCx5Q0FTeUI7QUFSdkIsdUdBQUEsY0FBYyxPQUFBO0FBQ2Qsc0dBQUEsYUFBYSxPQUFBO0FBQ2Isc0dBQUEsYUFBYSxPQUFBO0FBQ2Isc0dBQUEsYUFBYSxPQUFBO0FBVWYsNkRBQTZEO0FBQzdELDJDQUFpRDtBQUVwQyxRQUFBLFVBQVUsR0FBRyxzQkFBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxDQUFDO0FBQzVELFFBQUEsYUFBYSxHQUFHLHNCQUFjLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLENBQUM7QUFDbEUsUUFBQSxhQUFhLEdBQUcsc0JBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsQ0FBQztBQUNsRSxRQUFBLGFBQWEsR0FBRyxzQkFBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxDQUFDO0FBQ2xFLFFBQUEsY0FBYyxHQUFHLHNCQUFjLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLENBQUM7QUFDcEUsUUFBQSxjQUFjLEdBQUcsc0JBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsQ0FBQztBQUNwRSxRQUFBLGVBQWUsR0FBRyxzQkFBYyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxDQUFDO0FBQ3RFLFFBQUEscUJBQXFCLEdBQUcsc0JBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxDQUFDO0FBQ2xGLFFBQUEscUJBQXFCLEdBQUcsc0JBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxDQUFDO0FBRS9GLDRDQUE0QztBQUM1QyxrQkFBZSxzQkFBYyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2cvZGV2L29yYW5nZWNhdC9zcmMvc2VydmljZXMvcHJvZmlsZVNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQUk9GSUxFIFNFUlZJQ0UgLSBDTEVBTiBNT0RVTEFSIEFSQ0hJVEVDVFVSRVxuICogXG4gKiBDcmVhdGVkOiAyMDI1LTAxLTA4XG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAxLTA5XG4gKiBMYXN0IE1vZGlmaWVkIFN1bW1hcnk6IOKchSBSRUZBQ1RPUkVEIGZyb20gODA4LWxpbmUgbW9ub2xpdGggdG8gbW9kdWxhciBhcmNoaXRlY3R1cmUgLSBPcHRpb24gQSBQaGFzZSAxIENvbXBsZXRlXG4gKiBcbiAqIEJFRk9SRTogODA4IGxpbmVzIGluIHNpbmdsZSBmaWxlICgxMDIlIG92ZXIgNDAwLWxpbmUgbGltaXQpXG4gKiBBRlRFUjogQ2xlYW4gaW1wb3J0cyBmcm9tIDUgZm9jdXNlZCBtb2R1bGVzICh+MjAwIGxpbmVzIGVhY2gpXG4gKiBcbiAqIFBlcmZvcm1hbmNlIEltcGFjdDogSW1wcm92ZWQgdHJlZS1zaGFraW5nLCBiZXR0ZXIgY29kZSBzcGxpdHRpbmcsIGVhc2llciBtYWludGVuYW5jZVxuICogQXJjaGl0ZWN0dXJlOiBGb2xsb3dzIFNpbmdsZSBSZXNwb25zaWJpbGl0eSBQcmluY2lwbGUsIERSWSBwcmluY2lwbGVzXG4gKiBcbiAqIE1vZHVsZSBTdHJ1Y3R1cmU6XG4gKiAtIHR5cGVzLnRzOiBBbGwgVHlwZVNjcmlwdCBpbnRlcmZhY2VzIGFuZCB0eXBlc1xuICogLSBtYXBwZXIudHM6IERhdGFiYXNlIHNjaGVtYSBtYXBwaW5nIGxvZ2ljXG4gKiAtIHJlYWRlci50czogQWxsIHJlYWQgb3BlcmF0aW9ucyAoZ2V0UHJvZmlsZSwgc2VhcmNoUHJvZmlsZXMsIGV0Yy4pXG4gKiAtIHdyaXRlci50czogQWxsIHdyaXRlIG9wZXJhdGlvbnMgKHVwZGF0ZVByb2ZpbGUsIGNyZWF0ZVByb2ZpbGUsIGV0Yy4pXG4gKiAtIGluZGV4LnRzOiBDb21iaW5lZCBzZXJ2aWNlIGludGVyZmFjZVxuICovXG5cbi8vIEV4cG9ydCBldmVyeXRoaW5nIGZyb20gdGhlIG1vZHVsYXIgYXJjaGl0ZWN0dXJlXG5leHBvcnQge1xuICBQcm9maWxlU2VydmljZSxcbiAgUHJvZmlsZU1hcHBlcixcbiAgUHJvZmlsZVJlYWRlcixcbiAgUHJvZmlsZVdyaXRlcixcbiAgdHlwZSBTY2FsYWJsZVByb2ZpbGUsXG4gIHR5cGUgU2NhbGFibGVQcm9maWxlRm9ybURhdGEsXG4gIHR5cGUgUHJvZmlsZUFuYWx5dGljcyxcbiAgdHlwZSBQcm9maWxlU2VydmljZVJlc3BvbnNlXG59IGZyb20gJy4vcHJvZmlsZS9pbmRleCc7XG5cbi8vIExlZ2FjeSBjb21wYXRpYmlsaXR5IGV4cG9ydHNcbmV4cG9ydCB0eXBlIHsgUHJvZmlsZSwgUHJvZmlsZUZvcm1EYXRhIH0gZnJvbSAnQC90eXBlcy9kYXRhYmFzZSc7XG5cbi8vIFJlLWV4cG9ydCBzb21lIGNvbW1vbiBmdW5jdGlvbnMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmltcG9ydCB7IFByb2ZpbGVTZXJ2aWNlIH0gZnJvbSAnLi9wcm9maWxlL2luZGV4JztcblxuZXhwb3J0IGNvbnN0IGdldFByb2ZpbGUgPSBQcm9maWxlU2VydmljZS5nZXRQcm9maWxlLmJpbmQoUHJvZmlsZVNlcnZpY2UpO1xuZXhwb3J0IGNvbnN0IHVwZGF0ZVByb2ZpbGUgPSBQcm9maWxlU2VydmljZS51cGRhdGVQcm9maWxlLmJpbmQoUHJvZmlsZVNlcnZpY2UpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVByb2ZpbGUgPSBQcm9maWxlU2VydmljZS5jcmVhdGVQcm9maWxlLmJpbmQoUHJvZmlsZVNlcnZpY2UpO1xuZXhwb3J0IGNvbnN0IGRlbGV0ZVByb2ZpbGUgPSBQcm9maWxlU2VydmljZS5kZWxldGVQcm9maWxlLmJpbmQoUHJvZmlsZVNlcnZpY2UpO1xuZXhwb3J0IGNvbnN0IGdldEFsbFByb2ZpbGVzID0gUHJvZmlsZVNlcnZpY2UuZ2V0QWxsUHJvZmlsZXMuYmluZChQcm9maWxlU2VydmljZSk7XG5leHBvcnQgY29uc3Qgc2VhcmNoUHJvZmlsZXMgPSBQcm9maWxlU2VydmljZS5zZWFyY2hQcm9maWxlcy5iaW5kKFByb2ZpbGVTZXJ2aWNlKTtcbmV4cG9ydCBjb25zdCB1cGRhdGVBbmFseXRpY3MgPSBQcm9maWxlU2VydmljZS51cGRhdGVBbmFseXRpY3MuYmluZChQcm9maWxlU2VydmljZSk7XG5leHBvcnQgY29uc3QgaW5jcmVtZW50UHJvZmlsZVZpZXdzID0gUHJvZmlsZVNlcnZpY2UuaW5jcmVtZW50UHJvZmlsZVZpZXdzLmJpbmQoUHJvZmlsZVNlcnZpY2UpO1xuZXhwb3J0IGNvbnN0IGZhbGxiYWNrUHJvZmlsZVVwZGF0ZSA9IFByb2ZpbGVTZXJ2aWNlLmZhbGxiYWNrUHJvZmlsZVVwZGF0ZS5iaW5kKFByb2ZpbGVTZXJ2aWNlKTtcblxuLy8gRGVmYXVsdCBleHBvcnQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGVTZXJ2aWNlOyAiXSwidmVyc2lvbiI6M30=