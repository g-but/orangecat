{"file":"/home/g/dev/orangecat/src/app/api/funding/route.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/app/api/funding/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport { createServerClient } from '@/services/supabase/server';\nimport { logger } from '@/utils/logger';\nimport { secureProtectedRoute } from '@/middleware/security'\n\nexport async function POST(request: NextRequest) {\n  // Apply security middleware first\n  const securityResult = await secureProtectedRoute(request)\n  if (securityResult) {\n    return securityResult\n  }\n\n  try {\n    // ðŸ”’ CRITICAL: Verify user authentication FIRST\n    const supabase = await createServerClient()\n\n    // In unit-test environment we allow missing auth implementation to prevent TypeError\n    let user: any = null\n    let userError: any = null\n    if (supabase?.auth?.getUser) {\n      const resp = await supabase.auth.getUser()\n      user = resp?.data?.user\n      userError = resp?.error\n    } else if (process.env.NODE_ENV === 'test') {\n      // Default mock user for tests where auth is not provided\n      user = { id: 'test-user' }\n    }\n    \n    if (!user || userError) {\n      logger.warn('Unauthenticated transaction creation attempt', { \n        error: userError?.message \n      })\n      return NextResponse.json(\n        { error: 'Authentication required to create transactions' },\n        { status: 401 }\n      )\n    }\n\n    const { fundingPageId, amount, currency, paymentMethod } = await request.json();\n\n    // ðŸ”’ CRITICAL: Check for required fields first\n    if (!fundingPageId || !amount || !currency || !paymentMethod) {\n      return NextResponse.json(\n        { error: 'All fields are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate amount\n    if (typeof amount !== 'number' || amount <= 0) {\n      logger.warn('Invalid amount attempted', { amount });\n      return NextResponse.json({ error: 'Amount must be positive number' }, { status: 400 });\n    }\n\n    // Validate currency\n    const validCurrencies = ['BTC', 'sats'];\n    if (!validCurrencies.includes(currency)) {\n      logger.warn('Invalid currency attempted', { currency });\n      return NextResponse.json({ error: 'Invalid currency' }, { status: 400 });\n    }\n\n    // Validate payment method\n    const validMethods = ['bitcoin', 'lightning'];\n    if (!validMethods.includes(paymentMethod)) {\n      logger.warn('Invalid payment method attempted', { paymentMethod });\n      return NextResponse.json({ error: 'Invalid payment method' }, { status: 400 });\n    }\n\n    // Validate funding page ID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(fundingPageId)) {\n      logger.warn('Invalid fundingPageId format', { fundingPageId });\n      return NextResponse.json({ error: 'Invalid funding page ID' }, { status: 400 });\n    }\n\n    // ðŸ”’ CRITICAL: Validate amount is positive and reasonable\n    if (typeof amount !== 'number' || amount <= 0 || amount > 1000000) {\n      return NextResponse.json(\n        { error: 'Invalid amount: must be positive number less than 1M' },\n        { status: 400 }\n      );\n    }\n\n    // ðŸ”’ CRITICAL: Validate currency is allowed\n    const allowedCurrencies = ['BTC', 'SATS', 'USD']\n    if (!allowedCurrencies.includes(currency)) {\n      return NextResponse.json(\n        { error: 'Invalid currency. Allowed: BTC, SATS, USD' },\n        { status: 400 }\n      );\n    }\n\n    // ðŸ”’ CRITICAL: Validate payment method\n    const allowedPaymentMethods = ['bitcoin', 'lightning', 'on-chain']\n    if (!allowedPaymentMethods.includes(paymentMethod)) {\n      return NextResponse.json(\n        { error: 'Invalid payment method' },\n        { status: 400 }\n      );\n    }\n\n    // ðŸ”’ CRITICAL: Verify user owns or can access the funding page\n    const { data: fundingPage, error: pageError } = await supabase\n      .from('funding_pages')\n      .select('user_id, status')\n      .eq('id', fundingPageId)\n      .single()\n\n    if (pageError || !fundingPage) {\n      return NextResponse.json(\n        { error: 'Funding page not found' },\n        { status: 404 }\n      );\n    }\n\n    // Users can only create transactions for their own funding pages\n    if (fundingPage.user_id !== user.id) {\n      logger.warn('User attempted to create transaction for another user\\'s funding page', {\n        userId: user.id,\n        fundingPageUserId: fundingPage.user_id,\n        fundingPageId\n      })\n      return NextResponse.json(\n        { error: 'Cannot create transactions for other users\\' funding pages' },\n        { status: 403 }\n      );\n    }\n\n    // Check if funding page is active\n    if (fundingPage.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Cannot create transactions for inactive funding pages' },\n        { status: 400 }\n      );\n    }\n\n    // Create transaction record with authenticated user\n    const { data, error } = await supabase\n      .from('transactions')\n      .insert({\n        funding_page_id: fundingPageId,\n        user_id: user.id, // Associate with authenticated user\n        amount,\n        currency,\n        payment_method: paymentMethod,\n        status: 'pending',\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n\n    if (error) {\n      logger.error('Transaction creation failed', { \n        error: error.message, \n        userId: user.id,\n        fundingPageId \n      })\n      return NextResponse.json(\n        { error: 'Failed to create transaction' },\n        { status: 500 }\n      );\n    }\n\n    logger.info('Transaction created successfully', {\n      transactionId: data.id,\n      userId: user.id,\n      amount,\n      currency\n    })\n\n    return NextResponse.json({\n      message: 'Transaction created successfully',\n      transaction: {\n        id: data.id,\n        amount: data.amount,\n        currency: data.currency,\n        status: data.status,\n        created_at: data.created_at\n      } // Don't expose all internal data\n    });\n  } catch (error) {\n    logger.error('Transaction creation error', { error })\n    return NextResponse.json(\n      { error: 'An error occurred while creating the transaction' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  // Apply security middleware first\n  const securityResult = await secureProtectedRoute(request)\n  if (securityResult) {\n    return securityResult\n  }\n\n  try {\n    // ðŸ”’ CRITICAL: Verify user authentication FIRST\n    const supabase = await createServerClient()\n    let user: any = null\n    let userError: any = null\n    if (supabase?.auth?.getUser) {\n      const resp = await supabase.auth.getUser()\n      user = resp?.data?.user\n      userError = resp?.error\n    } else if (process.env.NODE_ENV === 'test') {\n      user = { id: 'test-user' }\n    }\n    \n    if (!user || userError) {\n      return NextResponse.json(\n        { error: 'Authentication required to access funding data' },\n        { status: 401 }\n      )\n    }\n\n    const { searchParams } = new URL(request.url);\n    const requestedUserId = searchParams.get('userId');\n    const status = searchParams.get('status');\n\n    // ðŸ”’ CRITICAL: Users can only access their own funding pages\n    const targetUserId = requestedUserId || user.id\n    if (targetUserId !== user.id) {\n      logger.warn('User attempted to access another user\\'s funding data', {\n        userId: user.id,\n        requestedUserId: targetUserId\n      })\n      return NextResponse.json(\n        { error: 'Cannot access other users\\' funding data' },\n        { status: 403 }\n      );\n    }\n\n    let query = supabase\n      .from('funding_pages')\n      .select('id, title, description, goal_amount, raised_amount, currency, status, created_at, updated_at')\n      .eq('user_id', user.id); // Only show user's own pages\n\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    const { data: fundingPages, error } = await query;\n\n    if (error) {\n      logger.error('Error fetching funding pages', { \n        error: error.message, \n        userId: user.id \n      })\n      return NextResponse.json(\n        { error: 'Failed to fetch funding pages' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      fundingPages,\n    });\n  } catch (error) {\n    logger.error('Error fetching funding pages', { error })\n    return NextResponse.json(\n      { error: 'An error occurred while fetching funding pages' },\n      { status: 500 }\n    );\n  }\n} "],"version":3}