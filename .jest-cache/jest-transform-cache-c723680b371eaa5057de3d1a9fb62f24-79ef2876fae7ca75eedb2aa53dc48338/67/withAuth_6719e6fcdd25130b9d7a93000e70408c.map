{"version":3,"names":["cov_2gtv7metbb","actualCoverage","s","exports","withAuth","withOptionalAuth","withRole","server_1","require","server_2","logger_1","errorHandling_1","handler","f","authenticatedRoute","req","context","correlationId","getCorrelationIdFromHeaders","headers","supabase","createServerClient","data","user","error","userError","auth","getUser","b","authError","ErrorHelpers","authenticationRequired","logger","warn","message","createErrorResponse","authenticatedReq","ApiError","internalError","ErrorCode","INTERNAL_SERVER_ERROR","cause","optionalAuthRoute","NextResponse","json","status","requiredRole"],"sources":["/home/g/dev/orangecat/src/lib/api/withAuth.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createServerClient } from '@/services/supabase/server'\nimport type { User } from '@supabase/supabase-js'\nimport { logger } from '@/utils/logger'\nimport { ApiError, createErrorResponse, ErrorCode } from '@/lib/api/errorHandling'\n\n/**\n * Authentication Middleware for API Routes\n *\n * Eliminates DRY violations by centralizing authentication logic.\n * Used across all protected API routes.\n *\n * 🔒 SECURITY: Standardized authentication checks\n * ♻️ REFACTORED: Eliminates ~120 lines of duplicate auth code\n * 🛡️ ERROR HANDLING: Integrated with structured error system\n */\n\nexport type AuthenticatedRequest = NextRequest & {\n  user: User\n}\n\nexport type AuthenticatedHandler = (\n  req: AuthenticatedRequest,\n  context?: any\n) => Promise<NextResponse>\n\n/**\n * Higher-order function that wraps API route handlers with authentication\n */\nexport function withAuth(handler: AuthenticatedHandler) {\n  return async function authenticatedRoute(\n    req: NextRequest,\n    context?: any\n  ): Promise<NextResponse> {\n    const correlationId = getCorrelationIdFromHeaders(req.headers)\n\n    try {\n      // Authentication check\n      const supabase = await createServerClient()\n      const { data: { user }, error: userError } = await supabase.auth.getUser()\n\n      if (!user || userError) {\n        const authError = ErrorHelpers.authenticationRequired(correlationId)\n        logger.warn('Authentication failed', {\n          error: userError?.message,\n          correlationId: authError.correlationId\n        }, 'Auth')\n        return createErrorResponse(authError)\n      }\n\n      // Add user to request object\n      const authenticatedReq = req as AuthenticatedRequest\n      authenticatedReq.user = user\n\n      // Call the original handler with authenticated request\n      return await handler(authenticatedReq, context)\n\n    } catch (error: any) {\n      logger.error('Authentication middleware error', {\n        error: error?.message,\n        correlationId\n      }, 'Auth')\n\n      if (error instanceof ApiError) {\n        return createErrorResponse(error)\n      }\n\n      const internalError = new ApiError(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        'Authentication failed',\n        500,\n        { correlationId, cause: error }\n      )\n      return createErrorResponse(internalError)\n    }\n  }\n}\n\n/**\n * Optional authentication wrapper - allows both authenticated and unauthenticated access\n */\nexport function withOptionalAuth(handler: AuthenticatedHandler) {\n  return async function optionalAuthRoute(\n    req: NextRequest,\n    context?: any\n  ): Promise<NextResponse> {\n    try {\n      const supabase = await createServerClient()\n      const { data: { user } } = await supabase.auth.getUser()\n\n      // Add user to request object (may be null)\n      const authenticatedReq = req as AuthenticatedRequest\n      authenticatedReq.user = user as User\n\n      return await handler(authenticatedReq, context)\n\n    } catch (error: any) {\n      logger.error('Optional auth middleware error', { error: error?.message }, 'Auth')\n      return NextResponse.json(\n        { error: 'Request failed' },\n        { status: 500 }\n      )\n    }\n  }\n}\n\n/**\n * Role-based authentication wrapper\n */\nexport function withRole(requiredRole: string, handler: AuthenticatedHandler) {\n  return withAuth(async (req: AuthenticatedRequest, context?: any) => {\n    // Check user role (would need to implement role checking logic)\n    // For now, just pass through to handler\n    return await handler(req, context)\n  })\n}"],"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","ignoreList":[]}