{"version":3,"names":["cov_tm2zytqj6","actualCoverage","s","createMockSupabaseClient","f","mockUser","id","email","created_at","Date","toISOString","updated_at","aud","role","mockSession","access_token","refresh_token","expires_in","token_type","user","auth","signIn","credentials","Promise","resolve","setTimeout","data","session","error","signUp","signOut","getSession","getUser","onAuthStateChange","callback","subscription","unsubscribe","resetPasswordForEmail","from","table","select","columns","eq","column","value","single","limit","count","insert","update","delete","storage","bucket","upload","path","file","getPublicUrl","publicUrl","exports"],"sources":["/home/g/dev/orangecat/src/services/supabase/mock.ts"],"sourcesContent":["'use client'\n\n// Mock Supabase client for local development when external instance is unavailable\nexport const createMockSupabaseClient = () => {\n  const mockUser = {\n    id: 'mock-user-id',\n    email: 'test@example.com',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    aud: 'authenticated',\n    role: 'authenticated'\n  }\n\n  const mockSession = {\n    access_token: 'mock-access-token',\n    refresh_token: 'mock-refresh-token',\n    expires_in: 3600,\n    token_type: 'bearer',\n    user: mockUser\n  }\n\n  return {\n    auth: {\n      signIn: async (credentials: any) => {\n        await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate network delay\n        return {\n          data: { user: mockUser, session: mockSession },\n          error: null\n        }\n      },\n      signUp: async (credentials: any) => {\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        return {\n          data: { user: mockUser, session: null },\n          error: null\n        }\n      },\n      signOut: async () => {\n        return { error: null }\n      },\n      getSession: async () => {\n        return { data: { session: null }, error: null }\n      },\n      getUser: async () => {\n        return { data: { user: null }, error: null }\n      },\n      onAuthStateChange: (callback: any) => {\n        callback('INITIAL_SESSION', null)\n        return {\n          data: { subscription: { unsubscribe: () => {} } }\n        }\n      },\n      resetPasswordForEmail: async (email: string) => {\n        return { data: {}, error: null }\n      }\n    },\n    from: (table: string) => ({\n      select: (columns?: string) => ({\n        eq: (column: string, value: any) => ({\n          single: async () => ({ data: null, error: null }),\n          limit: (count: number) => ({ data: [], error: null })\n        }),\n        limit: (count: number) => ({ data: [], error: null })\n      }),\n      insert: (data: any) => ({\n        select: () => ({\n          single: async () => ({ data: null, error: null })\n        })\n      }),\n      update: (data: any) => ({\n        eq: (column: string, value: any) => ({\n          select: () => ({\n            single: async () => ({ data: null, error: null })\n          })\n        })\n      }),\n      delete: () => ({\n        eq: (column: string, value: any) => ({ data: null, error: null })\n      })\n    }),\n    storage: {\n      from: (bucket: string) => ({\n        upload: async (path: string, file: any) => {\n          return { data: { path }, error: null }\n        },\n        getPublicUrl: (path: string) => {\n          return { data: { publicUrl: `mock://storage/${path}` } }\n        }\n      })\n    }\n  }\n}"],"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","ignoreList":[]}