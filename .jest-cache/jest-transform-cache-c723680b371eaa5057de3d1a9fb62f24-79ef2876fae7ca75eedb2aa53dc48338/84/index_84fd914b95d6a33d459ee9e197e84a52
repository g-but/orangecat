a973db044e3d82390d671c5034ab14ab
"use strict";

/**
 * SUPABASE PROFILES SERVICE - CLEAN PROFILE OPERATIONS
 *
 * This service handles all profile operations with proper
 * error handling, logging, and type safety.
 *
 * Created: 2025-06-08
 * Last Modified: 2025-06-08
 * Last Modified Summary: Extracted from massive client.ts, pure profile concerns
 */
/* istanbul ignore next */
function cov_1zdq1leujc() {
  var path = "/home/g/dev/orangecat/src/services/supabase/profiles/index.ts";
  var hash = "02fffd6ccfe88c4e59ae80eea43d2f0c3f430410";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/services/supabase/profiles/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "2": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 32
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 38
        }
      },
      "4": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "5": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 50
        }
      },
      "6": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 52
        }
      },
      "7": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "8": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 50
        }
      },
      "9": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "10": {
        start: {
          line: 22,
          column: 17
        },
        end: {
          line: 22,
          column: 42
        }
      },
      "11": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 35
        }
      },
      "12": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 65
        }
      },
      "14": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 44,
          column: 21
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "16": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 98
        }
      },
      "17": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 41
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 70
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 73
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "22": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 89
        }
      },
      "23": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 86
        }
      },
      "24": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 37
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 22
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 44
        }
      },
      "28": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "29": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 96
        }
      },
      "30": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 110
        }
      },
      "31": {
        start: {
          line: 98,
          column: 32
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "32": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "33": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 109,
          column: 15
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 61
        }
      },
      "35": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "36": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 85
        }
      },
      "37": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 118,
          column: 14
        }
      },
      "38": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "39": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 97
        }
      },
      "40": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "41": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "42": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 56
        }
      },
      "43": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 22
        }
      },
      "44": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "45": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 203,
          column: 5
        }
      },
      "46": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 69
        }
      },
      "47": {
        start: {
          line: 168,
          column: 27
        },
        end: {
          line: 168,
          column: 164
        }
      },
      "48": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "49": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "50": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "51": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 41
        }
      },
      "52": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "53": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 87
        }
      },
      "54": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 89
        }
      },
      "55": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "56": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 97
        }
      },
      "57": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 94
        }
      },
      "58": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "59": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 37
        }
      },
      "60": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 201,
          column: 22
        }
      },
      "61": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 44
        }
      },
      "62": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "63": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 81
        }
      },
      "64": {
        start: {
          line: 222,
          column: 32
        },
        end: {
          line: 226,
          column: 21
        }
      },
      "65": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "66": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 76
        }
      },
      "67": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 24
        }
      },
      "68": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "69": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 236,
          column: 15
        }
      },
      "70": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 25
        }
      },
      "71": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 76
        }
      },
      "72": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 21
        }
      },
      "73": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 247,
          column: 22
        }
      },
      "74": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 21
        }
      },
      "75": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 301,
          column: 5
        }
      },
      "76": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 79
        }
      },
      "77": {
        start: {
          line: 268,
          column: 32
        },
        end: {
          line: 272,
          column: 21
        }
      },
      "78": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "79": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 277,
          column: 15
        }
      },
      "80": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 41
        }
      },
      "81": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "82": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 84
        }
      },
      "83": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 73
        }
      },
      "84": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "85": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 91
        }
      },
      "86": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 86
        }
      },
      "87": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 292,
          column: 11
        }
      },
      "88": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 37
        }
      },
      "89": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 299,
          column: 22
        }
      },
      "90": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 44
        }
      },
      "91": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 344,
          column: 5
        }
      },
      "92": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 73
        }
      },
      "93": {
        start: {
          line: 319,
          column: 32
        },
        end: {
          line: 323,
          column: 25
        }
      },
      "94": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "95": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 328,
          column: 15
        }
      },
      "96": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 39
        }
      },
      "97": {
        start: {
          line: 331,
          column: 25
        },
        end: {
          line: 331,
          column: 35
        }
      },
      "98": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "99": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 47
        }
      },
      "100": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 342,
          column: 22
        }
      },
      "101": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 42
        }
      },
      "102": {
        start: {
          line: 364,
          column: 19
        },
        end: {
          line: 364,
          column: 21
        }
      },
      "103": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 376,
          column: 5
        }
      },
      "104": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "105": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 71
        }
      },
      "106": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "107": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 76
        }
      },
      "108": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "109": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 96
        }
      },
      "110": {
        start: {
          line: 378,
          column: 4
        },
        end: {
          line: 382,
          column: 5
        }
      },
      "111": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "112": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 80
        }
      },
      "113": {
        start: {
          line: 384,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "114": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "115": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 72
        }
      },
      "116": {
        start: {
          line: 390,
          column: 4
        },
        end: {
          line: 395,
          column: 5
        }
      },
      "117": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "118": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 66
        }
      },
      "119": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 396,
          column: 52
        }
      },
      "120": {
        start: {
          line: 399,
          column: 14
        },
        end: {
          line: 399,
          column: 33
        }
      },
      "121": {
        start: {
          line: 400,
          column: 0
        },
        end: {
          line: 400,
          column: 124
        }
      },
      "122": {
        start: {
          line: 400,
          column: 88
        },
        end: {
          line: 400,
          column: 118
        }
      }
    },
    fnMap: {
      "0": {
        name: "getProfile",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 25
          }
        },
        loc: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 37
      },
      "1": {
        name: "updateProfile",
        decl: {
          start: {
            line: 93,
            column: 15
          },
          end: {
            line: 93,
            column: 28
          }
        },
        loc: {
          start: {
            line: 93,
            column: 46
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 93
      },
      "2": {
        name: "createProfile",
        decl: {
          start: {
            line: 165,
            column: 15
          },
          end: {
            line: 165,
            column: 28
          }
        },
        loc: {
          start: {
            line: 165,
            column: 55
          },
          end: {
            line: 204,
            column: 1
          }
        },
        line: 165
      },
      "3": {
        name: "isUsernameAvailable",
        decl: {
          start: {
            line: 219,
            column: 15
          },
          end: {
            line: 219,
            column: 34
          }
        },
        loc: {
          start: {
            line: 219,
            column: 45
          },
          end: {
            line: 250,
            column: 1
          }
        },
        line: 219
      },
      "4": {
        name: "getProfileByUsername",
        decl: {
          start: {
            line: 265,
            column: 15
          },
          end: {
            line: 265,
            column: 35
          }
        },
        loc: {
          start: {
            line: 265,
            column: 46
          },
          end: {
            line: 302,
            column: 1
          }
        },
        line: 265
      },
      "5": {
        name: "searchProfiles",
        decl: {
          start: {
            line: 316,
            column: 15
          },
          end: {
            line: 316,
            column: 29
          }
        },
        loc: {
          start: {
            line: 316,
            column: 49
          },
          end: {
            line: 345,
            column: 1
          }
        },
        line: 316
      },
      "6": {
        name: "validateProfileData",
        decl: {
          start: {
            line: 363,
            column: 9
          },
          end: {
            line: 363,
            column: 28
          }
        },
        loc: {
          start: {
            line: 363,
            column: 35
          },
          end: {
            line: 397,
            column: 1
          }
        },
        line: 363
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 400,
            column: 74
          },
          end: {
            line: 400,
            column: 75
          }
        },
        loc: {
          start: {
            line: 400,
            column: 86
          },
          end: {
            line: 400,
            column: 120
          }
        },
        line: 400
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "6": {
        loc: {
          start: {
            line: 165,
            column: 37
          },
          end: {
            line: 165,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 165,
            column: 51
          },
          end: {
            line: 165,
            column: 53
          }
        }],
        line: 165
      },
      "7": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "8": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "9": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "10": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "11": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 17
          }
        }, {
          start: {
            line: 227,
            column: 21
          },
          end: {
            line: 227,
            column: 46
          }
        }],
        line: 227
      },
      "12": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "13": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "14": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "15": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "16": {
        loc: {
          start: {
            line: 316,
            column: 37
          },
          end: {
            line: 316,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 316,
            column: 45
          },
          end: {
            line: 316,
            column: 47
          }
        }],
        line: 316
      },
      "17": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "18": {
        loc: {
          start: {
            line: 331,
            column: 25
          },
          end: {
            line: 331,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 25
          },
          end: {
            line: 331,
            column: 29
          }
        }, {
          start: {
            line: 331,
            column: 33
          },
          end: {
            line: 331,
            column: 35
          }
        }],
        line: 331
      },
      "19": {
        loc: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "20": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "21": {
        loc: {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 367,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 367,
            column: 25
          }
        }, {
          start: {
            line: 367,
            column: 29
          },
          end: {
            line: 367,
            column: 53
          }
        }],
        line: 367
      },
      "22": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "23": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 370,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 370,
            column: 25
          }
        }, {
          start: {
            line: 370,
            column: 29
          },
          end: {
            line: 370,
            column: 54
          }
        }],
        line: 370
      },
      "24": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "25": {
        loc: {
          start: {
            line: 373,
            column: 12
          },
          end: {
            line: 373,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 373,
            column: 12
          },
          end: {
            line: 373,
            column: 25
          }
        }, {
          start: {
            line: 373,
            column: 29
          },
          end: {
            line: 373,
            column: 68
          }
        }],
        line: 373
      },
      "26": {
        loc: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "27": {
        loc: {
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 378,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 378,
            column: 39
          }
        }, {
          start: {
            line: 378,
            column: 43
          },
          end: {
            line: 378,
            column: 60
          }
        }],
        line: 378
      },
      "28": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "29": {
        loc: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "30": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 384,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 384,
            column: 30
          }
        }, {
          start: {
            line: 384,
            column: 34
          },
          end: {
            line: 384,
            column: 42
          }
        }],
        line: 384
      },
      "31": {
        loc: {
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "32": {
        loc: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "33": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 390,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 390,
            column: 42
          }
        }, {
          start: {
            line: 390,
            column: 46
          },
          end: {
            line: 390,
            column: 66
          }
        }],
        line: 390
      },
      "34": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "35": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 44
          }
        }, {
          start: {
            line: 392,
            column: 48
          },
          end: {
            line: 392,
            column: 80
          }
        }],
        line: 392
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/services/supabase/profiles/index.ts",
      mappings: "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",
      names: [],
      sources: ["/home/g/dev/orangecat/src/services/supabase/profiles/index.ts"],
      sourcesContent: ["/**\n * SUPABASE PROFILES SERVICE - CLEAN PROFILE OPERATIONS\n * \n * This service handles all profile operations with proper\n * error handling, logging, and type safety.\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Extracted from massive client.ts, pure profile concerns\n */\n\nimport { supabase } from '../core/client'\nimport { logger, logProfile } from '@/utils/logger'\nimport type { \n  Profile,\n  ProfileUpdateData,\n  ProfileResponse,\n  ProfileUpdateResponse\n} from '../types'\nimport { isValidProfile } from '../types'\n\n// ==================== PROFILE OPERATIONS ====================\n\n/**\n * Get a user's profile by ID with validation and error handling\n * @param userId - Unique user identifier\n * @returns Promise<ProfileResponse> - Profile data or error\n * @example\n * ```typescript\n * const { data: profile, error } = await getProfile('user-123');\n * if (profile) {\n *   console.log('Username:', profile.username);\n * }\n * ```\n */\nexport async function getProfile(userId: string): Promise<ProfileResponse> {\n  try {\n    logProfile('Fetching profile', { userId })\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single()\n\n    if (error) {\n      logProfile('Failed to fetch profile', { userId, error: error.message })\n      return { data: null, error }\n    }\n\n    if (!data) {\n      logProfile('Profile not found', { userId })\n      return { data: null, error: new Error('Profile not found') }\n    }\n\n    // Validate the profile data\n    if (!isValidProfile(data)) {\n      logProfile('Invalid profile data structure', { userId, data })\n      return { data: null, error: new Error('Invalid profile data structure') }\n    }\n\n    logProfile('Profile fetched successfully', { \n      userId, \n      username: data.username,\n      hasAvatar: !!data.avatar_url \n    })\n    \n    return { data, error: null }\n  } catch (error) {\n    logger.error('Unexpected error fetching profile', { \n      userId, \n      error: (error as Error).message \n    }, 'Profile')\n    \n    return { data: null, error: error as Error }\n  }\n}\n\n/**\n * Update a user's profile with validation and conflict handling\n * @param userId - Unique user identifier\n * @param updates - Profile fields to update\n * @returns Promise<ProfileUpdateResponse> - Updated profile data with status\n * @example\n * ```typescript\n * const result = await updateProfile('user-123', {\n *   username: 'newusername',\n *   display_name: 'New Display Name',\n *   bio: 'Updated bio'\n * });\n * \n * if (result.status === 'success') {\n *   console.log('Profile updated:', result.data?.username);\n * } else {\n *   console.error('Update failed:', result.error?.message);\n * }\n * ```\n */\nexport async function updateProfile(\n  userId: string, \n  updates: ProfileUpdateData\n): Promise<ProfileUpdateResponse> {\n  try {\n    logProfile('Updating profile', { userId, updates: Object.keys(updates) })\n    \n    // Add timestamp\n    const updateData = {\n      ...updates,\n      updated_at: new Date().toISOString()\n    }\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .update(updateData)\n      .eq('id', userId)\n      .select()\n      .single()\n\n    if (error) {\n      logProfile('Failed to update profile', { \n        userId, \n        error: error.message,\n        code: error.code \n      })\n      return { data: null, error, status: error.code }\n    }\n\n    if (!data) {\n      logProfile('No profile returned after update', { userId })\n      return { \n        data: null, \n        error: new Error('Profile update returned no data'), \n        status: 'no_data' \n      }\n    }\n\n    // Validate the updated profile data\n    if (!isValidProfile(data)) {\n      logProfile('Invalid updated profile data structure', { userId, data })\n      return { \n        data: null, \n        error: new Error('Invalid updated profile data structure'), \n        status: 'invalid_data' \n      }\n    }\n\n    logProfile('Profile updated successfully', { \n      userId, \n      username: data.username,\n      updatedFields: Object.keys(updates)\n    })\n    \n    return { data, error: null, status: 'success' }\n  } catch (error) {\n    logger.error('Unexpected error updating profile', { \n      userId, \n      error: (error as Error).message \n    }, 'Profile')\n    \n    return { \n      data: null, \n      error: error as Error, \n      status: 'unexpected_error' \n    }\n  }\n}\n\n/**\n * Create a new profile (typically called after user signup)\n * @param userId - Unique user identifier from auth system\n * @param profileData - Optional initial profile data\n * @returns Promise<ProfileResponse> - Created profile data or error\n * @example\n * ```typescript\n * const { data: profile, error } = await createProfile('user-123', {\n *   username: 'johndoe',\n *   display_name: 'John Doe'\n * });\n * \n * if (profile) {\n *   console.log('Profile created for:', profile.username);\n * }\n * ```\n */\nexport async function createProfile(\n  userId: string, \n  profileData: Partial<ProfileUpdateData> = {}\n): Promise<ProfileResponse> {\n  try {\n    logProfile('Creating new profile', { userId })\n    \n    const newProfile = {\n      id: userId,\n      ...profileData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .insert(newProfile)\n      .select()\n      .single()\n\n    if (error) {\n      logProfile('Failed to create profile', { \n        userId, \n        error: error.message,\n        code: error.code \n      })\n      return { data: null, error }\n    }\n\n    if (!data) {\n      logProfile('No profile returned after creation', { userId })\n      return { data: null, error: new Error('Profile creation returned no data') }\n    }\n\n    // Validate the created profile data\n    if (!isValidProfile(data)) {\n      logProfile('Invalid created profile data structure', { userId, data })\n      return { data: null, error: new Error('Invalid created profile data structure') }\n    }\n\n    logProfile('Profile created successfully', { \n      userId, \n      username: data.username \n    })\n    \n    return { data, error: null }\n  } catch (error) {\n    logger.error('Unexpected error creating profile', { \n      userId, \n      error: (error as Error).message \n    }, 'Profile')\n    \n    return { data: null, error: error as Error }\n  }\n}\n\n/**\n * Check if a username is available for registration\n * @param username - Username to check availability\n * @returns Promise<boolean> - True if username is available, false otherwise\n * @example\n * ```typescript\n * const available = await isUsernameAvailable('johndoe');\n * if (available) {\n *   console.log('Username is available for registration');\n * } else {\n *   console.log('Username is already taken');\n * }\n * ```\n */\nexport async function isUsernameAvailable(username: string): Promise<boolean> {\n  try {\n    logProfile('Checking username availability', { username })\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .select('id')\n      .eq('username', username)\n      .single()\n\n    if (error && error.code === 'PGRST116') {\n      // No rows returned - username is available\n      logProfile('Username is available', { username })\n      return true\n    }\n\n    if (error) {\n      logProfile('Error checking username availability', { \n        username, \n        error: error.message \n      })\n      return false\n    }\n\n    // Username exists\n    logProfile('Username is not available', { username })\n    return false\n  } catch (error) {\n    logger.error('Unexpected error checking username availability', { \n      username, \n      error: (error as Error).message \n    }, 'Profile')\n    \n    return false\n  }\n}\n\n/**\n * Get profile by username for public profile viewing\n * @param username - Username to lookup\n * @returns Promise<ProfileResponse> - Profile data or error\n * @example\n * ```typescript\n * const { data: profile, error } = await getProfileByUsername('johndoe');\n * if (profile) {\n *   console.log('Profile found:', profile.display_name);\n * } else {\n *   console.log('Profile not found');\n * }\n * ```\n */\nexport async function getProfileByUsername(username: string): Promise<ProfileResponse> {\n  try {\n    logProfile('Fetching profile by username', { username })\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('username', username)\n      .single()\n\n    if (error) {\n      logProfile('Failed to fetch profile by username', { \n        username, \n        error: error.message \n      })\n      return { data: null, error }\n    }\n\n    if (!data) {\n      logProfile('Profile not found by username', { username })\n      return { data: null, error: new Error('Profile not found') }\n    }\n\n    // Validate the profile data\n    if (!isValidProfile(data)) {\n      logProfile('Invalid profile data structure', { username, data })\n      return { data: null, error: new Error('Invalid profile data structure') }\n    }\n\n    logProfile('Profile fetched by username successfully', { \n      username, \n      userId: data.id \n    })\n    \n    return { data, error: null }\n  } catch (error) {\n    logger.error('Unexpected error fetching profile by username', { \n      username, \n      error: (error as Error).message \n    }, 'Profile')\n    \n    return { data: null, error: error as Error }\n  }\n}\n\n/**\n * Search profiles by display name or username with fuzzy matching\n * @param query - Search query string\n * @param limit - Maximum number of results (default: 10)\n * @returns Promise<{data: Profile[], error: Error | null}> - Search results\n * @example\n * ```typescript\n * const { data: profiles, error } = await searchProfiles('john', 5);\n * if (profiles.length > 0) {\n *   console.log('Found profiles:', profiles.map(p => p.username));\n * }\n * ```\n */\nexport async function searchProfiles(\n  query: string, \n  limit: number = 10\n): Promise<{ data: Profile[]; error: Error | null }> {\n  try {\n    logProfile('Searching profiles', { query, limit })\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .or(`username.ilike.%${query}%,display_name.ilike.%${query}%`)\n      .limit(limit)\n\n    if (error) {\n      logProfile('Failed to search profiles', { \n        query, \n        error: error.message \n      })\n      return { data: [], error }\n    }\n\n    const profiles = data || []\n    \n    logProfile('Profile search completed', { \n      query, \n      resultsCount: profiles.length \n    })\n    \n    return { data: profiles, error: null }\n  } catch (error) {\n    logger.error('Unexpected error searching profiles', { \n      query, \n      error: (error as Error).message \n    }, 'Profile')\n    \n    return { data: [], error: error as Error }\n  }\n}\n\n// ==================== UTILITY FUNCTIONS ====================\n\n/**\n * Validate profile data before database operations\n * @param data - Profile data to validate\n * @returns Validation result with detailed error messages\n * @example\n * ```typescript\n * const validation = validateProfileData({\n *   username: 'ab', // Too short\n *   bio: 'x'.repeat(600) // Too long\n * });\n * \n * if (!validation.isValid) {\n *   console.log('Validation errors:', validation.errors);\n * }\n * ```\n */\nexport function validateProfileData(data: Partial<ProfileUpdateData>): { \n  isValid: boolean; \n  errors: string[] \n} {\n  const errors: string[] = []\n  \n  // Username validation\n  if (data.username !== undefined) {\n    if (data.username && data.username.length < 3) {\n      errors.push('Username must be at least 3 characters long')\n    }\n    \n    if (data.username && data.username.length > 30) {\n      errors.push('Username must be no more than 30 characters long')\n    }\n    \n    if (data.username && !/^[a-zA-Z0-9_-]+$/.test(data.username)) {\n      errors.push('Username can only contain letters, numbers, hyphens, and underscores')\n    }\n  }\n  \n  // Display name validation\n  if (data.display_name !== undefined && data.display_name) {\n    if (data.display_name.length > 50) {\n      errors.push('Display name must be no more than 50 characters long')\n    }\n  }\n  \n  // Bio validation\n  if (data.bio !== undefined && data.bio) {\n    if (data.bio.length > 500) {\n      errors.push('Bio must be no more than 500 characters long')\n    }\n  }\n  \n  // Bitcoin address validation (basic)\n  if (data.bitcoin_address !== undefined && data.bitcoin_address) {\n    // Basic Bitcoin address validation - could be enhanced\n    if (data.bitcoin_address.length < 26 || data.bitcoin_address.length > 62) {\n      errors.push('Bitcoin address format appears invalid')\n    }\n  }\n  \n  return { isValid: errors.length === 0, errors }\n}\n\n// ==================== EXPORTS ====================\n\nexport {\n  type Profile,\n  type ProfileUpdateData,\n  type ProfileResponse,\n  type ProfileUpdateResponse,\n  isValidProfile\n} from '../types' "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "02fffd6ccfe88c4e59ae80eea43d2f0c3f430410"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zdq1leujc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zdq1leujc();
cov_1zdq1leujc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zdq1leujc().s[1]++;
exports.isValidProfile = void 0;
/* istanbul ignore next */
cov_1zdq1leujc().s[2]++;
exports.getProfile = getProfile;
/* istanbul ignore next */
cov_1zdq1leujc().s[3]++;
exports.updateProfile = updateProfile;
/* istanbul ignore next */
cov_1zdq1leujc().s[4]++;
exports.createProfile = createProfile;
/* istanbul ignore next */
cov_1zdq1leujc().s[5]++;
exports.isUsernameAvailable = isUsernameAvailable;
/* istanbul ignore next */
cov_1zdq1leujc().s[6]++;
exports.getProfileByUsername = getProfileByUsername;
/* istanbul ignore next */
cov_1zdq1leujc().s[7]++;
exports.searchProfiles = searchProfiles;
/* istanbul ignore next */
cov_1zdq1leujc().s[8]++;
exports.validateProfileData = validateProfileData;
const client_1 =
/* istanbul ignore next */
(cov_1zdq1leujc().s[9]++, require("../core/client"));
const logger_1 =
/* istanbul ignore next */
(cov_1zdq1leujc().s[10]++, require("@/utils/logger"));
const types_1 =
/* istanbul ignore next */
(cov_1zdq1leujc().s[11]++, require("../types"));
// ==================== PROFILE OPERATIONS ====================
/**
 * Get a user's profile by ID with validation and error handling
 * @param userId - Unique user identifier
 * @returns Promise<ProfileResponse> - Profile data or error
 * @example
 * ```typescript
 * const { data: profile, error } = await getProfile('user-123');
 * if (profile) {
 *   console.log('Username:', profile.username);
 * }
 * ```
 */
async function getProfile(userId) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[0]++;
  cov_1zdq1leujc().s[12]++;
  try {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[13]++;
    (0, logger_1.logProfile)('Fetching profile', {
      userId
    });
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[14]++, await client_1.supabase.from('profiles').select('*').eq('id', userId).single());
    /* istanbul ignore next */
    cov_1zdq1leujc().s[15]++;
    if (error) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[0][0]++;
      cov_1zdq1leujc().s[16]++;
      (0, logger_1.logProfile)('Failed to fetch profile', {
        userId,
        error: error.message
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[17]++;
      return {
        data: null,
        error
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[0][1]++;
    }
    cov_1zdq1leujc().s[18]++;
    if (!data) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[1][0]++;
      cov_1zdq1leujc().s[19]++;
      (0, logger_1.logProfile)('Profile not found', {
        userId
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[20]++;
      return {
        data: null,
        error: new Error('Profile not found')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[1][1]++;
    }
    // Validate the profile data
    cov_1zdq1leujc().s[21]++;
    if (!(0, types_1.isValidProfile)(data)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[2][0]++;
      cov_1zdq1leujc().s[22]++;
      (0, logger_1.logProfile)('Invalid profile data structure', {
        userId,
        data
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[23]++;
      return {
        data: null,
        error: new Error('Invalid profile data structure')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[2][1]++;
    }
    cov_1zdq1leujc().s[24]++;
    (0, logger_1.logProfile)('Profile fetched successfully', {
      userId,
      username: data.username,
      hasAvatar: !!data.avatar_url
    });
    /* istanbul ignore next */
    cov_1zdq1leujc().s[25]++;
    return {
      data,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[26]++;
    logger_1.logger.error('Unexpected error fetching profile', {
      userId,
      error: error.message
    }, 'Profile');
    /* istanbul ignore next */
    cov_1zdq1leujc().s[27]++;
    return {
      data: null,
      error: error
    };
  }
}
/**
 * Update a user's profile with validation and conflict handling
 * @param userId - Unique user identifier
 * @param updates - Profile fields to update
 * @returns Promise<ProfileUpdateResponse> - Updated profile data with status
 * @example
 * ```typescript
 * const result = await updateProfile('user-123', {
 *   username: 'newusername',
 *   display_name: 'New Display Name',
 *   bio: 'Updated bio'
 * });
 *
 * if (result.status === 'success') {
 *   console.log('Profile updated:', result.data?.username);
 * } else {
 *   console.error('Update failed:', result.error?.message);
 * }
 * ```
 */
async function updateProfile(userId, updates) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[1]++;
  cov_1zdq1leujc().s[28]++;
  try {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[29]++;
    (0, logger_1.logProfile)('Updating profile', {
      userId,
      updates: Object.keys(updates)
    });
    // Add timestamp
    const updateData =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[30]++, Object.assign(Object.assign({}, updates), {
      updated_at: new Date().toISOString()
    }));
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[31]++, await client_1.supabase.from('profiles').update(updateData).eq('id', userId).select().single());
    /* istanbul ignore next */
    cov_1zdq1leujc().s[32]++;
    if (error) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[3][0]++;
      cov_1zdq1leujc().s[33]++;
      (0, logger_1.logProfile)('Failed to update profile', {
        userId,
        error: error.message,
        code: error.code
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[34]++;
      return {
        data: null,
        error,
        status: error.code
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[3][1]++;
    }
    cov_1zdq1leujc().s[35]++;
    if (!data) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[4][0]++;
      cov_1zdq1leujc().s[36]++;
      (0, logger_1.logProfile)('No profile returned after update', {
        userId
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[37]++;
      return {
        data: null,
        error: new Error('Profile update returned no data'),
        status: 'no_data'
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[4][1]++;
    }
    // Validate the updated profile data
    cov_1zdq1leujc().s[38]++;
    if (!(0, types_1.isValidProfile)(data)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[5][0]++;
      cov_1zdq1leujc().s[39]++;
      (0, logger_1.logProfile)('Invalid updated profile data structure', {
        userId,
        data
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[40]++;
      return {
        data: null,
        error: new Error('Invalid updated profile data structure'),
        status: 'invalid_data'
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[5][1]++;
    }
    cov_1zdq1leujc().s[41]++;
    (0, logger_1.logProfile)('Profile updated successfully', {
      userId,
      username: data.username,
      updatedFields: Object.keys(updates)
    });
    /* istanbul ignore next */
    cov_1zdq1leujc().s[42]++;
    return {
      data,
      error: null,
      status: 'success'
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[43]++;
    logger_1.logger.error('Unexpected error updating profile', {
      userId,
      error: error.message
    }, 'Profile');
    /* istanbul ignore next */
    cov_1zdq1leujc().s[44]++;
    return {
      data: null,
      error: error,
      status: 'unexpected_error'
    };
  }
}
/**
 * Create a new profile (typically called after user signup)
 * @param userId - Unique user identifier from auth system
 * @param profileData - Optional initial profile data
 * @returns Promise<ProfileResponse> - Created profile data or error
 * @example
 * ```typescript
 * const { data: profile, error } = await createProfile('user-123', {
 *   username: 'johndoe',
 *   display_name: 'John Doe'
 * });
 *
 * if (profile) {
 *   console.log('Profile created for:', profile.username);
 * }
 * ```
 */
async function createProfile(userId, profileData =
/* istanbul ignore next */
(cov_1zdq1leujc().b[6][0]++, {})) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[2]++;
  cov_1zdq1leujc().s[45]++;
  try {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[46]++;
    (0, logger_1.logProfile)('Creating new profile', {
      userId
    });
    const newProfile =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[47]++, Object.assign(Object.assign({
      id: userId
    }, profileData), {
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[48]++, await client_1.supabase.from('profiles').insert(newProfile).select().single());
    /* istanbul ignore next */
    cov_1zdq1leujc().s[49]++;
    if (error) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[7][0]++;
      cov_1zdq1leujc().s[50]++;
      (0, logger_1.logProfile)('Failed to create profile', {
        userId,
        error: error.message,
        code: error.code
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[51]++;
      return {
        data: null,
        error
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[7][1]++;
    }
    cov_1zdq1leujc().s[52]++;
    if (!data) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[8][0]++;
      cov_1zdq1leujc().s[53]++;
      (0, logger_1.logProfile)('No profile returned after creation', {
        userId
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[54]++;
      return {
        data: null,
        error: new Error('Profile creation returned no data')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[8][1]++;
    }
    // Validate the created profile data
    cov_1zdq1leujc().s[55]++;
    if (!(0, types_1.isValidProfile)(data)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[9][0]++;
      cov_1zdq1leujc().s[56]++;
      (0, logger_1.logProfile)('Invalid created profile data structure', {
        userId,
        data
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[57]++;
      return {
        data: null,
        error: new Error('Invalid created profile data structure')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[9][1]++;
    }
    cov_1zdq1leujc().s[58]++;
    (0, logger_1.logProfile)('Profile created successfully', {
      userId,
      username: data.username
    });
    /* istanbul ignore next */
    cov_1zdq1leujc().s[59]++;
    return {
      data,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[60]++;
    logger_1.logger.error('Unexpected error creating profile', {
      userId,
      error: error.message
    }, 'Profile');
    /* istanbul ignore next */
    cov_1zdq1leujc().s[61]++;
    return {
      data: null,
      error: error
    };
  }
}
/**
 * Check if a username is available for registration
 * @param username - Username to check availability
 * @returns Promise<boolean> - True if username is available, false otherwise
 * @example
 * ```typescript
 * const available = await isUsernameAvailable('johndoe');
 * if (available) {
 *   console.log('Username is available for registration');
 * } else {
 *   console.log('Username is already taken');
 * }
 * ```
 */
async function isUsernameAvailable(username) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[3]++;
  cov_1zdq1leujc().s[62]++;
  try {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[63]++;
    (0, logger_1.logProfile)('Checking username availability', {
      username
    });
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[64]++, await client_1.supabase.from('profiles').select('id').eq('username', username).single());
    /* istanbul ignore next */
    cov_1zdq1leujc().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[11][0]++, error) &&
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[11][1]++, error.code === 'PGRST116')) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[10][0]++;
      cov_1zdq1leujc().s[66]++;
      // No rows returned - username is available
      (0, logger_1.logProfile)('Username is available', {
        username
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[67]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[10][1]++;
    }
    cov_1zdq1leujc().s[68]++;
    if (error) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[12][0]++;
      cov_1zdq1leujc().s[69]++;
      (0, logger_1.logProfile)('Error checking username availability', {
        username,
        error: error.message
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[70]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[12][1]++;
    }
    // Username exists
    cov_1zdq1leujc().s[71]++;
    (0, logger_1.logProfile)('Username is not available', {
      username
    });
    /* istanbul ignore next */
    cov_1zdq1leujc().s[72]++;
    return false;
  } catch (error) {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[73]++;
    logger_1.logger.error('Unexpected error checking username availability', {
      username,
      error: error.message
    }, 'Profile');
    /* istanbul ignore next */
    cov_1zdq1leujc().s[74]++;
    return false;
  }
}
/**
 * Get profile by username for public profile viewing
 * @param username - Username to lookup
 * @returns Promise<ProfileResponse> - Profile data or error
 * @example
 * ```typescript
 * const { data: profile, error } = await getProfileByUsername('johndoe');
 * if (profile) {
 *   console.log('Profile found:', profile.display_name);
 * } else {
 *   console.log('Profile not found');
 * }
 * ```
 */
async function getProfileByUsername(username) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[4]++;
  cov_1zdq1leujc().s[75]++;
  try {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[76]++;
    (0, logger_1.logProfile)('Fetching profile by username', {
      username
    });
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[77]++, await client_1.supabase.from('profiles').select('*').eq('username', username).single());
    /* istanbul ignore next */
    cov_1zdq1leujc().s[78]++;
    if (error) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[13][0]++;
      cov_1zdq1leujc().s[79]++;
      (0, logger_1.logProfile)('Failed to fetch profile by username', {
        username,
        error: error.message
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[80]++;
      return {
        data: null,
        error
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[13][1]++;
    }
    cov_1zdq1leujc().s[81]++;
    if (!data) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[14][0]++;
      cov_1zdq1leujc().s[82]++;
      (0, logger_1.logProfile)('Profile not found by username', {
        username
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[83]++;
      return {
        data: null,
        error: new Error('Profile not found')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[14][1]++;
    }
    // Validate the profile data
    cov_1zdq1leujc().s[84]++;
    if (!(0, types_1.isValidProfile)(data)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[15][0]++;
      cov_1zdq1leujc().s[85]++;
      (0, logger_1.logProfile)('Invalid profile data structure', {
        username,
        data
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[86]++;
      return {
        data: null,
        error: new Error('Invalid profile data structure')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[15][1]++;
    }
    cov_1zdq1leujc().s[87]++;
    (0, logger_1.logProfile)('Profile fetched by username successfully', {
      username,
      userId: data.id
    });
    /* istanbul ignore next */
    cov_1zdq1leujc().s[88]++;
    return {
      data,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[89]++;
    logger_1.logger.error('Unexpected error fetching profile by username', {
      username,
      error: error.message
    }, 'Profile');
    /* istanbul ignore next */
    cov_1zdq1leujc().s[90]++;
    return {
      data: null,
      error: error
    };
  }
}
/**
 * Search profiles by display name or username with fuzzy matching
 * @param query - Search query string
 * @param limit - Maximum number of results (default: 10)
 * @returns Promise<{data: Profile[], error: Error | null}> - Search results
 * @example
 * ```typescript
 * const { data: profiles, error } = await searchProfiles('john', 5);
 * if (profiles.length > 0) {
 *   console.log('Found profiles:', profiles.map(p => p.username));
 * }
 * ```
 */
async function searchProfiles(query, limit =
/* istanbul ignore next */
(cov_1zdq1leujc().b[16][0]++, 10)) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[5]++;
  cov_1zdq1leujc().s[91]++;
  try {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[92]++;
    (0, logger_1.logProfile)('Searching profiles', {
      query,
      limit
    });
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[93]++, await client_1.supabase.from('profiles').select('*').or(`username.ilike.%${query}%,display_name.ilike.%${query}%`).limit(limit));
    /* istanbul ignore next */
    cov_1zdq1leujc().s[94]++;
    if (error) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[17][0]++;
      cov_1zdq1leujc().s[95]++;
      (0, logger_1.logProfile)('Failed to search profiles', {
        query,
        error: error.message
      });
      /* istanbul ignore next */
      cov_1zdq1leujc().s[96]++;
      return {
        data: [],
        error
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[17][1]++;
    }
    const profiles =
    /* istanbul ignore next */
    (cov_1zdq1leujc().s[97]++,
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[18][0]++, data) ||
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[18][1]++, []));
    /* istanbul ignore next */
    cov_1zdq1leujc().s[98]++;
    (0, logger_1.logProfile)('Profile search completed', {
      query,
      resultsCount: profiles.length
    });
    /* istanbul ignore next */
    cov_1zdq1leujc().s[99]++;
    return {
      data: profiles,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1zdq1leujc().s[100]++;
    logger_1.logger.error('Unexpected error searching profiles', {
      query,
      error: error.message
    }, 'Profile');
    /* istanbul ignore next */
    cov_1zdq1leujc().s[101]++;
    return {
      data: [],
      error: error
    };
  }
}
// ==================== UTILITY FUNCTIONS ====================
/**
 * Validate profile data before database operations
 * @param data - Profile data to validate
 * @returns Validation result with detailed error messages
 * @example
 * ```typescript
 * const validation = validateProfileData({
 *   username: 'ab', // Too short
 *   bio: 'x'.repeat(600) // Too long
 * });
 *
 * if (!validation.isValid) {
 *   console.log('Validation errors:', validation.errors);
 * }
 * ```
 */
function validateProfileData(data) {
  /* istanbul ignore next */
  cov_1zdq1leujc().f[6]++;
  const errors =
  /* istanbul ignore next */
  (cov_1zdq1leujc().s[102]++, []);
  // Username validation
  /* istanbul ignore next */
  cov_1zdq1leujc().s[103]++;
  if (data.username !== undefined) {
    /* istanbul ignore next */
    cov_1zdq1leujc().b[19][0]++;
    cov_1zdq1leujc().s[104]++;
    if (
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[21][0]++, data.username) &&
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[21][1]++, data.username.length < 3)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[20][0]++;
      cov_1zdq1leujc().s[105]++;
      errors.push('Username must be at least 3 characters long');
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[20][1]++;
    }
    cov_1zdq1leujc().s[106]++;
    if (
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[23][0]++, data.username) &&
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[23][1]++, data.username.length > 30)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[22][0]++;
      cov_1zdq1leujc().s[107]++;
      errors.push('Username must be no more than 30 characters long');
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[22][1]++;
    }
    cov_1zdq1leujc().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[25][0]++, data.username) &&
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[25][1]++, !/^[a-zA-Z0-9_-]+$/.test(data.username))) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[24][0]++;
      cov_1zdq1leujc().s[109]++;
      errors.push('Username can only contain letters, numbers, hyphens, and underscores');
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[24][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1zdq1leujc().b[19][1]++;
  }
  // Display name validation
  cov_1zdq1leujc().s[110]++;
  if (
  /* istanbul ignore next */
  (cov_1zdq1leujc().b[27][0]++, data.display_name !== undefined) &&
  /* istanbul ignore next */
  (cov_1zdq1leujc().b[27][1]++, data.display_name)) {
    /* istanbul ignore next */
    cov_1zdq1leujc().b[26][0]++;
    cov_1zdq1leujc().s[111]++;
    if (data.display_name.length > 50) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[28][0]++;
      cov_1zdq1leujc().s[112]++;
      errors.push('Display name must be no more than 50 characters long');
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[28][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1zdq1leujc().b[26][1]++;
  }
  // Bio validation
  cov_1zdq1leujc().s[113]++;
  if (
  /* istanbul ignore next */
  (cov_1zdq1leujc().b[30][0]++, data.bio !== undefined) &&
  /* istanbul ignore next */
  (cov_1zdq1leujc().b[30][1]++, data.bio)) {
    /* istanbul ignore next */
    cov_1zdq1leujc().b[29][0]++;
    cov_1zdq1leujc().s[114]++;
    if (data.bio.length > 500) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[31][0]++;
      cov_1zdq1leujc().s[115]++;
      errors.push('Bio must be no more than 500 characters long');
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[31][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1zdq1leujc().b[29][1]++;
  }
  // Bitcoin address validation (basic)
  cov_1zdq1leujc().s[116]++;
  if (
  /* istanbul ignore next */
  (cov_1zdq1leujc().b[33][0]++, data.bitcoin_address !== undefined) &&
  /* istanbul ignore next */
  (cov_1zdq1leujc().b[33][1]++, data.bitcoin_address)) {
    /* istanbul ignore next */
    cov_1zdq1leujc().b[32][0]++;
    cov_1zdq1leujc().s[117]++;
    // Basic Bitcoin address validation - could be enhanced
    if (
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[35][0]++, data.bitcoin_address.length < 26) ||
    /* istanbul ignore next */
    (cov_1zdq1leujc().b[35][1]++, data.bitcoin_address.length > 62)) {
      /* istanbul ignore next */
      cov_1zdq1leujc().b[34][0]++;
      cov_1zdq1leujc().s[118]++;
      errors.push('Bitcoin address format appears invalid');
    } else
    /* istanbul ignore next */
    {
      cov_1zdq1leujc().b[34][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1zdq1leujc().b[32][1]++;
  }
  cov_1zdq1leujc().s[119]++;
  return {
    isValid: errors.length === 0,
    errors
  };
}
// ==================== EXPORTS ====================
var types_2 =
/* istanbul ignore next */
(cov_1zdq1leujc().s[120]++, require("../types"));
/* istanbul ignore next */
cov_1zdq1leujc().s[121]++;
Object.defineProperty(exports, "isValidProfile", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1zdq1leujc().f[7]++;
    cov_1zdq1leujc().s[122]++;
    return types_2.isValidProfile;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,