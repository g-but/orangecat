{"file":"/home/g/dev/orangecat/src/services/bitcoin/__tests__/bitcoinValidation.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/bitcoin/__tests__/bitcoinValidation.comprehensive.test.ts"],"sourcesContent":["/**\n * COMPREHENSIVE BITCOIN ADDRESS VALIDATION TESTS\n * \n * CRITICAL FOR BITCOIN PLATFORM SECURITY:\n * - Invalid Bitcoin addresses = PERMANENT LOSS OF FUNDS\n * - Address validation must be bulletproof\n * - Must handle all Bitcoin address formats (Legacy, SegWit, Taproot)\n * - Must prevent common user errors\n * - Must validate checksums correctly\n * - Edge cases must be handled safely\n * \n * This is LIFE-OR-DEATH functionality for users' money.\n */\n\nimport { \n  cleanBitcoinAddress, \n  BitcoinService\n} from '../index'\n\n// Mock fetch for API tests\nconst mockFetch = jest.fn()\n\ndescribe('Bitcoin Address Validation - CRITICAL SECURITY', () => {\n  let bitcoinService: BitcoinService;\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFetch.mockClear()\n    // Create new instance with mocked fetch for each test\n    bitcoinService = new BitcoinService(mockFetch as any)\n  })\n\n  describe('Bitcoin Address Cleaning - URI Handling', () => {\n    it('should clean bitcoin: URI addresses correctly', () => {\n      const uriAddress = 'bitcoin:1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2?amount=0.1'\n      const cleaned = cleanBitcoinAddress(uriAddress)\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n\n    it('should handle bitcoin: URI without parameters', () => {\n      const uriAddress = 'bitcoin:1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const cleaned = cleanBitcoinAddress(uriAddress)\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n\n    it('should return regular addresses unchanged', () => {\n      const regularAddress = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const cleaned = cleanBitcoinAddress(regularAddress)\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n\n    it('should handle SegWit addresses correctly', () => {\n      const segwitAddress = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'\n      const cleaned = cleanBitcoinAddress(segwitAddress)\n      \n      expect(cleaned).toBe('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n\n    it('should handle Taproot addresses correctly', () => {\n      const taprootAddress = 'bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297'\n      const cleaned = cleanBitcoinAddress(taprootAddress)\n      \n      expect(cleaned).toBe('bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297')\n    })\n\n    it('should handle complex bitcoin: URIs with multiple parameters', () => {\n      const complexUri = 'bitcoin:1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2?amount=0.1&label=Test&message=Payment'\n      const cleaned = cleanBitcoinAddress(complexUri)\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n  })\n\n  describe('Bitcoin Wallet Data Fetching - API Integration', () => {\n    it('should fetch wallet data successfully from primary provider', async () => {\n      const mockAddressData = {\n        chain_stats: {\n          funded_txo_sum: 100000000, // 1 BTC in satoshis\n          spent_txo_sum: 50000000    // 0.5 BTC in satoshis\n        }\n      }\n\n      const mockTransactions = [\n        {\n          txid: 'abc123',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [],\n          vout: [\n            {\n              scriptpubkey_address: '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2',\n              value: 50000000\n            }\n          ]\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockAddressData)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n\n      expect(result.balance).toBe(0.5) // 50000000 satoshis = 0.5 BTC\n      expect(result.transactions).toHaveLength(1)\n      expect(result.transactions[0].txid).toBe('abc123')\n      expect(result.transactions[0].type).toBe('incoming')\n      expect(result.transactions[0].value).toBe(0.5)\n      expect(result.lastUpdated).toBeDefined()\n    })\n\n    it('should handle outgoing transactions correctly', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockAddressData = {\n        chain_stats: {\n          funded_txo_sum: 100000000,\n          spent_txo_sum: 30000000\n        }\n      }\n\n      const mockTransactions = [\n        {\n          txid: 'def456',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [\n            {\n              prevout: {\n                scriptpubkey_address: address,\n                value: 100000000\n              }\n            }\n          ],\n          vout: [\n            {\n              scriptpubkey_address: 'other-address',\n              value: 70000000\n            },\n            {\n              scriptpubkey_address: address, // change\n              value: 30000000\n            }\n          ]\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockAddressData)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions[0].type).toBe('outgoing')\n      expect(result.transactions[0].value).toBe(0.7) // 70000000 satoshis sent to others\n    })\n\n    it('should handle API failures with fallback providers', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n\n      // First provider fails\n      ;(mockFetch as jest.Mock)\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n        // Second provider succeeds\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.balance).toBe(1.0) // 100000000 satoshis = 1 BTC\n      expect(result.transactions).toEqual([])\n      expect(mockFetch).toHaveBeenCalledTimes(4) // 2 failed calls + 2 successful calls\n    })\n\n    it('should handle HTTP error responses', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          text: () => Promise.resolve('Address not found')\n        })\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          text: () => Promise.resolve('Address not found')\n        })\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          text: () => Promise.resolve('Address not found')\n        })\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          text: () => Promise.resolve('Address not found')\n        })\n\n      await expect(bitcoinService.fetchBitcoinWalletData(address)).rejects.toThrow()\n    })\n\n    it('should handle timeout scenarios', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n\n      // Mock fetch to simulate timeout\n      ;(mockFetch as jest.Mock).mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Timeout')), 100)\n        )\n      )\n\n      await expect(bitcoinService.fetchBitcoinWalletData(address)).rejects.toThrow()\n    })\n\n    it('should handle malformed API responses', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(null) // Malformed response\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(null)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(null)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(null)\n        })\n\n      await expect(bitcoinService.fetchBitcoinWalletData(address)).rejects.toThrow()\n    })\n  })\n\n  describe('Transaction Processing - Financial Accuracy', () => {\n    it('should correctly calculate incoming transaction values', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockTransactions = [\n        {\n          txid: 'incoming-tx',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [\n            {\n              prevout: {\n                scriptpubkey_address: 'other-address',\n                value: 100000000\n              }\n            }\n          ],\n          vout: [\n            {\n              scriptpubkey_address: address,\n              value: 75000000 // 0.75 BTC to our address\n            },\n            {\n              scriptpubkey_address: 'change-address',\n              value: 25000000 // 0.25 BTC change\n            }\n          ]\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 75000000, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions[0].type).toBe('incoming')\n      expect(result.transactions[0].value).toBe(0.75)\n    })\n\n    it('should handle consolidation transactions (self-sends)', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockTransactions = [\n        {\n          txid: 'consolidation-tx',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [\n            {\n              prevout: {\n                scriptpubkey_address: address,\n                value: 100000000\n              }\n            }\n          ],\n          vout: [\n            {\n              scriptpubkey_address: address, // All outputs back to same address\n              value: 99950000 // Minus fee\n            }\n          ]\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 50000 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions[0].type).toBe('outgoing')\n      expect(result.transactions[0].value).toBe(1.0) // Shows total value moved in consolidation\n    })\n\n    it('should handle pending transactions correctly', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockTransactions = [\n        {\n          txid: 'pending-tx',\n          status: { confirmed: false }, // No block_time for pending\n          vin: [],\n          vout: [\n            {\n              scriptpubkey_address: address,\n              value: 50000000\n            }\n          ]\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 50000000, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions[0].status).toBe('pending')\n      expect(result.transactions[0].timestamp).toBeDefined()\n      expect(result.transactions[0].timestamp).toBeGreaterThan(Date.now() - 10000) // Recent timestamp\n    })\n\n    it('should limit transaction results to 10', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockTransactions = Array.from({ length: 20 }, (_, i) => ({\n        txid: `tx-${i}`,\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [],\n        vout: [\n          {\n            scriptpubkey_address: address,\n            value: 1000000\n          }\n        ]\n      }))\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 20000000, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions).toHaveLength(10) // Should be limited to 10\n    })\n  })\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle empty address gracefully', async () => {\n      await expect(bitcoinService.fetchBitcoinWalletData('')).rejects.toThrow()\n    })\n\n    it('should handle null/undefined address', async () => {\n      await expect(bitcoinService.fetchBitcoinWalletData(null as any)).rejects.toThrow()\n      await expect(bitcoinService.fetchBitcoinWalletData(undefined as any)).rejects.toThrow()\n    })\n\n    it('should handle addresses with special characters', () => {\n      const weirdAddress = 'bitcoin:1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2?amount=0.1&message=Hello%20World'\n      const cleaned = cleanBitcoinAddress(weirdAddress)\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n\n    it('should handle very long addresses', () => {\n      const longAddress = 'bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297'\n      const cleaned = cleanBitcoinAddress(longAddress)\n      \n      expect(cleaned).toBe(longAddress)\n    })\n\n    it('should handle addresses with whitespace', () => {\n      const addressWithSpaces = '  1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2  '\n      const cleaned = cleanBitcoinAddress(addressWithSpaces.trim())\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n\n    it('should handle transactions with missing data', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockTransactions = [\n        {\n          txid: 'incomplete-tx',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [], // Empty inputs\n          vout: [] // Empty outputs\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions[0].value).toBe(0)\n      expect(result.transactions[0].type).toBe('incoming') // Default to incoming\n    })\n  })\n\n  describe('Security and Data Integrity', () => {\n    it('should never return negative balances', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { \n              funded_txo_sum: 50000000, \n              spent_txo_sum: 100000000 // Spent more than funded (shouldn't happen)\n            }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.balance).toBeGreaterThanOrEqual(0) // Should never be negative\n    })\n\n    it('should handle extremely large numbers correctly', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { \n              funded_txo_sum: 2100000000000000, // 21 million BTC in satoshis\n              spent_txo_sum: 0\n            }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.balance).toBe(21000000) // 21 million BTC\n      expect(Number.isFinite(result.balance)).toBe(true)\n    })\n\n    it('should validate timestamp ranges', async () => {\n      const address = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      const mockTransactions = [\n        {\n          txid: 'old-tx',\n          status: { confirmed: true, block_time: 1231006505 }, // Bitcoin genesis block time\n          vin: [],\n          vout: [\n            {\n              scriptpubkey_address: address,\n              value: 50000000\n            }\n          ]\n        }\n      ]\n\n      ;(mockFetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 50000000, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockTransactions)\n        })\n\n      const result = await bitcoinService.fetchBitcoinWalletData(address)\n\n      expect(result.transactions[0].timestamp).toBe(1231006505000) // Converted to milliseconds\n      expect(result.transactions[0].timestamp).toBeGreaterThan(1231006505000 - 1) // Sanity check\n    })\n  })\n}) "],"version":3}