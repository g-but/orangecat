{"version":3,"names":["cov_1bvniphw0n","actualCoverage","s","logger_1","require","trackPerformance","metricName","value","f","process","env","NODE_ENV","b","logger","performance","exports","trackError","error","context","message","stack","trackPageView","path","info","undefined","trackEvent","eventName","properties"],"sources":["/home/g/dev/orangecat/src/utils/monitoring.ts"],"sourcesContent":["import { logger } from './logger'\n\n// Performance monitoring\nexport const trackPerformance = (metricName: string, value: number) => {\n  if (process.env.NODE_ENV === 'production') {\n    // REMOVED: console.log statement\n    logger.performance(metricName, value);\n  }\n};\n\n// Error tracking\nexport const trackError = (error: Error, context?: Record<string, any>) => {\n  if (process.env.NODE_ENV === 'production') {\n    // Log to Vercel Error Tracking\n    logger.error('Application error', {\n      message: error.message,\n      stack: error.stack,\n      context,\n    });\n  }\n};\n\n// Page view tracking\nexport const trackPageView = (path: string) => {\n  if (process.env.NODE_ENV === 'production') {\n    // REMOVED: console.log statement\n    logger.info(`Page View: ${path}`, undefined, 'Analytics');\n  }\n};\n\n// Custom event tracking\nexport const trackEvent = (eventName: string, properties?: Record<string, any>) => {\n  if (process.env.NODE_ENV === 'production') {\n    // REMOVED: console.log statement\n    logger.info(`Event: ${eventName}`, properties, 'Analytics');\n  }\n}; "],"mappings":"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","ignoreList":[]}