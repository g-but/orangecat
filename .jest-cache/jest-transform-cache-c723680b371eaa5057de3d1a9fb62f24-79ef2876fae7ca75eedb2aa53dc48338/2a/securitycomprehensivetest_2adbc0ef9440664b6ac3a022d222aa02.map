{"file":"/home/g/dev/orangecat/tests/security/security.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/tests/security/security.comprehensive.test.ts"],"sourcesContent":["/**\n * COMPREHENSIVE SECURITY TESTS - Option C Validation\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Security hardening validation tests\n */\n\nimport {\n  InputSanitizer,\n  SecuritySchemas,\n  RateLimiter,\n  AuthSecurity,\n  SecureErrorHandler,\n  SecurityMonitor,\n  CSPHelper\n} from '../src/utils/security'\n\ndescribe('🔒 Security Hardening - Option C Validation', () => {\n  \n  describe('Input Sanitization', () => {\n    test('should sanitize HTML to prevent XSS', () => {\n      const maliciousInput = '<script>alert(\"xss\")</script>'\n      const sanitized = InputSanitizer.sanitizeHtml(maliciousInput)\n      \n      expect(sanitized).not.toContain('<script>')\n      expect(sanitized).toContain('&lt;script&gt;')\n    })\n\n    test('should sanitize text input safely', () => {\n      const input = '<p>Hello <script>evil()</script> World</p>'\n      const sanitized = InputSanitizer.sanitizeText(input, 50)\n      \n      expect(sanitized).toBe('Hello evil() World')\n      expect(sanitized.length).toBeLessThanOrEqual(50)\n    })\n\n    test('should sanitize Bitcoin addresses correctly', () => {\n      const validAddress = 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'\n      const maliciousAddress = 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh<script>'\n      \n      expect(InputSanitizer.sanitizeBitcoinAddress(validAddress)).toBe(validAddress)\n      expect(InputSanitizer.sanitizeBitcoinAddress(maliciousAddress)).toBe(validAddress)\n    })\n\n    test('should sanitize usernames properly', () => {\n      const validUsername = 'user_name-123'\n      const maliciousUsername = 'user<script>alert(1)</script>name'\n      \n      expect(InputSanitizer.sanitizeUsername(validUsername)).toBe(validUsername)\n      expect(InputSanitizer.sanitizeUsername(maliciousUsername)).toBe('useralert1name')\n    })\n\n    test('should sanitize email addresses', () => {\n      const validEmail = 'test@example.com'\n      const maliciousEmail = 'TEST@EXAMPLE.COM<script>'\n      \n      expect(InputSanitizer.sanitizeEmail(validEmail)).toBe(validEmail)\n      expect(InputSanitizer.sanitizeEmail(maliciousEmail)).toBe('test@example.com')\n    })\n\n    test('should sanitize URLs safely', () => {\n      const validUrl = 'https://example.com/path'\n      const maliciousUrl = 'javascript:alert(1)'\n      const invalidUrl = 'not-a-url'\n      \n      expect(InputSanitizer.sanitizeUrl(validUrl)).toBe(validUrl)\n      expect(InputSanitizer.sanitizeUrl(maliciousUrl)).toBe('')\n      expect(InputSanitizer.sanitizeUrl(invalidUrl)).toBe('')\n    })\n  })\n\n  describe('Security Validation Schemas', () => {\n    test('should validate profile data correctly', () => {\n      const validProfile = {\n        username: 'testuser123',\n        display_name: 'Test User',\n        bio: 'A test user bio',\n        website: 'https://example.com',\n        bitcoin_address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'\n      }\n\n      const result = SecuritySchemas.profileData.safeParse(validProfile)\n      expect(result.success).toBe(true)\n    })\n\n    test('should reject invalid profile data', () => {\n      const invalidProfile = {\n        username: 'a',\n        display_name: '',\n        bio: 'x'.repeat(501),\n        website: 'not-a-url',\n        bitcoin_address: 'invalid-address'\n      }\n\n      const result = SecuritySchemas.profileData.safeParse(invalidProfile)\n      expect(result.success).toBe(false)\n    })\n\n    test('should validate authentication data', () => {\n      const validAuth = {\n        email: 'test@example.com',\n        password: 'StrongPass123!'\n      }\n\n      const result = SecuritySchemas.authData.safeParse(validAuth)\n      expect(result.success).toBe(true)\n    })\n\n    test('should reject weak authentication data', () => {\n      const weakAuth = {\n        email: 'invalid-email',\n        password: '123' // Too weak\n      }\n\n      const result = SecuritySchemas.authData.safeParse(weakAuth)\n      expect(result.success).toBe(false)\n    })\n\n    test('should validate file upload constraints', () => {\n      const validFile = {\n        file: {\n          size: 1024 * 1024, // 1MB\n          type: 'image/jpeg'\n        }\n      }\n\n      const result = SecuritySchemas.fileUpload.safeParse(validFile)\n      expect(result.success).toBe(true)\n    })\n\n    test('should reject invalid file uploads', () => {\n      const invalidFile = {\n        file: {\n          size: 10 * 1024 * 1024, // 10MB - too large\n          type: 'text/plain' // Wrong type\n        }\n      }\n\n      const result = SecuritySchemas.fileUpload.safeParse(invalidFile)\n      expect(result.success).toBe(false)\n    })\n  })\n\n  describe('Rate Limiting', () => {\n    test('should allow requests within limit', () => {\n      const rateLimiter = new RateLimiter(1000, 3)\n      const identifier = 'test-user-1'\n      \n      expect(rateLimiter.isAllowed(identifier)).toBe(true)\n      expect(rateLimiter.isAllowed(identifier)).toBe(true)\n      expect(rateLimiter.isAllowed(identifier)).toBe(true)\n    })\n\n    test('should block requests exceeding limit', () => {\n      const rateLimiter = new RateLimiter(1000, 2)\n      const identifier = 'test-user-2'\n      \n      rateLimiter.isAllowed(identifier)\n      rateLimiter.isAllowed(identifier)\n      \n      expect(rateLimiter.isAllowed(identifier)).toBe(false)\n    })\n\n    test('should track remaining requests correctly', () => {\n      const identifier = 'test-user-3'\n      \n      const rateLimiter = new RateLimiter(1000, 3)\n      expect(rateLimiter.getRemaining(identifier)).toBe(3)\n      rateLimiter.isAllowed(identifier)\n      expect(rateLimiter.getRemaining(identifier)).toBe(2)\n    })\n\n    test('should clean up expired entries', () => {\n      const identifier = 'test-user-4'\n      const rateLimiter = new RateLimiter(1000, 3)\n      rateLimiter.isAllowed(identifier)\n      \n      // Cleanup should work without errors\n      expect(() => rateLimiter.cleanup()).not.toThrow()\n    })\n  })\n\n  describe('Authentication Security', () => {\n    test('should track failed login attempts', () => {\n      const email = 'test@example.com'\n      AuthSecurity.clearFailedAttempts(email)\n      \n      expect(AuthSecurity.isAccountLocked(email)).toBe(false)\n      \n      for (let i = 0; i < 5; i++) {\n        AuthSecurity.recordFailedAttempt(email)\n      }\n      \n      expect(AuthSecurity.isAccountLocked(email)).toBe(true)\n    })\n\n    test('should clear failed attempts on success', () => {\n      const email = 'test2@example.com'\n      \n      AuthSecurity.recordFailedAttempt(email)\n      AuthSecurity.recordFailedAttempt(email)\n      \n      expect(AuthSecurity.getRemainingAttempts(email)).toBe(3)\n      \n      AuthSecurity.clearFailedAttempts(email)\n      expect(AuthSecurity.getRemainingAttempts(email)).toBe(5)\n    })\n\n    test('should validate password strength correctly', () => {\n      const weakPassword = '123456'\n      const strongPassword = 'StrongPass123!'\n      \n      const weakResult = AuthSecurity.validatePasswordStrength(weakPassword)\n      expect(weakResult.valid).toBe(false)\n      \n      const strongResult = AuthSecurity.validatePasswordStrength(strongPassword)\n      expect(strongResult.valid).toBe(true)\n    })\n\n    test('should generate secure tokens', () => {\n      const token1 = AuthSecurity.generateSecureToken()\n      const token2 = AuthSecurity.generateSecureToken()\n      \n      expect(token1).toBeDefined()\n      expect(token2).toBeDefined()\n      expect(token1).not.toBe(token2)\n      expect(token1.length).toBeGreaterThan(10)\n    })\n\n    test('should detect common password patterns', () => {\n      const commonPasswords = [\n        'password123',\n        'admin123',\n        'user123',\n        'aaaaaa',\n        '123456789'\n      ]\n\n      commonPasswords.forEach(password => {\n        const result = AuthSecurity.validatePasswordStrength(password)\n        expect(result.score).toBeLessThan(4) // Should be weak\n      })\n    })\n  })\n\n  describe('Secure Error Handling', () => {\n    test('should sanitize sensitive error messages', () => {\n      const sensitiveError = new Error('Database password is invalid')\n      const sanitized = SecureErrorHandler.sanitizeErrorMessage(sensitiveError)\n      \n      expect(sanitized).toBe('Authentication error')\n      expect(sanitized).not.toContain('password')\n    })\n\n    test('should sanitize technical error details', () => {\n      const technicalError = new Error('Error at line 123 in /home/user/secret/file.js')\n      const sanitized = SecureErrorHandler.sanitizeErrorMessage(technicalError)\n      \n      expect(sanitized).not.toContain('/home/user/secret')\n      expect(sanitized).not.toContain('line 123')\n    })\n\n    test('should limit error message length', () => {\n      const longError = new Error('x'.repeat(300))\n      const sanitized = SecureErrorHandler.sanitizeErrorMessage(longError)\n      \n      expect(sanitized.length).toBeLessThanOrEqual(200)\n    })\n\n    test('should handle various error types', () => {\n      const stringError = 'Simple string error'\n      const objectError = { message: 'Object error' }\n      const nullError = null\n\n      expect(SecureErrorHandler.sanitizeErrorMessage(stringError)).toBe(stringError)\n      expect(SecureErrorHandler.sanitizeErrorMessage(objectError)).toBe('Object error')\n      expect(SecureErrorHandler.sanitizeErrorMessage(nullError)).toBe('An error occurred')\n    })\n  })\n\n  describe('Security Monitoring', () => {\n    test('should log security events correctly', () => {\n      SecurityMonitor.logEvent('test_event', 'medium', {\n        userId: 'test-user',\n        action: 'test-action'\n      })\n\n      const events = SecurityMonitor.getRecentEvents(1)\n      expect(events.length).toBeGreaterThan(0)\n      expect(events[events.length - 1].type).toBe('test_event')\n    })\n\n    test('should filter events by severity', () => {\n      SecurityMonitor.logEvent('event1', 'low', {})\n      SecurityMonitor.logEvent('event2', 'high', {})\n\n      const highEvents = SecurityMonitor.getEventsBySeverity('high')\n      const lowEvents = SecurityMonitor.getEventsBySeverity('low')\n      \n      expect(highEvents.length).toBeGreaterThan(0)\n      expect(lowEvents.length).toBeGreaterThan(0)\n    })\n\n    test('should limit event storage', () => {\n      // Log more than the limit (1000 events)\n      for (let i = 0; i < 1005; i++) {\n        SecurityMonitor.logEvent(`event_${i}`, 'low', {})\n      }\n\n      const events = SecurityMonitor.getRecentEvents()\n      expect(events.length).toBeLessThanOrEqual(1000)\n    })\n\n    test('should handle critical events appropriately', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation()\n      \n      SecurityMonitor.logEvent('critical_event', 'critical', {\n        threat: 'high'\n      })\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'CRITICAL SECURITY EVENT:',\n        expect.objectContaining({\n          type: 'critical_event',\n          severity: 'critical'\n        })\n      )\n\n      consoleSpy.mockRestore()\n    })\n  })\n\n  describe('Content Security Policy', () => {\n    test('should generate valid CSP headers', () => {\n      const csp = CSPHelper.generateCSP()\n      \n      expect(csp).toContain(\"default-src 'self'\")\n      expect(csp).toContain(\"object-src 'none'\")\n      expect(csp).toContain(\"upgrade-insecure-requests\")\n    })\n\n    test('should include required security headers', () => {\n      const headers = CSPHelper.getSecurityHeaders()\n      \n      expect(headers['X-Content-Type-Options']).toBe('nosniff')\n      expect(headers['X-Frame-Options']).toBe('DENY')\n      expect(headers['X-XSS-Protection']).toBe('1; mode=block')\n      expect(headers['Content-Security-Policy']).toBeDefined()\n    })\n\n    test('should have proper HSTS configuration', () => {\n      const headers = CSPHelper.getSecurityHeaders()\n      \n      expect(headers['Strict-Transport-Security']).toContain('max-age=31536000')\n      expect(headers['Strict-Transport-Security']).toContain('includeSubDomains')\n    })\n  })\n\n  describe('Security Integration', () => {\n    test('should work together - sanitize and validate input', () => {\n      const maliciousInput = {\n        username: 'user<script>alert(1)</script>',\n        display_name: 'Test User',\n        bio: 'Bio content',\n        bitcoin_address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'\n      }\n\n      const sanitized = {\n        username: InputSanitizer.sanitizeUsername(maliciousInput.username),\n        display_name: InputSanitizer.sanitizeText(maliciousInput.display_name),\n        bio: InputSanitizer.sanitizeText(maliciousInput.bio),\n        bitcoin_address: InputSanitizer.sanitizeBitcoinAddress(maliciousInput.bitcoin_address)\n      }\n\n      const result = SecuritySchemas.profileData.safeParse(sanitized)\n      expect(result.success).toBe(true)\n      \n      Object.values(sanitized).forEach(value => {\n        expect(value).not.toContain('<script>')\n        expect(value).not.toContain('alert(')\n      })\n    })\n\n    test('should handle complete authentication flow securely', () => {\n      const email = 'security-test@example.com'\n      \n      // Start with clean state\n      AuthSecurity.clearFailedAttempts(email)\n      expect(AuthSecurity.isAccountLocked(email)).toBe(false)\n      \n      // Simulate failed attempts\n      for (let i = 0; i < 4; i++) {\n        AuthSecurity.recordFailedAttempt(email)\n        expect(AuthSecurity.isAccountLocked(email)).toBe(false)\n      }\n      \n      // Final attempt should lock account\n      AuthSecurity.recordFailedAttempt(email)\n      expect(AuthSecurity.isAccountLocked(email)).toBe(true)\n      \n      // Successful login should clear attempts\n      AuthSecurity.clearFailedAttempts(email)\n      expect(AuthSecurity.isAccountLocked(email)).toBe(false)\n    })\n\n    test('should maintain security under load', () => {\n      const rateLimiter = new RateLimiter(1000, 10)\n      const identifier = 'load-test-user'\n      \n      // Simulate high load\n      let allowedCount = 0\n      let deniedCount = 0\n      \n      for (let i = 0; i < 20; i++) {\n        if (rateLimiter.isAllowed(identifier)) {\n          allowedCount++\n        } else {\n          deniedCount++\n        }\n      }\n      \n      expect(allowedCount).toBe(10) // Should respect the limit\n      expect(deniedCount).toBe(10)  // Should deny excess requests\n    })\n  })\n})\n\n// ==================== PERFORMANCE TESTS ====================\n\ndescribe('🚀 Security Performance', () => {\n  test('should sanitize inputs efficiently', () => {\n    const longInput = 'x'.repeat(10000)\n    \n    const start = performance.now()\n    InputSanitizer.sanitizeText(longInput)\n    const end = performance.now()\n    \n    expect(end - start).toBeLessThan(100) // Should be fast\n  })\n\n  test('should validate schemas efficiently', () => {\n    const profileData = {\n      username: 'testuser',\n      display_name: 'Test User',\n      bio: 'Test bio',\n      bitcoin_address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'\n    }\n    \n    const start = performance.now()\n    for (let i = 0; i < 1000; i++) {\n      SecuritySchemas.profileData.safeParse(profileData)\n    }\n    const end = performance.now()\n    \n    expect(end - start).toBeLessThan(1000) // Should handle 1000 validations quickly\n  })\n\n  test('should handle rate limiting efficiently', () => {\n    const rateLimiter = new RateLimiter(1000, 100)\n    \n    const start = performance.now()\n    for (let i = 0; i < 1000; i++) {\n      rateLimiter.isAllowed(`user-${i % 10}`)\n    }\n    const end = performance.now()\n    \n    expect(end - start).toBeLessThan(500) // Should be fast\n  })\n}) "],"version":3}