3d79c97ea42a6966441398d6f6820059
"use strict";
/**
 * COMPREHENSIVE SECURITY TESTS - Option C Validation
 *
 * Created: 2025-06-08
 * Last Modified: 2025-06-08
 * Last Modified Summary: Security hardening validation tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const security_1 = require("../src/utils/security");
describe('ðŸ”’ Security Hardening - Option C Validation', () => {
    describe('Input Sanitization', () => {
        test('should sanitize HTML to prevent XSS', () => {
            const maliciousInput = '<script>alert("xss")</script>';
            const sanitized = security_1.InputSanitizer.sanitizeHtml(maliciousInput);
            expect(sanitized).not.toContain('<script>');
            expect(sanitized).toContain('&lt;script&gt;');
        });
        test('should sanitize text input safely', () => {
            const input = '<p>Hello <script>evil()</script> World</p>';
            const sanitized = security_1.InputSanitizer.sanitizeText(input, 50);
            expect(sanitized).toBe('Hello evil() World');
            expect(sanitized.length).toBeLessThanOrEqual(50);
        });
        test('should sanitize Bitcoin addresses correctly', () => {
            const validAddress = 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh';
            const maliciousAddress = 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh<script>';
            expect(security_1.InputSanitizer.sanitizeBitcoinAddress(validAddress)).toBe(validAddress);
            expect(security_1.InputSanitizer.sanitizeBitcoinAddress(maliciousAddress)).toBe(validAddress);
        });
        test('should sanitize usernames properly', () => {
            const validUsername = 'user_name-123';
            const maliciousUsername = 'user<script>alert(1)</script>name';
            expect(security_1.InputSanitizer.sanitizeUsername(validUsername)).toBe(validUsername);
            expect(security_1.InputSanitizer.sanitizeUsername(maliciousUsername)).toBe('useralert1name');
        });
        test('should sanitize email addresses', () => {
            const validEmail = 'test@example.com';
            const maliciousEmail = 'TEST@EXAMPLE.COM<script>';
            expect(security_1.InputSanitizer.sanitizeEmail(validEmail)).toBe(validEmail);
            expect(security_1.InputSanitizer.sanitizeEmail(maliciousEmail)).toBe('test@example.com');
        });
        test('should sanitize URLs safely', () => {
            const validUrl = 'https://example.com/path';
            const maliciousUrl = 'javascript:alert(1)';
            const invalidUrl = 'not-a-url';
            expect(security_1.InputSanitizer.sanitizeUrl(validUrl)).toBe(validUrl);
            expect(security_1.InputSanitizer.sanitizeUrl(maliciousUrl)).toBe('');
            expect(security_1.InputSanitizer.sanitizeUrl(invalidUrl)).toBe('');
        });
    });
    describe('Security Validation Schemas', () => {
        test('should validate profile data correctly', () => {
            const validProfile = {
                username: 'testuser123',
                display_name: 'Test User',
                bio: 'A test user bio',
                website: 'https://example.com',
                bitcoin_address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'
            };
            const result = security_1.SecuritySchemas.profileData.safeParse(validProfile);
            expect(result.success).toBe(true);
        });
        test('should reject invalid profile data', () => {
            const invalidProfile = {
                username: 'a',
                display_name: '',
                bio: 'x'.repeat(501),
                website: 'not-a-url',
                bitcoin_address: 'invalid-address'
            };
            const result = security_1.SecuritySchemas.profileData.safeParse(invalidProfile);
            expect(result.success).toBe(false);
        });
        test('should validate authentication data', () => {
            const validAuth = {
                email: 'test@example.com',
                password: 'StrongPass123!'
            };
            const result = security_1.SecuritySchemas.authData.safeParse(validAuth);
            expect(result.success).toBe(true);
        });
        test('should reject weak authentication data', () => {
            const weakAuth = {
                email: 'invalid-email',
                password: '123' // Too weak
            };
            const result = security_1.SecuritySchemas.authData.safeParse(weakAuth);
            expect(result.success).toBe(false);
        });
        test('should validate file upload constraints', () => {
            const validFile = {
                file: {
                    size: 1024 * 1024, // 1MB
                    type: 'image/jpeg'
                }
            };
            const result = security_1.SecuritySchemas.fileUpload.safeParse(validFile);
            expect(result.success).toBe(true);
        });
        test('should reject invalid file uploads', () => {
            const invalidFile = {
                file: {
                    size: 10 * 1024 * 1024, // 10MB - too large
                    type: 'text/plain' // Wrong type
                }
            };
            const result = security_1.SecuritySchemas.fileUpload.safeParse(invalidFile);
            expect(result.success).toBe(false);
        });
    });
    describe('Rate Limiting', () => {
        test('should allow requests within limit', () => {
            const rateLimiter = new security_1.RateLimiter(1000, 3);
            const identifier = 'test-user-1';
            expect(rateLimiter.isAllowed(identifier)).toBe(true);
            expect(rateLimiter.isAllowed(identifier)).toBe(true);
            expect(rateLimiter.isAllowed(identifier)).toBe(true);
        });
        test('should block requests exceeding limit', () => {
            const rateLimiter = new security_1.RateLimiter(1000, 2);
            const identifier = 'test-user-2';
            rateLimiter.isAllowed(identifier);
            rateLimiter.isAllowed(identifier);
            expect(rateLimiter.isAllowed(identifier)).toBe(false);
        });
        test('should track remaining requests correctly', () => {
            const identifier = 'test-user-3';
            const rateLimiter = new security_1.RateLimiter(1000, 3);
            expect(rateLimiter.getRemaining(identifier)).toBe(3);
            rateLimiter.isAllowed(identifier);
            expect(rateLimiter.getRemaining(identifier)).toBe(2);
        });
        test('should clean up expired entries', () => {
            const identifier = 'test-user-4';
            const rateLimiter = new security_1.RateLimiter(1000, 3);
            rateLimiter.isAllowed(identifier);
            // Cleanup should work without errors
            expect(() => rateLimiter.cleanup()).not.toThrow();
        });
    });
    describe('Authentication Security', () => {
        test('should track failed login attempts', () => {
            const email = 'test@example.com';
            security_1.AuthSecurity.clearFailedAttempts(email);
            expect(security_1.AuthSecurity.isAccountLocked(email)).toBe(false);
            for (let i = 0; i < 5; i++) {
                security_1.AuthSecurity.recordFailedAttempt(email);
            }
            expect(security_1.AuthSecurity.isAccountLocked(email)).toBe(true);
        });
        test('should clear failed attempts on success', () => {
            const email = 'test2@example.com';
            security_1.AuthSecurity.recordFailedAttempt(email);
            security_1.AuthSecurity.recordFailedAttempt(email);
            expect(security_1.AuthSecurity.getRemainingAttempts(email)).toBe(3);
            security_1.AuthSecurity.clearFailedAttempts(email);
            expect(security_1.AuthSecurity.getRemainingAttempts(email)).toBe(5);
        });
        test('should validate password strength correctly', () => {
            const weakPassword = '123456';
            const strongPassword = 'StrongPass123!';
            const weakResult = security_1.AuthSecurity.validatePasswordStrength(weakPassword);
            expect(weakResult.valid).toBe(false);
            const strongResult = security_1.AuthSecurity.validatePasswordStrength(strongPassword);
            expect(strongResult.valid).toBe(true);
        });
        test('should generate secure tokens', () => {
            const token1 = security_1.AuthSecurity.generateSecureToken();
            const token2 = security_1.AuthSecurity.generateSecureToken();
            expect(token1).toBeDefined();
            expect(token2).toBeDefined();
            expect(token1).not.toBe(token2);
            expect(token1.length).toBeGreaterThan(10);
        });
        test('should detect common password patterns', () => {
            const commonPasswords = [
                'password123',
                'admin123',
                'user123',
                'aaaaaa',
                '123456789'
            ];
            commonPasswords.forEach(password => {
                const result = security_1.AuthSecurity.validatePasswordStrength(password);
                expect(result.score).toBeLessThan(4); // Should be weak
            });
        });
    });
    describe('Secure Error Handling', () => {
        test('should sanitize sensitive error messages', () => {
            const sensitiveError = new Error('Database password is invalid');
            const sanitized = security_1.SecureErrorHandler.sanitizeErrorMessage(sensitiveError);
            expect(sanitized).toBe('Authentication error');
            expect(sanitized).not.toContain('password');
        });
        test('should sanitize technical error details', () => {
            const technicalError = new Error('Error at line 123 in /home/user/secret/file.js');
            const sanitized = security_1.SecureErrorHandler.sanitizeErrorMessage(technicalError);
            expect(sanitized).not.toContain('/home/user/secret');
            expect(sanitized).not.toContain('line 123');
        });
        test('should limit error message length', () => {
            const longError = new Error('x'.repeat(300));
            const sanitized = security_1.SecureErrorHandler.sanitizeErrorMessage(longError);
            expect(sanitized.length).toBeLessThanOrEqual(200);
        });
        test('should handle various error types', () => {
            const stringError = 'Simple string error';
            const objectError = { message: 'Object error' };
            const nullError = null;
            expect(security_1.SecureErrorHandler.sanitizeErrorMessage(stringError)).toBe(stringError);
            expect(security_1.SecureErrorHandler.sanitizeErrorMessage(objectError)).toBe('Object error');
            expect(security_1.SecureErrorHandler.sanitizeErrorMessage(nullError)).toBe('An error occurred');
        });
    });
    describe('Security Monitoring', () => {
        test('should log security events correctly', () => {
            security_1.SecurityMonitor.logEvent('test_event', 'medium', {
                userId: 'test-user',
                action: 'test-action'
            });
            const events = security_1.SecurityMonitor.getRecentEvents(1);
            expect(events.length).toBeGreaterThan(0);
            expect(events[events.length - 1].type).toBe('test_event');
        });
        test('should filter events by severity', () => {
            security_1.SecurityMonitor.logEvent('event1', 'low', {});
            security_1.SecurityMonitor.logEvent('event2', 'high', {});
            const highEvents = security_1.SecurityMonitor.getEventsBySeverity('high');
            const lowEvents = security_1.SecurityMonitor.getEventsBySeverity('low');
            expect(highEvents.length).toBeGreaterThan(0);
            expect(lowEvents.length).toBeGreaterThan(0);
        });
        test('should limit event storage', () => {
            // Log more than the limit (1000 events)
            for (let i = 0; i < 1005; i++) {
                security_1.SecurityMonitor.logEvent(`event_${i}`, 'low', {});
            }
            const events = security_1.SecurityMonitor.getRecentEvents();
            expect(events.length).toBeLessThanOrEqual(1000);
        });
        test('should handle critical events appropriately', () => {
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            security_1.SecurityMonitor.logEvent('critical_event', 'critical', {
                threat: 'high'
            });
            expect(consoleSpy).toHaveBeenCalledWith('CRITICAL SECURITY EVENT:', expect.objectContaining({
                type: 'critical_event',
                severity: 'critical'
            }));
            consoleSpy.mockRestore();
        });
    });
    describe('Content Security Policy', () => {
        test('should generate valid CSP headers', () => {
            const csp = security_1.CSPHelper.generateCSP();
            expect(csp).toContain("default-src 'self'");
            expect(csp).toContain("object-src 'none'");
            expect(csp).toContain("upgrade-insecure-requests");
        });
        test('should include required security headers', () => {
            const headers = security_1.CSPHelper.getSecurityHeaders();
            expect(headers['X-Content-Type-Options']).toBe('nosniff');
            expect(headers['X-Frame-Options']).toBe('DENY');
            expect(headers['X-XSS-Protection']).toBe('1; mode=block');
            expect(headers['Content-Security-Policy']).toBeDefined();
        });
        test('should have proper HSTS configuration', () => {
            const headers = security_1.CSPHelper.getSecurityHeaders();
            expect(headers['Strict-Transport-Security']).toContain('max-age=31536000');
            expect(headers['Strict-Transport-Security']).toContain('includeSubDomains');
        });
    });
    describe('Security Integration', () => {
        test('should work together - sanitize and validate input', () => {
            const maliciousInput = {
                username: 'user<script>alert(1)</script>',
                display_name: 'Test User',
                bio: 'Bio content',
                bitcoin_address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'
            };
            const sanitized = {
                username: security_1.InputSanitizer.sanitizeUsername(maliciousInput.username),
                display_name: security_1.InputSanitizer.sanitizeText(maliciousInput.display_name),
                bio: security_1.InputSanitizer.sanitizeText(maliciousInput.bio),
                bitcoin_address: security_1.InputSanitizer.sanitizeBitcoinAddress(maliciousInput.bitcoin_address)
            };
            const result = security_1.SecuritySchemas.profileData.safeParse(sanitized);
            expect(result.success).toBe(true);
            Object.values(sanitized).forEach(value => {
                expect(value).not.toContain('<script>');
                expect(value).not.toContain('alert(');
            });
        });
        test('should handle complete authentication flow securely', () => {
            const email = 'security-test@example.com';
            // Start with clean state
            security_1.AuthSecurity.clearFailedAttempts(email);
            expect(security_1.AuthSecurity.isAccountLocked(email)).toBe(false);
            // Simulate failed attempts
            for (let i = 0; i < 4; i++) {
                security_1.AuthSecurity.recordFailedAttempt(email);
                expect(security_1.AuthSecurity.isAccountLocked(email)).toBe(false);
            }
            // Final attempt should lock account
            security_1.AuthSecurity.recordFailedAttempt(email);
            expect(security_1.AuthSecurity.isAccountLocked(email)).toBe(true);
            // Successful login should clear attempts
            security_1.AuthSecurity.clearFailedAttempts(email);
            expect(security_1.AuthSecurity.isAccountLocked(email)).toBe(false);
        });
        test('should maintain security under load', () => {
            const rateLimiter = new security_1.RateLimiter(1000, 10);
            const identifier = 'load-test-user';
            // Simulate high load
            let allowedCount = 0;
            let deniedCount = 0;
            for (let i = 0; i < 20; i++) {
                if (rateLimiter.isAllowed(identifier)) {
                    allowedCount++;
                }
                else {
                    deniedCount++;
                }
            }
            expect(allowedCount).toBe(10); // Should respect the limit
            expect(deniedCount).toBe(10); // Should deny excess requests
        });
    });
});
// ==================== PERFORMANCE TESTS ====================
describe('ðŸš€ Security Performance', () => {
    test('should sanitize inputs efficiently', () => {
        const longInput = 'x'.repeat(10000);
        const start = performance.now();
        security_1.InputSanitizer.sanitizeText(longInput);
        const end = performance.now();
        expect(end - start).toBeLessThan(100); // Should be fast
    });
    test('should validate schemas efficiently', () => {
        const profileData = {
            username: 'testuser',
            display_name: 'Test User',
            bio: 'Test bio',
            bitcoin_address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'
        };
        const start = performance.now();
        for (let i = 0; i < 1000; i++) {
            security_1.SecuritySchemas.profileData.safeParse(profileData);
        }
        const end = performance.now();
        expect(end - start).toBeLessThan(1000); // Should handle 1000 validations quickly
    });
    test('should handle rate limiting efficiently', () => {
        const rateLimiter = new security_1.RateLimiter(1000, 100);
        const start = performance.now();
        for (let i = 0; i < 1000; i++) {
            rateLimiter.isAllowed(`user-${i % 10}`);
        }
        const end = performance.now();
        expect(end - start).toBeLessThan(500); // Should be fast
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,