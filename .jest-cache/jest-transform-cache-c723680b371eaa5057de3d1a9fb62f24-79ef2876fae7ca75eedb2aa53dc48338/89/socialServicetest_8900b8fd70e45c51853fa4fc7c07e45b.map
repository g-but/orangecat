{"file":"/home/g/dev/orangecat/src/services/__tests__/socialService.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/socialService.test.ts"],"sourcesContent":["/**\n * SOCIAL SERVICE TESTS\n * \n * Comprehensive test suite for social collaboration services\n * including People, Organizations, Projects, Search, Analytics, and Empty States\n * \n * Created: 2025-01-08\n * Last Modified: 2025-01-08\n * Last Modified Summary: Complete test coverage for social networking system\n */\n\n// Mock Supabase client first\nconst mockSupabase = {\n  from: jest.fn().mockReturnThis(),\n  select: jest.fn().mockReturnThis(),\n  insert: jest.fn().mockReturnThis(),\n  update: jest.fn().mockReturnThis(),\n  delete: jest.fn().mockReturnThis(),\n  eq: jest.fn().mockReturnThis(),\n  or: jest.fn().mockReturnThis(),\n  ilike: jest.fn().mockReturnThis(),\n  limit: jest.fn().mockReturnThis(),\n  range: jest.fn().mockReturnThis(),\n  single: jest.fn().mockResolvedValue({ data: { website: '{}' }, error: null }),\n  auth: {\n    getUser: jest.fn().mockResolvedValue({\n      data: { user: { id: 'test-user-id', email: 'test@example.com' } },\n      error: null\n    })\n  }\n};\n\njest.mock('@/services/supabase/client', () => ({\n  supabase: mockSupabase\n}));\n\nimport {\n  ProjectService,\n  SearchService,\n  SocialAnalyticsService,\n  EmptyStateService\n} from '../socialService';\nimport { PeopleService } from '../people';\nimport { OrganizationService } from '../organizations';\n\nimport type {\n  ConnectionRequest,\n  Organization,\n  OrganizationFormData,\n  Project,\n  ProjectFormData,\n  SearchFilters,\n  SocialAnalytics,\n  EmptyStateContent\n} from '@/types/social'\n\ndescribe('PeopleService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('searchPeople', () => {\n    it('should search people with default parameters', async () => {\n      const mockData = [\n        { id: '1', username: 'user1', full_name: 'User One', website: '{}' },\n        { id: '2', username: 'user2', full_name: 'User Two', website: '{}' }\n      ]\n      \n      mockSupabase.from().select().limit().range.mockResolvedValue({\n        data: mockData,\n        error: null\n      })\n\n      const result = await PeopleService.searchPeople()\n      \n      expect(result).toHaveLength(2)\n      expect(result[0]).toHaveProperty('id', '1')\n      expect(result[0]).toHaveProperty('username', 'user1')\n    })\n\n    it('should handle search errors gracefully', async () => {\n      mockSupabase.from().select().limit().range.mockResolvedValue({\n        data: null,\n        error: new Error('Database error')\n      })\n\n      await expect(PeopleService.searchPeople()).rejects.toThrow('Database error')\n    })\n  })\n\n  describe('sendConnectionRequest', () => {\n    it('should require authentication', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null\n      })\n\n      const request = {\n        recipient_id: 'user-2',\n        message: 'Hi!'\n      }\n\n      await expect(PeopleService.sendConnectionRequest(request))\n        .rejects.toThrow('User not authenticated')\n    })\n  })\n\n  describe('getConnections', () => {\n    it('should return empty array on error', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: new Error('User not found')\n      })\n\n      const result = await PeopleService.getConnections('invalid-user')\n      \n      expect(result).toEqual([])\n    })\n  })\n})\n\ndescribe('OrganizationService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('createOrganization', () => {\n    it('should require authentication', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null\n      })\n\n      const formData = {\n        name: 'Test Org',\n        description: 'Test',\n        type: 'community' as const,\n        visibility: 'public' as const\n      }\n\n      await expect(OrganizationService.createOrganization(formData))\n        .rejects.toThrow('User not authenticated')\n    })\n  })\n\n  describe('getUserOrganizations', () => {\n    it('should return empty array on error', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: new Error('User not found')\n      })\n\n      const result = await OrganizationService.getUserOrganizations('invalid-user')\n      \n      expect(result).toEqual([])\n    })\n  })\n\n  describe('searchOrganizations', () => {\n    it('should search organizations with filters', async () => {\n      const profilesData = [\n        { website: '{}' }\n      ]\n\n      mockSupabase.from().select().limit.mockResolvedValue({\n        data: profilesData,\n        error: null\n      })\n\n      const filters = {\n        query: 'bitcoin',\n        limit: 10\n      }\n\n      const result = await OrganizationService.searchOrganizations(filters)\n      \n      expect(Array.isArray(result)).toBe(true)\n    })\n  })\n})\n\ndescribe('ProjectService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('createProject', () => {\n    it('should require authentication', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null\n      })\n\n      const formData = {\n        name: 'Test Project',\n        description: 'Test',\n        category: 'development' as const,\n        visibility: 'public' as const\n      }\n\n      await expect(ProjectService.createProject(formData))\n        .rejects.toThrow('User not authenticated')\n    })\n  })\n\n  describe('getUserProjects', () => {\n    it('should return empty array on error', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: new Error('User not found')\n      })\n\n      const result = await ProjectService.getUserProjects('invalid-user')\n      \n      expect(result).toEqual([])\n    })\n  })\n\n  describe('searchProjects', () => {\n    it('should search projects by category', async () => {\n      const profilesData = [\n        { website: '{}' }\n      ]\n\n      mockSupabase.from().select().limit.mockResolvedValue({\n        data: profilesData,\n        error: null\n      })\n\n      const filters = {\n        category: 'education'\n      }\n\n      const result = await ProjectService.searchProjects(filters)\n      \n      expect(Array.isArray(result)).toBe(true)\n    })\n  })\n})\n\ndescribe('SearchService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('universalSearch', () => {\n    it('should handle search errors gracefully', async () => {\n      mockSupabase.from.mockImplementation(() => {\n        throw new Error('Search failed');\n      });\n\n      const result = await SearchService.universalSearch({ query: 'test' });\n\n      expect(result).toEqual([]);\n    });\n  });\n})\n\ndescribe('SocialAnalyticsService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('getUserAnalytics', () => {\n    it('should return default analytics on error', async () => {\n      mockSupabase.from.mockImplementation(() => {\n        throw new Error('Analytics failed');\n      });\n      \n      const result = await SocialAnalyticsService.getUserAnalytics('invalid-user');\n\n      expect(result).toHaveProperty('total_connections', 0);\n      expect(result).toHaveProperty('pending_requests', 0)\n      expect(result).toHaveProperty('organizations_joined', 0)\n      expect(result).toHaveProperty('projects_joined', 0)\n    })\n  })\n})\n\ndescribe('EmptyStateService', () => {\n  describe('getEmptyStateContent', () => {\n    it('should return people empty state content', () => {\n      const content = EmptyStateService.getEmptyStateContent('people')\n      \n      expect(content).toHaveProperty('title', 'No Connections Yet')\n      expect(content).toHaveProperty('description')\n      expect(content).toHaveProperty('primaryAction')\n      expect(content).toHaveProperty('benefits')\n      expect(content).toHaveProperty('examples')\n      expect(content.benefits).toContain('Collaborate on Bitcoin projects')\n    })\n\n    it('should return organizations empty state content', () => {\n      const content = EmptyStateService.getEmptyStateContent('organizations')\n      \n      expect(content).toHaveProperty('title', 'No Organizations Yet')\n      expect(content.benefits).toContain('Shared Bitcoin treasury management')\n      expect(content.examples).toContain('Bitcoin development collectives')\n    })\n\n    it('should return projects empty state content', () => {\n      const content = EmptyStateService.getEmptyStateContent('projects')\n      \n      expect(content).toHaveProperty('title', 'No Projects Yet')\n      expect(content.benefits).toContain('Dedicated Bitcoin fundraising')\n      expect(content.examples).toContain('Bitcoin education initiatives')\n    })\n  })\n})\n\n// Integration Tests\ndescribe('Social Collaboration Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('should handle error scenarios gracefully', async () => {\n    // Test database connection failure\n    mockSupabase.from.mockImplementation(() => {\n      throw new Error('Database connection failed');\n    });\n\n    await expect(PeopleService.searchPeople()).rejects.toThrow('Database connection failed');\n\n    // Test authentication failure\n    mockSupabase.auth.getUser.mockResolvedValue({\n      data: { user: null },\n      error: new Error('Authentication failed')\n    })\n\n    await expect(PeopleService.sendConnectionRequest({\n      recipient_id: 'user-2',\n      message: 'Hello'\n    })).rejects.toThrow('User not authenticated')\n  })\n})\n\n// Security Tests\ndescribe('Security Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('should require authentication for sensitive operations', async () => {\n    mockSupabase.auth.getUser.mockResolvedValue({\n      data: { user: null },\n      error: null\n    })\n\n    // All these operations should require authentication\n    await expect(PeopleService.sendConnectionRequest({\n      recipient_id: 'user-2',\n      message: 'Hello'\n    })).rejects.toThrow('User not authenticated')\n\n    await expect(OrganizationService.createOrganization({\n      name: 'Test Org',\n      description: 'Test',\n      type: 'community',\n      visibility: 'public'\n    })).rejects.toThrow('User not authenticated')\n\n    await expect(ProjectService.createProject({\n      name: 'Test Project',\n      description: 'Test',\n      category: 'development',\n      visibility: 'public'\n    })).rejects.toThrow('User not authenticated')\n  })\n}) "],"version":3}