{"file":"/home/g/dev/orangecat/src/services/__tests__/profileService.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/profileService.comprehensive.test.ts"],"sourcesContent":["/**\n * PROFILE SERVICE - COMPREHENSIVE TEST COVERAGE\n * \n * This test suite provides comprehensive coverage for the ProfileService,\n * testing all user profile operations, authentication flows, error handling,\n * fallback mechanisms, and edge cases.\n * \n * Created: 2025-01-08\n * Last Modified: 2025-01-08\n * Last Modified Summary: Comprehensive ProfileService tests with fallback testing\n */\nimport { ProfileService } from '../profileService'\nimport { jest } from '@jest/globals'\nimport type { ScalableProfile, ScalableProfileFormData } from '../profile/types';\n\n// Mock dependencies\njest.mock('../profile/reader', () => ({\n  ProfileReader: {\n    getProfile: jest.fn(),\n    getProfiles: jest.fn(),\n    searchProfiles: jest.fn(),\n    getAllProfiles: jest.fn(),\n    incrementProfileViews: jest.fn(),\n  }\n}));\n\njest.mock('../profile/writer', () => ({\n  ProfileWriter: {\n    updateProfile: jest.fn(),\n    createProfile: jest.fn(),\n    updateAnalytics: jest.fn(),\n    deleteProfile: jest.fn(),\n    fallbackUpdate: jest.fn(),\n  }\n}));\n\nimport { ProfileReader } from '../profile/reader';\nimport { ProfileWriter } from '../profile/writer';\n\nconst mockedProfileReader = jest.mocked(ProfileReader);\nconst mockedProfileWriter = jest.mocked(ProfileWriter);\n\ndescribe('👤 Profile Service - Comprehensive Coverage', () => {\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('🎯 Service Architecture', () => {\n    \n    test('should export ProfileService class', () => {\n      expect(ProfileService).toBeDefined();\n      expect(typeof ProfileService).toBe('function');\n    });\n\n    test('should have all required static methods', () => {\n      expect(typeof ProfileService.getProfile).toBe('function');\n      expect(typeof ProfileService.updateProfile).toBe('function');\n      expect(typeof ProfileService.createProfile).toBe('function');\n      // Note: updatePassword is a legacy method not using the reader/writer pattern\n      expect(typeof ProfileService.updatePassword).toBe('function'); \n      expect(typeof ProfileService.fallbackProfileUpdate).toBe('function');\n    });\n\n  });\n\n  describe('👤 Get Profile Operations', () => {\n    \n    test('should retrieve profile successfully', async () => {\n      const mockProfile: ScalableProfile = {\n        id: 'user-123',\n        username: 'testuser',\n        full_name: 'Test User',\n        display_name: 'Test User',\n        avatar_url: 'http://example.com/avatar.png',\n        website: 'http://example.com',\n        created_at: '2024-01-01T00:00:00.000Z',\n        updated_at: '2024-01-01T00:00:00.000Z',\n        // Add other required fields for ScalableProfile\n        bio: null,\n        banner_url: null,\n        bitcoin_address: null,\n        lightning_address: null,\n        email: null,\n        phone: null,\n        location: null,\n        timezone: null,\n        language: null,\n        currency: null,\n        bitcoin_public_key: null,\n        lightning_node_id: null,\n        payment_preferences: null,\n        bitcoin_balance: null,\n        lightning_balance: null,\n        profile_views: null,\n        follower_count: null,\n        following_count: null,\n        campaign_count: null,\n        total_raised: null,\n        total_donated: null,\n        verification_status: 'unverified',\n        verification_level: null,\n        kyc_status: 'none',\n        two_factor_enabled: null,\n        last_login_at: null,\n        login_count: null,\n        theme_preferences: null,\n        custom_css: null,\n        profile_color: null,\n        cover_image_url: null,\n        profile_badges: null,\n        status: 'active',\n        last_active_at: null,\n        profile_completed_at: null,\n        onboarding_completed: null,\n        terms_accepted_at: null,\n        privacy_policy_accepted_at: null,\n        social_links: null,\n        preferences: null,\n        metadata: null,\n        verification_data: null,\n        privacy_settings: null\n      };\n\n      mockedProfileReader.getProfile.mockResolvedValue(mockProfile);\n\n      const result = await ProfileService.getProfile('user-123');\n\n      expect(result).toEqual(mockProfile);\n      expect(mockedProfileReader.getProfile).toHaveBeenCalledWith('user-123');\n    });\n\n    test('should handle profile not found', async () => {\n      mockedProfileReader.getProfile.mockResolvedValue(null);\n\n      const result = await ProfileService.getProfile('nonexistent-user');\n\n      expect(result).toBeNull();\n    });\n\n    test('should handle database connection errors', async () => {\n      const errorMessage = 'Connection failed';\n      mockedProfileReader.getProfile.mockRejectedValue(new Error(errorMessage));\n\n      await expect(ProfileService.getProfile('user-123')).rejects.toThrow(errorMessage);\n    });\n\n    test('should handle empty user ID gracefully', async () => {\n      // An empty ID should not throw, but return null as per service logic.\n      mockedProfileReader.getProfile.mockResolvedValue(null);\n\n      const result = await ProfileService.getProfile('');\n      \n      expect(result).toBeNull();\n      expect(mockedProfileReader.getProfile).toHaveBeenCalledWith('');\n    });\n\n  });\n\n  describe('✏️ Update Profile Operations', () => {\n    \n    test('should update profile successfully', async () => {\n      const userId = 'user-123';\n      const formData: ScalableProfileFormData = {\n        username: 'newusername',\n        full_name: 'New Name',\n        bio: 'Updated bio'\n      };\n      const mockResponse = {\n          success: true,\n          data: { id: userId, ...formData } as ScalableProfile\n      };\n      mockedProfileWriter.updateProfile.mockResolvedValue(mockResponse);\n\n      const result = await ProfileService.updateProfile(userId, formData);\n\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      expect(result.data?.username).toBe('newusername');\n      expect(mockedProfileWriter.updateProfile).toHaveBeenCalledWith(userId, formData);\n    });\n\n    test('should return error on update failure', async () => {\n        const userId = 'user-123';\n        const formData: ScalableProfileFormData = { username: 'failuser' };\n        const mockResponse = {\n            success: false,\n            error: 'Failed to update'\n        };\n        mockedProfileWriter.updateProfile.mockResolvedValue(mockResponse);\n\n        const result = await ProfileService.updateProfile(userId, formData);\n\n        expect(result.success).toBe(false);\n        expect(result.data).toBeUndefined();\n        expect(result.error).toBe('Failed to update');\n    });\n\n  });\n  \n  describe('➕ Create Profile Operations', () => {\n\n    test('should create profile successfully', async () => {\n        const userId = 'user-456';\n        const formData: ScalableProfileFormData = {\n            username: 'newbie',\n            full_name: 'Newbie User'\n        };\n        const mockResponse = {\n            success: true,\n            data: { id: userId, ...formData } as ScalableProfile\n        };\n        mockedProfileWriter.createProfile.mockResolvedValue(mockResponse);\n\n        const result = await ProfileService.createProfile(userId, formData);\n\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n        expect(result.data?.username).toBe('newbie');\n    });\n  });\n\n  describe('🗑️ Delete Profile Operations', () => {\n\n    test('should delete profile successfully', async () => {\n        const userId = 'user-789';\n        const mockResponse = { success: true };\n        mockedProfileWriter.deleteProfile.mockResolvedValue(mockResponse);\n        \n        const result = await ProfileService.deleteProfile(userId);\n\n        expect(result.success).toBe(true);\n        expect(result.data).toBeUndefined();\n    });\n  });\n\n}); "],"version":3}