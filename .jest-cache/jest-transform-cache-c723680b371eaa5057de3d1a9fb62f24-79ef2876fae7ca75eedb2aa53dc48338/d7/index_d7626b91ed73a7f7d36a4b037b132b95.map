{"version":3,"names":["cov_mvcxdfbbb","actualCoverage","s","common_1","require","logger_1","API_TIMEOUT_MS","BitcoinService","getInstance","f","instance","b","constructor","fetchImplementation","fetchFn","fetch","bind","globalThis","Error","providers","getAPIProviders","name","baseUrl","addressEndpoint","address","txsEndpoint","processBalance","data","chain_stats","funded","Number","funded_txo_sum","spent","spent_txo_sum","sanitizedFunded","isFinite","sanitizedSpent","Math","max","processTransactions","Array","isArray","slice","map","tx","txType","valueInSatoshis","inputsFromAddress","_a","vin","filter","input","prevout","scriptpubkey_address","outputsToAddress","_b","vout","output","length","amountSentToOthers","value","totalValueFromInputs","reduce","sum","txid","status","_c","confirmed","timestamp","_d","block_time","Date","now","type","fetchWithTimeout","url","timeout","controller","AbortController","id","setTimeout","abort","response","signal","clearTimeout","error","cleanBitcoinAddress","startsWith","split","replace","getBalance","walletData","fetchBitcoinWalletData","balance","unconfirmed","total","getErrorMessage","getTransactions","transactions","logger","cleanAddress","bitcoinAddressRegex","test","lastError","provider","addressUrl","addressResponse","ok","errorText","text","warn","undefined","addressData","json","balanceInSatoshis","txsUrl","txsResponse","txsData","network","lastUpdated","toISOString","errorMessage","getTransactionUrl","getAddressUrl","exports","bitcoinService","formatBtcValue","decimals","clampedDecimals","min","toFixed"],"sources":["/home/g/dev/orangecat/src/services/bitcoin/index.ts"],"sourcesContent":["import { BitcoinTransaction, BitcoinWalletData } from '@/types/bitcoin/index';\nimport type { \n  MempoolAddressInfo, \n  BlockstreamAddressInfo, \n  MempoolTransaction, \n  BlockstreamTransaction\n} from '@/types/bitcoin';\nimport { getErrorMessage, type CatchError } from '@/types/common';\nimport { logger } from '@/utils/logger';\n\n/**\n * BITCOIN SERVICE - CLASS-BASED ARCHITECTURE WITH DEPENDENCY INJECTION\n * \n * CRITICAL FOR FINANCIAL PLATFORM:\n * - Handles Bitcoin address validation and wallet data fetching\n * - Supports multiple API providers with fallback\n * - Proper error handling for financial data\n * - Dependency injection for testability\n */\n\nconst API_TIMEOUT_MS = 10000; // 10 seconds timeout for API calls\n\n// Types for provider configuration\ninterface APIProvider {\n  name: string;\n  baseUrl: string;\n  addressEndpoint: (address: string) => string;\n  txsEndpoint: (address: string) => string;\n  processBalance: (data: MempoolAddressInfo | BlockstreamAddressInfo) => number;\n  processTransactions: (data: MempoolTransaction[] | BlockstreamTransaction[], address: string) => BitcoinTransaction[];\n}\n\n// Types for fetch interface (for dependency injection)\ninterface FetchInterface {\n  (url: string, options?: RequestInit): Promise<Response>;\n}\n\nexport class BitcoinService {\n  private static instance: BitcoinService;\n  private fetchFn: FetchInterface;\n  private providers: APIProvider[];\n\n  static getInstance(): BitcoinService {\n    if (!BitcoinService.instance) {\n      BitcoinService.instance = new BitcoinService();\n    }\n    return BitcoinService.instance;\n  }\n\n  constructor(fetchImplementation?: FetchInterface) {\n    // Only use global fetch if it's available and no implementation is provided\n    this.fetchFn = fetchImplementation || (typeof fetch !== 'undefined' ? fetch.bind(globalThis) : (() => {\n      throw new Error('Fetch implementation is required in this environment');\n    }) as FetchInterface);\n    this.providers = this.getAPIProviders();\n  }\n\n  private getAPIProviders(): APIProvider[] {\n    return [\n      {\n        name: 'mempool.space',\n        baseUrl: 'https://mempool.space/api',\n        addressEndpoint: (address: string) => `/address/${address}`,\n        txsEndpoint: (address: string) => `/address/${address}/txs`,\n        processBalance: (data: MempoolAddressInfo) => {\n          if (!data || !data.chain_stats) {\n            return 0;\n          }\n          const funded = Number(data.chain_stats.funded_txo_sum) || 0;\n          const spent = Number(data.chain_stats.spent_txo_sum) || 0;\n          \n          // Sanitize numbers to prevent Infinity/NaN\n          const sanitizedFunded = isFinite(funded) ? funded : 0;\n          const sanitizedSpent = isFinite(spent) ? spent : 0;\n          \n          return Math.max(0, sanitizedFunded - sanitizedSpent);\n        },\n        processTransactions: (data: MempoolTransaction[], address: string): BitcoinTransaction[] => {\n          if (!Array.isArray(data)) {\n            return [];\n          }\n          return data.slice(0, 10).map((tx: any): BitcoinTransaction => {\n            let txType: 'incoming' | 'outgoing' = 'incoming';\n            let valueInSatoshis = 0;\n\n            const inputsFromAddress = tx.vin?.filter((input: any) => \n              input.prevout && input.prevout.scriptpubkey_address === address) || [];\n            const outputsToAddress = tx.vout?.filter((output: any) => \n              output.scriptpubkey_address === address) || [];\n\n            if (inputsFromAddress.length > 0) {\n              txType = 'outgoing';\n              let amountSentToOthers = 0;\n              for (const output of tx.vout || []) {\n                if (output.scriptpubkey_address !== address) {\n                  amountSentToOthers += Number(output.value) || 0;\n                }\n              }\n              if (amountSentToOthers > 0) {\n                valueInSatoshis = amountSentToOthers;\n              } else {\n                const totalValueFromInputs = inputsFromAddress.reduce(\n                  (sum: number, input: any) => sum + (Number(input.prevout?.value) || 0), 0);\n                valueInSatoshis = totalValueFromInputs;\n              }\n            } else if (outputsToAddress.length > 0) {\n              txType = 'incoming';\n              valueInSatoshis = outputsToAddress.reduce(\n                (sum: number, output: any) => sum + (Number(output.value) || 0), 0);\n            } else {\n              valueInSatoshis = 0;\n            }\n\n            return {\n              txid: tx.txid || 'unknown',\n              value: valueInSatoshis / 100000000, // Convert satoshis to BTC\n              status: (tx.status?.confirmed) ? 'confirmed' : 'pending',\n              timestamp: tx.status?.block_time ? tx.status.block_time * 1000 : Date.now(),\n              type: txType,\n            };\n          });\n        },\n      },\n      {\n        name: 'blockstream.info',\n        baseUrl: 'https://blockstream.info/api',\n        addressEndpoint: (address: string) => `/address/${address}`,\n        txsEndpoint: (address: string) => `/address/${address}/txs`,\n        processBalance: (data: BlockstreamAddressInfo) => {\n          if (!data || !data.chain_stats) {\n            return 0;\n          }\n          const funded = Number(data.chain_stats.funded_txo_sum) || 0;\n          const spent = Number(data.chain_stats.spent_txo_sum) || 0;\n          \n          // Sanitize numbers to prevent Infinity/NaN\n          const sanitizedFunded = isFinite(funded) ? funded : 0;\n          const sanitizedSpent = isFinite(spent) ? spent : 0;\n          \n          return Math.max(0, sanitizedFunded - sanitizedSpent);\n        },\n        processTransactions: (data: BlockstreamTransaction[], address: string): BitcoinTransaction[] => {\n          if (!Array.isArray(data)) {\n            return [];\n          }\n          return data.slice(0, 10).map((tx: any): BitcoinTransaction => {\n            let txType: 'incoming' | 'outgoing' = 'incoming';\n            let valueInSatoshis = 0;\n\n            const inputsFromAddress = tx.vin?.filter((input: any) => \n              input.prevout && input.prevout.scriptpubkey_address === address) || [];\n            const outputsToAddress = tx.vout?.filter((output: any) => \n              output.scriptpubkey_address === address) || [];\n\n            if (inputsFromAddress.length > 0) {\n              txType = 'outgoing';\n              let amountSentToOthers = 0;\n              for (const output of tx.vout || []) {\n                if (output.scriptpubkey_address !== address) {\n                  amountSentToOthers += Number(output.value) || 0;\n                }\n              }\n              if (amountSentToOthers > 0) {\n                valueInSatoshis = amountSentToOthers;\n              } else {\n                const totalValueFromInputs = inputsFromAddress.reduce(\n                  (sum: number, input: any) => sum + (Number(input.prevout?.value) || 0), 0);\n                valueInSatoshis = totalValueFromInputs;\n              }\n            } else if (outputsToAddress.length > 0) {\n              txType = 'incoming';\n              valueInSatoshis = outputsToAddress.reduce(\n                (sum: number, output: any) => sum + (Number(output.value) || 0), 0);\n            } else {\n              valueInSatoshis = 0;\n            }\n\n            return {\n              txid: tx.txid || 'unknown',\n              value: valueInSatoshis / 100000000, // Convert satoshis to BTC\n              status: (tx.status?.confirmed) ? 'confirmed' : 'pending',\n              timestamp: tx.status?.block_time ? tx.status.block_time * 1000 : Date.now(),\n              type: txType,\n            };\n          });\n        },\n      },\n    ];\n  }\n\n  // Helper function to fetch with timeout\n  private async fetchWithTimeout(url: string, timeout: number): Promise<Response> {\n    const controller = new AbortController();\n    const id = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const response = await this.fetchFn(url, { signal: controller.signal });\n      clearTimeout(id);\n      return response;\n    } catch (error) {\n      clearTimeout(id);\n      throw error;\n    }\n  }\n\n  // Clean Bitcoin address from URI if needed\n  cleanBitcoinAddress(address: string): string {\n    if (!address) return '';\n    return address.startsWith('bitcoin:') \n      ? address.split('?')[0].replace('bitcoin:', '')\n      : address;\n  }\n\n  // Get balance for a Bitcoin address\n  async getBalance(address: string): Promise<{ confirmed: number; unconfirmed: number; total: number; error?: string }> {\n    try {\n      const walletData = await this.fetchBitcoinWalletData(address);\n      const confirmed = Number(walletData.balance) || 0;\n      const unconfirmed = 0; // TODO: Add unconfirmed balance tracking\n      return {\n        confirmed,\n        unconfirmed,\n        total: confirmed + unconfirmed\n      };\n    } catch (error: CatchError) {\n      return {\n        confirmed: 0,\n        unconfirmed: 0,\n        total: 0,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  // Get transactions for a Bitcoin address\n  async getTransactions(address: string): Promise<BitcoinTransaction[]> {\n    try {\n      const walletData = await this.fetchBitcoinWalletData(address);\n      return walletData.transactions;\n    } catch (error: CatchError) {\n      logger.error('Error fetching transactions:', getErrorMessage(error), 'Bitcoin');\n      return [];\n    }\n  }\n\n  // Fetch wallet data with failover between different providers\n  async fetchBitcoinWalletData(address: string): Promise<BitcoinWalletData> {\n    const cleanAddress = this.cleanBitcoinAddress(address);\n    \n    // Validate address before making API calls\n    if (!cleanAddress) {\n      throw new Error('Invalid or empty Bitcoin address');\n    }\n    \n    // Basic Bitcoin address validation\n    const bitcoinAddressRegex = /^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,87}$/;\n    if (!bitcoinAddressRegex.test(cleanAddress)) {\n      throw new Error('Invalid Bitcoin address format');\n    }\n    \n    let lastError: Error | null = null;\n    \n    for (const provider of this.providers) {\n      try {\n        const addressUrl = `${provider.baseUrl}${provider.addressEndpoint(cleanAddress)}`;\n        const addressResponse = await this.fetchWithTimeout(addressUrl, API_TIMEOUT_MS);\n        \n        if (!addressResponse || !addressResponse.ok) {\n          const errorText = addressResponse ? await addressResponse.text() : 'No response';\n          logger.warn(`API Error from ${provider.name} (Address - ${addressResponse?.status || 'unknown'}): ${errorText}`, undefined, 'Bitcoin');\n          lastError = new Error(`Provider ${provider.name} address fetch failed: ${addressResponse?.status || 'unknown'}`);\n          continue;\n        }\n        \n        const addressData = await addressResponse.json();\n        const balanceInSatoshis = provider.processBalance(addressData);\n        \n        const txsUrl = `${provider.baseUrl}${provider.txsEndpoint(cleanAddress)}`;\n        const txsResponse = await this.fetchWithTimeout(txsUrl, API_TIMEOUT_MS);\n        \n        if (!txsResponse || !txsResponse.ok) {\n          const errorText = txsResponse ? await txsResponse.text() : 'No response';\n          logger.warn(`API Error from ${provider.name} (Transactions - ${txsResponse?.status || 'unknown'}): ${errorText}`, undefined, 'Bitcoin');\n          lastError = new Error(`Provider ${provider.name} transactions fetch failed: ${txsResponse?.status || 'unknown'}`);\n          continue;\n        }\n        \n        const txsData = await txsResponse.json();\n        const transactions = provider.processTransactions(txsData, cleanAddress);\n        \n        return {\n          balance: balanceInSatoshis / 100000000, // Convert balance to BTC here\n          address: cleanAddress,\n          transactions,\n          network: 'mainnet' as const,\n          lastUpdated: new Date().toISOString()\n        };\n      } catch (error: CatchError) {\n        const errorMessage = getErrorMessage(error);\n        logger.error(`Error with provider ${provider.name}:`, errorMessage, 'Bitcoin');\n        lastError = error instanceof Error ? error : new Error(errorMessage);\n        // Continue to next provider\n      }\n    }\n    \n    logger.error(`Failed to fetch wallet data for ${cleanAddress} from all providers`, { error: getErrorMessage(lastError) }, 'Bitcoin');\n    throw lastError || new Error('Failed to fetch wallet data from any provider for address: ' + cleanAddress);\n  }\n\n  // Get mempool.space transaction URL\n  getTransactionUrl(txid: string): string {\n    return `https://mempool.space/tx/${txid}`;\n  }\n\n  // Get mempool.space address URL\n  getAddressUrl(address: string): string {\n    return `https://mempool.space/address/${this.cleanBitcoinAddress(address)}`;\n  }\n}\n\n// Export singleton instance and convenience functions for backward compatibility\nexport const bitcoinService = BitcoinService.getInstance();\n\n// Legacy function exports for backward compatibility\nexport const cleanBitcoinAddress = (address: string) => bitcoinService.cleanBitcoinAddress(address);\nexport const fetchBitcoinWalletData = (address: string) => bitcoinService.fetchBitcoinWalletData(address);\nexport const getTransactionUrl = (txid: string) => bitcoinService.getTransactionUrl(txid);\nexport const getAddressUrl = (address: string) => bitcoinService.getAddressUrl(address);\n\n// Add missing formatBtcValue function\nexport const formatBtcValue = (value: number, decimals: number = 8): string => {\n  if (typeof value !== 'number' || !isFinite(value)) {\n    return '0.00000000';\n  }\n  \n  // Ensure we don't show more than 8 decimal places for BTC\n  const clampedDecimals = Math.min(Math.max(0, decimals), 8);\n  return value.toFixed(clampedDecimals);\n};\n"],"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","ignoreList":[]}