{"file":"/home/g/dev/orangecat/src/services/__tests__/profiles.performance.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/profiles.performance.test.ts"],"sourcesContent":["/**\n * PROFILES PERFORMANCE TEST SUITE - BENCHMARKING & SCALABILITY\n * \n * This test suite focuses on performance benchmarking and scalability\n * validation for the profile service, ensuring it meets production\n * performance requirements.\n * \n * Features:\n * - Response time benchmarking\n * - Concurrent operation testing\n * - Memory usage monitoring\n * - Scalability validation\n * - Performance regression detection\n * - Load testing simulation\n * \n * Created: 2025-01-08\n * Last Modified: 2025-01-08\n * Last Modified Summary: Performance benchmarking test suite\n */\n\nimport { ProfileService, type ScalableProfile, type ScalableProfileFormData } from '../profileService'\nimport { jest } from '@jest/globals'\n\n// =====================================================================\n// 🎯 PERFORMANCE TARGETS & CONSTANTS\n// =====================================================================\n\nconst PERFORMANCE_TARGETS = {\n  PROFILE_RETRIEVAL: 100, // ms\n  PROFILE_UPDATE: 200, // ms\n  BULK_OPERATIONS: 300, // ms\n  CONCURRENT_OPERATIONS: 500, // ms\n  SEARCH_OPERATIONS: 150, // ms\n  ANALYTICS_UPDATE: 100, // ms\n  MEMORY_GROWTH_LIMIT: 20, // MB\n  CONCURRENT_USER_LIMIT: 50, // simultaneous users\n  THROUGHPUT_TARGET: 100 // operations per second\n}\n\n// =====================================================================\n// 🔧 PERFORMANCE TESTING UTILITIES\n// =====================================================================\n\nclass PerformanceTestUtils {\n  private static performanceResults: Array<{\n    operation: string\n    executionTime: number\n    target: number\n    passed: boolean\n    timestamp: number\n  }> = []\n  \n  static async measurePerformance<T>(\n    operation: () => Promise<T>,\n    operationName: string,\n    target: number,\n    iterations: number = 1\n  ): Promise<{\n    result: T | T[]\n    averageTime: number\n    minTime: number\n    maxTime: number\n    passed: boolean\n    iterations: number\n  }> {\n    const times: number[] = []\n    let results: T[] = []\n    \n    for (let i = 0; i < iterations; i++) {\n      const startTime = performance.now()\n      const result = await operation()\n      const endTime = performance.now()\n      const executionTime = endTime - startTime\n      \n      times.push(executionTime)\n      results.push(result)\n    }\n    \n    const averageTime = times.reduce((sum, time) => sum + time, 0) / times.length\n    const minTime = Math.min(...times)\n    const maxTime = Math.max(...times)\n    const passed = averageTime <= target\n    \n    // Record result\n    this.performanceResults.push({\n      operation: operationName,\n      executionTime: averageTime,\n      target,\n      passed,\n      timestamp: Date.now()\n    })\n    \n    const status = passed ? '✅' : '❌'\n    console.log(`${status} ${operationName}: ${averageTime.toFixed(2)}ms avg (target: ${target}ms, min: ${minTime.toFixed(2)}ms, max: ${maxTime.toFixed(2)}ms)`)\n    \n    return {\n      result: iterations === 1 ? results[0] : results,\n      averageTime,\n      minTime,\n      maxTime,\n      passed,\n      iterations\n    }\n  }\n  \n  static async measureMemoryUsage<T>(\n    operation: () => Promise<T>,\n    operationName: string\n  ): Promise<{\n    result: T\n    memoryUsed: number\n    memoryGrowth: number\n  }> {\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc()\n    }\n    \n    const initialMemory = process.memoryUsage().heapUsed\n    const result = await operation()\n    const finalMemory = process.memoryUsage().heapUsed\n    \n    const memoryUsed = finalMemory / 1024 / 1024 // MB\n    const memoryGrowth = (finalMemory - initialMemory) / 1024 / 1024 // MB\n    \n    console.log(`💾 ${operationName}: ${memoryUsed.toFixed(2)}MB used, ${memoryGrowth.toFixed(2)}MB growth`)\n    \n    return {\n      result,\n      memoryUsed,\n      memoryGrowth\n    }\n  }\n  \n  static async simulateLoad<T>(\n    operation: () => Promise<T>,\n    operationName: string,\n    concurrentUsers: number,\n    operationsPerUser: number\n  ): Promise<{\n    totalOperations: number\n    totalTime: number\n    averageTime: number\n    throughput: number\n    successRate: number\n    errors: number\n  }> {\n    const startTime = performance.now()\n    let successCount = 0\n    let errorCount = 0\n    \n    // Create concurrent user operations\n    const userOperations = Array.from({ length: concurrentUsers }, async () => {\n      const userResults = []\n      for (let i = 0; i < operationsPerUser; i++) {\n        try {\n          const result = await operation()\n          userResults.push(result)\n          successCount++\n        } catch (error) {\n          errorCount++\n        }\n      }\n      return userResults\n    })\n    \n    await Promise.all(userOperations)\n    \n    const endTime = performance.now()\n    const totalTime = endTime - startTime\n    const totalOperations = concurrentUsers * operationsPerUser\n    const averageTime = totalTime / totalOperations\n    const throughput = (totalOperations / totalTime) * 1000 // operations per second\n    const successRate = (successCount / totalOperations) * 100\n    \n    console.log(`🚀 ${operationName} Load Test:`)\n    console.log(`   Users: ${concurrentUsers}, Ops/User: ${operationsPerUser}`)\n    console.log(`   Total Time: ${totalTime.toFixed(2)}ms`)\n    console.log(`   Throughput: ${throughput.toFixed(2)} ops/sec`)\n    console.log(`   Success Rate: ${successRate.toFixed(2)}%`)\n    console.log(`   Errors: ${errorCount}`)\n    \n    return {\n      totalOperations,\n      totalTime,\n      averageTime,\n      throughput,\n      successRate,\n      errors: errorCount\n    }\n  }\n  \n  static getPerformanceReport(): {\n    totalTests: number\n    passedTests: number\n    failedTests: number\n    overallScore: number\n    results: typeof PerformanceTestUtils.performanceResults\n  } {\n    const totalTests = this.performanceResults.length\n    const passedTests = this.performanceResults.filter(r => r.passed).length\n    const failedTests = totalTests - passedTests\n    const overallScore = totalTests > 0 ? (passedTests / totalTests) * 100 : 0\n    \n    return {\n      totalTests,\n      passedTests,\n      failedTests,\n      overallScore,\n      results: [...this.performanceResults]\n    }\n  }\n}\n\n// =====================================================================\n// 🎭 PERFORMANCE MOCK SETUP\n// =====================================================================\n\nclass PerformanceMockSetup {\n  static setupRealisticMocks(responseDelay: number = 50) {\n    const mockProfile: ScalableProfile = {\n      id: 'perf-test-user',\n      username: 'perftest',\n      full_name: 'Performance Test User',\n      display_name: 'Performance Test User',\n      avatar_url: 'https://example.com/avatar.jpg',\n      website: 'https://example.com',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      bio: 'Performance testing profile',\n      banner_url: null,\n      bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n      lightning_address: 'test@getalby.com',\n      email: 'perf@test.com',\n      phone: null,\n      location: null,\n      timezone: 'UTC',\n      language: 'en',\n      currency: 'USD',\n      bitcoin_public_key: null,\n      lightning_node_id: null,\n      payment_preferences: {},\n      bitcoin_balance: 0,\n      lightning_balance: 0,\n      profile_views: 100,\n      follower_count: 50,\n      following_count: 25,\n      campaign_count: 5,\n      total_raised: 1000000,\n      total_donated: 500000,\n      verification_status: 'verified',\n      verification_level: 2,\n      kyc_status: 'approved',\n      two_factor_enabled: true,\n      last_login_at: new Date().toISOString(),\n      login_count: 150,\n      theme_preferences: { theme: 'dark' },\n      custom_css: null,\n      profile_color: '#F7931A',\n      cover_image_url: null,\n      profile_badges: ['verified', 'early_adopter'],\n      status: 'active',\n      last_active_at: new Date().toISOString(),\n      profile_completed_at: new Date().toISOString(),\n      onboarding_completed: true,\n      terms_accepted_at: new Date().toISOString(),\n      privacy_policy_accepted_at: new Date().toISOString(),\n      social_links: { twitter: '@perftest' },\n      preferences: { notifications: true },\n      metadata: { performance_test: true },\n      verification_data: {},\n      privacy_settings: { public_profile: true }\n    }\n    \n    const mockSupabase = {\n      from: jest.fn(() => ({\n        select: jest.fn().mockReturnThis(),\n        insert: jest.fn().mockReturnThis(),\n        update: jest.fn().mockReturnThis(),\n        delete: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        neq: jest.fn().mockReturnThis(),\n        like: jest.fn().mockReturnThis(),\n        ilike: jest.fn().mockReturnThis(),\n        order: jest.fn().mockReturnThis(),\n        limit: jest.fn().mockReturnThis(),\n        range: jest.fn().mockReturnThis(),\n        single: jest.fn().mockImplementation(() => \n          new Promise(resolve => \n            setTimeout(() => resolve({ \n              data: mockProfile, \n              error: null \n            }), responseDelay)\n          )\n        ),\n        maybeSingle: jest.fn().mockImplementation(() => \n          new Promise(resolve => \n            setTimeout(() => resolve({ \n              data: mockProfile, \n              error: null \n            }), responseDelay)\n          )\n        )\n      }))\n    }\n    \n    jest.doMock('@/services/supabase/client', () => ({\n      __esModule: true,\n      default: mockSupabase\n    }))\n    \n    return mockSupabase\n  }\n}\n\n// =====================================================================\n// 🧪 PERFORMANCE TEST SUITE\n// =====================================================================\n\ndescribe('🚀 ProfileService - Performance & Scalability Testing', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    PerformanceMockSetup.setupRealisticMocks(50)\n  })\n  \n  // =====================================================================\n  // ⚡ RESPONSE TIME BENCHMARKING\n  // =====================================================================\n  \n  describe('⚡ Response Time Benchmarking', () => {\n    \n    it('should retrieve profile within performance target', async () => {\n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => ProfileService.getProfile('test-user-123'),\n        'Profile Retrieval',\n        PERFORMANCE_TARGETS.PROFILE_RETRIEVAL,\n        10 // 10 iterations for average\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.PROFILE_RETRIEVAL)\n    })\n    \n    it('should update profile within performance target', async () => {\n      // Arrange\n      const formData: ScalableProfileFormData = {\n        username: 'perftest',\n        full_name: 'Updated Performance Test',\n        bio: 'Updated for performance testing'\n      }\n      \n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => ProfileService.updateProfile('test-user-123', formData),\n        'Profile Update',\n        PERFORMANCE_TARGETS.PROFILE_UPDATE,\n        5 // 5 iterations\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.PROFILE_UPDATE)\n    })\n    \n    it('should search profiles within performance target', async () => {\n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => ProfileService.searchProfiles('test', 20, 0),\n        'Profile Search',\n        PERFORMANCE_TARGETS.SEARCH_OPERATIONS,\n        5 // 5 iterations\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.SEARCH_OPERATIONS)\n    })\n    \n    it('should update analytics within performance target', async () => {\n      // Arrange\n      const analyticsData = {\n        profile_views: 150,\n        follower_count: 75,\n        campaign_count: 8\n      }\n      \n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => ProfileService.updateAnalytics('test-user-123', analyticsData),\n        'Analytics Update',\n        PERFORMANCE_TARGETS.ANALYTICS_UPDATE,\n        10 // 10 iterations\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.ANALYTICS_UPDATE)\n    })\n  })\n  \n  // =====================================================================\n  // 🔄 CONCURRENT OPERATIONS TESTING\n  // =====================================================================\n  \n  describe('🔄 Concurrent Operations Testing', () => {\n    \n    it('should handle concurrent profile retrievals efficiently', async () => {\n      // Arrange\n      const concurrentOperations = Array.from({ length: 20 }, (_, i) => \n        () => ProfileService.getProfile(`user-${i}`)\n      )\n      \n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => Promise.all(concurrentOperations.map(op => op())),\n        'Concurrent Profile Retrievals',\n        PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS)\n    })\n    \n    it('should handle concurrent profile updates efficiently', async () => {\n      // Arrange\n      const concurrentOperations = Array.from({ length: 10 }, (_, i) => \n        () => ProfileService.updateProfile(`user-${i}`, {\n          username: `user${i}`,\n          full_name: `User ${i}`,\n          bio: `Bio for user ${i}`\n        })\n      )\n      \n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => Promise.all(concurrentOperations.map(op => op())),\n        'Concurrent Profile Updates',\n        PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS)\n    })\n    \n    it('should handle mixed concurrent operations', async () => {\n      // Arrange\n      const mixedOperations = [\n        () => ProfileService.getProfile('user-1'),\n        () => ProfileService.updateProfile('user-2', { full_name: 'Updated' }),\n        () => ProfileService.searchProfiles('test', 10, 0),\n        () => ProfileService.incrementProfileViews('user-3'),\n        () => ProfileService.getProfiles({ limit: 5 })\n      ]\n      \n      // Act & Assert\n      const result = await PerformanceTestUtils.measurePerformance(\n        () => Promise.all(mixedOperations.map(op => op())),\n        'Mixed Concurrent Operations',\n        PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS\n      )\n      \n      expect(result.passed).toBe(true)\n      expect(result.averageTime).toBeLessThanOrEqual(PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS)\n    })\n  })\n  \n  // =====================================================================\n  // 💾 MEMORY USAGE MONITORING\n  // =====================================================================\n  \n  describe('💾 Memory Usage Monitoring', () => {\n    \n    it('should maintain efficient memory usage during bulk operations', async () => {\n      // Act & Assert\n      const result = await PerformanceTestUtils.measureMemoryUsage(\n        async () => {\n          const operations = Array.from({ length: 100 }, (_, i) => \n            ProfileService.getProfile(`bulk-user-${i}`)\n          )\n          return await Promise.all(operations)\n        },\n        'Bulk Profile Operations'\n      )\n      \n      expect(result.memoryGrowth).toBeLessThan(PERFORMANCE_TARGETS.MEMORY_GROWTH_LIMIT)\n    })\n    \n    it('should handle memory efficiently during search operations', async () => {\n      // Act & Assert\n      const result = await PerformanceTestUtils.measureMemoryUsage(\n        async () => {\n          const searches = Array.from({ length: 50 }, (_, i) => \n            ProfileService.searchProfiles(`search${i}`, 20, 0)\n          )\n          return await Promise.all(searches)\n        },\n        'Bulk Search Operations'\n      )\n      \n      expect(result.memoryGrowth).toBeLessThan(PERFORMANCE_TARGETS.MEMORY_GROWTH_LIMIT)\n    })\n  })\n  \n  // =====================================================================\n  // 📈 SCALABILITY VALIDATION\n  // =====================================================================\n  \n  describe('📈 Scalability Validation', () => {\n    \n    it('should scale linearly with user load', async () => {\n      // Test with different user loads\n      const loads = [5, 10, 20]\n      const results = []\n      \n      for (const userCount of loads) {\n        const result = await PerformanceTestUtils.simulateLoad(\n          () => ProfileService.getProfile(`load-test-user-${Math.random()}`),\n          `Load Test - ${userCount} Users`,\n          userCount,\n          5 // 5 operations per user\n        )\n        results.push({ userCount, ...result })\n      }\n      \n      // Assert linear scaling (throughput should not degrade significantly)\n      expect(results[0].successRate).toBeGreaterThan(95)\n      expect(results[1].successRate).toBeGreaterThan(90)\n      expect(results[2].successRate).toBeGreaterThan(85)\n      \n      // Throughput should remain reasonable\n      results.forEach(result => {\n        expect(result.throughput).toBeGreaterThan(10) // At least 10 ops/sec\n      })\n    })\n    \n    it('should maintain performance under sustained load', async () => {\n      // Simulate sustained load\n      const result = await PerformanceTestUtils.simulateLoad(\n        () => ProfileService.getProfile(`sustained-test-${Math.random()}`),\n        'Sustained Load Test',\n        PERFORMANCE_TARGETS.CONCURRENT_USER_LIMIT,\n        10 // 10 operations per user\n      )\n      \n      // Assert\n      expect(result.successRate).toBeGreaterThan(90)\n      expect(result.throughput).toBeGreaterThan(PERFORMANCE_TARGETS.THROUGHPUT_TARGET)\n      expect(result.errors).toBeLessThan(result.totalOperations * 0.1) // Less than 10% errors\n    })\n  })\n  \n  // =====================================================================\n  // 🎯 PERFORMANCE REGRESSION DETECTION\n  // =====================================================================\n  \n  describe('🎯 Performance Regression Detection', () => {\n    \n    it('should detect performance regressions in profile operations', async () => {\n      // Baseline measurement\n      const baseline = await PerformanceTestUtils.measurePerformance(\n        () => ProfileService.getProfile('regression-test'),\n        'Baseline Profile Retrieval',\n        PERFORMANCE_TARGETS.PROFILE_RETRIEVAL,\n        20\n      )\n      \n      // Simulate potential regression (slower mock)\n      PerformanceMockSetup.setupRealisticMocks(150) // Slower response\n      \n      const regression = await PerformanceTestUtils.measurePerformance(\n        () => ProfileService.getProfile('regression-test'),\n        'Regression Test Profile Retrieval',\n        PERFORMANCE_TARGETS.PROFILE_RETRIEVAL,\n        20\n      )\n      \n      // Assert - Should detect significant performance degradation\n      const performanceDegradation = (regression.averageTime - baseline.averageTime) / baseline.averageTime\n      \n      if (performanceDegradation > 0.5) { // 50% degradation\n        console.warn(`⚠️ Performance regression detected: ${(performanceDegradation * 100).toFixed(2)}% slower`)\n      }\n      \n      // Reset to normal mock\n      PerformanceMockSetup.setupRealisticMocks(50)\n    })\n  })\n})\n\n// =====================================================================\n// 📊 PERFORMANCE TEST SUMMARY\n// =====================================================================\n\nafterAll(() => {\n  const report = PerformanceTestUtils.getPerformanceReport()\n  \n  console.log(`\n🚀 PERFORMANCE TESTING COMPLETED\n================================\n\n📊 Performance Summary:\n- Total Tests: ${report.totalTests}\n- Passed: ${report.passedTests} ✅\n- Failed: ${report.failedTests} ❌\n- Overall Score: ${report.overallScore.toFixed(2)}%\n\n🎯 Performance Targets:\n- Profile Retrieval: <${PERFORMANCE_TARGETS.PROFILE_RETRIEVAL}ms\n- Profile Updates: <${PERFORMANCE_TARGETS.PROFILE_UPDATE}ms\n- Search Operations: <${PERFORMANCE_TARGETS.SEARCH_OPERATIONS}ms\n- Concurrent Operations: <${PERFORMANCE_TARGETS.CONCURRENT_OPERATIONS}ms\n- Memory Growth: <${PERFORMANCE_TARGETS.MEMORY_GROWTH_LIMIT}MB\n- Throughput: >${PERFORMANCE_TARGETS.THROUGHPUT_TARGET} ops/sec\n\n${report.overallScore >= 90 ? '🎉 EXCELLENT PERFORMANCE!' : \n  report.overallScore >= 75 ? '✅ GOOD PERFORMANCE' : \n  '⚠️ PERFORMANCE NEEDS IMPROVEMENT'}\n\n🚀 Scalability Status: ${report.passedTests >= report.totalTests * 0.8 ? 'PRODUCTION READY' : 'NEEDS OPTIMIZATION'}\n  `)\n}) "],"version":3}