{"version":3,"names":["cov_1mpnxs540t","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","isError","isString","isObject","hasMessage","getErrorMessage","getErrorCode","value","Error","Array","isArray","error","message","code"],"sources":["/home/g/dev/orangecat/src/types/common.ts"],"sourcesContent":["/**\n * Common Types - Replacing 'any' with Proper TypeScript Types\n * \n * This file defines reusable types that eliminate the need for 'any' \n * throughout the codebase, improving type safety and developer experience.\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Initial creation of common types for TypeScript cleanup\n */\n\n// ==================== ERROR HANDLING ====================\n\n/**\n * Standard error type for catch blocks and error handling\n * Replaces: catch (error: any)\n */\nexport interface AppError extends Error {\n  code?: string\n  status?: number\n  details?: unknown\n}\n\n/**\n * Generic error that can be Error, string, or unknown\n * Useful for catch blocks where error type is uncertain\n */\nexport type CatchError = Error | string | unknown\n\n/**\n * API Error response structure\n */\nexport interface ApiErrorResponse {\n  message: string\n  code?: string\n  status?: number\n  details?: Record<string, unknown>\n}\n\n// ==================== API RESPONSES ====================\n\n/**\n * Generic API response wrapper\n * Replaces: { data: any, error: any }\n */\nexport interface ApiResponse<T = unknown> {\n  data: T | null\n  error: ApiErrorResponse | null\n  status?: number\n}\n\n/**\n * Supabase-style response\n * Replaces: { data: any, error: Error | null }\n */\nexport interface SupabaseResponse<T = unknown> {\n  data: T | null\n  error: Error | null\n  status?: number\n}\n\n/**\n * Paginated API response\n */\nexport interface PaginatedResponse<T = unknown> {\n  data: T[]\n  pagination: {\n    page: number\n    limit: number\n    total: number\n    totalPages: number\n  }\n  error: ApiErrorResponse | null\n}\n\n// ==================== FORM DATA ====================\n\n/**\n * Generic form field value\n * Replaces: value: any in form handlers\n */\nexport type FormValue = string | number | boolean | Date | null | undefined\n\n/**\n * Generic form data object\n * Replaces: formData: any\n */\nexport type FormData = Record<string, FormValue | FormValue[]>\n\n/**\n * Form validation error\n */\nexport interface FormError {\n  field: string\n  message: string\n  code?: string\n}\n\n// ==================== UTILITY TYPES ====================\n\n/**\n * Generic cache entry\n * Replaces: { data: any; timestamp: number }\n */\nexport interface CacheEntry<T = unknown> {\n  data: T\n  timestamp: number\n  expiresAt?: number\n}\n\n/**\n * Generic key-value object\n * Replaces: { [key: string]: any }\n */\nexport type KeyValueObject<T = unknown> = Record<string, T>\n\n/**\n * Logger data type\n * Replaces: data?: any in logger functions\n */\nexport type LoggerData = Record<string, unknown> | string | number | boolean | null | undefined\n\n/**\n * Event handler data\n * Replaces: ...args: any[] in event handlers\n */\nexport type EventHandlerArgs = unknown[]\n\n// ==================== JSON TYPES ====================\n\n/**\n * JSON-serializable value\n * Replaces: any for JSON data\n */\nexport type JsonValue = string | number | boolean | null | JsonObject | JsonArray\n\n/**\n * JSON object\n */\nexport type JsonObject = { [key: string]: JsonValue }\n\n/**\n * JSON array\n */\nexport type JsonArray = JsonValue[]\n\n// ==================== DATABASE TYPES ====================\n\n/**\n * Generic database record\n * Replaces: any for database rows\n */\nexport interface DatabaseRecord {\n  id: string\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Database insert data (without generated fields)\n */\nexport type DatabaseInsert<T extends DatabaseRecord> = Omit<T, 'id' | 'created_at' | 'updated_at'>\n\n/**\n * Database update data (optional fields, no generated fields)\n */\nexport type DatabaseUpdate<T extends DatabaseRecord> = Partial<Omit<T, 'id' | 'created_at' | 'updated_at'>>\n\n// ==================== TYPE GUARDS ====================\n\n/**\n * Type guard to check if value is an Error\n */\nexport function isError(value: unknown): value is Error {\n  return value instanceof Error\n}\n\n/**\n * Type guard to check if value is a string\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string'\n}\n\n/**\n * Type guard to check if value is an object\n */\nexport function isObject(value: unknown): value is Record<string, unknown> {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Type guard to check if error has a message\n */\nexport function hasMessage(error: unknown): error is { message: string } {\n  return isObject(error) && 'message' in error && isString(error.message)\n}\n\n// ==================== UTILITY FUNCTIONS ====================\n\n/**\n * Safe error message extraction\n * Replaces: error instanceof Error ? error.message : 'Unknown error'\n */\nexport function getErrorMessage(error: unknown): string {\n  if (isError(error)) return error.message\n  if (isString(error)) return error\n  if (hasMessage(error)) return error.message\n  return 'Unknown error occurred'\n}\n\n/**\n * Safe error code extraction\n */\nexport function getErrorCode(error: unknown): string | undefined {\n  if (isObject(error) && 'code' in error && isString(error.code)) {\n    return error.code\n  }\n  return undefined\n} "],"mappings":"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","ignoreList":[]}