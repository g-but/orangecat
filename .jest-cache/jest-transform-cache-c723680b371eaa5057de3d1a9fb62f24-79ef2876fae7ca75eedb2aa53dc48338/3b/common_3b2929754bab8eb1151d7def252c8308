2e28b81b67fe22fd2d1eeb584c60f64e
"use strict";

/**
 * Common Types - Replacing 'any' with Proper TypeScript Types
 *
 * This file defines reusable types that eliminate the need for 'any'
 * throughout the codebase, improving type safety and developer experience.
 *
 * Created: 2025-06-08
 * Last Modified: 2025-06-08
 * Last Modified Summary: Initial creation of common types for TypeScript cleanup
 */
/* istanbul ignore next */
function cov_1mpnxs540t() {
  var path = "/home/g/dev/orangecat/src/types/common.ts";
  var hash = "26122a1058ecf80f92fc6aeb73f3d069ef0a2c7e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/types/common.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 26
        }
      },
      "2": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 28
        }
      },
      "4": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "5": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "6": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 36
        }
      },
      "7": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 34
        }
      },
      "8": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "9": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "10": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 76
        }
      },
      "11": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "12": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "13": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 53,
          column: 21
        }
      },
      "14": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 21
        }
      },
      "15": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 55,
          column: 29
        }
      },
      "16": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 29
        }
      },
      "17": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 36
        }
      },
      "18": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 26
        }
      },
      "20": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "isError",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 16
          }
        },
        loc: {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 23
      },
      "1": {
        name: "isString",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 17
          }
        },
        loc: {
          start: {
            line: 29,
            column: 25
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 29
      },
      "2": {
        name: "isObject",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 17
          }
        },
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "3": {
        name: "hasMessage",
        decl: {
          start: {
            line: 41,
            column: 9
          },
          end: {
            line: 41,
            column: 19
          }
        },
        loc: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 41
      },
      "4": {
        name: "getErrorMessage",
        decl: {
          start: {
            line: 49,
            column: 9
          },
          end: {
            line: 49,
            column: 24
          }
        },
        loc: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 49
      },
      "5": {
        name: "getErrorCode",
        decl: {
          start: {
            line: 61,
            column: 9
          },
          end: {
            line: 61,
            column: 21
          }
        },
        loc: {
          start: {
            line: 61,
            column: 29
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 61
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 25
          }
        }, {
          start: {
            line: 36,
            column: 29
          },
          end: {
            line: 36,
            column: 54
          }
        }, {
          start: {
            line: 36,
            column: 58
          },
          end: {
            line: 36,
            column: 79
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 11
          },
          end: {
            line: 42,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 11
          },
          end: {
            line: 42,
            column: 26
          }
        }, {
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 42,
            column: 48
          }
        }, {
          start: {
            line: 42,
            column: 52
          },
          end: {
            line: 42,
            column: 75
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 51,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 51,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 53,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 53,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 55,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 55,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 23
          }
        }, {
          start: {
            line: 62,
            column: 27
          },
          end: {
            line: 62,
            column: 42
          }
        }, {
          start: {
            line: 62,
            column: 46
          },
          end: {
            line: 62,
            column: 66
          }
        }],
        line: 62
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/types/common.ts",
      mappings: ";AAAA;;;;;;;;;GASG;;AAoKH,0BAEC;AAKD,4BAEC;AAKD,4BAEC;AAKD,gCAEC;AAQD,0CAKC;AAKD,oCAKC;AAnDD,wDAAwD;AAExD;;GAEG;AACH,SAAgB,OAAO,CAAC,KAAc;IACpC,OAAO,KAAK,YAAY,KAAK,CAAA;AAC/B,CAAC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,KAAc;IACrC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAA;AAClC,CAAC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,KAAc;IACrC,OAAO,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;AAC7E,CAAC;AAED;;GAEG;AACH,SAAgB,UAAU,CAAC,KAAc;IACvC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;AACzE,CAAC;AAED,8DAA8D;AAE9D;;;GAGG;AACH,SAAgB,eAAe,CAAC,KAAc;IAC5C,IAAI,OAAO,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC,OAAO,CAAA;IACxC,IAAI,QAAQ,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IACjC,IAAI,UAAU,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC,OAAO,CAAA;IAC3C,OAAO,wBAAwB,CAAA;AACjC,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,KAAc;IACzC,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/D,OAAO,KAAK,CAAC,IAAI,CAAA;IACnB,CAAC;IACD,OAAO,SAAS,CAAA;AAClB,CAAC",
      names: [],
      sources: ["/home/g/dev/orangecat/src/types/common.ts"],
      sourcesContent: ["/**\n * Common Types - Replacing 'any' with Proper TypeScript Types\n * \n * This file defines reusable types that eliminate the need for 'any' \n * throughout the codebase, improving type safety and developer experience.\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Initial creation of common types for TypeScript cleanup\n */\n\n// ==================== ERROR HANDLING ====================\n\n/**\n * Standard error type for catch blocks and error handling\n * Replaces: catch (error: any)\n */\nexport interface AppError extends Error {\n  code?: string\n  status?: number\n  details?: unknown\n}\n\n/**\n * Generic error that can be Error, string, or unknown\n * Useful for catch blocks where error type is uncertain\n */\nexport type CatchError = Error | string | unknown\n\n/**\n * API Error response structure\n */\nexport interface ApiErrorResponse {\n  message: string\n  code?: string\n  status?: number\n  details?: Record<string, unknown>\n}\n\n// ==================== API RESPONSES ====================\n\n/**\n * Generic API response wrapper\n * Replaces: { data: any, error: any }\n */\nexport interface ApiResponse<T = unknown> {\n  data: T | null\n  error: ApiErrorResponse | null\n  status?: number\n}\n\n/**\n * Supabase-style response\n * Replaces: { data: any, error: Error | null }\n */\nexport interface SupabaseResponse<T = unknown> {\n  data: T | null\n  error: Error | null\n  status?: number\n}\n\n/**\n * Paginated API response\n */\nexport interface PaginatedResponse<T = unknown> {\n  data: T[]\n  pagination: {\n    page: number\n    limit: number\n    total: number\n    totalPages: number\n  }\n  error: ApiErrorResponse | null\n}\n\n// ==================== FORM DATA ====================\n\n/**\n * Generic form field value\n * Replaces: value: any in form handlers\n */\nexport type FormValue = string | number | boolean | Date | null | undefined\n\n/**\n * Generic form data object\n * Replaces: formData: any\n */\nexport type FormData = Record<string, FormValue | FormValue[]>\n\n/**\n * Form validation error\n */\nexport interface FormError {\n  field: string\n  message: string\n  code?: string\n}\n\n// ==================== UTILITY TYPES ====================\n\n/**\n * Generic cache entry\n * Replaces: { data: any; timestamp: number }\n */\nexport interface CacheEntry<T = unknown> {\n  data: T\n  timestamp: number\n  expiresAt?: number\n}\n\n/**\n * Generic key-value object\n * Replaces: { [key: string]: any }\n */\nexport type KeyValueObject<T = unknown> = Record<string, T>\n\n/**\n * Logger data type\n * Replaces: data?: any in logger functions\n */\nexport type LoggerData = Record<string, unknown> | string | number | boolean | null | undefined\n\n/**\n * Event handler data\n * Replaces: ...args: any[] in event handlers\n */\nexport type EventHandlerArgs = unknown[]\n\n// ==================== JSON TYPES ====================\n\n/**\n * JSON-serializable value\n * Replaces: any for JSON data\n */\nexport type JsonValue = string | number | boolean | null | JsonObject | JsonArray\n\n/**\n * JSON object\n */\nexport type JsonObject = { [key: string]: JsonValue }\n\n/**\n * JSON array\n */\nexport type JsonArray = JsonValue[]\n\n// ==================== DATABASE TYPES ====================\n\n/**\n * Generic database record\n * Replaces: any for database rows\n */\nexport interface DatabaseRecord {\n  id: string\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Database insert data (without generated fields)\n */\nexport type DatabaseInsert<T extends DatabaseRecord> = Omit<T, 'id' | 'created_at' | 'updated_at'>\n\n/**\n * Database update data (optional fields, no generated fields)\n */\nexport type DatabaseUpdate<T extends DatabaseRecord> = Partial<Omit<T, 'id' | 'created_at' | 'updated_at'>>\n\n// ==================== TYPE GUARDS ====================\n\n/**\n * Type guard to check if value is an Error\n */\nexport function isError(value: unknown): value is Error {\n  return value instanceof Error\n}\n\n/**\n * Type guard to check if value is a string\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string'\n}\n\n/**\n * Type guard to check if value is an object\n */\nexport function isObject(value: unknown): value is Record<string, unknown> {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Type guard to check if error has a message\n */\nexport function hasMessage(error: unknown): error is { message: string } {\n  return isObject(error) && 'message' in error && isString(error.message)\n}\n\n// ==================== UTILITY FUNCTIONS ====================\n\n/**\n * Safe error message extraction\n * Replaces: error instanceof Error ? error.message : 'Unknown error'\n */\nexport function getErrorMessage(error: unknown): string {\n  if (isError(error)) return error.message\n  if (isString(error)) return error\n  if (hasMessage(error)) return error.message\n  return 'Unknown error occurred'\n}\n\n/**\n * Safe error code extraction\n */\nexport function getErrorCode(error: unknown): string | undefined {\n  if (isObject(error) && 'code' in error && isString(error.code)) {\n    return error.code\n  }\n  return undefined\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "26122a1058ecf80f92fc6aeb73f3d069ef0a2c7e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mpnxs540t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mpnxs540t();
cov_1mpnxs540t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mpnxs540t().s[1]++;
exports.isError = isError;
/* istanbul ignore next */
cov_1mpnxs540t().s[2]++;
exports.isString = isString;
/* istanbul ignore next */
cov_1mpnxs540t().s[3]++;
exports.isObject = isObject;
/* istanbul ignore next */
cov_1mpnxs540t().s[4]++;
exports.hasMessage = hasMessage;
/* istanbul ignore next */
cov_1mpnxs540t().s[5]++;
exports.getErrorMessage = getErrorMessage;
/* istanbul ignore next */
cov_1mpnxs540t().s[6]++;
exports.getErrorCode = getErrorCode;
// ==================== TYPE GUARDS ====================
/**
 * Type guard to check if value is an Error
 */
function isError(value) {
  /* istanbul ignore next */
  cov_1mpnxs540t().f[0]++;
  cov_1mpnxs540t().s[7]++;
  return value instanceof Error;
}
/**
 * Type guard to check if value is a string
 */
function isString(value) {
  /* istanbul ignore next */
  cov_1mpnxs540t().f[1]++;
  cov_1mpnxs540t().s[8]++;
  return typeof value === 'string';
}
/**
 * Type guard to check if value is an object
 */
function isObject(value) {
  /* istanbul ignore next */
  cov_1mpnxs540t().f[2]++;
  cov_1mpnxs540t().s[9]++;
  return /* istanbul ignore next */(cov_1mpnxs540t().b[0][0]++, value !== null) &&
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[0][1]++, typeof value === 'object') &&
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[0][2]++, !Array.isArray(value));
}
/**
 * Type guard to check if error has a message
 */
function hasMessage(error) {
  /* istanbul ignore next */
  cov_1mpnxs540t().f[3]++;
  cov_1mpnxs540t().s[10]++;
  return /* istanbul ignore next */(cov_1mpnxs540t().b[1][0]++, isObject(error)) &&
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[1][1]++, 'message' in error) &&
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[1][2]++, isString(error.message));
}
// ==================== UTILITY FUNCTIONS ====================
/**
 * Safe error message extraction
 * Replaces: error instanceof Error ? error.message : 'Unknown error'
 */
function getErrorMessage(error) {
  /* istanbul ignore next */
  cov_1mpnxs540t().f[4]++;
  cov_1mpnxs540t().s[11]++;
  if (isError(error)) {
    /* istanbul ignore next */
    cov_1mpnxs540t().b[2][0]++;
    cov_1mpnxs540t().s[12]++;
    return error.message;
  } else
  /* istanbul ignore next */
  {
    cov_1mpnxs540t().b[2][1]++;
  }
  cov_1mpnxs540t().s[13]++;
  if (isString(error)) {
    /* istanbul ignore next */
    cov_1mpnxs540t().b[3][0]++;
    cov_1mpnxs540t().s[14]++;
    return error;
  } else
  /* istanbul ignore next */
  {
    cov_1mpnxs540t().b[3][1]++;
  }
  cov_1mpnxs540t().s[15]++;
  if (hasMessage(error)) {
    /* istanbul ignore next */
    cov_1mpnxs540t().b[4][0]++;
    cov_1mpnxs540t().s[16]++;
    return error.message;
  } else
  /* istanbul ignore next */
  {
    cov_1mpnxs540t().b[4][1]++;
  }
  cov_1mpnxs540t().s[17]++;
  return 'Unknown error occurred';
}
/**
 * Safe error code extraction
 */
function getErrorCode(error) {
  /* istanbul ignore next */
  cov_1mpnxs540t().f[5]++;
  cov_1mpnxs540t().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[6][0]++, isObject(error)) &&
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[6][1]++, 'code' in error) &&
  /* istanbul ignore next */
  (cov_1mpnxs540t().b[6][2]++, isString(error.code))) {
    /* istanbul ignore next */
    cov_1mpnxs540t().b[5][0]++;
    cov_1mpnxs540t().s[19]++;
    return error.code;
  } else
  /* istanbul ignore next */
  {
    cov_1mpnxs540t().b[5][1]++;
  }
  cov_1mpnxs540t().s[20]++;
  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,