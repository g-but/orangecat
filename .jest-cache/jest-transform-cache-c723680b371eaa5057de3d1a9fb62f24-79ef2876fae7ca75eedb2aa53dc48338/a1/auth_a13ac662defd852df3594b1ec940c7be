8b7064f7533d689fa96eedcada2402a0
'use client';
"use strict";

/* istanbul ignore next */
function cov_sekkukkbs() {
  var path = "/home/g/dev/orangecat/src/stores/auth.ts";
  var hash = "157f7d3a3c8acc72f07e07e7768b45d981351782";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/stores/auth.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "1": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 30
        }
      },
      "2": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "3": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 50
        }
      },
      "4": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 57
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "6": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 61
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "8": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "9": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "10": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 222,
          column: 4
        }
      },
      "11": {
        start: {
          line: 13,
          column: 88
        },
        end: {
          line: 212,
          column: 1
        }
      },
      "12": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 74
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 131
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "16": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "17": {
        start: {
          line: 40,
          column: 33
        },
        end: {
          line: 40,
          column: 51
        }
      },
      "18": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "20": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 54
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 28
        },
        end: {
          line: 48,
          column: 98
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "24": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 33
        }
      },
      "25": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 39
        }
      },
      "26": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 108
        }
      },
      "27": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 54
        }
      },
      "28": {
        start: {
          line: 59,
          column: 33
        },
        end: {
          line: 59,
          column: 69
        }
      },
      "29": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 94
        }
      },
      "30": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 43
        }
      },
      "31": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 50
        }
      },
      "32": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "33": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 26
        }
      },
      "34": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "35": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 78,
          column: 19
        }
      },
      "36": {
        start: {
          line: 73,
          column: 42
        },
        end: {
          line: 73,
          column: 55
        }
      },
      "37": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 77,
          column: 21
        }
      },
      "38": {
        start: {
          line: 75,
          column: 37
        },
        end: {
          line: 75,
          column: 64
        }
      },
      "39": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 101
        }
      },
      "40": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 84,
          column: 19
        }
      },
      "41": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "42": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 53
        }
      },
      "43": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 55
        }
      },
      "44": {
        start: {
          line: 88,
          column: 45
        },
        end: {
          line: 88,
          column: 73
        }
      },
      "45": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "46": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 76
        }
      },
      "47": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 48
        }
      },
      "48": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 55
        }
      },
      "49": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 35
        }
      },
      "50": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 59
        }
      },
      "51": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 57
        }
      },
      "52": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "53": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 34
        }
      },
      "54": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "55": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 111
        }
      },
      "56": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 83
        }
      },
      "57": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 63
        }
      },
      "58": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 87
        }
      },
      "59": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "60": {
        start: {
          line: 115,
          column: 27
        },
        end: {
          line: 115,
          column: 73
        }
      },
      "61": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "62": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 86
        }
      },
      "63": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 75
        }
      },
      "64": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 59
        }
      },
      "65": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "66": {
        start: {
          line: 123,
          column: 33
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "67": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 30
        }
      },
      "68": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 140,
          column: 22
        }
      },
      "69": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 139,
          column: 21
        }
      },
      "70": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 51
        }
      },
      "71": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 140
        }
      },
      "72": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 100
        }
      },
      "73": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 58
        }
      },
      "74": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 78
        }
      },
      "75": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 81
        }
      },
      "76": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 59
        }
      },
      "77": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 89
        }
      },
      "78": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 57
        }
      },
      "79": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 60
        }
      },
      "80": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 159,
          column: 34
        }
      },
      "81": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "82": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 111
        }
      },
      "83": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 83
        }
      },
      "84": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 63
        }
      },
      "85": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 77
        }
      },
      "86": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "87": {
        start: {
          line: 167,
          column: 27
        },
        end: {
          line: 167,
          column: 73
        }
      },
      "88": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "89": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 86
        }
      },
      "90": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 75
        }
      },
      "91": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 59
        }
      },
      "92": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "93": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 178,
          column: 23
        }
      },
      "94": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "95": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 59
        }
      },
      "96": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 89
        }
      },
      "97": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 57
        }
      },
      "98": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 60
        }
      },
      "99": {
        start: {
          line: 190,
          column: 29
        },
        end: {
          line: 190,
          column: 34
        }
      },
      "100": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "101": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 54
        }
      },
      "102": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "103": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 37
        }
      },
      "104": {
        start: {
          line: 196,
          column: 30
        },
        end: {
          line: 196,
          column: 100
        }
      },
      "105": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "106": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 42
        }
      },
      "107": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 48
        }
      },
      "108": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 202,
          column: 58
        }
      },
      "109": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 38
        }
      },
      "110": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 31
        }
      },
      "111": {
        start: {
          line: 207,
          column: 27
        },
        end: {
          line: 207,
          column: 59
        }
      },
      "112": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 38
        }
      },
      "113": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 37
        }
      },
      "114": {
        start: {
          line: 214,
          column: 55
        },
        end: {
          line: 214,
          column: 69
        }
      },
      "115": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 220,
          column: 5
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 73
          },
          end: {
            line: 13,
            column: 74
          }
        },
        loc: {
          start: {
            line: 13,
            column: 88
          },
          end: {
            line: 212,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 23,
            column: 26
          }
        },
        loc: {
          start: {
            line: 23,
            column: 53
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 12
          }
        },
        loc: {
          start: {
            line: 28,
            column: 17
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 14
          },
          end: {
            line: 39,
            column: 15
          }
        },
        loc: {
          start: {
            line: 39,
            column: 25
          },
          end: {
            line: 39,
            column: 39
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 18
          },
          end: {
            line: 40,
            column: 19
          }
        },
        loc: {
          start: {
            line: 40,
            column: 33
          },
          end: {
            line: 40,
            column: 51
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 18
          },
          end: {
            line: 41,
            column: 19
          }
        },
        loc: {
          start: {
            line: 41,
            column: 30
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 13
          },
          end: {
            line: 64,
            column: 14
          }
        },
        loc: {
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 72,
            column: 51
          },
          end: {
            line: 72,
            column: 52
          }
        },
        loc: {
          start: {
            line: 72,
            column: 61
          },
          end: {
            line: 78,
            column: 17
          }
        },
        line: 72
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 50
          },
          end: {
            line: 80,
            column: 51
          }
        },
        loc: {
          start: {
            line: 80,
            column: 57
          },
          end: {
            line: 84,
            column: 17
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        loc: {
          start: {
            line: 103,
            column: 39
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 103
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 133,
            column: 27
          },
          end: {
            line: 133,
            column: 28
          }
        },
        loc: {
          start: {
            line: 133,
            column: 39
          },
          end: {
            line: 140,
            column: 17
          }
        },
        line: 133
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        loc: {
          start: {
            line: 157,
            column: 39
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 157
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 188,
            column: 20
          }
        },
        loc: {
          start: {
            line: 188,
            column: 42
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 188
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 50
          }
        },
        loc: {
          start: {
            line: 214,
            column: 55
          },
          end: {
            line: 214,
            column: 69
          }
        },
        line: 214
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        },
        loc: {
          start: {
            line: 215,
            column: 28
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 215
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 14
          },
          end: {
            line: 44,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 67
          },
          end: {
            line: 44,
            column: 73
          }
        }, {
          start: {
            line: 44,
            column: 76
          },
          end: {
            line: 44,
            column: 81
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 14
          },
          end: {
            line: 44,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 14
          },
          end: {
            line: 44,
            column: 47
          }
        }, {
          start: {
            line: 44,
            column: 51
          },
          end: {
            line: 44,
            column: 64
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: 53,
            column: 17
          },
          end: {
            line: 56,
            column: 13
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 77,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 77,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 81,
            column: 24
          },
          end: {
            line: 81,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 24
          },
          end: {
            line: 81,
            column: 45
          }
        }, {
          start: {
            line: 81,
            column: 49
          },
          end: {
            line: 81,
            column: 73
          }
        }, {
          start: {
            line: 81,
            column: 77
          },
          end: {
            line: 81,
            column: 97
          }
        }],
        line: 81
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: 144,
            column: 17
          },
          end: {
            line: 147,
            column: 13
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 122,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 80
          }
        }, {
          start: {
            line: 122,
            column: 86
          },
          end: {
            line: 122,
            column: 152
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 64
          },
          end: {
            line: 122,
            column: 70
          }
        }, {
          start: {
            line: 122,
            column: 73
          },
          end: {
            line: 122,
            column: 80
          }
        }],
        line: 122
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 44
          }
        }, {
          start: {
            line: 122,
            column: 48
          },
          end: {
            line: 122,
            column: 61
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 86
          },
          end: {
            line: 122,
            column: 152
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 133
          },
          end: {
            line: 122,
            column: 139
          }
        }, {
          start: {
            line: 122,
            column: 142
          },
          end: {
            line: 122,
            column: 152
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 122,
            column: 86
          },
          end: {
            line: 122,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 86
          },
          end: {
            line: 122,
            column: 113
          }
        }, {
          start: {
            line: 122,
            column: 117
          },
          end: {
            line: 122,
            column: 130
          }
        }],
        line: 122
      },
      "17": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "18": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "19": {
        loc: {
          start: {
            line: 176,
            column: 24
          },
          end: {
            line: 176,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 123
          },
          end: {
            line: 176,
            column: 129
          }
        }, {
          start: {
            line: 176,
            column: 132
          },
          end: {
            line: 176,
            column: 137
          }
        }],
        line: 176
      },
      "20": {
        loc: {
          start: {
            line: 176,
            column: 24
          },
          end: {
            line: 176,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 24
          },
          end: {
            line: 176,
            column: 103
          }
        }, {
          start: {
            line: 176,
            column: 107
          },
          end: {
            line: 176,
            column: 120
          }
        }],
        line: 176
      },
      "21": {
        loc: {
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 176,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 77
          },
          end: {
            line: 176,
            column: 83
          }
        }, {
          start: {
            line: 176,
            column: 86
          },
          end: {
            line: 176,
            column: 93
          }
        }],
        line: 176
      },
      "22": {
        loc: {
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 176,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 176,
            column: 57
          }
        }, {
          start: {
            line: 176,
            column: 61
          },
          end: {
            line: 176,
            column: 74
          }
        }],
        line: 176
      },
      "23": {
        loc: {
          start: {
            line: 177,
            column: 40
          },
          end: {
            line: 177,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 87
          },
          end: {
            line: 177,
            column: 93
          }
        }, {
          start: {
            line: 177,
            column: 96
          },
          end: {
            line: 177,
            column: 106
          }
        }],
        line: 177
      },
      "24": {
        loc: {
          start: {
            line: 177,
            column: 40
          },
          end: {
            line: 177,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 40
          },
          end: {
            line: 177,
            column: 67
          }
        }, {
          start: {
            line: 177,
            column: 71
          },
          end: {
            line: 177,
            column: 84
          }
        }],
        line: 177
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 191,
            column: 14
          },
          end: {
            line: 191,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 67
          },
          end: {
            line: 191,
            column: 73
          }
        }, {
          start: {
            line: 191,
            column: 76
          },
          end: {
            line: 191,
            column: 81
          }
        }],
        line: 191
      },
      "27": {
        loc: {
          start: {
            line: 191,
            column: 14
          },
          end: {
            line: 191,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 14
          },
          end: {
            line: 191,
            column: 47
          }
        }, {
          start: {
            line: 191,
            column: 51
          },
          end: {
            line: 191,
            column: 64
          }
        }],
        line: 191
      },
      "28": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/stores/auth.ts",
      mappings: "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",
      names: [],
      sources: ["/home/g/dev/orangecat/src/stores/auth.ts"],
      sourcesContent: ["'use client'\n\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\nimport type { User, Session } from '@supabase/supabase-js'\nimport type { Profile, ProfileFormData } from '@/types/database'\nimport { signIn, signUp, signOut } from '@/services/supabase/auth/index'\nimport supabase from '@/services/supabase/client'\nimport { updateProfile as supabaseUpdateProfile } from '@/services/supabase/profiles'\nimport { ProfileService } from '@/services/profileService'\nimport { logger } from '@/utils/logger'\nimport { getErrorMessage, type CatchError } from '@/types/common'\n\n// Use imported supabase client\n\ninterface AuthState {\n  // data\n  user: User | null\n  session: Session | null\n  profile: Profile | null\n  // ui state\n  isLoading: boolean\n  error: string | null\n  hydrated: boolean\n  authError: string | null\n  // actions\n  /** Called exactly once in AuthProvider with the *server* values.  */\n  setInitialAuthState: (user: User | null, session: Session | null, profile: Profile | null) => void\n  /** Wipe local state + storage (used by signOut and invalid sessions). */\n  clear: () => void\n  /** Explicit sign-out button. */\n  signOut: () => Promise<{ error: Error | null }>\n  signIn: (email: string, password: string) => Promise<{ data: { user: User | null, session: Session | null } | null, error: Error | null }>\n  signUp: (email: string, password: string) => Promise<{ data: { user: User | null, session: Session | null } | null, error: Error | null }>\n  /** Update user profile */\n  updateProfile: (profileData: Partial<Profile>) => Promise<{ error: string | null }>\n  /** Set error state */\n  setError: (error: string | null) => void\n  setAuthError: (error: string | null) => void\n  fetchProfile: () => Promise<{ error: string | null }>\n}\n\nconst STORAGE_KEY = 'orangecat-auth-storage'\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      // ==================== STATE ====================\n      user: null,\n      session: null,\n      profile: null,\n      isLoading: false,\n      error: null,\n      hydrated: true, // FIXED: Start hydrated to prevent infinite loading\n      authError: null,\n\n      // ==================== ACTIONS ====================\n      setInitialAuthState: (user: User | null, session: Session | null, profile: Profile | null) => {\n        // FIXED: Simplified state setting without complex validation\n        set({ user, session, profile, hydrated: true, isLoading: false })\n        logger.debug('Auth state initialized', { hasUser: !!user, hasSession: !!session, hasProfile: !!profile }, 'Auth')\n      },\n\n      clear: () => {\n        set({\n          user: null,\n          session: null,\n          profile: null,\n          error: null,\n          authError: null,\n          isLoading: false\n        })\n        logger.debug('Auth state cleared', undefined, 'Auth')\n      },\n\n      setError: (error: string | null) => set({ error }),\n      setAuthError: (authError: string | null) => set({ authError }),\n\n      fetchProfile: async () => {\n        const currentState = get()\n        if (!currentState.user?.id) {\n          return { error: 'No authenticated user' }\n        }\n\n        try {\n          const profile = await ProfileService.getProfile(currentState.user.id)\n          if (profile) {\n            set({ profile })\n            return { error: null }\n          } else {\n            logger.warn('No profile found for user', { userId: currentState.user.id }, 'Auth')\n            return { error: 'Profile not found' }\n          }\n        } catch (error: CatchError) {\n          const errorMessage = getErrorMessage(error)\n          logger.error('Failed to fetch profile', { error: errorMessage }, 'Auth')\n          return { error: errorMessage }\n        }\n      },\n\n      signOut: async () => {\n        set({ isLoading: true, authError: null })\n        try {\n          // Clear state first\n          get().clear()\n          \n          // Clear browser storage\n          if (typeof window !== 'undefined') {\n            // Clear Supabase cookies\n            document.cookie.split(';').forEach(cookie => {\n              const trimmedCookie = cookie.trim()\n              if (trimmedCookie.startsWith('sb-')) {\n                const name = trimmedCookie.split('=')[0]\n                document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`\n              }\n            })\n            \n            // Clear localStorage items\n            Object.keys(localStorage).forEach(key => {\n              if (key.startsWith('sb-') || key.includes('supabase') || key.includes('auth')) {\n                localStorage.removeItem(key)\n              }\n            })\n            sessionStorage.removeItem(STORAGE_KEY)\n          }\n          \n          // Sign out from Supabase\n          const { error: supabaseError } = await signOut()\n          \n          if (supabaseError) {\n            set({ authError: supabaseError.message, isLoading: false })\n            return { error: supabaseError }\n          }\n          \n          set({ isLoading: false, authError: null })\n          return { error: null }\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          set({ authError: errMsg, isLoading: false })\n          return { error: new Error(errMsg) }\n        }\n      },\n\n      // OPTIMIZED: Simplified signIn with reduced state updates\n      signIn: async (email, password) => {\n        const currentState = get()\n        if (currentState.isLoading) {\n          logger.warn(\"Sign in already in progress, ignoring duplicate request\", undefined, 'Auth')\n          return { data: null, error: new Error(\"Sign in already in progress\") }\n        }\n\n        // OPTIMIZED: Single state update for loading start\n        set({ isLoading: true, authError: null, error: null })\n        logger.debug('Starting optimized sign-in process', { email }, 'Auth')\n\n        try {\n          // OPTIMIZED: Use direct signIn service call\n          const result = await signIn({ email, password })\n\n          if (result.error) {\n            logger.error(\"Sign in error:\", result.error.message, 'Auth')\n            set({ authError: result.error.message, isLoading: false })\n            return { data: null, error: result.error }\n          }\n\n          // OPTIMIZED: Single state update for success\n          if (result.data?.user && result.data?.session) {\n            const newState = {\n              user: result.data.user,\n              session: result.data.session,\n              isLoading: false,\n              authError: null,\n              error: null\n            }\n\n            // OPTIMIZED: Use single set call to reduce re-renders\n            set(newState)\n\n            // OPTIMIZED: Fetch profile in background without blocking\n            setTimeout(async () => {\n              try {\n                await get().fetchProfile()\n              } catch (error) {\n                logger.warn('Profile fetch failed after sign in', { error: getErrorMessage(error as CatchError) }, 'Auth')\n              }\n            }, 0)\n\n            logger.info('Sign in successful', { userId: result.data.user.id }, 'Auth')\n            return { data: result.data, error: null }\n          } else {\n            set({ authError: 'No user data received', isLoading: false })\n            return { data: null, error: new Error('No user data received') }\n          }\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          logger.error('Unexpected sign in error', { error: errMsg }, 'Auth')\n          set({ authError: errMsg, isLoading: false })\n          return { data: null, error: new Error(errMsg) }\n        }\n      },\n\n      // FIXED: Simplified signUp\n      signUp: async (email, password) => {\n        const currentState = get()\n        if (currentState.isLoading) {\n          logger.warn(\"Sign up already in progress, ignoring duplicate request\", undefined, 'Auth')\n          return { data: null, error: new Error(\"Sign up already in progress\") }\n        }\n\n        set({ isLoading: true, authError: null, error: null })\n        logger.debug('Starting sign-up process', { email }, 'Auth')\n        \n        try {\n          const result = await signUp({ email, password })\n          \n          if (result.error) {\n            logger.error(\"Sign up error:\", result.error.message, 'Auth')\n            set({ authError: result.error.message, isLoading: false })\n            return { data: null, error: result.error }\n          }\n\n          // Handle sign-up success (may require email confirmation)\n          set({ isLoading: false, authError: null, error: null })\n          logger.info('Sign up successful', { \n            userId: result.data?.user?.id,\n            requiresConfirmation: !result.data?.session \n          }, 'Auth')\n          \n          return { data: result.data, error: null }\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          logger.error('Unexpected sign up error', { error: errMsg }, 'Auth')\n          set({ authError: errMsg, isLoading: false })\n          return { data: null, error: new Error(errMsg) }\n        }\n      },\n\n      updateProfile: async (profileData: Partial<Profile>) => {\n        const currentState = get()\n        if (!currentState.user?.id) {\n          return { error: 'No authenticated user' }\n        }\n\n        try {\n          set({ isLoading: true })\n          \n          const { error } = await supabaseUpdateProfile(currentState.user.id, profileData as ProfileFormData)\n          \n                     if (error) {\n             set({ isLoading: false })\n             return { error: String(error) }\n          }\n\n          // Refetch profile to get updated data\n          const fetchResult = await get().fetchProfile()\n          set({ isLoading: false })\n          \n          return fetchResult\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          set({ isLoading: false })\n          return { error: errMsg }\n        }\n      },\n    }),\n    {\n      name: STORAGE_KEY,\n      storage: createJSONStorage(() => sessionStorage),\n      partialize: (state) => ({\n        user: state.user,\n        session: state.session,\n        profile: state.profile,\n        hydrated: state.hydrated,\n      }),\n      skipHydration: false,\n    }\n  )\n)"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "157f7d3a3c8acc72f07e07e7768b45d981351782"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sekkukkbs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sekkukkbs();
cov_sekkukkbs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_sekkukkbs().s[1]++;
exports.useAuthStore = void 0;
const zustand_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[2]++, require("zustand"));
const middleware_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[3]++, require("zustand/middleware"));
const index_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[4]++, require("@/services/supabase/auth/index"));
const profiles_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[5]++, require("@/services/supabase/profiles"));
const profileService_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[6]++, require("@/services/profileService"));
const logger_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[7]++, require("@/utils/logger"));
const common_1 =
/* istanbul ignore next */
(cov_sekkukkbs().s[8]++, require("@/types/common"));
const STORAGE_KEY =
/* istanbul ignore next */
(cov_sekkukkbs().s[9]++, 'orangecat-auth-storage');
/* istanbul ignore next */
cov_sekkukkbs().s[10]++;
exports.useAuthStore = (0, zustand_1.create)()((0, middleware_1.persist)((set, get) => {
  /* istanbul ignore next */
  cov_sekkukkbs().f[0]++;
  cov_sekkukkbs().s[11]++;
  return {
    // ==================== STATE ====================
    user: null,
    session: null,
    profile: null,
    isLoading: false,
    error: null,
    hydrated: true,
    // FIXED: Start hydrated to prevent infinite loading
    authError: null,
    // ==================== ACTIONS ====================
    setInitialAuthState: (user, session, profile) => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[1]++;
      cov_sekkukkbs().s[12]++;
      // FIXED: Simplified state setting without complex validation
      set({
        user,
        session,
        profile,
        hydrated: true,
        isLoading: false
      });
      /* istanbul ignore next */
      cov_sekkukkbs().s[13]++;
      logger_1.logger.debug('Auth state initialized', {
        hasUser: !!user,
        hasSession: !!session,
        hasProfile: !!profile
      }, 'Auth');
    },
    clear: () => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[2]++;
      cov_sekkukkbs().s[14]++;
      set({
        user: null,
        session: null,
        profile: null,
        error: null,
        authError: null,
        isLoading: false
      });
      /* istanbul ignore next */
      cov_sekkukkbs().s[15]++;
      logger_1.logger.debug('Auth state cleared', undefined, 'Auth');
    },
    setError: error => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[3]++;
      cov_sekkukkbs().s[16]++;
      return set({
        error
      });
    },
    setAuthError: authError => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[4]++;
      cov_sekkukkbs().s[17]++;
      return set({
        authError
      });
    },
    fetchProfile: async () => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[5]++;
      var _a;
      const currentState =
      /* istanbul ignore next */
      (cov_sekkukkbs().s[18]++, get());
      /* istanbul ignore next */
      cov_sekkukkbs().s[19]++;
      if (!(
      /* istanbul ignore next */
      (cov_sekkukkbs().b[2][0]++, (_a = currentState.user) === null) ||
      /* istanbul ignore next */
      (cov_sekkukkbs().b[2][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_sekkukkbs().b[1][0]++, void 0) :
      /* istanbul ignore next */
      (cov_sekkukkbs().b[1][1]++, _a.id))) {
        /* istanbul ignore next */
        cov_sekkukkbs().b[0][0]++;
        cov_sekkukkbs().s[20]++;
        return {
          error: 'No authenticated user'
        };
      } else
      /* istanbul ignore next */
      {
        cov_sekkukkbs().b[0][1]++;
      }
      cov_sekkukkbs().s[21]++;
      try {
        const profile =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[22]++, await profileService_1.ProfileService.getProfile(currentState.user.id));
        /* istanbul ignore next */
        cov_sekkukkbs().s[23]++;
        if (profile) {
          /* istanbul ignore next */
          cov_sekkukkbs().b[3][0]++;
          cov_sekkukkbs().s[24]++;
          set({
            profile
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[25]++;
          return {
            error: null
          };
        } else {
          /* istanbul ignore next */
          cov_sekkukkbs().b[3][1]++;
          cov_sekkukkbs().s[26]++;
          logger_1.logger.warn('No profile found for user', {
            userId: currentState.user.id
          }, 'Auth');
          /* istanbul ignore next */
          cov_sekkukkbs().s[27]++;
          return {
            error: 'Profile not found'
          };
        }
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[28]++, (0, common_1.getErrorMessage)(error));
        /* istanbul ignore next */
        cov_sekkukkbs().s[29]++;
        logger_1.logger.error('Failed to fetch profile', {
          error: errorMessage
        }, 'Auth');
        /* istanbul ignore next */
        cov_sekkukkbs().s[30]++;
        return {
          error: errorMessage
        };
      }
    },
    signOut: async () => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[6]++;
      cov_sekkukkbs().s[31]++;
      set({
        isLoading: true,
        authError: null
      });
      /* istanbul ignore next */
      cov_sekkukkbs().s[32]++;
      try {
        /* istanbul ignore next */
        cov_sekkukkbs().s[33]++;
        // Clear state first
        get().clear();
        // Clear browser storage
        /* istanbul ignore next */
        cov_sekkukkbs().s[34]++;
        if (typeof window !== 'undefined') {
          /* istanbul ignore next */
          cov_sekkukkbs().b[4][0]++;
          cov_sekkukkbs().s[35]++;
          // Clear Supabase cookies
          document.cookie.split(';').forEach(cookie => {
            /* istanbul ignore next */
            cov_sekkukkbs().f[7]++;
            const trimmedCookie =
            /* istanbul ignore next */
            (cov_sekkukkbs().s[36]++, cookie.trim());
            /* istanbul ignore next */
            cov_sekkukkbs().s[37]++;
            if (trimmedCookie.startsWith('sb-')) {
              /* istanbul ignore next */
              cov_sekkukkbs().b[5][0]++;
              const name =
              /* istanbul ignore next */
              (cov_sekkukkbs().s[38]++, trimmedCookie.split('=')[0]);
              /* istanbul ignore next */
              cov_sekkukkbs().s[39]++;
              document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
            } else
            /* istanbul ignore next */
            {
              cov_sekkukkbs().b[5][1]++;
            }
          });
          // Clear localStorage items
          /* istanbul ignore next */
          cov_sekkukkbs().s[40]++;
          Object.keys(localStorage).forEach(key => {
            /* istanbul ignore next */
            cov_sekkukkbs().f[8]++;
            cov_sekkukkbs().s[41]++;
            if (
            /* istanbul ignore next */
            (cov_sekkukkbs().b[7][0]++, key.startsWith('sb-')) ||
            /* istanbul ignore next */
            (cov_sekkukkbs().b[7][1]++, key.includes('supabase')) ||
            /* istanbul ignore next */
            (cov_sekkukkbs().b[7][2]++, key.includes('auth'))) {
              /* istanbul ignore next */
              cov_sekkukkbs().b[6][0]++;
              cov_sekkukkbs().s[42]++;
              localStorage.removeItem(key);
            } else
            /* istanbul ignore next */
            {
              cov_sekkukkbs().b[6][1]++;
            }
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[43]++;
          sessionStorage.removeItem(STORAGE_KEY);
        } else
        /* istanbul ignore next */
        {
          cov_sekkukkbs().b[4][1]++;
        }
        // Sign out from Supabase
        const {
          error: supabaseError
        } =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[44]++, await (0, index_1.signOut)());
        /* istanbul ignore next */
        cov_sekkukkbs().s[45]++;
        if (supabaseError) {
          /* istanbul ignore next */
          cov_sekkukkbs().b[8][0]++;
          cov_sekkukkbs().s[46]++;
          set({
            authError: supabaseError.message,
            isLoading: false
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[47]++;
          return {
            error: supabaseError
          };
        } else
        /* istanbul ignore next */
        {
          cov_sekkukkbs().b[8][1]++;
        }
        cov_sekkukkbs().s[48]++;
        set({
          isLoading: false,
          authError: null
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[49]++;
        return {
          error: null
        };
      } catch (e) {
        const errMsg =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[50]++, (0, common_1.getErrorMessage)(e));
        /* istanbul ignore next */
        cov_sekkukkbs().s[51]++;
        set({
          authError: errMsg,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[52]++;
        return {
          error: new Error(errMsg)
        };
      }
    },
    // OPTIMIZED: Simplified signIn with reduced state updates
    signIn: async (email, password) => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[9]++;
      var _a, _b;
      const currentState =
      /* istanbul ignore next */
      (cov_sekkukkbs().s[53]++, get());
      /* istanbul ignore next */
      cov_sekkukkbs().s[54]++;
      if (currentState.isLoading) {
        /* istanbul ignore next */
        cov_sekkukkbs().b[9][0]++;
        cov_sekkukkbs().s[55]++;
        logger_1.logger.warn("Sign in already in progress, ignoring duplicate request", undefined, 'Auth');
        /* istanbul ignore next */
        cov_sekkukkbs().s[56]++;
        return {
          data: null,
          error: new Error("Sign in already in progress")
        };
      } else
      /* istanbul ignore next */
      {
        cov_sekkukkbs().b[9][1]++;
      }
      // OPTIMIZED: Single state update for loading start
      cov_sekkukkbs().s[57]++;
      set({
        isLoading: true,
        authError: null,
        error: null
      });
      /* istanbul ignore next */
      cov_sekkukkbs().s[58]++;
      logger_1.logger.debug('Starting optimized sign-in process', {
        email
      }, 'Auth');
      /* istanbul ignore next */
      cov_sekkukkbs().s[59]++;
      try {
        // OPTIMIZED: Use direct signIn service call
        const result =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[60]++, await (0, index_1.signIn)({
          email,
          password
        }));
        /* istanbul ignore next */
        cov_sekkukkbs().s[61]++;
        if (result.error) {
          /* istanbul ignore next */
          cov_sekkukkbs().b[10][0]++;
          cov_sekkukkbs().s[62]++;
          logger_1.logger.error("Sign in error:", result.error.message, 'Auth');
          /* istanbul ignore next */
          cov_sekkukkbs().s[63]++;
          set({
            authError: result.error.message,
            isLoading: false
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[64]++;
          return {
            data: null,
            error: result.error
          };
        } else
        /* istanbul ignore next */
        {
          cov_sekkukkbs().b[10][1]++;
        }
        // OPTIMIZED: Single state update for success
        cov_sekkukkbs().s[65]++;
        if (
        /* istanbul ignore next */
        (cov_sekkukkbs().b[12][0]++,
        /* istanbul ignore next */
        (cov_sekkukkbs().b[14][0]++, (_a = result.data) === null) ||
        /* istanbul ignore next */
        (cov_sekkukkbs().b[14][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_sekkukkbs().b[13][0]++, void 0) :
        /* istanbul ignore next */
        (cov_sekkukkbs().b[13][1]++, _a.user)) &&
        /* istanbul ignore next */
        (cov_sekkukkbs().b[12][1]++,
        /* istanbul ignore next */
        (cov_sekkukkbs().b[16][0]++, (_b = result.data) === null) ||
        /* istanbul ignore next */
        (cov_sekkukkbs().b[16][1]++, _b === void 0) ?
        /* istanbul ignore next */
        (cov_sekkukkbs().b[15][0]++, void 0) :
        /* istanbul ignore next */
        (cov_sekkukkbs().b[15][1]++, _b.session))) {
          /* istanbul ignore next */
          cov_sekkukkbs().b[11][0]++;
          const newState =
          /* istanbul ignore next */
          (cov_sekkukkbs().s[66]++, {
            user: result.data.user,
            session: result.data.session,
            isLoading: false,
            authError: null,
            error: null
          });
          // OPTIMIZED: Use single set call to reduce re-renders
          /* istanbul ignore next */
          cov_sekkukkbs().s[67]++;
          set(newState);
          // OPTIMIZED: Fetch profile in background without blocking
          /* istanbul ignore next */
          cov_sekkukkbs().s[68]++;
          setTimeout(async () => {
            /* istanbul ignore next */
            cov_sekkukkbs().f[10]++;
            cov_sekkukkbs().s[69]++;
            try {
              /* istanbul ignore next */
              cov_sekkukkbs().s[70]++;
              await get().fetchProfile();
            } catch (error) {
              /* istanbul ignore next */
              cov_sekkukkbs().s[71]++;
              logger_1.logger.warn('Profile fetch failed after sign in', {
                error: (0, common_1.getErrorMessage)(error)
              }, 'Auth');
            }
          }, 0);
          /* istanbul ignore next */
          cov_sekkukkbs().s[72]++;
          logger_1.logger.info('Sign in successful', {
            userId: result.data.user.id
          }, 'Auth');
          /* istanbul ignore next */
          cov_sekkukkbs().s[73]++;
          return {
            data: result.data,
            error: null
          };
        } else {
          /* istanbul ignore next */
          cov_sekkukkbs().b[11][1]++;
          cov_sekkukkbs().s[74]++;
          set({
            authError: 'No user data received',
            isLoading: false
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[75]++;
          return {
            data: null,
            error: new Error('No user data received')
          };
        }
      } catch (e) {
        const errMsg =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[76]++, (0, common_1.getErrorMessage)(e));
        /* istanbul ignore next */
        cov_sekkukkbs().s[77]++;
        logger_1.logger.error('Unexpected sign in error', {
          error: errMsg
        }, 'Auth');
        /* istanbul ignore next */
        cov_sekkukkbs().s[78]++;
        set({
          authError: errMsg,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[79]++;
        return {
          data: null,
          error: new Error(errMsg)
        };
      }
    },
    // FIXED: Simplified signUp
    signUp: async (email, password) => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[11]++;
      var _a, _b, _c;
      const currentState =
      /* istanbul ignore next */
      (cov_sekkukkbs().s[80]++, get());
      /* istanbul ignore next */
      cov_sekkukkbs().s[81]++;
      if (currentState.isLoading) {
        /* istanbul ignore next */
        cov_sekkukkbs().b[17][0]++;
        cov_sekkukkbs().s[82]++;
        logger_1.logger.warn("Sign up already in progress, ignoring duplicate request", undefined, 'Auth');
        /* istanbul ignore next */
        cov_sekkukkbs().s[83]++;
        return {
          data: null,
          error: new Error("Sign up already in progress")
        };
      } else
      /* istanbul ignore next */
      {
        cov_sekkukkbs().b[17][1]++;
      }
      cov_sekkukkbs().s[84]++;
      set({
        isLoading: true,
        authError: null,
        error: null
      });
      /* istanbul ignore next */
      cov_sekkukkbs().s[85]++;
      logger_1.logger.debug('Starting sign-up process', {
        email
      }, 'Auth');
      /* istanbul ignore next */
      cov_sekkukkbs().s[86]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[87]++, await (0, index_1.signUp)({
          email,
          password
        }));
        /* istanbul ignore next */
        cov_sekkukkbs().s[88]++;
        if (result.error) {
          /* istanbul ignore next */
          cov_sekkukkbs().b[18][0]++;
          cov_sekkukkbs().s[89]++;
          logger_1.logger.error("Sign up error:", result.error.message, 'Auth');
          /* istanbul ignore next */
          cov_sekkukkbs().s[90]++;
          set({
            authError: result.error.message,
            isLoading: false
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[91]++;
          return {
            data: null,
            error: result.error
          };
        } else
        /* istanbul ignore next */
        {
          cov_sekkukkbs().b[18][1]++;
        }
        // Handle sign-up success (may require email confirmation)
        cov_sekkukkbs().s[92]++;
        set({
          isLoading: false,
          authError: null,
          error: null
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[93]++;
        logger_1.logger.info('Sign up successful', {
          userId:
          /* istanbul ignore next */
          (cov_sekkukkbs().b[20][0]++, (_b =
          /* istanbul ignore next */
          (cov_sekkukkbs().b[22][0]++, (_a = result.data) === null) ||
          /* istanbul ignore next */
          (cov_sekkukkbs().b[22][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_sekkukkbs().b[21][0]++, void 0) :
          /* istanbul ignore next */
          (cov_sekkukkbs().b[21][1]++, _a.user)) === null) ||
          /* istanbul ignore next */
          (cov_sekkukkbs().b[20][1]++, _b === void 0) ?
          /* istanbul ignore next */
          (cov_sekkukkbs().b[19][0]++, void 0) :
          /* istanbul ignore next */
          (cov_sekkukkbs().b[19][1]++, _b.id),
          requiresConfirmation: !(
          /* istanbul ignore next */
          (cov_sekkukkbs().b[24][0]++, (_c = result.data) === null) ||
          /* istanbul ignore next */
          (cov_sekkukkbs().b[24][1]++, _c === void 0) ?
          /* istanbul ignore next */
          (cov_sekkukkbs().b[23][0]++, void 0) :
          /* istanbul ignore next */
          (cov_sekkukkbs().b[23][1]++, _c.session))
        }, 'Auth');
        /* istanbul ignore next */
        cov_sekkukkbs().s[94]++;
        return {
          data: result.data,
          error: null
        };
      } catch (e) {
        const errMsg =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[95]++, (0, common_1.getErrorMessage)(e));
        /* istanbul ignore next */
        cov_sekkukkbs().s[96]++;
        logger_1.logger.error('Unexpected sign up error', {
          error: errMsg
        }, 'Auth');
        /* istanbul ignore next */
        cov_sekkukkbs().s[97]++;
        set({
          authError: errMsg,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[98]++;
        return {
          data: null,
          error: new Error(errMsg)
        };
      }
    },
    updateProfile: async profileData => {
      /* istanbul ignore next */
      cov_sekkukkbs().f[12]++;
      var _a;
      const currentState =
      /* istanbul ignore next */
      (cov_sekkukkbs().s[99]++, get());
      /* istanbul ignore next */
      cov_sekkukkbs().s[100]++;
      if (!(
      /* istanbul ignore next */
      (cov_sekkukkbs().b[27][0]++, (_a = currentState.user) === null) ||
      /* istanbul ignore next */
      (cov_sekkukkbs().b[27][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_sekkukkbs().b[26][0]++, void 0) :
      /* istanbul ignore next */
      (cov_sekkukkbs().b[26][1]++, _a.id))) {
        /* istanbul ignore next */
        cov_sekkukkbs().b[25][0]++;
        cov_sekkukkbs().s[101]++;
        return {
          error: 'No authenticated user'
        };
      } else
      /* istanbul ignore next */
      {
        cov_sekkukkbs().b[25][1]++;
      }
      cov_sekkukkbs().s[102]++;
      try {
        /* istanbul ignore next */
        cov_sekkukkbs().s[103]++;
        set({
          isLoading: true
        });
        const {
          error
        } =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[104]++, await (0, profiles_1.updateProfile)(currentState.user.id, profileData));
        /* istanbul ignore next */
        cov_sekkukkbs().s[105]++;
        if (error) {
          /* istanbul ignore next */
          cov_sekkukkbs().b[28][0]++;
          cov_sekkukkbs().s[106]++;
          set({
            isLoading: false
          });
          /* istanbul ignore next */
          cov_sekkukkbs().s[107]++;
          return {
            error: String(error)
          };
        } else
        /* istanbul ignore next */
        {
          cov_sekkukkbs().b[28][1]++;
        }
        // Refetch profile to get updated data
        const fetchResult =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[108]++, await get().fetchProfile());
        /* istanbul ignore next */
        cov_sekkukkbs().s[109]++;
        set({
          isLoading: false
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[110]++;
        return fetchResult;
      } catch (e) {
        const errMsg =
        /* istanbul ignore next */
        (cov_sekkukkbs().s[111]++, (0, common_1.getErrorMessage)(e));
        /* istanbul ignore next */
        cov_sekkukkbs().s[112]++;
        set({
          isLoading: false
        });
        /* istanbul ignore next */
        cov_sekkukkbs().s[113]++;
        return {
          error: errMsg
        };
      }
    }
  };
}, {
  name: STORAGE_KEY,
  storage: (0, middleware_1.createJSONStorage)(() => {
    /* istanbul ignore next */
    cov_sekkukkbs().f[13]++;
    cov_sekkukkbs().s[114]++;
    return sessionStorage;
  }),
  partialize: state => {
    /* istanbul ignore next */
    cov_sekkukkbs().f[14]++;
    cov_sekkukkbs().s[115]++;
    return {
      user: state.user,
      session: state.session,
      profile: state.profile,
      hydrated: state.hydrated
    };
  },
  skipHydration: false
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,