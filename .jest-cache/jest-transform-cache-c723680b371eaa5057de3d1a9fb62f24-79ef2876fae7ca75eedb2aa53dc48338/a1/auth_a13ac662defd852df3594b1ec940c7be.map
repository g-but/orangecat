{"version":3,"names":["cov_sekkukkbs","actualCoverage","s","zustand_1","require","middleware_1","index_1","profiles_1","profileService_1","logger_1","common_1","STORAGE_KEY","exports","useAuthStore","create","persist","set","get","f","user","session","profile","isLoading","error","hydrated","authError","setInitialAuthState","logger","debug","hasUser","hasSession","hasProfile","clear","undefined","setError","setAuthError","fetchProfile","currentState","b","_a","id","ProfileService","getProfile","warn","userId","errorMessage","getErrorMessage","signOut","window","document","cookie","split","forEach","trimmedCookie","trim","startsWith","name","Object","keys","localStorage","key","includes","removeItem","sessionStorage","supabaseError","message","e","errMsg","Error","signIn","email","password","data","result","_b","newState","setTimeout","info","signUp","requiresConfirmation","_c","updateProfile","profileData","String","fetchResult","storage","createJSONStorage","partialize","state","skipHydration"],"sources":["/home/g/dev/orangecat/src/stores/auth.ts"],"sourcesContent":["'use client'\n\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\nimport type { User, Session } from '@supabase/supabase-js'\nimport type { Profile, ProfileFormData } from '@/types/database'\nimport { signIn, signUp, signOut } from '@/services/supabase/auth/index'\nimport supabase from '@/services/supabase/client'\nimport { updateProfile as supabaseUpdateProfile } from '@/services/supabase/profiles'\nimport { ProfileService } from '@/services/profileService'\nimport { logger } from '@/utils/logger'\nimport { getErrorMessage, type CatchError } from '@/types/common'\n\n// Use imported supabase client\n\ninterface AuthState {\n  // data\n  user: User | null\n  session: Session | null\n  profile: Profile | null\n  // ui state\n  isLoading: boolean\n  error: string | null\n  hydrated: boolean\n  authError: string | null\n  // actions\n  /** Called exactly once in AuthProvider with the *server* values.  */\n  setInitialAuthState: (user: User | null, session: Session | null, profile: Profile | null) => void\n  /** Wipe local state + storage (used by signOut and invalid sessions). */\n  clear: () => void\n  /** Explicit sign-out button. */\n  signOut: () => Promise<{ error: Error | null }>\n  signIn: (email: string, password: string) => Promise<{ data: { user: User | null, session: Session | null } | null, error: Error | null }>\n  signUp: (email: string, password: string) => Promise<{ data: { user: User | null, session: Session | null } | null, error: Error | null }>\n  /** Update user profile */\n  updateProfile: (profileData: Partial<Profile>) => Promise<{ error: string | null }>\n  /** Set error state */\n  setError: (error: string | null) => void\n  setAuthError: (error: string | null) => void\n  fetchProfile: () => Promise<{ error: string | null }>\n}\n\nconst STORAGE_KEY = 'orangecat-auth-storage'\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      // ==================== STATE ====================\n      user: null,\n      session: null,\n      profile: null,\n      isLoading: false,\n      error: null,\n      hydrated: true, // FIXED: Start hydrated to prevent infinite loading\n      authError: null,\n\n      // ==================== ACTIONS ====================\n      setInitialAuthState: (user: User | null, session: Session | null, profile: Profile | null) => {\n        // FIXED: Simplified state setting without complex validation\n        set({ user, session, profile, hydrated: true, isLoading: false })\n        logger.debug('Auth state initialized', { hasUser: !!user, hasSession: !!session, hasProfile: !!profile }, 'Auth')\n      },\n\n      clear: () => {\n        set({\n          user: null,\n          session: null,\n          profile: null,\n          error: null,\n          authError: null,\n          isLoading: false\n        })\n        logger.debug('Auth state cleared', undefined, 'Auth')\n      },\n\n      setError: (error: string | null) => set({ error }),\n      setAuthError: (authError: string | null) => set({ authError }),\n\n      fetchProfile: async () => {\n        const currentState = get()\n        if (!currentState.user?.id) {\n          return { error: 'No authenticated user' }\n        }\n\n        try {\n          const profile = await ProfileService.getProfile(currentState.user.id)\n          if (profile) {\n            set({ profile })\n            return { error: null }\n          } else {\n            logger.warn('No profile found for user', { userId: currentState.user.id }, 'Auth')\n            return { error: 'Profile not found' }\n          }\n        } catch (error: CatchError) {\n          const errorMessage = getErrorMessage(error)\n          logger.error('Failed to fetch profile', { error: errorMessage }, 'Auth')\n          return { error: errorMessage }\n        }\n      },\n\n      signOut: async () => {\n        set({ isLoading: true, authError: null })\n        try {\n          // Clear state first\n          get().clear()\n          \n          // Clear browser storage\n          if (typeof window !== 'undefined') {\n            // Clear Supabase cookies\n            document.cookie.split(';').forEach(cookie => {\n              const trimmedCookie = cookie.trim()\n              if (trimmedCookie.startsWith('sb-')) {\n                const name = trimmedCookie.split('=')[0]\n                document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`\n              }\n            })\n            \n            // Clear localStorage items\n            Object.keys(localStorage).forEach(key => {\n              if (key.startsWith('sb-') || key.includes('supabase') || key.includes('auth')) {\n                localStorage.removeItem(key)\n              }\n            })\n            sessionStorage.removeItem(STORAGE_KEY)\n          }\n          \n          // Sign out from Supabase\n          const { error: supabaseError } = await signOut()\n          \n          if (supabaseError) {\n            set({ authError: supabaseError.message, isLoading: false })\n            return { error: supabaseError }\n          }\n          \n          set({ isLoading: false, authError: null })\n          return { error: null }\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          set({ authError: errMsg, isLoading: false })\n          return { error: new Error(errMsg) }\n        }\n      },\n\n      // OPTIMIZED: Simplified signIn with reduced state updates\n      signIn: async (email, password) => {\n        const currentState = get()\n        if (currentState.isLoading) {\n          logger.warn(\"Sign in already in progress, ignoring duplicate request\", undefined, 'Auth')\n          return { data: null, error: new Error(\"Sign in already in progress\") }\n        }\n\n        // OPTIMIZED: Single state update for loading start\n        set({ isLoading: true, authError: null, error: null })\n        logger.debug('Starting optimized sign-in process', { email }, 'Auth')\n\n        try {\n          // OPTIMIZED: Use direct signIn service call\n          const result = await signIn({ email, password })\n\n          if (result.error) {\n            logger.error(\"Sign in error:\", result.error.message, 'Auth')\n            set({ authError: result.error.message, isLoading: false })\n            return { data: null, error: result.error }\n          }\n\n          // OPTIMIZED: Single state update for success\n          if (result.data?.user && result.data?.session) {\n            const newState = {\n              user: result.data.user,\n              session: result.data.session,\n              isLoading: false,\n              authError: null,\n              error: null\n            }\n\n            // OPTIMIZED: Use single set call to reduce re-renders\n            set(newState)\n\n            // OPTIMIZED: Fetch profile in background without blocking\n            setTimeout(async () => {\n              try {\n                await get().fetchProfile()\n              } catch (error) {\n                logger.warn('Profile fetch failed after sign in', { error: getErrorMessage(error as CatchError) }, 'Auth')\n              }\n            }, 0)\n\n            logger.info('Sign in successful', { userId: result.data.user.id }, 'Auth')\n            return { data: result.data, error: null }\n          } else {\n            set({ authError: 'No user data received', isLoading: false })\n            return { data: null, error: new Error('No user data received') }\n          }\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          logger.error('Unexpected sign in error', { error: errMsg }, 'Auth')\n          set({ authError: errMsg, isLoading: false })\n          return { data: null, error: new Error(errMsg) }\n        }\n      },\n\n      // FIXED: Simplified signUp\n      signUp: async (email, password) => {\n        const currentState = get()\n        if (currentState.isLoading) {\n          logger.warn(\"Sign up already in progress, ignoring duplicate request\", undefined, 'Auth')\n          return { data: null, error: new Error(\"Sign up already in progress\") }\n        }\n\n        set({ isLoading: true, authError: null, error: null })\n        logger.debug('Starting sign-up process', { email }, 'Auth')\n        \n        try {\n          const result = await signUp({ email, password })\n          \n          if (result.error) {\n            logger.error(\"Sign up error:\", result.error.message, 'Auth')\n            set({ authError: result.error.message, isLoading: false })\n            return { data: null, error: result.error }\n          }\n\n          // Handle sign-up success (may require email confirmation)\n          set({ isLoading: false, authError: null, error: null })\n          logger.info('Sign up successful', { \n            userId: result.data?.user?.id,\n            requiresConfirmation: !result.data?.session \n          }, 'Auth')\n          \n          return { data: result.data, error: null }\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          logger.error('Unexpected sign up error', { error: errMsg }, 'Auth')\n          set({ authError: errMsg, isLoading: false })\n          return { data: null, error: new Error(errMsg) }\n        }\n      },\n\n      updateProfile: async (profileData: Partial<Profile>) => {\n        const currentState = get()\n        if (!currentState.user?.id) {\n          return { error: 'No authenticated user' }\n        }\n\n        try {\n          set({ isLoading: true })\n          \n          const { error } = await supabaseUpdateProfile(currentState.user.id, profileData as ProfileFormData)\n          \n                     if (error) {\n             set({ isLoading: false })\n             return { error: String(error) }\n          }\n\n          // Refetch profile to get updated data\n          const fetchResult = await get().fetchProfile()\n          set({ isLoading: false })\n          \n          return fetchResult\n        } catch (e: CatchError) {\n          const errMsg = getErrorMessage(e)\n          set({ isLoading: false })\n          return { error: errMsg }\n        }\n      },\n    }),\n    {\n      name: STORAGE_KEY,\n      storage: createJSONStorage(() => sessionStorage),\n      partialize: (state) => ({\n        user: state.user,\n        session: state.session,\n        profile: state.profile,\n        hydrated: state.hydrated,\n      }),\n      skipHydration: false,\n    }\n  )\n)"],"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","ignoreList":[]}