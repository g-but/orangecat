{"file":"/home/g/dev/orangecat/src/services/campaigns/__tests__/campaignService.simple.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/campaigns/__tests__/campaignService.simple.test.ts"],"sourcesContent":["/**\n * SIMPLIFIED CAMPAIGN SERVICE TESTS - WORKING INFRASTRUCTURE\n * \n * This test suite focuses on core business logic with working mocks\n * Tests the most critical user flows for Bitcoin campaign platform\n */\n\n// Mock Supabase first\njest.mock('@supabase/ssr', () => ({\n  createBrowserClient: jest.fn()\n}))\n\nimport { CampaignService } from '../index'\n\ndescribe('🚀 CampaignService - Working Infrastructure Tests', () => {\n  let campaignService: CampaignService\n  let mockSupabase: any\n  let localStorageMock: Record<string, string>\n  let mockInsert: jest.Mock\n  let mockUpdate: jest.Mock\n\n  const userId = 'test-user-123'\n  const campaignId = 'campaign-456'\n  \n  const mockDbCampaign = {\n    id: campaignId,\n    user_id: userId,\n    title: 'Test Campaign',\n    description: 'Test Description',\n    bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n    lightning_address: 'test@getalby.com',\n    website_url: 'https://example.com',\n    goal_amount: 50000,\n    category: 'technology',\n    tags: ['bitcoin'],\n    currency: 'BTC',\n    is_active: false,\n    is_public: false,\n    total_funding: 0,\n    contributor_count: 0,\n    created_at: '2024-01-01T00:00:00.000Z',\n    updated_at: '2024-01-01T00:00:00.000Z'\n  }\n\n  const formData = {\n    title: 'Test Campaign',\n    description: 'Test Description',\n    bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n    lightning_address: 'test@getalby.com',\n    website_url: 'https://example.com',\n    goal_amount: 50000,\n    categories: ['technology', 'bitcoin']\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    \n    // Setup localStorage mock\n    localStorageMock = {}\n    Storage.prototype.getItem = jest.fn((key) => localStorageMock[key] || null)\n    Storage.prototype.setItem = jest.fn((key, value) => {\n      localStorageMock[key] = value\n    })\n    Storage.prototype.removeItem = jest.fn((key) => {\n      delete localStorageMock[key]\n    })\n\n    // Create mock functions that we can track\n    mockInsert = jest.fn(() => ({\n      select: jest.fn(() => ({\n        single: jest.fn(() => Promise.resolve({ data: mockDbCampaign, error: null }))\n      }))\n    }))\n\n    mockUpdate = jest.fn(() => ({\n      eq: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: {...mockDbCampaign, is_active: true, is_public: true}, error: null }))\n          }))\n        }))\n      }))\n    }))\n\n    // Setup mock Supabase with working chains\n    mockSupabase = {\n      from: jest.fn(() => ({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            order: jest.fn(() => Promise.resolve({ data: [mockDbCampaign], error: null })),\n            single: jest.fn(() => Promise.resolve({ data: mockDbCampaign, error: null }))\n          }))\n        })),\n        insert: mockInsert,\n        update: mockUpdate\n      }))\n    }\n\n    campaignService = new CampaignService(mockSupabase)\n  })\n\n  describe('📊 Core Campaign Loading', () => {\n    it('should load campaigns successfully', async () => {\n      const campaigns = await campaignService.getAllCampaigns(userId)\n\n      expect(campaigns).toHaveLength(1)\n      expect(campaigns[0].title).toBe('Test Campaign')\n      expect(campaigns[0].source).toBe('database')\n      expect(campaigns[0].isDraft).toBe(true) // is_active: false, is_public: false\n      expect(mockSupabase.from).toHaveBeenCalledWith('funding_pages')\n    })\n\n    it('should handle database errors', async () => {\n      // Setup error mock\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            order: jest.fn(() => Promise.resolve({ data: null, error: new Error('Database error') }))\n          }))\n        }))\n      })\n\n      await expect(campaignService.getAllCampaigns(userId)).rejects.toThrow('Database error')\n    })\n\n    it('should merge local drafts with database campaigns', async () => {\n      // Set up local draft\n      localStorageMock[`funding-draft-${userId}`] = JSON.stringify({\n        formData: { title: 'Local Draft', description: 'Local description' },\n        currentStep: 2,\n        draftId: campaignId,\n        lastSaved: new Date().toISOString()\n      })\n\n      const campaigns = await campaignService.getAllCampaigns(userId)\n\n      // Should use local data over database\n      expect(campaigns).toHaveLength(1)\n      expect(campaigns[0].title).toBe('Local Draft')\n      expect(campaigns[0].source).toBe('local')\n    })\n  })\n\n  describe('💾 Draft Management', () => {\n    it('should save draft locally and to database', async () => {\n      const draftId = await campaignService.saveDraft(userId, formData, 1)\n\n      // Check database was called\n      expect(mockSupabase.from).toHaveBeenCalledWith('funding_pages')\n      expect(draftId).toBe(campaignId)\n      \n      // Check localStorage was updated\n      expect(Storage.prototype.setItem).toHaveBeenCalled()\n      const savedData = JSON.parse(localStorageMock[`funding-draft-${userId}`])\n      expect(savedData.formData.title).toBe(formData.title)\n    })\n\n    it('should handle malformed data gracefully', async () => {\n      const malformedData = {\n        ...formData,\n        goal_amount: 'invalid-number' as any\n      }\n\n      // This should not throw an error\n      await expect(campaignService.saveDraft(userId, malformedData, 1)).resolves.toBeDefined()\n\n      expect(mockInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          goal_amount: null // Should convert invalid numbers to null\n        })\n      )\n    })\n  })\n\n  describe('🚀 Campaign Publishing', () => {\n    it('should publish campaign successfully', async () => {\n      const publishedCampaign = await campaignService.publishCampaign(userId, campaignId, formData)\n\n      expect(publishedCampaign.isActive).toBe(true)\n      expect(publishedCampaign.isDraft).toBe(false)\n      expect(mockSupabase.from).toHaveBeenCalledWith('funding_pages')\n    })\n\n    it('should clear local draft after publish', async () => {\n      // Set up local draft\n      localStorageMock[`funding-draft-${userId}`] = JSON.stringify({ formData })\n\n      await campaignService.publishCampaign(userId, campaignId, formData)\n\n      // Local draft should be cleared\n      expect(localStorageMock[`funding-draft-${userId}`]).toBeUndefined()\n    })\n  })\n\n  describe('🔍 Campaign Filtering', () => {\n    it('should filter campaigns by status', async () => {\n      const campaigns = [\n        { ...mockDbCampaign, id: '1', is_active: false, is_public: false, isDraft: true, isActive: false, isPaused: false, source: 'database' as const },\n        { ...mockDbCampaign, id: '2', is_active: true, is_public: true, isDraft: false, isActive: true, isPaused: false, source: 'database' as const },\n        { ...mockDbCampaign, id: '3', is_active: false, is_public: true, isDraft: false, isActive: false, isPaused: true, source: 'database' as const }\n      ]\n\n      const drafts = await campaignService.filterCampaigns(campaigns, { status: 'draft' })\n      const active = await campaignService.filterCampaigns(campaigns, { status: 'active' })\n      const paused = await campaignService.filterCampaigns(campaigns, { status: 'paused' })\n\n      expect(drafts).toHaveLength(1)\n      expect(active).toHaveLength(1)\n      expect(paused).toHaveLength(1)\n      expect(drafts[0].isDraft).toBe(true)\n      expect(active[0].isActive).toBe(true)\n      expect(paused[0].isPaused).toBe(true)\n    })\n  })\n\n  describe('🛠️ Local Storage Management', () => {\n    it('should detect local draft existence', () => {\n      localStorageMock[`funding-draft-${userId}`] = JSON.stringify({ formData })\n\n      const hasLocalDraft = campaignService.hasLocalDraft(userId)\n      expect(hasLocalDraft).toBe(true)\n    })\n\n    it('should retrieve local draft correctly', () => {\n      const draftData = { formData, currentStep: 2 }\n      localStorageMock[`funding-draft-${userId}`] = JSON.stringify(draftData)\n\n      const localDraft = campaignService.getLocalDraft(userId)\n      expect(localDraft).toBeTruthy()\n      expect(localDraft?.formData.title).toBe(formData.title)\n      expect(localDraft?.currentStep).toBe(2)\n    })\n\n    it('should clear local draft completely', () => {\n      localStorageMock[`funding-draft-${userId}`] = JSON.stringify({ formData })\n\n      campaignService.clearLocalDraft(userId)\n      expect(localStorageMock[`funding-draft-${userId}`]).toBeUndefined()\n    })\n\n    it('should handle corrupted localStorage gracefully', () => {\n      localStorageMock[`funding-draft-${userId}`] = 'invalid-json-data'\n\n      const localDraft = campaignService.getLocalDraft(userId)\n      expect(localDraft).toBe(null)\n    })\n  })\n\n  describe('⚠️ Error Handling', () => {\n    it('should handle empty user ID', async () => {\n      await expect(campaignService.getAllCampaigns('')).rejects.toThrow('User ID is required')\n    })\n\n    it('should handle null form data', async () => {\n      await expect(campaignService.saveDraft(userId, null as any, 1)).rejects.toThrow('Form data is required')\n    })\n  })\n}) "],"version":3}