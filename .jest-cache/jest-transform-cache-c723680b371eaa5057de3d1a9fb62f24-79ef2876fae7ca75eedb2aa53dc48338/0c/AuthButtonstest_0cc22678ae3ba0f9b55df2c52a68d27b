a82da5c98c11ef1f665baefee77f2b21
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock useAuth hook
jest.mock('@/hooks/useAuth', () => ({
    useAuth: jest.fn()
}));
// Mock next/link
jest.mock('next/link', () => {
    return function MockLink({ children, href, className }) {
        return (0, jsx_runtime_1.jsx)("a", { href: href, className: className, children: children });
    };
});
// Mock Button component
jest.mock('@/components/ui/Button', () => {
    return function MockButton({ children, variant, className }) {
        return (0, jsx_runtime_1.jsx)("button", { "data-variant": variant, className: className, children: children });
    };
});
// Mock UserProfileDropdown component
jest.mock('@/components/ui/UserProfileDropdown', () => {
    return function MockUserProfileDropdown({ variant }) {
        return (0, jsx_runtime_1.jsx)("div", { "data-testid": "user-profile-dropdown", "data-variant": variant, children: "User Profile Dropdown" });
    };
});
// Mock Lucide React icons
jest.mock('lucide-react', () => ({
    Loader2: ({ className }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "loader2-icon", className: className, children: "Loading" }))
}));
/**
 * AuthButtons Component Tests
 * Testing critical authentication UI component for the Bitcoin platform
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const AuthButtons_1 = __importDefault(require("../AuthButtons"));
const useAuth_1 = require("@/hooks/useAuth");
const mockUseAuth = useAuth_1.useAuth;
describe('🔐 AuthButtons Component Tests', () => {
    beforeEach(() => {
        mockUseAuth.mockClear();
    });
    describe('✅ Hydration & Loading States', () => {
        test('should show hydration loading indicator when not hydrated', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: false
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const pulseDiv = document.querySelector('.animate-pulse');
            expect(pulseDiv).toBeInTheDocument();
            expect(pulseDiv).toHaveClass('w-4', 'h-4', 'bg-gray-200', 'rounded-full', 'animate-pulse');
        });
        test('should show loading spinner when hydrated but loading', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: true,
                hydrated: true
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByTestId('loader2-icon')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('loader2-icon')).toHaveClass('h-5', 'w-5', 'animate-spin', 'text-tiffany-500');
        });
        test('should apply custom className to hydration indicator', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: false
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, { className: "custom-class" }));
            const container = document.querySelector('.custom-class');
            expect(container).toBeInTheDocument();
            expect(container).toHaveClass('flex', 'items-center', 'justify-center', 'custom-class');
        });
    });
    describe('🔑 Authenticated User States', () => {
        test('should render UserProfileDropdown when user is authenticated', () => {
            mockUseAuth.mockReturnValue({
                user: { id: '123', email: 'user@example.com' },
                session: { access_token: 'token' },
                isLoading: false,
                hydrated: true
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const dropdown = react_2.screen.getByTestId('user-profile-dropdown');
            expect(dropdown).toBeInTheDocument();
            expect(dropdown).toHaveAttribute('data-variant', 'advanced');
        });
        test('should render UserProfileDropdown when only user exists', () => {
            mockUseAuth.mockReturnValue({
                user: { id: '123', email: 'user@example.com' },
                session: null,
                isLoading: false,
                hydrated: true
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByTestId('user-profile-dropdown')).toBeInTheDocument();
        });
        test('should render UserProfileDropdown when only session exists', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: { access_token: 'token', user: { id: '123' } },
                isLoading: false,
                hydrated: true
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByTestId('user-profile-dropdown')).toBeInTheDocument();
        });
    });
    describe('🚫 Unauthenticated User States', () => {
        beforeEach(() => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: true
            });
        });
        test('should render login and register buttons when not authenticated', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByText('Log in')).toBeInTheDocument();
            expect(react_2.screen.getByText('Get Started')).toBeInTheDocument();
        });
        test('should have correct href attributes for auth buttons', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const loginLink = react_2.screen.getByText('Log in').closest('a');
            const registerLink = react_2.screen.getByText('Get Started').closest('a');
            expect(loginLink).toHaveAttribute('href', '/auth?mode=login');
            expect(registerLink).toHaveAttribute('href', '/auth?mode=register');
        });
        test('should use ghost variant for login button', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const loginButton = react_2.screen.getByText('Log in');
            expect(loginButton).toHaveAttribute('data-variant', 'ghost');
        });
        test('should have minimum touch target size for buttons', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const loginButton = react_2.screen.getByText('Log in');
            const registerButton = react_2.screen.getByText('Get Started');
            expect(loginButton).toHaveClass('min-h-[44px]');
            expect(registerButton).toHaveClass('min-h-[44px]');
        });
    });
    describe('📱 Mobile Navigation Layout', () => {
        beforeEach(() => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: true
            });
        });
        test('should detect mobile navigation layout from className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, { className: "flex-col mobile-nav" }));
            const container = react_2.screen.getByText('Log in').closest('div');
            expect(container).toHaveClass('flex-col', 'space-y-3', 'w-full');
            expect(container).not.toHaveClass('space-x-4');
        });
        test('should apply full width styling to links in mobile layout', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, { className: "flex-col" }));
            const loginLink = react_2.screen.getByText('Log in').closest('a');
            const registerLink = react_2.screen.getByText('Get Started').closest('a');
            expect(loginLink).toHaveClass('w-full');
            expect(registerLink).toHaveClass('w-full');
        });
        test('should apply full width and center styling to buttons in mobile layout', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, { className: "flex-col" }));
            const loginButton = react_2.screen.getByText('Log in');
            const registerButton = react_2.screen.getByText('Get Started');
            expect(loginButton).toHaveClass('w-full', 'justify-center');
            expect(registerButton).toHaveClass('w-full', 'justify-center');
        });
    });
    describe('🔄 State Transitions', () => {
        test('should transition from hydration to loading state', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: false
            });
            rerender((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const pulseDiv = document.querySelector('.animate-pulse');
            expect(pulseDiv).toBeInTheDocument();
            expect(pulseDiv).toHaveClass('animate-pulse');
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: true,
                hydrated: true
            });
            rerender((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByTestId('loader2-icon')).toHaveClass('animate-spin');
        });
        test('should transition from loading to unauthenticated state', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: true,
                hydrated: true
            });
            rerender((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByTestId('loader2-icon')).toBeInTheDocument();
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: true
            });
            rerender((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByText('Log in')).toBeInTheDocument();
            expect(react_2.screen.getByText('Get Started')).toBeInTheDocument();
        });
        test('should transition from unauthenticated to authenticated state', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: true
            });
            rerender((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByText('Log in')).toBeInTheDocument();
            mockUseAuth.mockReturnValue({
                user: { id: '123', email: 'user@example.com' },
                session: { access_token: 'token' },
                isLoading: false,
                hydrated: true
            });
            rerender((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByTestId('user-profile-dropdown')).toBeInTheDocument();
            expect(react_2.screen.queryByText('Log in')).not.toBeInTheDocument();
        });
    });
    describe('♿ Accessibility', () => {
        beforeEach(() => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: true
            });
        });
        test('should have accessible button text', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            expect(react_2.screen.getByRole('button', { name: 'Log in' })).toBeInTheDocument();
            expect(react_2.screen.getByRole('button', { name: 'Get Started' })).toBeInTheDocument();
        });
        test('should have proper link semantics', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const loginLink = react_2.screen.getByRole('link', { name: 'Log in' });
            const registerLink = react_2.screen.getByRole('link', { name: 'Get Started' });
            expect(loginLink).toHaveAttribute('href', '/auth?mode=login');
            expect(registerLink).toHaveAttribute('href', '/auth?mode=register');
        });
        test('should maintain minimum touch target sizes', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}));
            const loginButton = react_2.screen.getByText('Log in');
            const registerButton = react_2.screen.getByText('Get Started');
            expect(loginButton).toHaveClass('min-h-[44px]');
            expect(registerButton).toHaveClass('min-h-[44px]');
        });
    });
    describe('🔧 Edge Cases & Error Handling', () => {
        test('should handle undefined auth hook return', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
                isLoading: false,
                hydrated: true
            });
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}))).not.toThrow();
        });
        test('should handle empty auth hook return', () => {
            mockUseAuth.mockReturnValue({});
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}))).not.toThrow();
        });
        test('should handle partial auth state', () => {
            mockUseAuth.mockReturnValue({
                user: null,
                session: null,
            });
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, {}))).not.toThrow();
        });
        test('should handle className edge cases', () => {
            const edgeCases = ['', '   ', 'flex-col-something', 'not-flex-col'];
            edgeCases.forEach(className => {
                mockUseAuth.mockReturnValue({
                    user: null,
                    session: null,
                    isLoading: false,
                    hydrated: true
                });
                const { unmount } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AuthButtons_1.default, { className: className }));
                expect(react_2.screen.getByText('Log in')).toBeInTheDocument();
                unmount();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,