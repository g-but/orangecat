{"file":"/home/g/dev/orangecat/src/services/supabase/__tests__/core.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/supabase/__tests__/core.comprehensive.test.ts"],"sourcesContent":["/**\n * SUPABASE CORE CLIENT - COMPREHENSIVE TESTS\n * \n * Tests core Supabase client configuration, environment validation,\n * and storage mechanisms for production readiness.\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Comprehensive SupabaseServices tests for Option A completion\n */\n\n// Mock environment variables\nconst mockEnv = {\n  NEXT_PUBLIC_SUPABASE_URL: 'https://test.supabase.co',\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: 'test-anon-key-123456789',\n  NEXT_PUBLIC_SITE_URL: 'http://localhost:3000',\n  NODE_ENV: 'test'\n}\n\n// Mock browser environment\nObject.defineProperty(window, 'localStorage', {\n  value: {\n    getItem: jest.fn(),\n    setItem: jest.fn(),\n    removeItem: jest.fn(),\n    clear: jest.fn(),\n  },\n  writable: true,\n})\n\nObject.defineProperty(window, 'sessionStorage', {\n  value: {\n    getItem: jest.fn(),\n    setItem: jest.fn(),\n    removeItem: jest.fn(),\n    clear: jest.fn(),\n  },\n  writable: true,\n})\n\n// Mock process.env\nconst originalEnv = process.env\nbeforeAll(() => {\n  process.env = { ...originalEnv, ...mockEnv }\n})\n\nafterAll(() => {\n  process.env = originalEnv\n})\n\n// Mock Supabase client\njest.mock('@supabase/ssr', () => ({\n  createBrowserClient: jest.fn(() => ({\n    auth: {\n      getSession: jest.fn(),\n      getUser: jest.fn(),\n      signInWithPassword: jest.fn(),\n      signOut: jest.fn(),\n    },\n    from: jest.fn(),\n  }))\n}))\n\n// Mock logger\njest.mock('@/utils/logger', () => ({\n  logger: {\n    error: jest.fn(),\n    warn: jest.fn(),\n    info: jest.fn(),\n  },\n  logSupabase: jest.fn(),\n}))\n\ndescribe('🏗️ Supabase Core Client - Comprehensive Coverage', () => {\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    \n    // Reset localStorage and sessionStorage mocks\n    ;(window.localStorage.getItem as jest.Mock).mockReturnValue(null)\n    ;(window.localStorage.setItem as jest.Mock).mockImplementation(() => {})\n    ;(window.localStorage.removeItem as jest.Mock).mockImplementation(() => {})\n    \n    ;(window.sessionStorage.getItem as jest.Mock).mockReturnValue(null)\n    ;(window.sessionStorage.setItem as jest.Mock).mockImplementation(() => {})\n    ;(window.sessionStorage.removeItem as jest.Mock).mockImplementation(() => {})\n    \n    // Reset console methods to avoid test noise\n    jest.spyOn(console, 'warn').mockImplementation(() => {})\n    jest.spyOn(console, 'error').mockImplementation(() => {})\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('🌍 Environment Validation', () => {\n    \n    test('should validate complete environment configuration', () => {\n      // Dynamic import to test environment validation\n      const modulePromise = import('../core/client')\n      \n      expect(modulePromise).resolves.toBeDefined()\n    })\n\n    test('should handle missing environment variables', () => {\n      const invalidEnv = { ...mockEnv }\n      delete invalidEnv.NEXT_PUBLIC_SUPABASE_URL\n      \n      process.env = { ...originalEnv, ...invalidEnv }\n      \n      // Clear module cache and re-import\n      jest.resetModules()\n      \n      expect(() => {\n        require('../core/client')\n      }).toThrow('Missing Supabase environment variables')\n    })\n\n    test('should validate URL format', () => {\n      const invalidUrlEnv = {\n        ...mockEnv,\n        NEXT_PUBLIC_SUPABASE_URL: 'invalid-url'\n      }\n      \n      process.env = { ...originalEnv, ...invalidUrlEnv }\n      jest.resetModules()\n      \n      expect(() => {\n        require('../core/client')\n      }).toThrow('Invalid Supabase URL format')\n    })\n\n    test('should warn about non-https URLs', async () => {\n      const httpEnv = {\n        ...mockEnv,\n        NEXT_PUBLIC_SUPABASE_URL: 'http://test.supabase.co'\n      }\n      \n      process.env = { ...originalEnv, ...httpEnv }\n      jest.resetModules()\n      \n      require('../core/client')\n      \n      const { logger } = require('@/utils/logger')\n      expect(logger.error).toHaveBeenCalledWith(\n        'Supabase URL should use https protocol:',\n        'http:',\n        'Supabase'\n      )\n    })\n\n    test('should provide default site URL', () => {\n      const noSiteUrlEnv = { ...mockEnv }\n      delete noSiteUrlEnv.NEXT_PUBLIC_SITE_URL\n      \n      process.env = { ...originalEnv, ...noSiteUrlEnv }\n      jest.resetModules()\n      \n      const clientModule = require('../core/client')\n      expect(clientModule.supabaseConfig.siteUrl).toBe('http://localhost:3000')\n    })\n\n  })\n\n  describe('🔧 Client Configuration', () => {\n    \n    test('should create client with proper auth configuration', async () => {\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      require('../core/client')\n      \n      expect(createBrowserClient).toHaveBeenCalledWith(\n        mockEnv.NEXT_PUBLIC_SUPABASE_URL,\n        mockEnv.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        expect.objectContaining({\n          auth: expect.objectContaining({\n            persistSession: true,\n            autoRefreshToken: true,\n            detectSessionInUrl: true,\n            debug: true, // test environment\n            storage: expect.any(Object)\n          })\n        })\n      )\n    })\n\n    test('should configure production vs development settings', () => {\n      const prodEnv = {\n        ...mockEnv,\n        NODE_ENV: 'production'\n      }\n      \n      process.env = { ...originalEnv, ...prodEnv }\n      jest.resetModules()\n      \n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      require('../core/client')\n      \n      expect(createBrowserClient).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.any(String),\n        expect.objectContaining({\n          auth: expect.objectContaining({\n            debug: false // production\n          }),\n          cookieOptions: expect.objectContaining({\n            secure: true // production\n          })\n        })\n      )\n    })\n\n    test('should export client and configuration', () => {\n      const clientModule = require('../core/client')\n      \n      expect(clientModule.supabase).toBeDefined()\n      expect(clientModule.supabaseConfig).toBeDefined()\n      expect(clientModule.default).toBeDefined()\n    })\n\n  })\n\n  describe('💾 Storage Implementation', () => {\n\n    test('should handle localStorage operations', () => {\n      const clientModule = require('../core/client')\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      // Get storage configuration from createBrowserClient call\n      const configCall = (createBrowserClient as jest.Mock).mock.calls[0]\n      const storage = configCall[2].auth.storage\n      \n      // Test getItem\n      ;(window.localStorage.getItem as jest.Mock).mockReturnValue('{\"test\": \"value\"}')\n      const result = storage.getItem('test-key')\n      \n      expect(window.localStorage.getItem).toHaveBeenCalledWith('test-key')\n      expect(result).toEqual({ test: 'value' })\n    })\n\n    test('should fallback to sessionStorage when localStorage fails', () => {\n      const clientModule = require('../core/client')\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      const configCall = (createBrowserClient as jest.Mock).mock.calls[0]\n      const storage = configCall[2].auth.storage\n      \n      // Mock localStorage to throw error\n      ;(window.localStorage.getItem as jest.Mock).mockImplementation(() => {\n        throw new Error('localStorage not available')\n      })\n      ;(window.sessionStorage.getItem as jest.Mock).mockReturnValue('{\"fallback\": \"value\"}')\n      \n      const result = storage.getItem('test-key')\n      \n      expect(window.sessionStorage.getItem).toHaveBeenCalledWith('test-key')\n      expect(result).toEqual({ fallback: 'value' })\n    })\n\n    test('should handle setItem with redundancy', () => {\n      const clientModule = require('../core/client')\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      const configCall = (createBrowserClient as jest.Mock).mock.calls[0]\n      const storage = configCall[2].auth.storage\n      \n      const testData = { session: 'data' }\n      storage.setItem('session-key', testData)\n      \n      expect(window.localStorage.setItem).toHaveBeenCalledWith(\n        'session-key',\n        JSON.stringify(testData)\n      )\n      expect(window.sessionStorage.setItem).toHaveBeenCalledWith(\n        'session-key',\n        JSON.stringify(testData)\n      )\n    })\n\n    test('should handle storage errors gracefully', () => {\n      const clientModule = require('../core/client')\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      const configCall = (createBrowserClient as jest.Mock).mock.calls[0]\n      const storage = configCall[2].auth.storage\n      \n      // Mock both storages to fail\n      ;(window.localStorage.setItem as jest.Mock).mockImplementation(() => {\n        throw new Error('Storage quota exceeded')\n      })\n      ;(window.sessionStorage.setItem as jest.Mock).mockImplementation(() => {\n        throw new Error('Storage quota exceeded')\n      })\n      \n      // Should not throw, but handle gracefully\n      expect(() => {\n        storage.setItem('test-key', { data: 'value' })\n      }).not.toThrow()\n    })\n\n    test('should remove items from both storages', () => {\n      const clientModule = require('../core/client')\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      const configCall = (createBrowserClient as jest.Mock).mock.calls[0]\n      const storage = configCall[2].auth.storage\n      \n      storage.removeItem('test-key')\n      \n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('test-key')\n      expect(window.sessionStorage.removeItem).toHaveBeenCalledWith('test-key')\n    })\n\n    test('should handle malformed JSON in storage', () => {\n      const clientModule = require('../core/client')\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      const configCall = (createBrowserClient as jest.Mock).mock.calls[0]\n      const storage = configCall[2].auth.storage\n      \n      ;(window.localStorage.getItem as jest.Mock).mockReturnValue('invalid-json')\n      \n      const result = storage.getItem('test-key')\n      expect(result).toBe(null)\n    })\n\n  })\n\n  describe('🔒 Security Configuration', () => {\n    \n    test('should use secure cookies in production', () => {\n      const prodEnv = {\n        ...mockEnv,\n        NODE_ENV: 'production'\n      }\n      \n      process.env = { ...originalEnv, ...prodEnv }\n      jest.resetModules()\n      \n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      require('../core/client')\n      \n      expect(createBrowserClient).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.any(String),\n        expect.objectContaining({\n          cookieOptions: expect.objectContaining({\n            secure: true,\n            sameSite: 'lax',\n            path: '/'\n          })\n        })\n      )\n    })\n\n    test('should use appropriate database schema', () => {\n      const { createBrowserClient } = require('@supabase/ssr')\n      \n      require('../core/client')\n      \n      expect(createBrowserClient).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.any(String),\n        expect.objectContaining({\n          db: expect.objectContaining({\n            schema: 'public'\n          })\n        })\n      )\n    })\n\n  })\n\n  describe('🧪 Edge Cases & Error Recovery', () => {\n    \n    test('should handle missing window object gracefully', () => {\n      // This test simulates server-side rendering\n      const originalWindow = global.window\n      delete (global as any).window\n      \n      jest.resetModules()\n      \n      expect(() => {\n        require('../core/client')\n      }).not.toThrow()\n      \n      global.window = originalWindow\n    })\n\n    test('should validate environment on every import', () => {\n      // Set test environment before reset\n      process.env = { ...originalEnv, ...mockEnv }\n      jest.resetModules()\n      // Access the global stable mock that persists across module resets\n      const stableLogSupabase = (globalThis as any).__oc_logSupabase || jest.fn()\n      require('../core/client')\n      \n      expect(stableLogSupabase).toHaveBeenCalledWith(\n        'Environment validation:',\n        expect.objectContaining({\n          supabaseUrl: expect.stringContaining('https://test.supabas...'),\n          supabaseAnonKey: expect.stringContaining('test-anon-key...'),\n          siteUrl: 'http://localhost:3000',\n          nodeEnv: 'test'\n        })\n      )\n    })\n\n    test('should redact sensitive information in logs', () => {\n      // Set test environment and clear previous calls\n      process.env = { ...originalEnv, ...mockEnv }\n      jest.resetModules()\n      // Access the global stable mock that persists across module resets\n      const stableLogSupabase = (globalThis as any).__oc_logSupabase || jest.fn()\n      stableLogSupabase.mockClear() // Clear previous calls\n      require('../core/client')\n      \n      const logCall = (stableLogSupabase as jest.Mock).mock.calls[0][1]\n      \n      // Should not log full keys\n      expect(logCall.supabaseAnonKey).not.toBe(mockEnv.NEXT_PUBLIC_SUPABASE_ANON_KEY)\n      expect(logCall.supabaseAnonKey).toContain('...')\n      expect(logCall.supabaseUrl).toContain('...')\n    })\n\n  })\n\n}) "],"version":3}