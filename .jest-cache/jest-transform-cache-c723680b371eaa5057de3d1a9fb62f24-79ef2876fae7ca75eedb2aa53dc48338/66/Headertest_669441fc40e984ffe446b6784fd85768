2da9dd94e90415f458e64170ea460e06
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock next/navigation
jest.mock('next/navigation', () => ({
    usePathname: jest.fn()
}));
// Mock useAuth hook
jest.mock('@/hooks/useAuth', () => ({
    useAuth: jest.fn()
}));
// Mock child components
jest.mock('../Logo', () => {
    return function MockLogo() {
        return (0, jsx_runtime_1.jsx)("div", { "data-testid": "logo", children: "OrangeCat Logo" });
    };
});
jest.mock('../AuthButtons', () => {
    return function MockAuthButtons({ className }) {
        return (0, jsx_runtime_1.jsx)("div", { "data-testid": "auth-buttons", className: className, children: "Auth Buttons" });
    };
});
jest.mock('@/components/dashboard/SmartCreateButton', () => ({
    HeaderCreateButton: function MockHeaderCreateButton() {
        return (0, jsx_runtime_1.jsx)("div", { "data-testid": "header-create-button", children: "Create Button" });
    }
}));
// Mock Lucide React icons
jest.mock('lucide-react', () => ({
    Menu: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "menu-icon", children: "Menu" }),
    X: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "x-icon", children: "X" }),
    ChevronDown: ({ className }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "chevron-down", className: className, children: "ChevronDown" })),
    Zap: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "zap-icon", children: "Zap" }),
    Building: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "building-icon", children: "Building" }),
    Calendar: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "calendar-icon", children: "Calendar" }),
    Wallet: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "wallet-icon", children: "Wallet" }),
    Users: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "users-icon", children: "Users" }),
    Globe2: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "globe2-icon", children: "Globe2" })
}));
/**
 * Header Component Tests
 *
 * Testing critical navigation component used across the entire Bitcoin platform
 * Essential for user authentication flow, navigation, and responsive design
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const navigation_1 = require("next/navigation");
const useAuth_1 = require("@/hooks/useAuth");
const Header_1 = __importDefault(require("../Header"));
const mockUsePathname = navigation_1.usePathname;
const mockUseAuth = useAuth_1.useAuth;
describe('🧭 Header Component - Navigation Foundation Tests', () => {
    // Setup default mocks
    beforeEach(() => {
        mockUsePathname.mockReturnValue('/');
        mockUseAuth.mockReturnValue({ user: null });
        // Mock window.scrollY
        Object.defineProperty(window, 'scrollY', {
            value: 0,
            writable: true
        });
        // Mock body style
        Object.defineProperty(document.body, 'style', {
            value: { overflow: '' },
            writable: true
        });
        // Clear any existing timeouts
        jest.clearAllTimers();
        jest.useFakeTimers();
    });
    afterEach(() => {
        jest.runOnlyPendingTimers();
        jest.useRealTimers();
        document.body.style.overflow = '';
    });
    describe('✅ Basic Header Rendering', () => {
        test('should render header with logo and navigation elements', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByTestId('logo')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('auth-buttons')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('header-create-button')).toBeInTheDocument();
            expect(react_2.screen.getByRole('banner')).toBeInTheDocument();
        });
        test('should apply correct header styling when not scrolled', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const header = react_2.screen.getByRole('banner');
            expect(header).toHaveClass('bg-white/90', 'backdrop-blur-md');
            expect(header).not.toHaveClass('bg-white/95', 'backdrop-blur-lg', 'shadow-sm');
        });
        test('should update header styling when scrolled', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            // Simulate scroll
            (0, react_2.act)(() => {
                Object.defineProperty(window, 'scrollY', { value: 100, writable: true });
                react_2.fireEvent.scroll(window);
            });
            await (0, react_2.waitFor)(() => {
                const header = react_2.screen.getByRole('banner');
                expect(header).toHaveClass('bg-white/95', 'backdrop-blur-lg', 'shadow-sm', 'border-b');
            });
        });
        test('should render mobile menu button on small screens', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            expect(mobileButton).toBeInTheDocument();
            expect(mobileButton.closest('div')).toHaveClass('lg:hidden');
            expect(react_2.screen.getByTestId('menu-icon')).toBeInTheDocument();
        });
    });
    describe('🔐 Authentication-Based Rendering', () => {
        test('should show guest navigation when user is not logged in', () => {
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByText('Products')).toBeInTheDocument();
            expect(react_2.screen.getByText('Blog')).toBeInTheDocument();
            expect(react_2.screen.getByText('Discover')).toBeInTheDocument();
            expect(react_2.screen.getByText('About')).toBeInTheDocument();
        });
        test('should show authenticated navigation when user is logged in', () => {
            const mockUser = { id: '123', email: 'test@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.queryByText('Products')).not.toBeInTheDocument();
            expect(react_2.screen.queryByText('Blog')).not.toBeInTheDocument();
            expect(react_2.screen.getByText('My Dashboard')).toBeInTheDocument();
            expect(react_2.screen.getByText('About')).toBeInTheDocument();
        });
        test('should update dashboard link based on authentication', () => {
            // Test unauthenticated state
            mockUseAuth.mockReturnValue({ user: null });
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const discoverLink = react_2.screen.getByText('Discover');
            expect(discoverLink.closest('a')).toHaveAttribute('href', '/discover');
            // Test authenticated state
            const mockUser = { id: '123', email: 'test@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            rerender((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const dashboardLink = react_2.screen.getByText('My Dashboard');
            expect(dashboardLink.closest('a')).toHaveAttribute('href', '/dashboard');
        });
    });
    describe('📱 Mobile Menu Functionality', () => {
        test('should toggle mobile menu when button is clicked', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            // Initially closed - mobile menu content should not be visible
            expect(react_2.screen.queryByText('Active Products')).not.toBeInTheDocument();
            expect(react_2.screen.getByTestId('menu-icon')).toBeInTheDocument();
            // Open menu
            await user.click(mobileButton);
            expect(react_2.screen.getByTestId('x-icon')).toBeInTheDocument();
            expect(react_2.screen.getByText('Active Products')).toBeInTheDocument();
            expect(document.body.style.overflow).toBe('hidden');
        });
        test('should close mobile menu when backdrop is clicked', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            await user.click(mobileButton);
            // Find and click backdrop - it's a div with bg-black/20 class
            const backdrop = document.querySelector('.bg-black\\/20');
            expect(backdrop).toBeInTheDocument();
            await user.click(backdrop);
            expect(react_2.screen.getByTestId('menu-icon')).toBeInTheDocument();
            expect(document.body.style.overflow).toBe('unset');
        });
        test('should close mobile menu when pathname changes', () => {
            mockUsePathname.mockReturnValue('/');
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            // Open mobile menu first
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            react_2.fireEvent.click(mobileButton);
            expect(react_2.screen.getByTestId('x-icon')).toBeInTheDocument();
            // Simulate pathname change
            mockUsePathname.mockReturnValue('/about');
            rerender((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByTestId('menu-icon')).toBeInTheDocument();
        });
        test('should show different mobile content for authenticated users', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            // Test unauthenticated mobile menu
            mockUseAuth.mockReturnValue({ user: null });
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            await user.click(react_2.screen.getByLabelText('Toggle menu'));
            expect(react_2.screen.getByText('Get Started')).toBeInTheDocument();
            expect(react_2.screen.getByText('Start Fundraising')).toBeInTheDocument();
            // Test authenticated mobile menu
            const mockUser = { id: '123', email: 'test@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            rerender((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByText('Quick Actions')).toBeInTheDocument();
            expect(react_2.screen.getByText('Create New Campaign')).toBeInTheDocument();
        });
    });
    describe('🎛️ Dropdown Menu Functionality', () => {
        test('should show products dropdown on hover for unauthenticated users', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const productsContainer = react_2.screen.getByText('Products').closest('div');
            await user.hover(productsContainer);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('Active Products')).toBeInTheDocument();
                expect(react_2.screen.getByText('Coming Soon')).toBeInTheDocument();
                expect(react_2.screen.getByText('Fundraising')).toBeInTheDocument();
                expect(react_2.screen.getByText('Organizations')).toBeInTheDocument();
            });
        });
        test('should show about dropdown on hover', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutContainer = react_2.screen.getByText('About').closest('div');
            await user.hover(aboutContainer);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('About Us')).toBeInTheDocument();
                expect(react_2.screen.getByText('Study Bitcoin')).toBeInTheDocument();
                expect(react_2.screen.getByText('Documentation')).toBeInTheDocument();
                expect(react_2.screen.getByText('Contact')).toBeInTheDocument();
            });
        });
        test('should hide dropdown after mouse leave with delay', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutContainer = react_2.screen.getByText('About').closest('div');
            await user.hover(aboutContainer);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('About Us')).toBeInTheDocument();
            });
            await user.unhover(aboutContainer);
            // Should still be visible immediately
            expect(react_2.screen.getByText('About Us')).toBeInTheDocument();
            // Should hide after timeout
            (0, react_2.act)(() => {
                jest.advanceTimersByTime(200);
            });
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByText('About Us')).not.toBeInTheDocument();
            });
        });
        test('should rotate chevron when dropdown is open', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutButton = react_2.screen.getByText('About').closest('button');
            const chevron = aboutButton === null || aboutButton === void 0 ? void 0 : aboutButton.querySelector('[data-testid="chevron-down"]');
            expect(chevron).not.toHaveClass('rotate-180');
            await user.hover(aboutButton);
            await (0, react_2.waitFor)(() => {
                expect(chevron).toHaveClass('rotate-180');
            });
        });
    });
    describe('🧭 Navigation & Active States', () => {
        test('should highlight active navigation items correctly', () => {
            mockUsePathname.mockReturnValue('/discover');
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const discoverLink = react_2.screen.getByText('Discover');
            expect(discoverLink.closest('a')).toHaveClass('text-orange-600', 'bg-orange-50');
        });
        test('should handle root path active state correctly', () => {
            mockUsePathname.mockReturnValue('/');
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            // Root path should only be active for exact match
            const discoverLink = react_2.screen.getByText('Discover');
            expect(discoverLink.closest('a')).not.toHaveClass('text-orange-600', 'bg-orange-50');
        });
        test('should handle nested path active states', () => {
            mockUsePathname.mockReturnValue('/about/team');
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutButton = react_2.screen.getByText('About');
            expect(aboutButton.closest('button')).toHaveClass('text-orange-600', 'bg-orange-50');
        });
        test('should provide correct fundraising link based on auth state', () => {
            // Test unauthenticated state
            mockUseAuth.mockReturnValue({ user: null });
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByTestId('header-create-button')).toBeInTheDocument();
            // Test authenticated state
            const mockUser = { id: '123', email: 'test@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            rerender((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByTestId('header-create-button')).toBeInTheDocument();
        });
    });
    describe('🎨 Product Categories Display', () => {
        test('should display all product categories for unauthenticated users', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const productsContainer = react_2.screen.getByText('Products').closest('div');
            await user.hover(productsContainer);
            await (0, react_2.waitFor)(() => {
                // Check for active products
                expect(react_2.screen.getByText('Fundraising')).toBeInTheDocument();
                expect(react_2.screen.getByText('Bitcoin-powered fundraising campaigns')).toBeInTheDocument();
                expect(react_2.screen.getByText('Live')).toBeInTheDocument();
            });
            // Check for coming soon products
            expect(react_2.screen.getByText('Organizations')).toBeInTheDocument();
            expect(react_2.screen.getByText('Projects')).toBeInTheDocument();
            expect(react_2.screen.getByText('Events')).toBeInTheDocument();
            expect(react_2.screen.getByText('Assets Marketplace')).toBeInTheDocument();
            expect(react_2.screen.getByText('People & Networking')).toBeInTheDocument();
        });
        test('should display product badges correctly', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const productsContainer = react_2.screen.getByText('Products').closest('div');
            await user.hover(productsContainer);
            await (0, react_2.waitFor)(() => {
                // Live product should have green badge
                const liveBadge = react_2.screen.getByText('Live');
                expect(liveBadge).toHaveClass('bg-green-100', 'text-green-700');
            });
            // Coming soon products should have orange badges
            const comingSoonBadges = react_2.screen.getAllByText(/Q[12] 2026/);
            comingSoonBadges.forEach(badge => {
                expect(badge).toHaveClass('bg-orange-100', 'text-orange-700');
            });
        });
        test('should include call-to-action in products dropdown', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const productsContainer = react_2.screen.getByText('Products').closest('div');
            await user.hover(productsContainer);
            await (0, react_2.waitFor)(() => {
                const ctaButton = react_2.screen.getByText('Get Started with Fundraising');
                expect(ctaButton.closest('a')).toHaveAttribute('href', '/fundraising');
                expect(ctaButton).toHaveClass('bg-orange-600', 'text-white');
            });
        });
    });
    describe('🔗 Link Structure & Accessibility', () => {
        test('should have proper link attributes for all navigation items', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            // Check main navigation links exist and are properly structured
            expect(react_2.screen.getByText('Discover').closest('a')).toHaveAttribute('href', '/discover');
            expect(react_2.screen.getByText('About').closest('button')).toBeInTheDocument();
        });
        test('should have proper ARIA labels for interactive elements', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const mobileMenuButton = react_2.screen.getByLabelText('Toggle menu');
            expect(mobileMenuButton).toBeInTheDocument();
            expect(mobileMenuButton).toHaveAttribute('aria-label', 'Toggle menu');
        });
        test('should maintain keyboard navigation support', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutButton = react_2.screen.getByText('About').closest('button');
            expect(aboutButton).toBeInTheDocument();
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            expect(mobileButton).toBeInTheDocument();
        });
        test('should render all about links with correct structure', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutContainer = react_2.screen.getByText('About').closest('div');
            await (0, react_2.act)(async () => {
                await user.hover(aboutContainer);
            });
            await (0, react_2.waitFor)(() => {
                const aboutLinks = [
                    { text: 'About Us', href: '/about' },
                    { text: 'Study Bitcoin', href: '/study-bitcoin' },
                    { text: 'Documentation', href: '/docs' },
                    { text: 'Contact', href: '/profile/mao' }
                ];
                aboutLinks.forEach(link => {
                    const linkElement = react_2.screen.getByText(link.text);
                    expect(linkElement.closest('a')).toHaveAttribute('href', link.href);
                });
                // Check Blog link separately to avoid multiple element issue
                const blogLinks = react_2.screen.getAllByText('Blog');
                const dropdownBlogLink = blogLinks.find(link => {
                    var _a;
                    return ((_a = link.closest('a')) === null || _a === void 0 ? void 0 : _a.getAttribute('href')) === '/blog' &&
                        link.closest('.absolute');
                } // Inside dropdown
                );
                expect(dropdownBlogLink).toBeInTheDocument();
                expect(dropdownBlogLink === null || dropdownBlogLink === void 0 ? void 0 : dropdownBlogLink.closest('a')).toHaveAttribute('href', '/blog');
            });
        });
    });
    describe('⚡ Performance & Interactions', () => {
        test('should cleanup scroll event listener on unmount', () => {
            const addEventListenerSpy = jest.spyOn(window, 'addEventListener');
            const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');
            const { unmount } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(addEventListenerSpy).toHaveBeenCalledWith('scroll', expect.any(Function));
            unmount();
            expect(removeEventListenerSpy).toHaveBeenCalledWith('scroll', expect.any(Function));
        });
        test('should cleanup timeouts on unmount', () => {
            const { unmount } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            // This ensures no memory leaks from pending timeouts
            expect(() => unmount()).not.toThrow();
        });
        test('should handle rapid hover events correctly', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutContainer = react_2.screen.getByText('About').closest('div');
            // Rapid hover/unhover
            await user.hover(aboutContainer);
            await user.unhover(aboutContainer);
            await user.hover(aboutContainer);
            await (0, react_2.waitFor)(() => {
                // Should still show dropdown
                expect(react_2.screen.getByText('About Us')).toBeInTheDocument();
            });
        });
        test('should prevent body scroll when mobile menu is open', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            // Open menu
            await user.click(mobileButton);
            expect(document.body.style.overflow).toBe('hidden');
            // Close menu
            await user.click(mobileButton);
            expect(document.body.style.overflow).toBe('unset');
        });
    });
    describe('🎯 Bitcoin Platform Integration', () => {
        test('should show Bitcoin-specific navigation for authenticated users', () => {
            const mockUser = { id: '123', email: 'bitcoin@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByText('My Dashboard')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('header-create-button')).toBeInTheDocument();
        });
        test('should highlight fundraising-related paths correctly', () => {
            mockUsePathname.mockReturnValue('/fundraising/my-campaign');
            mockUseAuth.mockReturnValue({ user: null });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const productsButton = react_2.screen.getByText('Products');
            expect(productsButton.closest('button')).toHaveClass('text-orange-600', 'bg-orange-50');
        });
        test('should provide appropriate mobile experience for Bitcoin users', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            const mockUser = { id: '123', email: 'bitcoin@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            await user.click(react_2.screen.getByLabelText('Toggle menu'));
            expect(react_2.screen.getByText('Create New Campaign')).toBeInTheDocument();
            expect(react_2.screen.getByText('Launch a new Bitcoin fundraising campaign')).toBeInTheDocument();
            expect(react_2.screen.getAllByText('My Dashboard')).toHaveLength(2); // Desktop and mobile versions
            expect(react_2.screen.getByText('View and manage your campaigns')).toBeInTheDocument();
        });
        test('should show proper Bitcoin education links in about section', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutContainer = react_2.screen.getByText('About').closest('div');
            await user.hover(aboutContainer);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('Study Bitcoin')).toBeInTheDocument();
                expect(react_2.screen.getByText('Educational resources to learn about Bitcoin')).toBeInTheDocument();
            });
        });
    });
    describe('🔧 Edge Cases & Error Handling', () => {
        test('should handle missing user gracefully', () => {
            mockUseAuth.mockReturnValue({ user: undefined });
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}))).not.toThrow();
            expect(react_2.screen.getByText('Discover')).toBeInTheDocument();
        });
        test('should handle undefined pathname gracefully', () => {
            mockUsePathname.mockReturnValue('');
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}))).not.toThrow();
            expect(react_2.screen.getByTestId('logo')).toBeInTheDocument();
        });
        test('should handle window resize events during dropdown interaction', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const aboutContainer = react_2.screen.getByText('About').closest('div');
            await user.hover(aboutContainer);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('About Us')).toBeInTheDocument();
            });
            // Simulate window resize
            (0, react_2.act)(() => {
                window.dispatchEvent(new Event('resize'));
            });
            // Should not break functionality
            expect(react_2.screen.getByText('About Us')).toBeInTheDocument();
        });
        test('should handle rapid menu toggle clicks', async () => {
            const user = user_event_1.default.setup({ advanceTimers: jest.advanceTimersByTime });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            const mobileButton = react_2.screen.getByLabelText('Toggle menu');
            // Rapid clicks
            await user.click(mobileButton);
            await user.click(mobileButton);
            await user.click(mobileButton);
            // Should be in open state
            expect(react_2.screen.getByTestId('x-icon')).toBeInTheDocument();
        });
        test('should cleanup properly when auth state changes', () => {
            mockUseAuth.mockReturnValue({ user: null });
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.getByText('Products')).toBeInTheDocument();
            // Change auth state
            const mockUser = { id: '123', email: 'test@example.com' };
            mockUseAuth.mockReturnValue({ user: mockUser });
            rerender((0, jsx_runtime_1.jsx)(Header_1.default, {}));
            expect(react_2.screen.queryByText('Products')).not.toBeInTheDocument();
            expect(react_2.screen.getByText('My Dashboard')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,