523411a04dc5e6d5061fb842dec14367
"use strict";
/**
 * Bitcoin Services - Comprehensive Tests
 *
 * Testing Bitcoin address validation, transaction processing,
 * and API integration which are critical for platform functionality.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const bitcoin_1 = require("../bitcoin");
// Mock fetch for API calls
const mockFetch = jest.fn();
describe('🪙 Bitcoin Services - Comprehensive Coverage', () => {
    let bitcoinService;
    beforeEach(() => {
        jest.clearAllMocks();
        mockFetch.mockClear();
        // Create new instance with mocked fetch for each test
        bitcoinService = new bitcoin_1.BitcoinService(mockFetch);
    });
    describe('🧹 Address Cleaning', () => {
        test('cleans Bitcoin URI format', () => {
            const uri = 'bitcoin:bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4?amount=0.1';
            const cleaned = (0, bitcoin_1.cleanBitcoinAddress)(uri);
            expect(cleaned).toBe('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
        });
        test('cleans Bitcoin URI with parameters', () => {
            const uri = 'bitcoin:1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2?amount=0.5&label=donation';
            const cleaned = (0, bitcoin_1.cleanBitcoinAddress)(uri);
            expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2');
        });
        test('returns plain address unchanged', () => {
            const address = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4';
            const cleaned = (0, bitcoin_1.cleanBitcoinAddress)(address);
            expect(cleaned).toBe(address);
        });
        test('handles empty and invalid inputs', () => {
            expect((0, bitcoin_1.cleanBitcoinAddress)('')).toBe('');
            expect((0, bitcoin_1.cleanBitcoinAddress)('bitcoin:')).toBe('');
            expect((0, bitcoin_1.cleanBitcoinAddress)('invalid-input')).toBe('invalid-input');
        });
        test('handles complex URI parameters', () => {
            const uri = 'bitcoin:3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy?amount=1.5&label=Test%20Payment&message=Thank%20you';
            const cleaned = (0, bitcoin_1.cleanBitcoinAddress)(uri);
            expect(cleaned).toBe('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy');
        });
    });
    describe('📊 Transaction Processing', () => {
        const mockTransactionData = [
            {
                txid: 'abc123',
                status: { confirmed: true, block_time: 1640995200 },
                vin: [],
                vout: [
                    { scriptpubkey_address: 'bc1qtest', value: 50000000 }
                ]
            },
            {
                txid: 'def456',
                status: { confirmed: false },
                vin: [
                    { prevout: { scriptpubkey_address: 'bc1qtest', value: 25000000 } }
                ],
                vout: [
                    { scriptpubkey_address: 'bc1qother', value: 20000000 }
                ]
            }
        ];
        test('processes incoming transactions correctly', () => {
            const address = 'bc1qtest';
            // Access the provider's processTransactions method
            const provider = bitcoinService['providers'][0];
            const transactions = provider.processTransactions(mockTransactionData, address);
            expect(transactions).toHaveLength(2);
            // First transaction - incoming
            expect(transactions[0]).toMatchObject({
                txid: 'abc123',
                type: 'incoming',
                value: 0.5, // 50M sats = 0.5 BTC
                status: 'confirmed'
            });
            // Second transaction - outgoing
            expect(transactions[1]).toMatchObject({
                txid: 'def456',
                type: 'outgoing',
                value: 0.2, // 20M sats sent to others = 0.2 BTC
                status: 'pending'
            });
        });
        test('handles transactions with no relevant inputs/outputs', () => {
            const irrelevantTx = [{
                    txid: 'xyz789',
                    status: { confirmed: true, block_time: 1640995200 },
                    vin: [
                        { prevout: { scriptpubkey_address: 'bc1qother', value: 10000000 } }
                    ],
                    vout: [
                        { scriptpubkey_address: 'bc1qdifferent', value: 9000000 }
                    ]
                }];
            const address = 'bc1qtest';
            const provider = bitcoinService['providers'][0];
            const transactions = provider.processTransactions(irrelevantTx, address);
            expect(transactions).toHaveLength(1);
            expect(transactions[0].value).toBe(0); // No value for this address
        });
        test('handles consolidation transactions', () => {
            const consolidationTx = [{
                    txid: 'consolidate123',
                    status: { confirmed: true, block_time: 1640995200 },
                    vin: [
                        { prevout: { scriptpubkey_address: 'bc1qtest', value: 30000000 } },
                        { prevout: { scriptpubkey_address: 'bc1qtest', value: 20000000 } }
                    ],
                    vout: [
                        { scriptpubkey_address: 'bc1qtest', value: 49000000 } // Consolidation back to same address
                    ]
                }];
            const address = 'bc1qtest';
            const provider = bitcoinService['providers'][0];
            const transactions = provider.processTransactions(consolidationTx, address);
            expect(transactions).toHaveLength(1);
            expect(transactions[0].type).toBe('outgoing');
            expect(transactions[0].value).toBe(0.5); // Total input value shown for consolidation
        });
    });
    describe('🌐 API Integration', () => {
        test('fetches balance successfully', async () => {
            const mockResponse = {
                chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 50000000 },
                mempool_stats: { funded_txo_sum: 10000000, spent_txo_sum: 5000000 }
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(mockResponse)
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve([])
            });
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(balance).toEqual({
                confirmed: 0.5, // (100M - 50M) / 100M = 0.5 BTC
                unconfirmed: 0,
                total: 0.5
            });
        });
        test('handles API errors gracefully', async () => {
            // Mock both providers to fail so we get the original error
            mockFetch
                .mockRejectedValueOnce(new Error('Network error'))
                .mockRejectedValueOnce(new Error('Network error'));
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(balance).toEqual({
                confirmed: 0,
                unconfirmed: 0,
                total: 0,
                error: 'Network error'
            });
        });
        test('fetches transactions successfully', () => {
            const mockTxData = [
                {
                    txid: 'tx123',
                    status: { confirmed: true, block_time: 1640995200 },
                    vin: [],
                    vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 100000000 }]
                }
            ];
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(mockTxData)
            });
            return bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4').then(transactions => {
                expect(transactions).toHaveLength(1);
                expect(transactions[0]).toMatchObject({
                    txid: 'tx123',
                    type: 'incoming',
                    value: 1,
                    status: 'confirmed'
                });
            });
        });
        test('handles transaction API errors', async () => {
            // Mock both providers to fail
            mockFetch
                .mockRejectedValueOnce(new Error('API error'))
                .mockRejectedValueOnce(new Error('API error'));
            const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(transactions).toEqual([]);
        });
        test('falls back to secondary API provider', async () => {
            // First API call fails
            mockFetch
                .mockRejectedValueOnce(new Error('Primary API down'))
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 50000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            })
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve([])
            });
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(balance.confirmed).toBe(0.5);
            expect(mockFetch).toHaveBeenCalledTimes(3); // Tried both providers (address + tx for successful one)
        });
    });
    describe('⚡ Performance & Reliability', () => {
        test('processes large transaction lists efficiently', async () => {
            // Generate 1000 mock transactions
            const largeTxList = Array.from({ length: 1000 }, (_, i) => ({
                txid: `tx${i}`,
                status: { confirmed: i % 2 === 0, block_time: 1640995200 + i },
                vin: [],
                vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 1000000 }]
            }));
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(largeTxList)
            });
            const startTime = performance.now();
            const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            const endTime = performance.now();
            expect(transactions).toHaveLength(10); // Should limit to 10 transactions
            expect(endTime - startTime).toBeLessThan(100); // Should process quickly
        });
        test('handles concurrent API requests', async () => {
            mockFetch.mockResolvedValue({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            });
            const addresses = ['bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', 'bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq', 'bc1qzq9z3z3z3z3z3z3z3z3z3z3z3z3z3z3z3z3zjhzm5'];
            const promises = addresses.map(addr => bitcoinService.getBalance(addr));
            const results = await Promise.all(promises);
            expect(results).toHaveLength(3);
            results.forEach(balance => {
                expect(balance.confirmed).toBe(1);
            });
        });
        test('implements request rate limiting', async () => {
            mockFetch.mockResolvedValue({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            });
            // Make multiple rapid requests
            const promises = Array.from({ length: 5 }, () => bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'));
            await Promise.all(promises);
            // Should have made API calls for each request (2 calls per transaction request: address + txs)
            expect(mockFetch).toHaveBeenCalledTimes(10); // 5 requests * 2 calls each
        });
    });
    describe('🛡️ Security & Validation', () => {
        test('validates addresses before API calls', async () => {
            // Invalid address should not make API call
            const balance = await bitcoinService.getBalance('invalid-address');
            expect(balance).toEqual({
                confirmed: 0,
                unconfirmed: 0,
                total: 0,
                error: 'Invalid Bitcoin address format'
            });
            expect(mockFetch).not.toHaveBeenCalled();
        });
        test('sanitizes API responses', async () => {
            const maliciousResponse = {
                chain_stats: {
                    funded_txo_sum: '<script>alert("xss")</script>',
                    spent_txo_sum: 0
                },
                mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(maliciousResponse)
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve([])
            });
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            // Should handle malicious data gracefully
            expect(balance.confirmed).toBe(0);
            expect(balance.total).toBe(0);
        });
        test('handles API response tampering', async () => {
            const tamperedResponse = {
                chain_stats: { funded_txo_sum: Infinity, spent_txo_sum: -Infinity },
                mempool_stats: { funded_txo_sum: NaN, spent_txo_sum: null }
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(tamperedResponse)
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve([])
            });
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            // Should handle invalid numbers gracefully
            expect(balance.confirmed).toBe(0);
            expect(balance.unconfirmed).toBe(0);
            expect(balance.total).toBe(0);
        });
    });
    describe('🔄 Error Recovery', () => {
        test('retries failed requests', async () => {
            mockFetch
                .mockRejectedValueOnce(new Error('Temporary failure'))
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            })
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve([])
            });
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(balance.confirmed).toBe(1);
            expect(mockFetch).toHaveBeenCalledTimes(3); // Initial failure + second provider success (address + tx)
        });
        test('handles network timeouts', async () => {
            // Mock both providers to timeout
            mockFetch
                .mockImplementationOnce(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 100)))
                .mockImplementationOnce(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 100)));
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(balance).toEqual({
                confirmed: 0,
                unconfirmed: 0,
                total: 0,
                error: 'Timeout'
            });
        });
        test('handles malformed JSON responses', async () => {
            // Mock both providers to have JSON parsing errors
            mockFetch
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.reject(new Error('Invalid JSON'))
            })
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.reject(new Error('Invalid JSON'))
            });
            const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(balance).toEqual({
                confirmed: 0,
                unconfirmed: 0,
                total: 0,
                error: 'Invalid JSON'
            });
        });
    });
    describe('📈 Real-world Scenarios', () => {
        test('handles high-frequency trading address', async () => {
            // Simulate address with many small transactions
            const manySmallTxs = Array.from({ length: 100 }, (_, i) => ({
                txid: `small_tx_${i}`,
                status: { confirmed: true, block_time: 1640995200 + i * 600 },
                vin: [],
                vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 10000 }] // 0.0001 BTC each
            }));
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 1000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(manySmallTxs)
            });
            const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(transactions).toHaveLength(10); // Limited to 10 most recent
            expect(transactions[0].value).toBe(0.0001);
        });
        test('handles whale address with large transactions', async () => {
            const largeTx = [{
                    txid: 'whale_tx',
                    status: { confirmed: true, block_time: 1640995200 },
                    vin: [],
                    vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 1000000000000 }] // 10,000 BTC
                }];
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 1000000000000, spent_txo_sum: 0 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(largeTx)
            });
            const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(transactions).toHaveLength(1);
            expect(transactions[0].value).toBe(10000); // 10,000 BTC
        });
        test('handles exchange address with mixed transaction types', async () => {
            const mixedTxs = [
                {
                    txid: 'deposit',
                    status: { confirmed: true, block_time: 1640995200 },
                    vin: [],
                    vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 50000000 }]
                },
                {
                    txid: 'withdrawal',
                    status: { confirmed: true, block_time: 1640995800 },
                    vin: [{ prevout: { scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 30000000 } }],
                    vout: [{ scriptpubkey_address: 'bc1qother', value: 25000000 }]
                }
            ];
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    chain_stats: { funded_txo_sum: 50000000, spent_txo_sum: 25000000 },
                    mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }
                })
            }).mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve(mixedTxs)
            });
            const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4');
            expect(transactions).toHaveLength(2);
            expect(transactions[0].type).toBe('incoming');
            expect(transactions[1].type).toBe('outgoing');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3NyYy9zZXJ2aWNlcy9fX3Rlc3RzX18vYml0Y29pbi5jb21wcmVoZW5zaXZlLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQUVILHdDQUdtQjtBQUduQiwyQkFBMkI7QUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBRTNCLFFBQVEsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7SUFDNUQsSUFBSSxjQUE4QixDQUFDO0lBRW5DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDcEIsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ3JCLHNEQUFzRDtRQUN0RCxjQUFjLEdBQUcsSUFBSSx3QkFBYyxDQUFDLFNBQWdCLENBQUMsQ0FBQTtJQUN2RCxDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtZQUNyQyxNQUFNLEdBQUcsR0FBRywrREFBK0QsQ0FBQTtZQUMzRSxNQUFNLE9BQU8sR0FBRyxJQUFBLDZCQUFtQixFQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRXhDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsNENBQTRDLENBQUMsQ0FBQTtRQUNwRSxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7WUFDOUMsTUFBTSxHQUFHLEdBQUcsc0VBQXNFLENBQUE7WUFDbEYsTUFBTSxPQUFPLEdBQUcsSUFBQSw2QkFBbUIsRUFBQyxHQUFHLENBQUMsQ0FBQTtZQUV4QyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLENBQUE7UUFDNUQsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1lBQzNDLE1B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cUJBQXFCLENBQUM7Z0JBQ3ZCLEVBQUUsRUFBRSxJQUFJO2dCQUNSLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQzthQUN0QyxDQUFDLENBQUE7WUFFRixNQUFNLFlBQVksR0FBRyxNQUFNLGNBQWMsQ0FBQyxlQUFlLENBQUMsNENBQTRDLENBQUMsQ0FBQTtZQUV2RyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3BDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQzdDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQy9DLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9nL2Rldi9vcmFuZ2VjYXQvc3JjL3NlcnZpY2VzL19fdGVzdHNfXy9iaXRjb2luLmNvbXByZWhlbnNpdmUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJpdGNvaW4gU2VydmljZXMgLSBDb21wcmVoZW5zaXZlIFRlc3RzXG4gKiBcbiAqIFRlc3RpbmcgQml0Y29pbiBhZGRyZXNzIHZhbGlkYXRpb24sIHRyYW5zYWN0aW9uIHByb2Nlc3NpbmcsXG4gKiBhbmQgQVBJIGludGVncmF0aW9uIHdoaWNoIGFyZSBjcml0aWNhbCBmb3IgcGxhdGZvcm0gZnVuY3Rpb25hbGl0eS5cbiAqL1xuXG5pbXBvcnQgeyBcbiAgY2xlYW5CaXRjb2luQWRkcmVzcyxcbiAgQml0Y29pblNlcnZpY2Vcbn0gZnJvbSAnLi4vYml0Y29pbidcbmltcG9ydCB7IEJpdGNvaW5UcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzL2JpdGNvaW4nXG5cbi8vIE1vY2sgZmV0Y2ggZm9yIEFQSSBjYWxsc1xuY29uc3QgbW9ja0ZldGNoID0gamVzdC5mbigpXG5cbmRlc2NyaWJlKCfwn6qZIEJpdGNvaW4gU2VydmljZXMgLSBDb21wcmVoZW5zaXZlIENvdmVyYWdlJywgKCkgPT4ge1xuICBsZXQgYml0Y29pblNlcnZpY2U6IEJpdGNvaW5TZXJ2aWNlO1xuICBcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgICBtb2NrRmV0Y2gubW9ja0NsZWFyKClcbiAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlIHdpdGggbW9ja2VkIGZldGNoIGZvciBlYWNoIHRlc3RcbiAgICBiaXRjb2luU2VydmljZSA9IG5ldyBCaXRjb2luU2VydmljZShtb2NrRmV0Y2ggYXMgYW55KVxuICB9KVxuXG4gIGRlc2NyaWJlKCfwn6e5IEFkZHJlc3MgQ2xlYW5pbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnY2xlYW5zIEJpdGNvaW4gVVJJIGZvcm1hdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHVyaSA9ICdiaXRjb2luOmJjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0ND9hbW91bnQ9MC4xJ1xuICAgICAgY29uc3QgY2xlYW5lZCA9IGNsZWFuQml0Y29pbkFkZHJlc3ModXJpKVxuICAgICAgXG4gICAgICBleHBlY3QoY2xlYW5lZCkudG9CZSgnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICB9KVxuXG4gICAgdGVzdCgnY2xlYW5zIEJpdGNvaW4gVVJJIHdpdGggcGFyYW1ldGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHVyaSA9ICdiaXRjb2luOjFCdkJNU0VZc3RXZXRxVEZuNUF1NG00R0ZnN3hKYU5WTjI/YW1vdW50PTAuNSZsYWJlbD1kb25hdGlvbidcbiAgICAgIGNvbnN0IGNsZWFuZWQgPSBjbGVhbkJpdGNvaW5BZGRyZXNzKHVyaSlcbiAgICAgIFxuICAgICAgZXhwZWN0KGNsZWFuZWQpLnRvQmUoJzFCdkJNU0VZc3RXZXRxVEZuNUF1NG00R0ZnN3hKYU5WTjInKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdyZXR1cm5zIHBsYWluIGFkZHJlc3MgdW5jaGFuZ2VkJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWRkcmVzcyA9ICdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnXG4gICAgICBjb25zdCBjbGVhbmVkID0gY2xlYW5CaXRjb2luQWRkcmVzcyhhZGRyZXNzKVxuICAgICAgXG4gICAgICBleHBlY3QoY2xlYW5lZCkudG9CZShhZGRyZXNzKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdoYW5kbGVzIGVtcHR5IGFuZCBpbnZhbGlkIGlucHV0cycsICgpID0+IHtcbiAgICAgIGV4cGVjdChjbGVhbkJpdGNvaW5BZGRyZXNzKCcnKSkudG9CZSgnJylcbiAgICAgIGV4cGVjdChjbGVhbkJpdGNvaW5BZGRyZXNzKCdiaXRjb2luOicpKS50b0JlKCcnKVxuICAgICAgZXhwZWN0KGNsZWFuQml0Y29pbkFkZHJlc3MoJ2ludmFsaWQtaW5wdXQnKSkudG9CZSgnaW52YWxpZC1pbnB1dCcpXG4gICAgfSlcblxuICAgIHRlc3QoJ2hhbmRsZXMgY29tcGxleCBVUkkgcGFyYW1ldGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHVyaSA9ICdiaXRjb2luOjNKOTh0MVdwRVo3M0NObVF2aWVjcm55aVdybnFSaFdOTHk/YW1vdW50PTEuNSZsYWJlbD1UZXN0JTIwUGF5bWVudCZtZXNzYWdlPVRoYW5rJTIweW91J1xuICAgICAgY29uc3QgY2xlYW5lZCA9IGNsZWFuQml0Y29pbkFkZHJlc3ModXJpKVxuICAgICAgXG4gICAgICBleHBlY3QoY2xlYW5lZCkudG9CZSgnM0o5OHQxV3BFWjczQ05tUXZpZWNybnlpV3JucVJoV05MeScpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgn8J+TiiBUcmFuc2FjdGlvbiBQcm9jZXNzaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tUcmFuc2FjdGlvbkRhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIHR4aWQ6ICdhYmMxMjMnLFxuICAgICAgICBzdGF0dXM6IHsgY29uZmlybWVkOiB0cnVlLCBibG9ja190aW1lOiAxNjQwOTk1MjAwIH0sXG4gICAgICAgIHZpbjogW10sXG4gICAgICAgIHZvdXQ6IFtcbiAgICAgICAgICB7IHNjcmlwdHB1YmtleV9hZGRyZXNzOiAnYmMxcXRlc3QnLCB2YWx1ZTogNTAwMDAwMDAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eGlkOiAnZGVmNDU2JywgXG4gICAgICAgIHN0YXR1czogeyBjb25maXJtZWQ6IGZhbHNlIH0sXG4gICAgICAgIHZpbjogW1xuICAgICAgICAgIHsgcHJldm91dDogeyBzY3JpcHRwdWJrZXlfYWRkcmVzczogJ2JjMXF0ZXN0JywgdmFsdWU6IDI1MDAwMDAwIH0gfVxuICAgICAgICBdLFxuICAgICAgICB2b3V0OiBbXG4gICAgICAgICAgeyBzY3JpcHRwdWJrZXlfYWRkcmVzczogJ2JjMXFvdGhlcicsIHZhbHVlOiAyMDAwMDAwMCB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdXG5cbiAgICB0ZXN0KCdwcm9jZXNzZXMgaW5jb21pbmcgdHJhbnNhY3Rpb25zIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSAnYmMxcXRlc3QnXG4gICAgICBcbiAgICAgIC8vIEFjY2VzcyB0aGUgcHJvdmlkZXIncyBwcm9jZXNzVHJhbnNhY3Rpb25zIG1ldGhvZFxuICAgICAgY29uc3QgcHJvdmlkZXIgPSBiaXRjb2luU2VydmljZVsncHJvdmlkZXJzJ11bMF1cbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IHByb3ZpZGVyLnByb2Nlc3NUcmFuc2FjdGlvbnMobW9ja1RyYW5zYWN0aW9uRGF0YSwgYWRkcmVzcylcbiAgICAgIFxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9ucykudG9IYXZlTGVuZ3RoKDIpXG4gICAgICBcbiAgICAgIC8vIEZpcnN0IHRyYW5zYWN0aW9uIC0gaW5jb21pbmdcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbnNbMF0pLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICB0eGlkOiAnYWJjMTIzJyxcbiAgICAgICAgdHlwZTogJ2luY29taW5nJyxcbiAgICAgICAgdmFsdWU6IDAuNSwgLy8gNTBNIHNhdHMgPSAwLjUgQlRDXG4gICAgICAgIHN0YXR1czogJ2NvbmZpcm1lZCdcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIC8vIFNlY29uZCB0cmFuc2FjdGlvbiAtIG91dGdvaW5nXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb25zWzFdKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgdHhpZDogJ2RlZjQ1NicsXG4gICAgICAgIHR5cGU6ICdvdXRnb2luZycsIFxuICAgICAgICB2YWx1ZTogMC4yLCAvLyAyME0gc2F0cyBzZW50IHRvIG90aGVycyA9IDAuMiBCVENcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZydcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRlc3QoJ2hhbmRsZXMgdHJhbnNhY3Rpb25zIHdpdGggbm8gcmVsZXZhbnQgaW5wdXRzL291dHB1dHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpcnJlbGV2YW50VHggPSBbe1xuICAgICAgICB0eGlkOiAneHl6Nzg5JyxcbiAgICAgICAgc3RhdHVzOiB7IGNvbmZpcm1lZDogdHJ1ZSwgYmxvY2tfdGltZTogMTY0MDk5NTIwMCB9LFxuICAgICAgICB2aW46IFtcbiAgICAgICAgICB7IHByZXZvdXQ6IHsgc2NyaXB0cHVia2V5X2FkZHJlc3M6ICdiYzFxb3RoZXInLCB2YWx1ZTogMTAwMDAwMDAgfSB9XG4gICAgICAgIF0sXG4gICAgICAgIHZvdXQ6IFtcbiAgICAgICAgICB7IHNjcmlwdHB1YmtleV9hZGRyZXNzOiAnYmMxcWRpZmZlcmVudCcsIHZhbHVlOiA5MDAwMDAwIH1cbiAgICAgICAgXVxuICAgICAgfV1cbiAgICAgIFxuICAgICAgY29uc3QgYWRkcmVzcyA9ICdiYzFxdGVzdCdcbiAgICAgIGNvbnN0IHByb3ZpZGVyID0gYml0Y29pblNlcnZpY2VbJ3Byb3ZpZGVycyddWzBdXG4gICAgICBjb25zdCB0cmFuc2FjdGlvbnMgPSBwcm92aWRlci5wcm9jZXNzVHJhbnNhY3Rpb25zKGlycmVsZXZhbnRUeCwgYWRkcmVzcylcbiAgICAgIFxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9ucykudG9IYXZlTGVuZ3RoKDEpXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb25zWzBdLnZhbHVlKS50b0JlKDApIC8vIE5vIHZhbHVlIGZvciB0aGlzIGFkZHJlc3NcbiAgICB9KVxuXG4gICAgdGVzdCgnaGFuZGxlcyBjb25zb2xpZGF0aW9uIHRyYW5zYWN0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGlkYXRpb25UeCA9IFt7XG4gICAgICAgIHR4aWQ6ICdjb25zb2xpZGF0ZTEyMycsXG4gICAgICAgIHN0YXR1czogeyBjb25maXJtZWQ6IHRydWUsIGJsb2NrX3RpbWU6IDE2NDA5OTUyMDAgfSxcbiAgICAgICAgdmluOiBbXG4gICAgICAgICAgeyBwcmV2b3V0OiB7IHNjcmlwdHB1YmtleV9hZGRyZXNzOiAnYmMxcXRlc3QnLCB2YWx1ZTogMzAwMDAwMDAgfSB9LFxuICAgICAgICAgIHsgcHJldm91dDogeyBzY3JpcHRwdWJrZXlfYWRkcmVzczogJ2JjMXF0ZXN0JywgdmFsdWU6IDIwMDAwMDAwIH0gfVxuICAgICAgICBdLFxuICAgICAgICB2b3V0OiBbXG4gICAgICAgICAgeyBzY3JpcHRwdWJrZXlfYWRkcmVzczogJ2JjMXF0ZXN0JywgdmFsdWU6IDQ5MDAwMDAwIH0gLy8gQ29uc29saWRhdGlvbiBiYWNrIHRvIHNhbWUgYWRkcmVzc1xuICAgICAgICBdXG4gICAgICB9XVxuICAgICAgXG4gICAgICBjb25zdCBhZGRyZXNzID0gJ2JjMXF0ZXN0J1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBiaXRjb2luU2VydmljZVsncHJvdmlkZXJzJ11bMF1cbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IHByb3ZpZGVyLnByb2Nlc3NUcmFuc2FjdGlvbnMoY29uc29saWRhdGlvblR4LCBhZGRyZXNzKVxuICAgICAgXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb25zKS50b0hhdmVMZW5ndGgoMSlcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbnNbMF0udHlwZSkudG9CZSgnb3V0Z29pbmcnKVxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uc1swXS52YWx1ZSkudG9CZSgwLjUpIC8vIFRvdGFsIGlucHV0IHZhbHVlIHNob3duIGZvciBjb25zb2xpZGF0aW9uXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgn8J+MkCBBUEkgSW50ZWdyYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnZmV0Y2hlcyBiYWxhbmNlIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgY2hhaW5fc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDEwMDAwMDAwMCwgc3BlbnRfdHhvX3N1bTogNTAwMDAwMDAgfSxcbiAgICAgICAgbWVtcG9vbF9zdGF0czogeyBmdW5kZWRfdHhvX3N1bTogMTAwMDAwMDAsIHNwZW50X3R4b19zdW06IDUwMDAwMDAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrUmVzcG9uc2UpXG4gICAgICB9KS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFtdKVxuICAgICAgfSlcbiAgICAgIFxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldEJhbGFuY2UoJ2JjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0NCcpXG4gICAgICBcbiAgICAgIGV4cGVjdChiYWxhbmNlKS50b0VxdWFsKHtcbiAgICAgICAgY29uZmlybWVkOiAwLjUsIC8vICgxMDBNIC0gNTBNKSAvIDEwME0gPSAwLjUgQlRDXG4gICAgICAgIHVuY29uZmlybWVkOiAwLFxuICAgICAgICB0b3RhbDogMC41XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0ZXN0KCdoYW5kbGVzIEFQSSBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgYm90aCBwcm92aWRlcnMgdG8gZmFpbCBzbyB3ZSBnZXQgdGhlIG9yaWdpbmFsIGVycm9yXG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSlcbiAgICAgICAgLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSlcbiAgICAgIFxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldEJhbGFuY2UoJ2JjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0NCcpXG4gICAgICBcbiAgICAgIGV4cGVjdChiYWxhbmNlKS50b0VxdWFsKHtcbiAgICAgICAgY29uZmlybWVkOiAwLFxuICAgICAgICB1bmNvbmZpcm1lZDogMCxcbiAgICAgICAgdG90YWw6IDAsXG4gICAgICAgIGVycm9yOiAnTmV0d29yayBlcnJvcidcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRlc3QoJ2ZldGNoZXMgdHJhbnNhY3Rpb25zIHN1Y2Nlc3NmdWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tUeERhdGEgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eGlkOiAndHgxMjMnLFxuICAgICAgICAgIHN0YXR1czogeyBjb25maXJtZWQ6IHRydWUsIGJsb2NrX3RpbWU6IDE2NDA5OTUyMDAgfSxcbiAgICAgICAgICB2aW46IFtdLFxuICAgICAgICAgIHZvdXQ6IFt7IHNjcmlwdHB1YmtleV9hZGRyZXNzOiAnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JywgdmFsdWU6IDEwMDAwMDAwMCB9XVxuICAgICAgICB9XG4gICAgICBdXG4gICAgICBcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBjaGFpbl9zdGF0czogeyBmdW5kZWRfdHhvX3N1bTogMTAwMDAwMDAwLCBzcGVudF90eG9fc3VtOiAwIH0sXG4gICAgICAgICAgbWVtcG9vbF9zdGF0czogeyBmdW5kZWRfdHhvX3N1bTogMCwgc3BlbnRfdHhvX3N1bTogMCB9XG4gICAgICAgIH0pXG4gICAgICB9KS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG1vY2tUeERhdGEpXG4gICAgICB9KVxuICAgICAgXG4gICAgICByZXR1cm4gYml0Y29pblNlcnZpY2UuZ2V0VHJhbnNhY3Rpb25zKCdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnKS50aGVuKHRyYW5zYWN0aW9ucyA9PiB7XG4gICAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbnMpLnRvSGF2ZUxlbmd0aCgxKVxuICAgICAgICBleHBlY3QodHJhbnNhY3Rpb25zWzBdKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgICB0eGlkOiAndHgxMjMnLFxuICAgICAgICAgIHR5cGU6ICdpbmNvbWluZycsXG4gICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgc3RhdHVzOiAnY29uZmlybWVkJ1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGVzdCgnaGFuZGxlcyB0cmFuc2FjdGlvbiBBUEkgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBib3RoIHByb3ZpZGVycyB0byBmYWlsXG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0FQSSBlcnJvcicpKVxuICAgICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignQVBJIGVycm9yJykpXG4gICAgICBcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldFRyYW5zYWN0aW9ucygnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICAgIFxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9ucykudG9FcXVhbChbXSlcbiAgICB9KVxuXG4gICAgdGVzdCgnZmFsbHMgYmFjayB0byBzZWNvbmRhcnkgQVBJIHByb3ZpZGVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gRmlyc3QgQVBJIGNhbGwgZmFpbHNcbiAgICAgIG1vY2tGZXRjaFxuICAgICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignUHJpbWFyeSBBUEkgZG93bicpKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgY2hhaW5fc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDUwMDAwMDAwLCBzcGVudF90eG9fc3VtOiAwIH0sXG4gICAgICAgICAgICBtZW1wb29sX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAwLCBzcGVudF90eG9fc3VtOiAwIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pXG4gICAgICAgIH0pXG4gICAgICBcbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBiaXRjb2luU2VydmljZS5nZXRCYWxhbmNlKCdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnKVxuICAgICAgXG4gICAgICBleHBlY3QoYmFsYW5jZS5jb25maXJtZWQpLnRvQmUoMC41KVxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpIC8vIFRyaWVkIGJvdGggcHJvdmlkZXJzIChhZGRyZXNzICsgdHggZm9yIHN1Y2Nlc3NmdWwgb25lKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ+KaoSBQZXJmb3JtYW5jZSAmIFJlbGlhYmlsaXR5JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Byb2Nlc3NlcyBsYXJnZSB0cmFuc2FjdGlvbiBsaXN0cyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEdlbmVyYXRlIDEwMDAgbW9jayB0cmFuc2FjdGlvbnNcbiAgICAgIGNvbnN0IGxhcmdlVHhMaXN0ID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgdHhpZDogYHR4JHtpfWAsXG4gICAgICAgIHN0YXR1czogeyBjb25maXJtZWQ6IGkgJSAyID09PSAwLCBibG9ja190aW1lOiAxNjQwOTk1MjAwICsgaSB9LFxuICAgICAgICB2aW46IFtdLFxuICAgICAgICB2b3V0OiBbeyBzY3JpcHRwdWJrZXlfYWRkcmVzczogJ2JjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0NCcsIHZhbHVlOiAxMDAwMDAwIH1dXG4gICAgICB9KSlcbiAgICAgIFxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIGNoYWluX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAxMDAwMDAwMDAsIHNwZW50X3R4b19zdW06IDAgfSxcbiAgICAgICAgICBtZW1wb29sX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAwLCBzcGVudF90eG9fc3VtOiAwIH1cbiAgICAgICAgfSlcbiAgICAgIH0pLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUobGFyZ2VUeExpc3QpXG4gICAgICB9KVxuICAgICAgXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgY29uc3QgdHJhbnNhY3Rpb25zID0gYXdhaXQgYml0Y29pblNlcnZpY2UuZ2V0VHJhbnNhY3Rpb25zKCdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnKVxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbnMpLnRvSGF2ZUxlbmd0aCgxMCkgLy8gU2hvdWxkIGxpbWl0IHRvIDEwIHRyYW5zYWN0aW9uc1xuICAgICAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigxMDApIC8vIFNob3VsZCBwcm9jZXNzIHF1aWNrbHlcbiAgICB9KVxuXG4gICAgdGVzdCgnaGFuZGxlcyBjb25jdXJyZW50IEFQSSByZXF1ZXN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIGNoYWluX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAxMDAwMDAwMDAsIHNwZW50X3R4b19zdW06IDAgfSxcbiAgICAgICAgICBtZW1wb29sX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAwLCBzcGVudF90eG9fc3VtOiAwIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IFsnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JywgJ2JjMXFhcjBzcnJyN3hma3Z5NWw2NDNseWRudzlyZTU5Z3R6endmNW1kcScsICdiYzFxenE5ejN6M3ozejN6M3ozejN6M3ozejN6M3ozejN6M3ozejN6amh6bTUnXVxuICAgICAgXG4gICAgICBjb25zdCBwcm9taXNlcyA9IGFkZHJlc3Nlcy5tYXAoYWRkciA9PiBiaXRjb2luU2VydmljZS5nZXRCYWxhbmNlKGFkZHIpKVxuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0cykudG9IYXZlTGVuZ3RoKDMpXG4gICAgICByZXN1bHRzLmZvckVhY2goYmFsYW5jZSA9PiB7XG4gICAgICAgIGV4cGVjdChiYWxhbmNlLmNvbmZpcm1lZCkudG9CZSgxKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGVzdCgnaW1wbGVtZW50cyByZXF1ZXN0IHJhdGUgbGltaXRpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBjaGFpbl9zdGF0czogeyBmdW5kZWRfdHhvX3N1bTogMTAwMDAwMDAwLCBzcGVudF90eG9fc3VtOiAwIH0sXG4gICAgICAgICAgbWVtcG9vbF9zdGF0czogeyBmdW5kZWRfdHhvX3N1bTogMCwgc3BlbnRfdHhvX3N1bTogMCB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBNYWtlIG11bHRpcGxlIHJhcGlkIHJlcXVlc3RzXG4gICAgICBjb25zdCBwcm9taXNlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKCkgPT4gXG4gICAgICAgIGJpdGNvaW5TZXJ2aWNlLmdldFRyYW5zYWN0aW9ucygnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICAgIClcbiAgICAgIFxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBoYXZlIG1hZGUgQVBJIGNhbGxzIGZvciBlYWNoIHJlcXVlc3QgKDIgY2FsbHMgcGVyIHRyYW5zYWN0aW9uIHJlcXVlc3Q6IGFkZHJlc3MgKyB0eHMpXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMTApIC8vIDUgcmVxdWVzdHMgKiAyIGNhbGxzIGVhY2hcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCfwn5uh77iPIFNlY3VyaXR5ICYgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCd2YWxpZGF0ZXMgYWRkcmVzc2VzIGJlZm9yZSBBUEkgY2FsbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBJbnZhbGlkIGFkZHJlc3Mgc2hvdWxkIG5vdCBtYWtlIEFQSSBjYWxsXG4gICAgICBjb25zdCBiYWxhbmNlID0gYXdhaXQgYml0Y29pblNlcnZpY2UuZ2V0QmFsYW5jZSgnaW52YWxpZC1hZGRyZXNzJylcbiAgICAgIFxuICAgICAgZXhwZWN0KGJhbGFuY2UpLnRvRXF1YWwoe1xuICAgICAgICBjb25maXJtZWQ6IDAsXG4gICAgICAgIHVuY29uZmlybWVkOiAwLFxuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgZXJyb3I6ICdJbnZhbGlkIEJpdGNvaW4gYWRkcmVzcyBmb3JtYXQnXG4gICAgICB9KVxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzYW5pdGl6ZXMgQVBJIHJlc3BvbnNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1hbGljaW91c1Jlc3BvbnNlID0ge1xuICAgICAgICBjaGFpbl9zdGF0czogeyBcbiAgICAgICAgICBmdW5kZWRfdHhvX3N1bTogJzxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD4nLFxuICAgICAgICAgIHNwZW50X3R4b19zdW06IDAgXG4gICAgICAgIH0sXG4gICAgICAgIG1lbXBvb2xfc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDAsIHNwZW50X3R4b19zdW06IDAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZShtYWxpY2lvdXNSZXNwb25zZSlcbiAgICAgIH0pLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pXG4gICAgICB9KVxuICAgICAgXG4gICAgICBjb25zdCBiYWxhbmNlID0gYXdhaXQgYml0Y29pblNlcnZpY2UuZ2V0QmFsYW5jZSgnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIGhhbmRsZSBtYWxpY2lvdXMgZGF0YSBncmFjZWZ1bGx5XG4gICAgICBleHBlY3QoYmFsYW5jZS5jb25maXJtZWQpLnRvQmUoMClcbiAgICAgIGV4cGVjdChiYWxhbmNlLnRvdGFsKS50b0JlKDApXG4gICAgfSlcblxuICAgIHRlc3QoJ2hhbmRsZXMgQVBJIHJlc3BvbnNlIHRhbXBlcmluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRhbXBlcmVkUmVzcG9uc2UgPSB7XG4gICAgICAgIGNoYWluX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiBJbmZpbml0eSwgc3BlbnRfdHhvX3N1bTogLUluZmluaXR5IH0sXG4gICAgICAgIG1lbXBvb2xfc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IE5hTiwgc3BlbnRfdHhvX3N1bTogbnVsbCB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRhbXBlcmVkUmVzcG9uc2UpXG4gICAgICB9KS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFtdKVxuICAgICAgfSlcbiAgICAgIFxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldEJhbGFuY2UoJ2JjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0NCcpXG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgaW52YWxpZCBudW1iZXJzIGdyYWNlZnVsbHlcbiAgICAgIGV4cGVjdChiYWxhbmNlLmNvbmZpcm1lZCkudG9CZSgwKVxuICAgICAgZXhwZWN0KGJhbGFuY2UudW5jb25maXJtZWQpLnRvQmUoMClcbiAgICAgIGV4cGVjdChiYWxhbmNlLnRvdGFsKS50b0JlKDApXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgn8J+UhCBFcnJvciBSZWNvdmVyeScsICgpID0+IHtcbiAgICB0ZXN0KCdyZXRyaWVzIGZhaWxlZCByZXF1ZXN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaFxuICAgICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignVGVtcG9yYXJ5IGZhaWx1cmUnKSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIGNoYWluX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAxMDAwMDAwMDAsIHNwZW50X3R4b19zdW06IDAgfSxcbiAgICAgICAgICAgIG1lbXBvb2xfc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDAsIHNwZW50X3R4b19zdW06IDAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZShbXSlcbiAgICAgICAgfSlcbiAgICAgIFxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldEJhbGFuY2UoJ2JjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0NCcpXG4gICAgICBcbiAgICAgIGV4cGVjdChiYWxhbmNlLmNvbmZpcm1lZCkudG9CZSgxKVxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpIC8vIEluaXRpYWwgZmFpbHVyZSArIHNlY29uZCBwcm92aWRlciBzdWNjZXNzIChhZGRyZXNzICsgdHgpXG4gICAgfSlcblxuICAgIHRlc3QoJ2hhbmRsZXMgbmV0d29yayB0aW1lb3V0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgYm90aCBwcm92aWRlcnMgdG8gdGltZW91dFxuICAgICAgbW9ja0ZldGNoXG4gICAgICAgIC5tb2NrSW1wbGVtZW50YXRpb25PbmNlKCgpID0+IFxuICAgICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdUaW1lb3V0JykpLCAxMDApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIC5tb2NrSW1wbGVtZW50YXRpb25PbmNlKCgpID0+IFxuICAgICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdUaW1lb3V0JykpLCAxMDApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICBcbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBiaXRjb2luU2VydmljZS5nZXRCYWxhbmNlKCdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnKVxuICAgICAgXG4gICAgICBleHBlY3QoYmFsYW5jZSkudG9FcXVhbCh7XG4gICAgICAgIGNvbmZpcm1lZDogMCxcbiAgICAgICAgdW5jb25maXJtZWQ6IDAsXG4gICAgICAgIHRvdGFsOiAwLFxuICAgICAgICBlcnJvcjogJ1RpbWVvdXQnXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0ZXN0KCdoYW5kbGVzIG1hbGZvcm1lZCBKU09OIHJlc3BvbnNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgYm90aCBwcm92aWRlcnMgdG8gaGF2ZSBKU09OIHBhcnNpbmcgZXJyb3JzXG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIEpTT04nKSlcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIEpTT04nKSlcbiAgICAgICAgfSlcbiAgICAgIFxuICAgICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldEJhbGFuY2UoJ2JjMXF3NTA4ZDZxZWp4dGRnNHk1cjN6YXJ2YXJ5MGM1eHc3a3Y4ZjN0NCcpXG4gICAgICBcbiAgICAgIGV4cGVjdChiYWxhbmNlKS50b0VxdWFsKHtcbiAgICAgICAgY29uZmlybWVkOiAwLFxuICAgICAgICB1bmNvbmZpcm1lZDogMCxcbiAgICAgICAgdG90YWw6IDAsXG4gICAgICAgIGVycm9yOiAnSW52YWxpZCBKU09OJ1xuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCfwn5OIIFJlYWwtd29ybGQgU2NlbmFyaW9zJywgKCkgPT4ge1xuICAgIHRlc3QoJ2hhbmRsZXMgaGlnaC1mcmVxdWVuY3kgdHJhZGluZyBhZGRyZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhdGUgYWRkcmVzcyB3aXRoIG1hbnkgc21hbGwgdHJhbnNhY3Rpb25zXG4gICAgICBjb25zdCBtYW55U21hbGxUeHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMDAgfSwgKF8sIGkpID0+ICh7XG4gICAgICAgIHR4aWQ6IGBzbWFsbF90eF8ke2l9YCxcbiAgICAgICAgc3RhdHVzOiB7IGNvbmZpcm1lZDogdHJ1ZSwgYmxvY2tfdGltZTogMTY0MDk5NTIwMCArIGkgKiA2MDAgfSxcbiAgICAgICAgdmluOiBbXSxcbiAgICAgICAgdm91dDogW3sgc2NyaXB0cHVia2V5X2FkZHJlc3M6ICdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnLCB2YWx1ZTogMTAwMDAgfV0gLy8gMC4wMDAxIEJUQyBlYWNoXG4gICAgICB9KSlcbiAgICAgIFxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIGNoYWluX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAxMDAwMDAwLCBzcGVudF90eG9fc3VtOiAwIH0sXG4gICAgICAgICAgbWVtcG9vbF9zdGF0czogeyBmdW5kZWRfdHhvX3N1bTogMCwgc3BlbnRfdHhvX3N1bTogMCB9XG4gICAgICAgIH0pXG4gICAgICB9KS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG1hbnlTbWFsbFR4cylcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldFRyYW5zYWN0aW9ucygnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICAgIFxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9ucykudG9IYXZlTGVuZ3RoKDEwKSAvLyBMaW1pdGVkIHRvIDEwIG1vc3QgcmVjZW50XG4gICAgICBleHBlY3QodHJhbnNhY3Rpb25zWzBdLnZhbHVlKS50b0JlKDAuMDAwMSlcbiAgICB9KVxuXG4gICAgdGVzdCgnaGFuZGxlcyB3aGFsZSBhZGRyZXNzIHdpdGggbGFyZ2UgdHJhbnNhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VUeCA9IFt7XG4gICAgICAgIHR4aWQ6ICd3aGFsZV90eCcsXG4gICAgICAgIHN0YXR1czogeyBjb25maXJtZWQ6IHRydWUsIGJsb2NrX3RpbWU6IDE2NDA5OTUyMDAgfSxcbiAgICAgICAgdmluOiBbXSxcbiAgICAgICAgdm91dDogW3sgc2NyaXB0cHVia2V5X2FkZHJlc3M6ICdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnLCB2YWx1ZTogMTAwMDAwMDAwMDAwMCB9XSAvLyAxMCwwMDAgQlRDXG4gICAgICB9XVxuICAgICAgXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgY2hhaW5fc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDEwMDAwMDAwMDAwMDAsIHNwZW50X3R4b19zdW06IDAgfSxcbiAgICAgICAgICBtZW1wb29sX3N0YXRzOiB7IGZ1bmRlZF90eG9fc3VtOiAwLCBzcGVudF90eG9fc3VtOiAwIH1cbiAgICAgICAgfSlcbiAgICAgIH0pLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUobGFyZ2VUeClcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldFRyYW5zYWN0aW9ucygnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICAgIFxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9ucykudG9IYXZlTGVuZ3RoKDEpXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb25zWzBdLnZhbHVlKS50b0JlKDEwMDAwKSAvLyAxMCwwMDAgQlRDXG4gICAgfSlcblxuICAgIHRlc3QoJ2hhbmRsZXMgZXhjaGFuZ2UgYWRkcmVzcyB3aXRoIG1peGVkIHRyYW5zYWN0aW9uIHR5cGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWl4ZWRUeHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eGlkOiAnZGVwb3NpdCcsXG4gICAgICAgICAgc3RhdHVzOiB7IGNvbmZpcm1lZDogdHJ1ZSwgYmxvY2tfdGltZTogMTY0MDk5NTIwMCB9LFxuICAgICAgICAgIHZpbjogW10sXG4gICAgICAgICAgdm91dDogW3sgc2NyaXB0cHVia2V5X2FkZHJlc3M6ICdiYzFxdzUwOGQ2cWVqeHRkZzR5NXIzemFydmFyeTBjNXh3N2t2OGYzdDQnLCB2YWx1ZTogNTAwMDAwMDAgfV1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR4aWQ6ICd3aXRoZHJhd2FsJyxcbiAgICAgICAgICBzdGF0dXM6IHsgY29uZmlybWVkOiB0cnVlLCBibG9ja190aW1lOiAxNjQwOTk1ODAwIH0sXG4gICAgICAgICAgdmluOiBbeyBwcmV2b3V0OiB7IHNjcmlwdHB1YmtleV9hZGRyZXNzOiAnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JywgdmFsdWU6IDMwMDAwMDAwIH0gfV0sXG4gICAgICAgICAgdm91dDogW3sgc2NyaXB0cHVia2V5X2FkZHJlc3M6ICdiYzFxb3RoZXInLCB2YWx1ZTogMjUwMDAwMDAgfV1cbiAgICAgICAgfVxuICAgICAgXVxuICAgICAgXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgY2hhaW5fc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDUwMDAwMDAwLCBzcGVudF90eG9fc3VtOiAyNTAwMDAwMCB9LFxuICAgICAgICAgIG1lbXBvb2xfc3RhdHM6IHsgZnVuZGVkX3R4b19zdW06IDAsIHNwZW50X3R4b19zdW06IDAgfVxuICAgICAgICB9KVxuICAgICAgfSkubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZShtaXhlZFR4cylcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGF3YWl0IGJpdGNvaW5TZXJ2aWNlLmdldFRyYW5zYWN0aW9ucygnYmMxcXc1MDhkNnFlanh0ZGc0eTVyM3phcnZhcnkwYzV4dzdrdjhmM3Q0JylcbiAgICAgIFxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9ucykudG9IYXZlTGVuZ3RoKDIpXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb25zWzBdLnR5cGUpLnRvQmUoJ2luY29taW5nJylcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbnNbMV0udHlwZSkudG9CZSgnb3V0Z29pbmcnKVxuICAgIH0pXG4gIH0pXG59KSAiXSwidmVyc2lvbiI6M30=