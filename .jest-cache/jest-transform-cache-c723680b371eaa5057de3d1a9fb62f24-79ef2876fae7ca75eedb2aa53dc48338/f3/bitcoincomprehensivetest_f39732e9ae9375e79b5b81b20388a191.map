{"file":"/home/g/dev/orangecat/src/services/__tests__/bitcoin.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/bitcoin.comprehensive.test.ts"],"sourcesContent":["/**\n * Bitcoin Services - Comprehensive Tests\n * \n * Testing Bitcoin address validation, transaction processing,\n * and API integration which are critical for platform functionality.\n */\n\nimport { \n  cleanBitcoinAddress,\n  BitcoinService\n} from '../bitcoin'\nimport { BitcoinTransaction } from '../../types/bitcoin'\n\n// Mock fetch for API calls\nconst mockFetch = jest.fn()\n\ndescribe('🪙 Bitcoin Services - Comprehensive Coverage', () => {\n  let bitcoinService: BitcoinService;\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFetch.mockClear()\n    // Create new instance with mocked fetch for each test\n    bitcoinService = new BitcoinService(mockFetch as any)\n  })\n\n  describe('🧹 Address Cleaning', () => {\n    test('cleans Bitcoin URI format', () => {\n      const uri = 'bitcoin:bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4?amount=0.1'\n      const cleaned = cleanBitcoinAddress(uri)\n      \n      expect(cleaned).toBe('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n\n    test('cleans Bitcoin URI with parameters', () => {\n      const uri = 'bitcoin:1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2?amount=0.5&label=donation'\n      const cleaned = cleanBitcoinAddress(uri)\n      \n      expect(cleaned).toBe('1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2')\n    })\n\n    test('returns plain address unchanged', () => {\n      const address = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'\n      const cleaned = cleanBitcoinAddress(address)\n      \n      expect(cleaned).toBe(address)\n    })\n\n    test('handles empty and invalid inputs', () => {\n      expect(cleanBitcoinAddress('')).toBe('')\n      expect(cleanBitcoinAddress('bitcoin:')).toBe('')\n      expect(cleanBitcoinAddress('invalid-input')).toBe('invalid-input')\n    })\n\n    test('handles complex URI parameters', () => {\n      const uri = 'bitcoin:3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy?amount=1.5&label=Test%20Payment&message=Thank%20you'\n      const cleaned = cleanBitcoinAddress(uri)\n      \n      expect(cleaned).toBe('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n    })\n  })\n\n  describe('📊 Transaction Processing', () => {\n    const mockTransactionData = [\n      {\n        txid: 'abc123',\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [],\n        vout: [\n          { scriptpubkey_address: 'bc1qtest', value: 50000000 }\n        ]\n      },\n      {\n        txid: 'def456', \n        status: { confirmed: false },\n        vin: [\n          { prevout: { scriptpubkey_address: 'bc1qtest', value: 25000000 } }\n        ],\n        vout: [\n          { scriptpubkey_address: 'bc1qother', value: 20000000 }\n        ]\n      }\n    ]\n\n    test('processes incoming transactions correctly', () => {\n      const address = 'bc1qtest'\n      \n      // Access the provider's processTransactions method\n      const provider = bitcoinService['providers'][0]\n      const transactions = provider.processTransactions(mockTransactionData, address)\n      \n      expect(transactions).toHaveLength(2)\n      \n      // First transaction - incoming\n      expect(transactions[0]).toMatchObject({\n        txid: 'abc123',\n        type: 'incoming',\n        value: 0.5, // 50M sats = 0.5 BTC\n        status: 'confirmed'\n      })\n      \n      // Second transaction - outgoing\n      expect(transactions[1]).toMatchObject({\n        txid: 'def456',\n        type: 'outgoing', \n        value: 0.2, // 20M sats sent to others = 0.2 BTC\n        status: 'pending'\n      })\n    })\n\n    test('handles transactions with no relevant inputs/outputs', () => {\n      const irrelevantTx = [{\n        txid: 'xyz789',\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [\n          { prevout: { scriptpubkey_address: 'bc1qother', value: 10000000 } }\n        ],\n        vout: [\n          { scriptpubkey_address: 'bc1qdifferent', value: 9000000 }\n        ]\n      }]\n      \n      const address = 'bc1qtest'\n      const provider = bitcoinService['providers'][0]\n      const transactions = provider.processTransactions(irrelevantTx, address)\n      \n      expect(transactions).toHaveLength(1)\n      expect(transactions[0].value).toBe(0) // No value for this address\n    })\n\n    test('handles consolidation transactions', () => {\n      const consolidationTx = [{\n        txid: 'consolidate123',\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [\n          { prevout: { scriptpubkey_address: 'bc1qtest', value: 30000000 } },\n          { prevout: { scriptpubkey_address: 'bc1qtest', value: 20000000 } }\n        ],\n        vout: [\n          { scriptpubkey_address: 'bc1qtest', value: 49000000 } // Consolidation back to same address\n        ]\n      }]\n      \n      const address = 'bc1qtest'\n      const provider = bitcoinService['providers'][0]\n      const transactions = provider.processTransactions(consolidationTx, address)\n      \n      expect(transactions).toHaveLength(1)\n      expect(transactions[0].type).toBe('outgoing')\n      expect(transactions[0].value).toBe(0.5) // Total input value shown for consolidation\n    })\n  })\n\n  describe('🌐 API Integration', () => {\n    test('fetches balance successfully', async () => {\n      const mockResponse = {\n        chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 50000000 },\n        mempool_stats: { funded_txo_sum: 10000000, spent_txo_sum: 5000000 }\n      }\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockResponse)\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve([])\n      })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance).toEqual({\n        confirmed: 0.5, // (100M - 50M) / 100M = 0.5 BTC\n        unconfirmed: 0,\n        total: 0.5\n      })\n    })\n\n    test('handles API errors gracefully', async () => {\n      // Mock both providers to fail so we get the original error\n      mockFetch\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance).toEqual({\n        confirmed: 0,\n        unconfirmed: 0,\n        total: 0,\n        error: 'Network error'\n      })\n    })\n\n    test('fetches transactions successfully', () => {\n      const mockTxData = [\n        {\n          txid: 'tx123',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [],\n          vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 100000000 }]\n        }\n      ]\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockTxData)\n      })\n      \n      return bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4').then(transactions => {\n        expect(transactions).toHaveLength(1)\n        expect(transactions[0]).toMatchObject({\n          txid: 'tx123',\n          type: 'incoming',\n          value: 1,\n          status: 'confirmed'\n        })\n      })\n    })\n\n    test('handles transaction API errors', async () => {\n      // Mock both providers to fail\n      mockFetch\n        .mockRejectedValueOnce(new Error('API error'))\n        .mockRejectedValueOnce(new Error('API error'))\n      \n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toEqual([])\n    })\n\n    test('falls back to secondary API provider', async () => {\n      // First API call fails\n      mockFetch\n        .mockRejectedValueOnce(new Error('Primary API down'))\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 50000000, spent_txo_sum: 0 },\n            mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0.5)\n      expect(mockFetch).toHaveBeenCalledTimes(3) // Tried both providers (address + tx for successful one)\n    })\n  })\n\n  describe('⚡ Performance & Reliability', () => {\n    test('processes large transaction lists efficiently', async () => {\n      // Generate 1000 mock transactions\n      const largeTxList = Array.from({ length: 1000 }, (_, i) => ({\n        txid: `tx${i}`,\n        status: { confirmed: i % 2 === 0, block_time: 1640995200 + i },\n        vin: [],\n        vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 1000000 }]\n      }))\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(largeTxList)\n      })\n      \n      const startTime = performance.now()\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      const endTime = performance.now()\n      \n      expect(transactions).toHaveLength(10) // Should limit to 10 transactions\n      expect(endTime - startTime).toBeLessThan(100) // Should process quickly\n    })\n\n    test('handles concurrent API requests', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      })\n      \n      const addresses = ['bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', 'bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq', 'bc1qzq9z3z3z3z3z3z3z3z3z3z3z3z3z3z3z3z3zjhzm5']\n      \n      const promises = addresses.map(addr => bitcoinService.getBalance(addr))\n      const results = await Promise.all(promises)\n      \n      expect(results).toHaveLength(3)\n      results.forEach(balance => {\n        expect(balance.confirmed).toBe(1)\n      })\n    })\n\n    test('implements request rate limiting', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      })\n      \n      // Make multiple rapid requests\n      const promises = Array.from({ length: 5 }, () => \n        bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      )\n      \n      await Promise.all(promises)\n      \n      // Should have made API calls for each request (2 calls per transaction request: address + txs)\n      expect(mockFetch).toHaveBeenCalledTimes(10) // 5 requests * 2 calls each\n    })\n  })\n\n  describe('🛡️ Security & Validation', () => {\n    test('validates addresses before API calls', async () => {\n      // Invalid address should not make API call\n      const balance = await bitcoinService.getBalance('invalid-address')\n      \n      expect(balance).toEqual({\n        confirmed: 0,\n        unconfirmed: 0,\n        total: 0,\n        error: 'Invalid Bitcoin address format'\n      })\n      expect(mockFetch).not.toHaveBeenCalled()\n    })\n\n    test('sanitizes API responses', async () => {\n      const maliciousResponse = {\n        chain_stats: { \n          funded_txo_sum: '<script>alert(\"xss\")</script>',\n          spent_txo_sum: 0 \n        },\n        mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n      }\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(maliciousResponse)\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve([])\n      })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      // Should handle malicious data gracefully\n      expect(balance.confirmed).toBe(0)\n      expect(balance.total).toBe(0)\n    })\n\n    test('handles API response tampering', async () => {\n      const tamperedResponse = {\n        chain_stats: { funded_txo_sum: Infinity, spent_txo_sum: -Infinity },\n        mempool_stats: { funded_txo_sum: NaN, spent_txo_sum: null }\n      }\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(tamperedResponse)\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve([])\n      })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      // Should handle invalid numbers gracefully\n      expect(balance.confirmed).toBe(0)\n      expect(balance.unconfirmed).toBe(0)\n      expect(balance.total).toBe(0)\n    })\n  })\n\n  describe('🔄 Error Recovery', () => {\n    test('retries failed requests', async () => {\n      mockFetch\n        .mockRejectedValueOnce(new Error('Temporary failure'))\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({\n            chain_stats: { funded_txo_sum: 100000000, spent_txo_sum: 0 },\n            mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(1)\n      expect(mockFetch).toHaveBeenCalledTimes(3) // Initial failure + second provider success (address + tx)\n    })\n\n    test('handles network timeouts', async () => {\n      // Mock both providers to timeout\n      mockFetch\n        .mockImplementationOnce(() => \n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Timeout')), 100)\n          )\n        )\n        .mockImplementationOnce(() => \n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Timeout')), 100)\n          )\n        )\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance).toEqual({\n        confirmed: 0,\n        unconfirmed: 0,\n        total: 0,\n        error: 'Timeout'\n      })\n    })\n\n    test('handles malformed JSON responses', async () => {\n      // Mock both providers to have JSON parsing errors\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.reject(new Error('Invalid JSON'))\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.reject(new Error('Invalid JSON'))\n        })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance).toEqual({\n        confirmed: 0,\n        unconfirmed: 0,\n        total: 0,\n        error: 'Invalid JSON'\n      })\n    })\n  })\n\n  describe('📈 Real-world Scenarios', () => {\n    test('handles high-frequency trading address', async () => {\n      // Simulate address with many small transactions\n      const manySmallTxs = Array.from({ length: 100 }, (_, i) => ({\n        txid: `small_tx_${i}`,\n        status: { confirmed: true, block_time: 1640995200 + i * 600 },\n        vin: [],\n        vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 10000 }] // 0.0001 BTC each\n      }))\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 1000000, spent_txo_sum: 0 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(manySmallTxs)\n      })\n      \n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toHaveLength(10) // Limited to 10 most recent\n      expect(transactions[0].value).toBe(0.0001)\n    })\n\n    test('handles whale address with large transactions', async () => {\n      const largeTx = [{\n        txid: 'whale_tx',\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [],\n        vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 1000000000000 }] // 10,000 BTC\n      }]\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 1000000000000, spent_txo_sum: 0 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(largeTx)\n      })\n      \n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toHaveLength(1)\n      expect(transactions[0].value).toBe(10000) // 10,000 BTC\n    })\n\n    test('handles exchange address with mixed transaction types', async () => {\n      const mixedTxs = [\n        {\n          txid: 'deposit',\n          status: { confirmed: true, block_time: 1640995200 },\n          vin: [],\n          vout: [{ scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 50000000 }]\n        },\n        {\n          txid: 'withdrawal',\n          status: { confirmed: true, block_time: 1640995800 },\n          vin: [{ prevout: { scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', value: 30000000 } }],\n          vout: [{ scriptpubkey_address: 'bc1qother', value: 25000000 }]\n        }\n      ]\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          chain_stats: { funded_txo_sum: 50000000, spent_txo_sum: 25000000 },\n          mempool_stats: { funded_txo_sum: 0, spent_txo_sum: 0 }\n        })\n      }).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mixedTxs)\n      })\n      \n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toHaveLength(2)\n      expect(transactions[0].type).toBe('incoming')\n      expect(transactions[1].type).toBe('outgoing')\n    })\n  })\n}) "],"version":3}