{"file":"/home/g/dev/orangecat/src/services/supabase/__tests__/associations.quick-fix.test.ts","mappings":";AAAA;;;;GAIG;;;;;AAIH,oFAAoF;AACpF,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC/B,MAAM,YAAY,GAAG;QACnB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAChC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE;YACJ,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB;KACF,CAAA;IACD,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAA;AACnC,CAAC,CAAC,CAAA;AAMF,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC;IACjC,MAAM,EAAE;QACN,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB;CACF,CAAC,CAAC,CAAA;AA3BH,mEAAgD;AAkBhD,uDAAuD;AACvD,8DAA8D;AAC9D,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;AAS5D,QAAQ,CAAC,iDAAiD,EAAE,GAAG,EAAE;IAE/D,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;QAEpB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAC1C,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE;YACtC,KAAK,EAAE,IAAI;SACZ,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC1D,MAAM,CAAC,sBAAkB,CAAC,CAAC,WAAW,EAAE,CAAA;QACxC,MAAM,CAAC,OAAO,sBAAkB,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACpE,MAAM,CAAC,OAAO,sBAAkB,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAC3E,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,eAAe,GAAG;YACtB,EAAE,EAAE,SAAS;YACb,iBAAiB,EAAE,cAAc;YACjC,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,UAAU;YAC9B,iBAAiB,EAAE,SAAS;YAC5B,MAAM,EAAE,QAAQ;YAChB,iBAAiB,EAAE,CAAC;YACpB,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,QAAQ;YACpB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,OAAO,EAAE,CAAC;SACX,CAAA;QAED,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC;YACpC,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,IAAI;SACZ,CAAC,CAAA;QAEF,MAAM,MAAM,GAAG,MAAM,sBAAkB,CAAC,iBAAiB,CAAC;YACxD,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,UAAU;YAC9B,iBAAiB,EAAE,SAAS;SAC7B,CAAC,CAAA;QAEF,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAA;QAC5B,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAA;IACxE,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,kBAAkB,GAAG;YACzB,EAAE,EAAE,iBAAiB;YACrB,iBAAiB,EAAE,cAAc;YACjC,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,UAAU;YAC9B,iBAAiB,EAAE,UAAU;YAC7B,sBAAsB,EAAE,gBAAgB;YACxC,iBAAiB,EAAE,GAAG;YACtB,MAAM,EAAE,QAAQ;YAChB,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,QAAQ;YACpB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,OAAO,EAAE,CAAC;SACX,CAAA;QAED,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC;YACpC,IAAI,EAAE,kBAAkB;YACxB,KAAK,EAAE,IAAI;SACZ,CAAC,CAAA;QAEF,MAAM,MAAM,GAAG,MAAM,sBAAkB,CAAC,iBAAiB,CAAC;YACxD,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,UAAU;YAC9B,iBAAiB,EAAE,UAAU;YAC7B,sBAAsB,EAAE,gBAAgB;YACxC,iBAAiB,EAAE,GAAG;SACvB,CAAC,CAAA;QAEF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC5D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC,CAAA","names":[],"sources":["/home/g/dev/orangecat/src/services/supabase/__tests__/associations.quick-fix.test.ts"],"sourcesContent":["/**\n * ðŸš€ ASSOCIATION SYSTEM - QUICK VERIFICATION TESTS\n * \n * Simple tests to verify the association system deployment works correctly\n */\n\nimport AssociationService from '../associations'\n\n// Mock the supabase client inline within jest.mock factory to avoid hoisting issues\njest.mock('../core/client', () => {\n  const mockSupabase = {\n    from: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    order: jest.fn().mockReturnThis(),\n    single: jest.fn(),\n    auth: {\n      getUser: jest.fn()\n    }\n  }\n  return { supabase: mockSupabase }\n})\n\n// Obtain the mocked supabase instance for use in tests\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { supabase: mockSupabase } = require('../core/client')\n\njest.mock('@/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn()\n  }\n}))\n\ndescribe('ðŸŽ¯ Association System - Deployment Verification', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    \n    mockSupabase.auth.getUser.mockResolvedValue({\n      data: { user: { id: 'test-user-id' } },\n      error: null\n    })\n  })\n\n  test('âœ… Association service is properly instantiated', () => {\n    expect(AssociationService).toBeDefined()\n    expect(typeof AssociationService.createAssociation).toBe('function')\n    expect(typeof AssociationService.getProfileAssociations).toBe('function')\n  })\n\n  test('âœ… Database schema deployment successful', async () => {\n    const mockAssociation = {\n      id: 'test-id',\n      source_profile_id: 'test-user-id',\n      target_entity_id: 'test-campaign-id',\n      target_entity_type: 'campaign',\n      relationship_type: 'created',\n      status: 'active',\n      reward_percentage: 0,\n      permissions: {},\n      metadata: {},\n      visibility: 'public',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      version: 1\n    }\n\n    mockSupabase.single.mockResolvedValue({\n      data: mockAssociation,\n      error: null\n    })\n\n    const result = await AssociationService.createAssociation({\n      target_entity_id: 'test-campaign-id',\n      target_entity_type: 'campaign',\n      relationship_type: 'created'\n    })\n\n    expect(result).toBeDefined()\n    expect(mockSupabase.from).toHaveBeenCalledWith('profile_associations')\n  })\n\n  test('âœ… Bitcoin integration ready', async () => {\n    const bitcoinAssociation = {\n      id: 'bitcoin-test-id',\n      source_profile_id: 'test-user-id',\n      target_entity_id: 'test-campaign-id',\n      target_entity_type: 'campaign',\n      relationship_type: 'supports',\n      bitcoin_reward_address: 'bc1qexample123',\n      reward_percentage: 2.5,\n      status: 'active',\n      permissions: {},\n      metadata: {},\n      visibility: 'public',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      version: 1\n    }\n\n    mockSupabase.single.mockResolvedValue({\n      data: bitcoinAssociation,\n      error: null\n    })\n\n    const result = await AssociationService.createAssociation({\n      target_entity_id: 'test-campaign-id',\n      target_entity_type: 'campaign',\n      relationship_type: 'supports',\n      bitcoin_reward_address: 'bc1qexample123',\n      reward_percentage: 2.5\n    })\n\n    expect(result.bitcoin_reward_address).toBe('bc1qexample123')\n    expect(result.reward_percentage).toBe(2.5)\n  })\n\n}) "],"version":3}