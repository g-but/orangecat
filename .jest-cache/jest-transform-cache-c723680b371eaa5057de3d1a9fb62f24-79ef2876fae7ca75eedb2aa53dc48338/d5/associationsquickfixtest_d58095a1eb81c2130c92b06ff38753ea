2d63a8262a078df82216649179317d4d
"use strict";
/**
 * ðŸš€ ASSOCIATION SYSTEM - QUICK VERIFICATION TESTS
 *
 * Simple tests to verify the association system deployment works correctly
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the supabase client inline within jest.mock factory to avoid hoisting issues
jest.mock('../core/client', () => {
    const mockSupabase = {
        from: jest.fn().mockReturnThis(),
        select: jest.fn().mockReturnThis(),
        insert: jest.fn().mockReturnThis(),
        eq: jest.fn().mockReturnThis(),
        order: jest.fn().mockReturnThis(),
        single: jest.fn(),
        auth: {
            getUser: jest.fn()
        }
    };
    return { supabase: mockSupabase };
});
jest.mock('@/utils/logger', () => ({
    logger: {
        info: jest.fn(),
        error: jest.fn()
    }
}));
const associations_1 = __importDefault(require("../associations"));
// Obtain the mocked supabase instance for use in tests
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { supabase: mockSupabase } = require('../core/client');
describe('ðŸŽ¯ Association System - Deployment Verification', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        mockSupabase.auth.getUser.mockResolvedValue({
            data: { user: { id: 'test-user-id' } },
            error: null
        });
    });
    test('âœ… Association service is properly instantiated', () => {
        expect(associations_1.default).toBeDefined();
        expect(typeof associations_1.default.createAssociation).toBe('function');
        expect(typeof associations_1.default.getProfileAssociations).toBe('function');
    });
    test('âœ… Database schema deployment successful', async () => {
        const mockAssociation = {
            id: 'test-id',
            source_profile_id: 'test-user-id',
            target_entity_id: 'test-campaign-id',
            target_entity_type: 'campaign',
            relationship_type: 'created',
            status: 'active',
            reward_percentage: 0,
            permissions: {},
            metadata: {},
            visibility: 'public',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            version: 1
        };
        mockSupabase.single.mockResolvedValue({
            data: mockAssociation,
            error: null
        });
        const result = await associations_1.default.createAssociation({
            target_entity_id: 'test-campaign-id',
            target_entity_type: 'campaign',
            relationship_type: 'created'
        });
        expect(result).toBeDefined();
        expect(mockSupabase.from).toHaveBeenCalledWith('profile_associations');
    });
    test('âœ… Bitcoin integration ready', async () => {
        const bitcoinAssociation = {
            id: 'bitcoin-test-id',
            source_profile_id: 'test-user-id',
            target_entity_id: 'test-campaign-id',
            target_entity_type: 'campaign',
            relationship_type: 'supports',
            bitcoin_reward_address: 'bc1qexample123',
            reward_percentage: 2.5,
            status: 'active',
            permissions: {},
            metadata: {},
            visibility: 'public',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            version: 1
        };
        mockSupabase.single.mockResolvedValue({
            data: bitcoinAssociation,
            error: null
        });
        const result = await associations_1.default.createAssociation({
            target_entity_id: 'test-campaign-id',
            target_entity_type: 'campaign',
            relationship_type: 'supports',
            bitcoin_reward_address: 'bc1qexample123',
            reward_percentage: 2.5
        });
        expect(result.bitcoin_reward_address).toBe('bc1qexample123');
        expect(result.reward_percentage).toBe(2.5);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,