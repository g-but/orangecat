{"version":3,"names":["cov_66klm9org","actualCoverage","s","exports","useSearch","useSearchSuggestions","useTrending","useRecentSearches","useSearchFilters","react_1","require","search_1","debounce","func","delay","f","timeoutId","debouncedFunc","args","clearTimeout","setTimeout","cancel","mockSuggestions","options","b","initialQuery","initialType","initialSort","initialFilters","autoSearch","debounceMs","query","setQuery","useState","searchType","setSearchType","sortBy","setSortBy","filters","setFilters","results","setResults","loading","setLoading","error","setError","totalResults","setTotalResults","hasMore","setHasMore","currentOffset","setCurrentOffset","suggestions","setSuggestions","debouncedQuery","setDebouncedQuery","useEffect","timer","executeSearch","useCallback","offset","append","response","Object","keys","length","getTrending","search","undefined","type","limit","prev","totalCount","err","message","loadMore","loadSuggestions","searchQuery","newSuggestions","getSearchSuggestions","clearSearch","clearError","isEmpty","useMemo","isSearching","hasResults","enabled","debouncedSearch","trim","Promise","resolve","lowerQuery","toLowerCase","matchingSuggestions","entries","forEach","key","values","includes","push","fuzzyMatches","uniqueSuggestions","Set","slice","trending","setTrending","loadTrending","refresh","userId","recentSearches","setRecentSearches","stored","localStorage","getItem","JSON","parse","addToHistory","newHistory","filter","q","setItem","stringify","clearHistory","removeItem","category","location","dateRange","updateFilter","value","assign","resetFilters"],"sources":["/home/g/dev/orangecat/src/hooks/useSearch.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react'\nimport { \n  search, \n  getTrending, \n  getSearchSuggestions,\n  SearchResult, \n  SearchType, \n  SortOption, \n  SearchFilters,\n  SearchResponse \n} from '@/services/search'\n\n// Custom debounce function to avoid lodash dependency\nfunction debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) & { cancel: () => void } {\n  let timeoutId: NodeJS.Timeout\n  \n  const debouncedFunc = (...args: Parameters<T>) => {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => func(...args), delay)\n  }\n  \n  debouncedFunc.cancel = () => {\n    clearTimeout(timeoutId)\n  }\n  \n  return debouncedFunc\n}\n\ninterface UseSearchSuggestionsResult {\n  suggestions: string[]\n  loading: boolean\n  error: string | null\n}\n\n// Mock suggestions based on common search terms\nconst mockSuggestions = {\n  'bitcoin': ['Bitcoin Lightning Network', 'Bitcoin Education', 'Bitcoin Mining Projects'],\n  'open': ['Open Source Projects', 'Open Education Initiative', 'Open Data Campaign'],\n  'education': ['Education Initiatives', 'Educational Technology', 'Education for All'],\n  'environment': ['Environmental Campaigns', 'Environmental Protection', 'Environmental Research'],\n  'health': ['Healthcare Projects', 'Mental Health Awareness', 'Public Health Initiative'],\n  'art': ['Art Projects', 'Digital Art', 'Community Art'],\n  'tech': ['Technology Projects', 'Tech Education', 'Tech for Good'],\n  'community': ['Community Building', 'Community Gardens', 'Community Centers'],\n  'research': ['Research Projects', 'Scientific Research', 'Academic Research'],\n  'music': ['Music Projects', 'Music Education', 'Community Music']\n}\n\nexport interface UseSearchOptions {\n  initialQuery?: string\n  initialType?: SearchType\n  initialSort?: SortOption\n  initialFilters?: SearchFilters\n  autoSearch?: boolean\n  debounceMs?: number\n}\n\nexport interface UseSearchReturn {\n  // State\n  query: string\n  searchType: SearchType\n  sortBy: SortOption\n  filters: SearchFilters\n  results: SearchResult[]\n  loading: boolean\n  error: string | null\n  totalResults: number\n  hasMore: boolean\n  suggestions: string[]\n  \n  // Actions\n  setQuery: (query: string) => void\n  setSearchType: (type: SearchType) => void\n  setSortBy: (sort: SortOption) => void\n  setFilters: (filters: SearchFilters) => void\n  executeSearch: () => Promise<void>\n  loadMore: () => Promise<void>\n  clearSearch: () => void\n  clearError: () => void\n  \n  // Computed\n  isEmpty: boolean\n  isSearching: boolean\n  hasResults: boolean\n}\n\nexport function useSearch(options: UseSearchOptions = {}): UseSearchReturn {\n  const {\n    initialQuery = '',\n    initialType = 'all',\n    initialSort = 'relevance',\n    initialFilters = {},\n    autoSearch = true,\n    debounceMs = 300\n  } = options\n\n  // Core state\n  const [query, setQuery] = useState(initialQuery)\n  const [searchType, setSearchType] = useState<SearchType>(initialType)\n  const [sortBy, setSortBy] = useState<SortOption>(initialSort)\n  const [filters, setFilters] = useState<SearchFilters>(initialFilters)\n  \n  // Results state\n  const [results, setResults] = useState<SearchResult[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [totalResults, setTotalResults] = useState(0)\n  const [hasMore, setHasMore] = useState(false)\n  const [currentOffset, setCurrentOffset] = useState(0)\n  \n  // Suggestions state\n  const [suggestions, setSuggestions] = useState<string[]>([])\n  \n  // Debounced query\n  const [debouncedQuery, setDebouncedQuery] = useState(query)\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(query)\n    }, debounceMs)\n    \n    return () => clearTimeout(timer)\n  }, [query, debounceMs])\n\n  // Execute search function\n  const executeSearch = useCallback(async (offset = 0, append = false) => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      let response: SearchResponse\n      \n      // Show trending content when no search query and no filters\n      if (!debouncedQuery && searchType === 'all' && Object.keys(filters).length === 0) {\n        response = await getTrending()\n      } else {\n        // Perform search\n        response = await search({\n          query: debouncedQuery || undefined,\n          type: searchType,\n          sortBy,\n          filters,\n          limit: 20,\n          offset\n        })\n      }\n      \n      if (append) {\n        setResults(prev => [...prev, ...response.results])\n      } else {\n        setResults(response.results)\n        setCurrentOffset(0)\n      }\n      \n      setTotalResults(response.totalCount)\n      setHasMore(response.hasMore)\n      setCurrentOffset(offset + response.results.length)\n      \n    } catch (err: any) {\n      setError(err.message || 'Failed to perform search')\n    } finally {\n      setLoading(false)\n    }\n  }, [debouncedQuery, searchType, sortBy, filters])\n\n  // Load more results\n  const loadMore = useCallback(async () => {\n    if (!hasMore || loading) return\n    await executeSearch(currentOffset, true)\n  }, [hasMore, loading, currentOffset, executeSearch])\n\n  // Get search suggestions\n  const loadSuggestions = useCallback(async (searchQuery: string) => {\n    if (!searchQuery || searchQuery.length < 2) {\n      setSuggestions([])\n      return\n    }\n    \n    try {\n      const newSuggestions = await getSearchSuggestions(searchQuery, 5)\n      setSuggestions(newSuggestions)\n    } catch (err) {\n      setSuggestions([])\n    }\n  }, [])\n\n  // Auto-search when dependencies change\n  useEffect(() => {\n    if (autoSearch) {\n      executeSearch()\n    }\n  }, [executeSearch, autoSearch])\n\n  // Load suggestions when query changes\n  useEffect(() => {\n    loadSuggestions(debouncedQuery)\n  }, [debouncedQuery, loadSuggestions])\n\n  // Clear search\n  const clearSearch = useCallback(() => {\n    setQuery('')\n    setSearchType('all')\n    setSortBy('relevance')\n    setFilters({})\n    setResults([])\n    setError(null)\n    setTotalResults(0)\n    setHasMore(false)\n    setCurrentOffset(0)\n    setSuggestions([])\n  }, [])\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setError(null)\n  }, [])\n\n  // Computed values\n  const isEmpty = useMemo(() => results.length === 0, [results])\n  const isSearching = useMemo(() => loading, [loading])\n  const hasResults = useMemo(() => results.length > 0, [results])\n\n  return {\n    // State\n    query,\n    searchType,\n    sortBy,\n    filters,\n    results,\n    loading,\n    error,\n    totalResults,\n    hasMore,\n    suggestions,\n    \n    // Actions\n    setQuery,\n    setSearchType,\n    setSortBy,\n    setFilters,\n    executeSearch: () => executeSearch(),\n    loadMore,\n    clearSearch,\n    clearError,\n    \n    // Computed\n    isEmpty,\n    isSearching,\n    hasResults\n  }\n}\n\n// Hook for search suggestions only\nexport function useSearchSuggestions(query: string, enabled: boolean = true): UseSearchSuggestionsResult {\n  const [suggestions, setSuggestions] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Debounced search function\n  const debouncedSearch = debounce(async (searchQuery: string) => {\n    if (!searchQuery.trim() || !enabled) {\n      setSuggestions([])\n      setLoading(false)\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200))\n\n      // Find matching suggestions\n      const lowerQuery = searchQuery.toLowerCase()\n      const matchingSuggestions: string[] = []\n\n      // Look for exact matches in our mock data\n      Object.entries(mockSuggestions).forEach(([key, values]) => {\n        if (key.includes(lowerQuery) || lowerQuery.includes(key)) {\n          matchingSuggestions.push(...values)\n        }\n      })\n\n      // Add fuzzy matches for any text\n      if (matchingSuggestions.length < 3) {\n        const fuzzyMatches = [\n          `${searchQuery} Projects`,\n          `${searchQuery} Initiative`,\n          `${searchQuery} Campaign`\n        ]\n        matchingSuggestions.push(...fuzzyMatches)\n      }\n\n      // Remove duplicates and limit to 5 suggestions\n      const uniqueSuggestions = [...new Set(matchingSuggestions)].slice(0, 5)\n      setSuggestions(uniqueSuggestions)\n    } catch (err) {\n      setError('Failed to fetch suggestions')\n      setSuggestions([])\n    } finally {\n      setLoading(false)\n    }\n  }, 300)\n\n  useEffect(() => {\n    if (enabled) {\n      debouncedSearch(query)\n    } else {\n      setSuggestions([])\n      setLoading(false)\n    }\n\n    return () => {\n      debouncedSearch.cancel()\n    }\n  }, [query, enabled])\n\n  return { suggestions, loading, error }\n}\n\n// Hook for trending content\nexport function useTrending() {\n  const [trending, setTrending] = useState<SearchResult[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  \n  const loadTrending = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const response = await getTrending()\n      setTrending(response.results)\n    } catch (err: any) {\n      setError(err.message || 'Failed to load trending content')\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n  \n  useEffect(() => {\n    loadTrending()\n  }, [loadTrending])\n  \n  return {\n    trending,\n    loading,\n    error,\n    refresh: loadTrending\n  }\n}\n\n// Additional search utilities\nexport function useRecentSearches(userId?: string) {\n  const [recentSearches, setRecentSearches] = useState<string[]>([])\n\n  useEffect(() => {\n    if (userId) {\n      const stored = localStorage.getItem(`search-history-${userId}`)\n      if (stored) {\n        setRecentSearches(JSON.parse(stored))\n      }\n    }\n  }, [userId])\n\n  const addToHistory = (query: string) => {\n    if (!userId || !query.trim()) return\n\n    const newHistory = [query, ...recentSearches.filter(q => q !== query)].slice(0, 10)\n    setRecentSearches(newHistory)\n    localStorage.setItem(`search-history-${userId}`, JSON.stringify(newHistory))\n  }\n\n  const clearHistory = () => {\n    if (!userId) return\n    setRecentSearches([])\n    localStorage.removeItem(`search-history-${userId}`)\n  }\n\n  return { recentSearches, addToHistory, clearHistory }\n}\n\nexport function useSearchFilters() {\n  const [filters, setFilters] = useState({\n    type: 'all' as 'all' | 'campaigns' | 'profiles' | 'organizations',\n    category: 'all',\n    location: '',\n    dateRange: 'all' as 'all' | 'week' | 'month' | 'year',\n    sortBy: 'relevance' as 'relevance' | 'recent' | 'popular' | 'funding'\n  })\n\n  const updateFilter = (key: keyof typeof filters, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }))\n  }\n\n  const resetFilters = () => {\n    setFilters({\n      type: 'all',\n      category: 'all',\n      location: '',\n      dateRange: 'all',\n      sortBy: 'relevance'\n    })\n  }\n\n  return { filters, updateFilter, resetFilters }\n} "],"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","ignoreList":[]}