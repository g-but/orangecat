{"file":"/home/g/dev/orangecat/src/middleware/security.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/middleware/security.ts"],"sourcesContent":["/**\n * SECURITY MIDDLEWARE - API Route Protection\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Security middleware for comprehensive API protection\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@supabase/supabase-js'\nimport { \n  apiRateLimiter, \n  authRateLimiter, \n  SecurityMonitor, \n  SecureErrorHandler,\n  CSPHelper,\n  AuthSecurity\n} from '@/utils/security'\n\n// ==================== MIDDLEWARE TYPES ====================\n\ninterface SecurityConfig {\n  requireAuth?: boolean\n  rateLimitKey?: 'api' | 'auth'\n  allowedMethods?: string[]\n  requireHttps?: boolean\n  validateOrigin?: boolean\n  logActivity?: boolean\n}\n\ninterface SecurityContext {\n  userId?: string\n  ip: string\n  userAgent: string\n  origin?: string\n  method: string\n  path: string\n}\n\n// ==================== SECURITY MIDDLEWARE ====================\n\nexport class SecurityMiddleware {\n  private static supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\n  )\n\n  /**\n   * Main security middleware function\n   */\n  static async secure(\n    request: NextRequest,\n    config: SecurityConfig = {}\n  ): Promise<NextResponse | null> {\n    const context = this.extractContext(request)\n\n    try {\n      const headers = CSPHelper.getSecurityHeaders()\n\n      // Method validation\n      if (config.allowedMethods && !config.allowedMethods.includes(context.method)) {\n        SecurityMonitor.logEvent('method_not_allowed', 'low', context)\n        return new NextResponse('Method Not Allowed', { \n          status: 405,\n          headers: {\n            ...headers,\n            'Allow': config.allowedMethods.join(', ')\n          }\n        })\n      }\n\n      // Rate limiting\n      const rateLimitResult = this.checkRateLimit(context, config.rateLimitKey)\n      if (!rateLimitResult.allowed) {\n        SecurityMonitor.logEvent('rate_limit_exceeded', 'medium', context)\n        return new NextResponse('Too Many Requests', {\n          status: 429,\n          headers: {\n            ...headers,\n            'Retry-After': '900'\n          }\n        })\n      }\n\n      // Activity logging\n      if (config.logActivity) {\n        SecurityMonitor.logEvent('api_access', 'low', context)\n      }\n\n      return null // Allow request to proceed\n\n    } catch (error) {\n      const sanitizedError = SecureErrorHandler.sanitizeErrorMessage(error)\n      SecurityMonitor.logEvent('middleware_error', 'high', {\n        ...context,\n        error: sanitizedError\n      })\n\n      return new NextResponse('Internal Server Error', { \n        status: 500,\n        headers: CSPHelper.getSecurityHeaders()\n      })\n    }\n  }\n\n  /**\n   * Extract security context from request\n   */\n  private static extractContext(request: NextRequest): SecurityContext {\n    const forwarded = request.headers.get('x-forwarded-for')\n    const realIp = request.headers.get('x-real-ip')\n    const ip = forwarded?.split(',')[0] || realIp || 'unknown'\n\n    return {\n      ip,\n      userAgent: request.headers.get('user-agent') || 'unknown',\n      origin: request.headers.get('origin') || undefined,\n      method: request.method,\n      path: request.nextUrl.pathname\n    }\n  }\n\n  /**\n   * Check if HTTPS should be enforced\n   */\n  private static shouldEnforceHttps(request: NextRequest): boolean {\n    // Don't enforce HTTPS in development\n    if (process.env.NODE_ENV === 'development') return false\n    \n    // Check if request is already HTTPS\n    const protocol = request.headers.get('x-forwarded-proto') || request.nextUrl.protocol\n    return protocol !== 'https:'\n  }\n\n  /**\n   * Check if origin is allowed\n   */\n  private static isOriginAllowed(origin?: string): boolean {\n    if (!origin) return true // Allow requests without origin (Postman, etc.)\n\n    const allowedOrigins = [\n      process.env.NEXT_PUBLIC_SITE_URL,\n      'https://localhost:3000',\n      'https://orangecat.fund',\n      'https://www.orangecat.fund'\n    ].filter(Boolean)\n\n    return allowedOrigins.some(allowed => {\n      if (!allowed) return false\n      try {\n        const allowedUrl = new URL(allowed)\n        const originUrl = new URL(origin)\n        return allowedUrl.hostname === originUrl.hostname\n      } catch {\n        return false\n      }\n    })\n  }\n\n  /**\n   * Check rate limits\n   */\n  private static checkRateLimit(\n    context: SecurityContext, \n    type: SecurityConfig['rateLimitKey'] = 'api'\n  ): { allowed: boolean } {\n    const limiter = type === 'auth' ? authRateLimiter : apiRateLimiter\n    const identifier = `${context.ip}:${type}`\n    \n    return { allowed: limiter.isAllowed(identifier) }\n  }\n\n  /**\n   * Check authentication\n   */\n  private static async checkAuthentication(request: NextRequest): Promise<{\n    authenticated: boolean\n    userId?: string\n    error?: string\n  }> {\n    try {\n      const authHeader = request.headers.get('authorization')\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return { authenticated: false, error: 'Missing or invalid authorization header' }\n      }\n\n      const token = authHeader.substring(7)\n      const { data: { user }, error } = await this.supabase.auth.getUser(token)\n\n      if (error || !user) {\n        return { authenticated: false, error: 'Invalid token' }\n      }\n\n      return { authenticated: true, userId: user.id }\n\n    } catch (error) {\n      return { authenticated: false, error: 'Authentication error' }\n    }\n  }\n\n  /**\n   * Create security configuration for different route types\n   */\n  static configs = {\n    public: {\n      requireAuth: false,\n      rateLimitKey: 'api' as const,\n      allowedMethods: ['GET', 'POST'],\n      logActivity: false\n    },\n\n    protected: {\n      requireAuth: true,\n      rateLimitKey: 'api' as const,\n      allowedMethods: ['GET', 'POST', 'PUT', 'DELETE'],\n      requireHttps: true,\n      validateOrigin: true,\n      logActivity: true\n    },\n\n    auth: {\n      requireAuth: false,\n      rateLimitKey: 'auth' as const,\n      allowedMethods: ['POST'],\n      requireHttps: true,\n      validateOrigin: true,\n      logActivity: true\n    },\n\n    upload: {\n      requireAuth: true,\n      rateLimitKey: 'api' as const,\n      allowedMethods: ['POST', 'PUT'],\n      requireHttps: true,\n      validateOrigin: true,\n      logActivity: true\n    }\n  }\n}\n\n// ==================== CONVENIENCE WRAPPERS ====================\n\n/**\n * Secure public API routes\n */\nexport async function securePublicRoute(request: NextRequest) {\n  return SecurityMiddleware.secure(request, SecurityMiddleware.configs.public)\n}\n\n/**\n * Secure protected API routes\n */\nexport async function secureProtectedRoute(request: NextRequest) {\n  return SecurityMiddleware.secure(request, SecurityMiddleware.configs.protected)\n}\n\n/**\n * Secure authentication routes\n */\nexport async function secureAuthRoute(request: NextRequest) {\n  return SecurityMiddleware.secure(request, SecurityMiddleware.configs.auth)\n}\n\n/**\n * Secure file upload routes\n */\nexport async function secureUploadRoute(request: NextRequest) {\n  return SecurityMiddleware.secure(request, SecurityMiddleware.configs.upload)\n}\n\n// ==================== ROUTE PROTECTION DECORATOR ====================\n\n/**\n * Decorator for protecting API route handlers\n */\nexport function withSecurityProtection(\n  config: SecurityConfig = SecurityMiddleware.configs.protected\n) {\n  return function (handler: (request: NextRequest) => Promise<NextResponse>) {\n    return async function (request: NextRequest): Promise<NextResponse> {\n      // Apply security middleware\n      const securityResult = await SecurityMiddleware.secure(request, config)\n      \n      // If security middleware returns a response, return it (blocked request)\n      if (securityResult && securityResult.status !== 200) {\n        return securityResult\n      }\n\n      try {\n        // Call the original handler\n        const response = await handler(request)\n        \n        // Add security headers to response if not already present\n        const securityHeaders = CSPHelper.getSecurityHeaders()\n        Object.entries(securityHeaders).forEach(([key, value]) => {\n          if (!response.headers.has(key)) {\n            response.headers.set(key, value)\n          }\n        })\n\n        return response\n\n      } catch (error) {\n        const sanitizedError = SecureErrorHandler.sanitizeErrorMessage(error)\n        SecureErrorHandler.logError(error, 'api_handler')\n        \n        SecurityMonitor.logEvent('api_error', 'high', {\n          path: request.nextUrl.pathname,\n          method: request.method,\n          error: sanitizedError\n        })\n\n        return new NextResponse(\n          JSON.stringify({ error: sanitizedError }),\n          { \n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              ...CSPHelper.getSecurityHeaders()\n            }\n          }\n        )\n      }\n    }\n  }\n}\n\n// ==================== SECURITY CONTEXT HELPER ====================\n\n/**\n * Extract security context from request headers\n */\nexport function getSecurityContext(request: NextRequest): SecurityContext | null {\n  try {\n    const contextHeader = request.headers.get('x-security-context')\n    if (!contextHeader) return null\n    \n    return JSON.parse(contextHeader) as SecurityContext\n  } catch {\n    return null\n  }\n} "],"version":3}