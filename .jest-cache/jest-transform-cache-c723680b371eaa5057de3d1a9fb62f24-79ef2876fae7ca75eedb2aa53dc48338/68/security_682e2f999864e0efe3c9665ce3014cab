926074d285a9397ba3d8a2e4dadde3ce
"use strict";
/**
 * SECURITY MIDDLEWARE - API Route Protection
 *
 * Created: 2025-06-08
 * Last Modified: 2025-06-08
 * Last Modified Summary: Security middleware for comprehensive API protection
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityMiddleware = void 0;
exports.securePublicRoute = securePublicRoute;
exports.secureProtectedRoute = secureProtectedRoute;
exports.secureAuthRoute = secureAuthRoute;
exports.secureUploadRoute = secureUploadRoute;
exports.withSecurityProtection = withSecurityProtection;
exports.getSecurityContext = getSecurityContext;
const server_1 = require("next/server");
const supabase_js_1 = require("@supabase/supabase-js");
const security_1 = require("@/utils/security");
// ==================== SECURITY MIDDLEWARE ====================
class SecurityMiddleware {
    /**
     * Main security middleware function
     */
    static async secure(request, config = {}) {
        const context = this.extractContext(request);
        try {
            const headers = security_1.CSPHelper.getSecurityHeaders();
            // Method validation
            if (config.allowedMethods && !config.allowedMethods.includes(context.method)) {
                security_1.SecurityMonitor.logEvent('method_not_allowed', 'low', context);
                return new server_1.NextResponse('Method Not Allowed', {
                    status: 405,
                    headers: Object.assign(Object.assign({}, headers), { 'Allow': config.allowedMethods.join(', ') })
                });
            }
            // Rate limiting
            const rateLimitResult = this.checkRateLimit(context, config.rateLimitKey);
            if (!rateLimitResult.allowed) {
                security_1.SecurityMonitor.logEvent('rate_limit_exceeded', 'medium', context);
                return new server_1.NextResponse('Too Many Requests', {
                    status: 429,
                    headers: Object.assign(Object.assign({}, headers), { 'Retry-After': '900' })
                });
            }
            // Activity logging
            if (config.logActivity) {
                security_1.SecurityMonitor.logEvent('api_access', 'low', context);
            }
            return null; // Allow request to proceed
        }
        catch (error) {
            const sanitizedError = security_1.SecureErrorHandler.sanitizeErrorMessage(error);
            security_1.SecurityMonitor.logEvent('middleware_error', 'high', Object.assign(Object.assign({}, context), { error: sanitizedError }));
            return new server_1.NextResponse('Internal Server Error', {
                status: 500,
                headers: security_1.CSPHelper.getSecurityHeaders()
            });
        }
    }
    /**
     * Extract security context from request
     */
    static extractContext(request) {
        const forwarded = request.headers.get('x-forwarded-for');
        const realIp = request.headers.get('x-real-ip');
        const ip = (forwarded === null || forwarded === void 0 ? void 0 : forwarded.split(',')[0]) || realIp || 'unknown';
        return {
            ip,
            userAgent: request.headers.get('user-agent') || 'unknown',
            origin: request.headers.get('origin') || undefined,
            method: request.method,
            path: request.nextUrl.pathname
        };
    }
    /**
     * Check if HTTPS should be enforced
     */
    static shouldEnforceHttps(request) {
        // Don't enforce HTTPS in development
        if (process.env.NODE_ENV === 'development')
            return false;
        // Check if request is already HTTPS
        const protocol = request.headers.get('x-forwarded-proto') || request.nextUrl.protocol;
        return protocol !== 'https:';
    }
    /**
     * Check if origin is allowed
     */
    static isOriginAllowed(origin) {
        if (!origin)
            return true; // Allow requests without origin (Postman, etc.)
        const allowedOrigins = [
            process.env.NEXT_PUBLIC_SITE_URL,
            'https://localhost:3000',
            'https://orangecat.fund',
            'https://www.orangecat.fund'
        ].filter(Boolean);
        return allowedOrigins.some(allowed => {
            if (!allowed)
                return false;
            try {
                const allowedUrl = new URL(allowed);
                const originUrl = new URL(origin);
                return allowedUrl.hostname === originUrl.hostname;
            }
            catch (_a) {
                return false;
            }
        });
    }
    /**
     * Check rate limits
     */
    static checkRateLimit(context, type = 'api') {
        const limiter = type === 'auth' ? security_1.authRateLimiter : security_1.apiRateLimiter;
        const identifier = `${context.ip}:${type}`;
        return { allowed: limiter.isAllowed(identifier) };
    }
    /**
     * Check authentication
     */
    static async checkAuthentication(request) {
        try {
            const authHeader = request.headers.get('authorization');
            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                return { authenticated: false, error: 'Missing or invalid authorization header' };
            }
            const token = authHeader.substring(7);
            const { data: { user }, error } = await this.supabase.auth.getUser(token);
            if (error || !user) {
                return { authenticated: false, error: 'Invalid token' };
            }
            return { authenticated: true, userId: user.id };
        }
        catch (error) {
            return { authenticated: false, error: 'Authentication error' };
        }
    }
}
exports.SecurityMiddleware = SecurityMiddleware;
SecurityMiddleware.supabase = (0, supabase_js_1.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
/**
 * Create security configuration for different route types
 */
SecurityMiddleware.configs = {
    public: {
        requireAuth: false,
        rateLimitKey: 'api',
        allowedMethods: ['GET', 'POST'],
        logActivity: false
    },
    protected: {
        requireAuth: true,
        rateLimitKey: 'api',
        allowedMethods: ['GET', 'POST', 'PUT', 'DELETE'],
        requireHttps: true,
        validateOrigin: true,
        logActivity: true
    },
    auth: {
        requireAuth: false,
        rateLimitKey: 'auth',
        allowedMethods: ['POST'],
        requireHttps: true,
        validateOrigin: true,
        logActivity: true
    },
    upload: {
        requireAuth: true,
        rateLimitKey: 'api',
        allowedMethods: ['POST', 'PUT'],
        requireHttps: true,
        validateOrigin: true,
        logActivity: true
    }
};
// ==================== CONVENIENCE WRAPPERS ====================
/**
 * Secure public API routes
 */
async function securePublicRoute(request) {
    return SecurityMiddleware.secure(request, SecurityMiddleware.configs.public);
}
/**
 * Secure protected API routes
 */
async function secureProtectedRoute(request) {
    return SecurityMiddleware.secure(request, SecurityMiddleware.configs.protected);
}
/**
 * Secure authentication routes
 */
async function secureAuthRoute(request) {
    return SecurityMiddleware.secure(request, SecurityMiddleware.configs.auth);
}
/**
 * Secure file upload routes
 */
async function secureUploadRoute(request) {
    return SecurityMiddleware.secure(request, SecurityMiddleware.configs.upload);
}
// ==================== ROUTE PROTECTION DECORATOR ====================
/**
 * Decorator for protecting API route handlers
 */
function withSecurityProtection(config = SecurityMiddleware.configs.protected) {
    return function (handler) {
        return async function (request) {
            // Apply security middleware
            const securityResult = await SecurityMiddleware.secure(request, config);
            // If security middleware returns a response, return it (blocked request)
            if (securityResult && securityResult.status !== 200) {
                return securityResult;
            }
            try {
                // Call the original handler
                const response = await handler(request);
                // Add security headers to response if not already present
                const securityHeaders = security_1.CSPHelper.getSecurityHeaders();
                Object.entries(securityHeaders).forEach(([key, value]) => {
                    if (!response.headers.has(key)) {
                        response.headers.set(key, value);
                    }
                });
                return response;
            }
            catch (error) {
                const sanitizedError = security_1.SecureErrorHandler.sanitizeErrorMessage(error);
                security_1.SecureErrorHandler.logError(error, 'api_handler');
                security_1.SecurityMonitor.logEvent('api_error', 'high', {
                    path: request.nextUrl.pathname,
                    method: request.method,
                    error: sanitizedError
                });
                return new server_1.NextResponse(JSON.stringify({ error: sanitizedError }), {
                    status: 500,
                    headers: Object.assign({ 'Content-Type': 'application/json' }, security_1.CSPHelper.getSecurityHeaders())
                });
            }
        };
    };
}
// ==================== SECURITY CONTEXT HELPER ====================
/**
 * Extract security context from request headers
 */
function getSecurityContext(request) {
    try {
        const contextHeader = request.headers.get('x-security-context');
        if (!contextHeader)
            return null;
        return JSON.parse(contextHeader);
    }
    catch (_a) {
        return null;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,