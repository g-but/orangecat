{"file":"/home/g/dev/orangecat/src/services/supabase/associations.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/supabase/associations.ts"],"sourcesContent":["/**\n * ASSOCIATION SERVICE - TESLA-GRADE SOCIAL CONNECTIONS\n * \n * This service implements the revolutionary association system that transforms\n * OrangeCat from individual profiles to a Bitcoin-native social platform.\n * \n * Key Features:\n * - Bitcoin-native value transfer in relationships\n * - Event-sourced architecture with full audit trails\n * - Real-time synchronization across the platform\n * - Masterful abstraction of complex relationships\n * \n * Created: 2025-01-08\n * Last Modified: 2025-01-08\n * Last Modified Summary: Enhanced error handling and method chaining\n */\n\nimport { supabase } from './core/client'\nimport type { Database } from '@/types/database'\nimport { logger } from '@/utils/logger'\n\n// ==================================\n// 🏗️ TYPE DEFINITIONS: BULLETPROOF CONTRACTS\n// ==================================\n\n// Core association entity\nexport interface Association {\n  id: string\n  source_profile_id: string\n  target_entity_id: string\n  target_entity_type: 'profile' | 'campaign' | 'organization' | 'collective' | 'project'\n  relationship_type: 'created' | 'founded' | 'supports' | 'collaborates' | 'maintains' | \n                     'member' | 'leader' | 'moderator' | 'contributor' | 'advisor' |\n                     'investor' | 'sponsor' | 'partner' | 'beneficiary'\n  role?: string\n  status: 'active' | 'inactive' | 'pending' | 'completed' | 'suspended' | 'disputed'\n  bitcoin_reward_address?: string\n  reward_percentage: number\n  permissions: Record<string, any>\n  metadata: Record<string, any>\n  visibility: 'public' | 'members_only' | 'private' | 'confidential'\n  starts_at: string\n  ends_at?: string\n  created_at: string\n  updated_at: string\n  version: number\n  created_by?: string\n  last_modified_by?: string\n}\n\n// Input for creating associations\nexport interface CreateAssociationInput {\n  target_entity_id: string\n  target_entity_type: Association['target_entity_type']\n  relationship_type: Association['relationship_type']\n  role?: string\n  bitcoin_reward_address?: string\n  reward_percentage?: number\n  permissions?: Record<string, any>\n  metadata?: Record<string, any>\n  visibility?: Association['visibility']\n}\n\n// Input for updating associations\nexport interface UpdateAssociationInput {\n  role?: string\n  status?: Association['status']\n  bitcoin_reward_address?: string\n  reward_percentage?: number\n  permissions?: Record<string, any>\n  metadata?: Record<string, any>\n  visibility?: Association['visibility']\n  ends_at?: string\n}\n\n// Query filters for associations\nexport interface AssociationFilters {\n  relationship_type?: Association['relationship_type'][]\n  target_entity_type?: Association['target_entity_type'][]\n  status?: Association['status'][]\n  visibility?: Association['visibility'][]\n  created_after?: string\n  created_before?: string\n  has_bitcoin_reward?: boolean\n}\n\n// Query options\nexport interface QueryOptions {\n  limit?: number\n  offset?: number\n  order_by?: string\n  order_direction?: 'asc' | 'desc'\n}\n\n// Association statistics\nexport interface AssociationStats {\n  total_associations: number\n  by_type: Record<string, number>\n  by_entity_type: Record<string, number>\n  recent_activity: Association[]\n  bitcoin_connections: number\n  total_reward_percentage: number\n}\n\n// ==================================\n// 🚀 CORE ASSOCIATION SERVICE\n// ==================================\n\nclass AssociationService {\n\n  // ==================================\n  // ➕ CREATE OPERATIONS\n  // ==================================\n\n  /**\n   * Create a new association between a profile and an entity\n   */\n  static async createAssociation(input: CreateAssociationInput): Promise<Association> {\n    try {\n      // Get authenticated user\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n      if (authError || !user) {\n        throw new Error('Authentication required')\n      }\n\n      // Prepare association data\n      const associationData = {\n        source_profile_id: user.id,\n        target_entity_id: input.target_entity_id,\n        target_entity_type: input.target_entity_type,\n        relationship_type: input.relationship_type,\n        role: input.role,\n        bitcoin_reward_address: input.bitcoin_reward_address,\n        reward_percentage: input.reward_percentage || 0,\n        permissions: input.permissions || {},\n        metadata: input.metadata || {},\n        visibility: input.visibility || 'public',\n        starts_at: new Date().toISOString(),\n        version: 1,\n        created_by: user.id,\n        last_modified_by: user.id\n      }\n\n      // Create association\n      const { data, error } = await supabase\n        .from('profile_associations')\n        .insert(associationData)\n        .select()\n        .single()\n\n      if (error) {\n        logger.error('Failed to create association', { error, input })\n        throw new Error(`Failed to create association: ${error.message}`)\n      }\n\n      if (!data) {\n        throw new Error('Failed to create association: No data returned')\n      }\n\n      logger.info('Association created successfully', { \n        associationId: data.id, \n        profileId: user.id \n      })\n\n      return data as Association\n    } catch (error) {\n      logger.error('Error in createAssociation', { error, input })\n      throw error\n    }\n  }\n\n  /**\n   * Create multiple associations in bulk\n   */\n  static async createBulkAssociations(inputs: CreateAssociationInput[]): Promise<Association[]> {\n    try {\n      // Get authenticated user\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n      if (authError || !user) {\n        throw new Error('Authentication required')\n      }\n\n      // Prepare all association data\n      const associationsData = inputs.map(input => ({\n        source_profile_id: user.id,\n        target_entity_id: input.target_entity_id,\n        target_entity_type: input.target_entity_type,\n        relationship_type: input.relationship_type,\n        role: input.role,\n        bitcoin_reward_address: input.bitcoin_reward_address,\n        reward_percentage: input.reward_percentage || 0,\n        permissions: input.permissions || {},\n        metadata: input.metadata || {},\n        visibility: input.visibility || 'public',\n        starts_at: new Date().toISOString(),\n        version: 1,\n        created_by: user.id,\n        last_modified_by: user.id\n      }))\n\n      // Create associations\n      const { data, error } = await supabase\n        .from('profile_associations')\n        .insert(associationsData)\n        .select()\n\n      if (error) {\n        logger.error('Failed to create bulk associations', { error, inputs })\n        throw new Error(`Failed to create bulk associations: ${error.message}`)\n      }\n\n      if (!data) {\n        throw new Error('Failed to create bulk associations: No data returned')\n      }\n\n      logger.info('Bulk associations created successfully', { \n        count: data.length, \n        profileId: user.id \n      })\n\n      return data as Association[]\n    } catch (error) {\n      logger.error('Error in createBulkAssociations', { error, inputs })\n      throw error\n    }\n  }\n\n  // ==================================\n  // 📖 READ OPERATIONS\n  // ==================================\n\n  /**\n   * Get associations for a specific profile with filtering and pagination\n   */\n  static async getProfileAssociations(\n    profileId: string,\n    filters?: AssociationFilters,\n    options?: QueryOptions\n  ): Promise<Association[]> {\n    try {\n      // Start building query\n      let query = supabase\n        .from('profile_associations')\n        .select(this.buildSelectClause(options))\n        .eq('source_profile_id', profileId)\n      \n      // Apply filters\n      if (filters) {\n        if (filters.relationship_type?.length) {\n          query = query.in('relationship_type', filters.relationship_type)\n        }\n        if (filters.target_entity_type?.length) {\n          query = query.in('target_entity_type', filters.target_entity_type)\n        }\n        if (filters.status?.length) {\n          query = query.in('status', filters.status)\n        }\n        if (filters.visibility?.length) {\n          query = query.in('visibility', filters.visibility)\n        }\n        if (filters.created_after) {\n          query = query.gte('created_at', filters.created_after)\n        }\n        if (filters.created_before) {\n          query = query.lte('created_at', filters.created_before)\n        }\n        if (filters.has_bitcoin_reward !== undefined) {\n          if (filters.has_bitcoin_reward) {\n            query = query.not('bitcoin_reward_address', 'is', null)\n          } else {\n            query = query.is('bitcoin_reward_address', null)\n          }\n        }\n      }\n\n      // Apply ordering\n      const orderBy = options?.order_by || 'created_at'\n      const ascending = options?.order_direction === 'asc'\n      query = query.order(orderBy, { ascending })\n\n      // Apply pagination\n      if (options?.limit || options?.offset) {\n        const limit = options.limit || 50\n        const offset = options.offset || 0\n        query = query.range(offset, offset + limit - 1)\n      }\n\n      const { data, error } = await query\n\n      if (error) {\n        logger.error('Failed to get profile associations', { error, profileId })\n        throw new Error(`Failed to get profile associations: ${error.message}`)\n      }\n\n      return (data || []) as Association[]\n    } catch (error) {\n      logger.error('Error in getProfileAssociations', { error, profileId })\n      throw error\n    }\n  }\n\n  /**\n   * Get associations for a specific entity\n   */\n  static async getEntityAssociations(\n    entityId: string,\n    entityType: Association['target_entity_type'],\n    filters?: AssociationFilters,\n    options?: QueryOptions\n  ): Promise<Association[]> {\n    try {\n      let query = supabase\n        .from('profile_associations')\n        .select(this.buildSelectClause(options))\n        .eq('target_entity_id', entityId)\n        .eq('target_entity_type', entityType)\n      \n      // Apply filters (same as getProfileAssociations)\n      if (filters) {\n        if (filters.relationship_type?.length) {\n          query = query.in('relationship_type', filters.relationship_type)\n        }\n        if (filters.status?.length) {\n          query = query.in('status', filters.status)\n        }\n        if (filters.visibility?.length) {\n          query = query.in('visibility', filters.visibility)\n        }\n      }\n\n      // Apply ordering\n      const orderBy = options?.order_by || 'created_at'\n      const ascending = options?.order_direction === 'asc'\n      query = query.order(orderBy, { ascending })\n\n      // Apply pagination\n      if (options?.limit || options?.offset) {\n        const limit = options.limit || 50\n        const offset = options.offset || 0\n        query = query.range(offset, offset + limit - 1)\n      }\n\n      const { data, error } = await query\n\n      if (error) {\n        logger.error('Failed to get entity associations', { error, entityId, entityType })\n        throw new Error(`Failed to get entity associations: ${error.message}`)\n      }\n\n      return (data || []) as Association[]\n    } catch (error) {\n      logger.error('Error in getEntityAssociations', { error, entityId })\n      throw error\n    }\n  }\n\n  // ==================================\n  // ✏️ UPDATE OPERATIONS\n  // ==================================\n\n  /**\n   * Update an existing association\n   */\n  static async updateAssociation(\n    associationId: string,\n    updates: UpdateAssociationInput\n  ): Promise<Association> {\n    try {\n      const updateData = {\n        ...updates,\n        updated_at: new Date().toISOString(),\n        version: (updates as any).version ? (updates as any).version + 1 : undefined\n      }\n\n      const { data, error } = await supabase\n        .from('profile_associations')\n        .update(updateData)\n        .eq('id', associationId)\n        .select()\n        .single()\n\n      if (error) {\n        logger.error('Failed to update association', { error, associationId, updates })\n        throw new Error(`Failed to update association: ${error.message}`)\n      }\n\n      if (!data) {\n        throw new Error('Failed to update association: No data returned')\n      }\n\n      logger.info('Association updated successfully', { associationId })\n\n      return data as Association\n    } catch (error) {\n      logger.error('Error in updateAssociation', { error, associationId })\n      throw error\n    }\n  }\n\n  // ==================================\n  // ❌ DELETE OPERATIONS\n  // ==================================\n\n  /**\n   * Delete an association\n   */\n  static async deleteAssociation(associationId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('profile_associations')\n        .delete()\n        .eq('id', associationId)\n\n      if (error) {\n        logger.error('Failed to delete association', { error, associationId })\n        throw new Error(`Failed to delete association: ${error.message}`)\n      }\n\n      logger.info('Association deleted successfully', { associationId })\n    } catch (error) {\n      logger.error('Error in deleteAssociation', { error, associationId })\n      throw error\n    }\n  }\n\n  // ==================================\n  // 📊 ANALYTICS OPERATIONS\n  // ==================================\n\n  /**\n   * Get comprehensive association statistics for a profile\n   */\n  static async getAssociationStats(profileId: string): Promise<AssociationStats> {\n    try {\n      const associations = await this.getProfileAssociations(profileId)\n\n      const stats: AssociationStats = {\n        total_associations: associations.length,\n        by_type: {},\n        by_entity_type: {},\n        recent_activity: associations.slice(0, 10),\n        bitcoin_connections: 0,\n        total_reward_percentage: 0\n      }\n\n      // Calculate statistics\n      associations.forEach(association => {\n        // Count by relationship type\n        stats.by_type[association.relationship_type] = \n          (stats.by_type[association.relationship_type] || 0) + 1\n\n        // Count by entity type\n        stats.by_entity_type[association.target_entity_type] = \n          (stats.by_entity_type[association.target_entity_type] || 0) + 1\n\n        // Count Bitcoin connections\n        if (association.bitcoin_reward_address) {\n          stats.bitcoin_connections++\n          stats.total_reward_percentage += association.reward_percentage\n        }\n      })\n\n      return stats\n    } catch (error) {\n      logger.error('Error in getAssociationStats', { error, profileId })\n      throw error\n    }\n  }\n\n  // ==================================\n  // 🔧 UTILITY METHODS\n  // ==================================\n\n  /**\n   * Build select clause based on options\n   */\n  private static buildSelectClause(options?: QueryOptions): string {\n    // Default select all columns\n    return '*'\n  }\n\n  /**\n   * Get association by ID\n   */\n  static async getAssociationById(associationId: string): Promise<Association | null> {\n    try {\n      const { data, error } = await supabase\n        .from('profile_associations')\n        .select('*')\n        .eq('id', associationId)\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        logger.error('Failed to get association by ID', { error, associationId })\n        throw new Error(`Failed to get association: ${error.message}`)\n      }\n\n      return data as Association\n    } catch (error) {\n      logger.error('Error in getAssociationById', { error, associationId })\n      throw error\n    }\n  }\n\n  /**\n   * Check if association exists\n   */\n  static async associationExists(\n    sourceProfileId: string,\n    targetEntityId: string,\n    relationshipType: Association['relationship_type']\n  ): Promise<boolean> {\n    try {\n      const { data, error } = await supabase\n        .from('profile_associations')\n        .select('id')\n        .eq('source_profile_id', sourceProfileId)\n        .eq('target_entity_id', targetEntityId)\n        .eq('relationship_type', relationshipType)\n        .limit(1)\n\n      if (error) {\n        logger.error('Failed to check association existence', { error })\n        return false\n      }\n\n      return (data?.length || 0) > 0\n    } catch (error) {\n      logger.error('Error in associationExists', { error })\n      return false\n    }\n  }\n\n}\n\nexport default AssociationService\nexport type { CreateAssociationInput, UpdateAssociationInput, AssociationFilters, QueryOptions }"],"version":3}