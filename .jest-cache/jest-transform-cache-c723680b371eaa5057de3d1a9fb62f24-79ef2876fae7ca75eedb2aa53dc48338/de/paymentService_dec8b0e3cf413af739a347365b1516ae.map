{"version":3,"names":["cov_2ea6ocmwd4","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","BitcoinPaymentService","constructor","pendingPayments","Map","lightningConfig","nodeUrl","process","env","NEXT_PUBLIC_LIGHTNING_NODE_URL","apiKey","LIGHTNING_API_KEY","bitcoinConfig","network","NEXT_PUBLIC_BITCOIN_NETWORK","blockstreamApiUrl","createLightningPayment","campaignId","amount","description","paymentId","Date","now","Math","random","toString","substr","invoice","paymentRequest","id","expiresAt","createdAt","status","set","success","error","Error","message","createOnChainPayment","recipientAddress","address","getPaymentStatus","get","getPaymentQRData","payment","toUpperCase","encodeURIComponent","satoshisToBTC","satoshis","BTCToSatoshis","btc","round","isValidBitcoinAddress","patterns","some","pattern","test","isValidLightningInvoice","toLowerCase","exports","bitcoinPaymentService"],"sources":["/home/g/dev/orangecat/src/services/bitcoin/paymentService.ts"],"sourcesContent":["/**\n * Bitcoin Payment Service\n * Handles Lightning Network and on-chain Bitcoin payments\n * \n * Created: 2025-01-09\n * Last Modified: 2025-01-09\n * Last Modified Summary: Initial Bitcoin payment service implementation\n */\n\nimport { toast } from 'sonner'\n\n// Bitcoin network types\nexport type BitcoinNetwork = 'mainnet' | 'testnet' | 'regtest'\n\n// Payment types\nexport type PaymentType = 'lightning' | 'onchain'\n\n// Payment request interface\nexport interface PaymentRequest {\n  id: string\n  campaignId: string\n  amount: number // amount in satoshis\n  type: PaymentType\n  address?: string // Bitcoin address for on-chain\n  invoice?: string // Lightning invoice\n  description: string\n  expiresAt: Date\n  createdAt: Date\n  status: 'pending' | 'paid' | 'expired' | 'failed'\n}\n\n// Payment result interface\nexport interface PaymentResult {\n  success: boolean\n  transactionId?: string\n  error?: string\n  paymentRequest?: PaymentRequest\n}\n\n// Lightning Network configuration\ninterface LightningConfig {\n  nodeUrl: string\n  macaroon?: string\n  apiKey?: string\n}\n\n// Bitcoin configuration\ninterface BitcoinConfig {\n  network: BitcoinNetwork\n  rpcUrl?: string\n  blockstreamApiUrl: string\n}\n\nclass BitcoinPaymentService {\n  private lightningConfig: LightningConfig\n  private bitcoinConfig: BitcoinConfig\n  private pendingPayments: Map<string, PaymentRequest> = new Map()\n\n  constructor() {\n    // Initialize with environment variables\n    this.lightningConfig = {\n      nodeUrl: process.env.NEXT_PUBLIC_LIGHTNING_NODE_URL || 'https://api.lightning.dev',\n      apiKey: process.env.LIGHTNING_API_KEY\n    }\n\n    this.bitcoinConfig = {\n      network: (process.env.NEXT_PUBLIC_BITCOIN_NETWORK as BitcoinNetwork) || 'testnet',\n      blockstreamApiUrl: process.env.NEXT_PUBLIC_BITCOIN_NETWORK === 'mainnet' \n        ? 'https://blockstream.info/api'\n        : 'https://blockstream.info/testnet/api'\n    }\n  }\n\n  /**\n   * Create a Lightning Network payment request\n   */\n  async createLightningPayment(\n    campaignId: string,\n    amount: number,\n    description: string\n  ): Promise<PaymentResult> {\n    try {\n      const paymentId = `payment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      const invoice = `lntb${amount}u1p${Math.random().toString(36).substr(2, 50)}`\n      \n      const paymentRequest: PaymentRequest = {\n        id: paymentId,\n        campaignId,\n        amount,\n        type: 'lightning',\n        invoice,\n        description,\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n        createdAt: new Date(),\n        status: 'pending'\n      }\n\n      this.pendingPayments.set(paymentId, paymentRequest)\n\n      return {\n        success: true,\n        paymentRequest\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Payment creation failed'\n      }\n    }\n  }\n\n  /**\n   * Create an on-chain Bitcoin payment request\n   */\n  async createOnChainPayment(\n    campaignId: string,\n    amount: number,\n    description: string,\n    recipientAddress: string\n  ): Promise<PaymentResult> {\n    try {\n      const paymentId = `payment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      \n      const paymentRequest: PaymentRequest = {\n        id: paymentId,\n        campaignId,\n        amount,\n        type: 'onchain',\n        address: recipientAddress,\n        description,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n        createdAt: new Date(),\n        status: 'pending'\n      }\n\n      this.pendingPayments.set(paymentId, paymentRequest)\n\n      return {\n        success: true,\n        paymentRequest\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Payment creation failed'\n      }\n    }\n  }\n\n  /**\n   * Get payment status (simplified version)\n   */\n  getPaymentStatus(paymentId: string): PaymentRequest | null {\n    return this.pendingPayments.get(paymentId) || null\n  }\n\n  /**\n   * Generate QR code data for payment\n   */\n  getPaymentQRData(payment: PaymentRequest): string {\n    if (payment.type === 'lightning' && payment.invoice) {\n      return payment.invoice.toUpperCase()\n    } else if (payment.type === 'onchain' && payment.address) {\n      return `bitcoin:${payment.address}?amount=${payment.amount / 100000000}&label=${encodeURIComponent(payment.description)}`\n    }\n    throw new Error('Invalid payment request')\n  }\n\n  /**\n   * Convert satoshis to BTC\n   */\n  satoshisToBTC(satoshis: number): number {\n    return satoshis / 100000000\n  }\n\n  /**\n   * Convert BTC to satoshis\n   */\n  BTCToSatoshis(btc: number): number {\n    return Math.round(btc * 100000000)\n  }\n\n  /**\n   * Validate Bitcoin address (basic validation)\n   */\n  isValidBitcoinAddress(address: string): boolean {\n    // Basic Bitcoin address validation (supports both mainnet and testnet)\n    const patterns = [\n      /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/, // Legacy mainnet\n      /^bc1[a-z0-9]{39,59}$/, // Bech32 mainnet  \n      /^[2mn][a-km-zA-HJ-NP-Z1-9]{25,34}$/, // Legacy testnet\n      /^tb1[a-z0-9]{39,59}$/ // Bech32 testnet\n    ]\n    \n    return patterns.some(pattern => pattern.test(address))\n  }\n\n  /**\n   * Validate Lightning invoice\n   */\n  isValidLightningInvoice(invoice: string): boolean {\n    // Basic Lightning invoice validation\n    return /^ln(bc|tb)[0-9]{1,}[a-z0-9]+$/.test(invoice.toLowerCase())\n  }\n}\n\n// Export singleton instance\nexport const bitcoinPaymentService = new BitcoinPaymentService() "],"mappings":";;AAAA;;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;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","ignoreList":[]}