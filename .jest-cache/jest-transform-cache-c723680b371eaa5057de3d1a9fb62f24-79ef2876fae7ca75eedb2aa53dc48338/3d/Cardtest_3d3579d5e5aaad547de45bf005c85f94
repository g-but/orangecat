f421d5ccc1671b0fd4fb7377a3bdb601
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Card Component Tests
 *
 * Testing critical card component used throughout the Bitcoin platform
 * Essential for displaying campaigns, transactions, and user information
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const Card_1 = require("../Card");
describe('🎴 Card Component Suite - UI Foundation Tests', () => {
    describe('✅ Card Base Component', () => {
        test('should render card with children successfully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsx)("div", { children: "Test card content" }) }));
            expect(react_2.screen.getByText('Test card content')).toBeInTheDocument();
        });
        test('should apply default variant styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "card", children: "Default card" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('bg-white', 'rounded-2xl', 'border', 'border-gray-100', 'shadow-sm');
        });
        test('should apply elevated variant styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { variant: "elevated", "data-testid": "card", children: "Elevated card" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('bg-white', 'rounded-2xl', 'border-0', 'shadow-lg');
        });
        test('should apply minimal variant styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { variant: "minimal", "data-testid": "card", children: "Minimal card" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('bg-white', 'rounded-xl', 'border', 'border-gray-100');
        });
        test('should apply gradient variant styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { variant: "gradient", "data-testid": "card", children: "Gradient card" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('bg-gradient-to-br', 'from-white', 'via-gray-50', 'to-gray-100');
        });
        test('should include interactive transform styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "card", children: "Interactive card" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('active:scale-[0.98]', 'transform');
        });
        test('should apply custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { className: "custom-card-class", "data-testid": "card", children: "Custom card" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('custom-card-class');
        });
        test('should spread additional props', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "card", role: "article", "aria-label": "Test card", children: "Card with props" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveAttribute('role', 'article');
            expect(card).toHaveAttribute('aria-label', 'Test card');
        });
        test('should handle click events', () => {
            const handleClick = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { onClick: handleClick, "data-testid": "card", children: "Clickable card" }));
            const card = react_2.screen.getByTestId('card');
            react_2.fireEvent.click(card);
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        test('should render as div element', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "card", children: "Card element test" }));
            const card = react_2.screen.getByTestId('card');
            expect(card.tagName).toBe('DIV');
        });
    });
    describe('📋 CardHeader Component', () => {
        test('should render header with children', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)("span", { children: "Header content" }) }));
            expect(react_2.screen.getByText('Header content')).toBeInTheDocument();
        });
        test('should apply default padding styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { "data-testid": "header", children: "Header test" }));
            const header = react_2.screen.getByTestId('header');
            expect(header).toHaveClass('p-6');
        });
        test('should apply custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { className: "custom-header", "data-testid": "header", children: "Custom header" }));
            const header = react_2.screen.getByTestId('header');
            expect(header).toHaveClass('custom-header', 'p-6');
        });
        test('should spread additional props', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { "data-testid": "header", role: "banner", children: "Header with props" }));
            const header = react_2.screen.getByTestId('header');
            expect(header).toHaveAttribute('role', 'banner');
        });
        test('should render as div element', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { "data-testid": "header", children: "Header element test" }));
            const header = react_2.screen.getByTestId('header');
            expect(header.tagName).toBe('DIV');
        });
    });
    describe('🏷️ CardTitle Component', () => {
        test('should render title with children', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Bitcoin Campaign Title" }));
            expect(react_2.screen.getByText('Bitcoin Campaign Title')).toBeInTheDocument();
        });
        test('should apply title styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { "data-testid": "title", children: "Title test" }));
            const title = react_2.screen.getByTestId('title');
            expect(title).toHaveClass('text-lg', 'font-semibold', 'leading-tight', 'text-gray-900');
        });
        test('should apply custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { className: "custom-title", "data-testid": "title", children: "Custom title" }));
            const title = react_2.screen.getByTestId('title');
            expect(title).toHaveClass('custom-title', 'text-lg', 'font-semibold');
        });
        test('should spread additional props', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { "data-testid": "title", id: "main-title", children: "Title with props" }));
            const title = react_2.screen.getByTestId('title');
            expect(title).toHaveAttribute('id', 'main-title');
        });
        test('should render as h3 element', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { "data-testid": "title", children: "Title element test" }));
            const title = react_2.screen.getByTestId('title');
            expect(title.tagName).toBe('H3');
        });
        test('should be accessible with proper heading level', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Campaign Title" }));
            const title = react_2.screen.getByRole('heading', { level: 3 });
            expect(title).toBeInTheDocument();
            expect(title).toHaveTextContent('Campaign Title');
        });
    });
    describe('📝 CardDescription Component', () => {
        test('should render description with children', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardDescription, { children: "This is a Bitcoin fundraising campaign description" }));
            expect(react_2.screen.getByText('This is a Bitcoin fundraising campaign description')).toBeInTheDocument();
        });
        test('should apply description styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardDescription, { "data-testid": "description", children: "Description test" }));
            const description = react_2.screen.getByTestId('description');
            expect(description).toHaveClass('text-sm', 'text-gray-600', 'leading-relaxed', 'mt-1');
        });
        test('should apply custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardDescription, { className: "custom-description", "data-testid": "description", children: "Custom description" }));
            const description = react_2.screen.getByTestId('description');
            expect(description).toHaveClass('custom-description', 'text-sm', 'text-gray-600');
        });
        test('should spread additional props', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardDescription, { "data-testid": "description", "aria-label": "Campaign description", children: "Description with props" }));
            const description = react_2.screen.getByTestId('description');
            expect(description).toHaveAttribute('aria-label', 'Campaign description');
        });
        test('should render as p element', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardDescription, { "data-testid": "description", children: "Description element test" }));
            const description = react_2.screen.getByTestId('description');
            expect(description.tagName).toBe('P');
        });
    });
    describe('📄 CardContent Component', () => {
        test('should render content with children', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { children: "Campaign details and donation info" }) }));
            expect(react_2.screen.getByText('Campaign details and donation info')).toBeInTheDocument();
        });
        test('should apply content padding styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { "data-testid": "content", children: "Content test" }));
            const content = react_2.screen.getByTestId('content');
            expect(content).toHaveClass('p-6', 'pt-0');
        });
        test('should apply custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { className: "custom-content", "data-testid": "content", children: "Custom content" }));
            const content = react_2.screen.getByTestId('content');
            expect(content).toHaveClass('custom-content', 'p-6', 'pt-0');
        });
        test('should spread additional props', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { "data-testid": "content", role: "main", children: "Content with props" }));
            const content = react_2.screen.getByTestId('content');
            expect(content).toHaveAttribute('role', 'main');
        });
        test('should render as div element', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { "data-testid": "content", children: "Content element test" }));
            const content = react_2.screen.getByTestId('content');
            expect(content.tagName).toBe('DIV');
        });
    });
    describe('🚀 Bitcoin Platform Integration Tests', () => {
        test('should create a complete campaign card structure', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { variant: "elevated", "data-testid": "campaign-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Bitcoin Education Initiative" }), (0, jsx_runtime_1.jsx)(Card_1.CardDescription, { children: "Supporting Bitcoin education worldwide" })] }), (0, jsx_runtime_1.jsxs)(Card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Target: 1 BTC" }), (0, jsx_runtime_1.jsx)("div", { children: "Raised: 0.5 BTC" })] })] }));
            expect(react_2.screen.getByTestId('campaign-card')).toBeInTheDocument();
            expect(react_2.screen.getByText('Bitcoin Education Initiative')).toBeInTheDocument();
            expect(react_2.screen.getByText('Supporting Bitcoin education worldwide')).toBeInTheDocument();
            expect(react_2.screen.getByText('Target: 1 BTC')).toBeInTheDocument();
            expect(react_2.screen.getByText('Raised: 0.5 BTC')).toBeInTheDocument();
        });
        test('should create a transaction card structure', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { variant: "minimal", "data-testid": "transaction-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Transaction #1234" }), (0, jsx_runtime_1.jsx)(Card_1.CardDescription, { children: "Bitcoin payment confirmation" })] }), (0, jsx_runtime_1.jsxs)(Card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Amount: 0.001 BTC" }), (0, jsx_runtime_1.jsx)("div", { children: "Status: Confirmed" }), (0, jsx_runtime_1.jsx)("div", { children: "Confirmations: 6/6" })] })] }));
            const card = react_2.screen.getByTestId('transaction-card');
            expect(card).toHaveClass('bg-white', 'rounded-xl', 'border');
            expect(react_2.screen.getByText('Transaction #1234')).toBeInTheDocument();
            expect(react_2.screen.getByText('Amount: 0.001 BTC')).toBeInTheDocument();
            expect(react_2.screen.getByText('Status: Confirmed')).toBeInTheDocument();
        });
        test('should create a user profile card', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { variant: "gradient", "data-testid": "profile-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Satoshi Nakamoto" }), (0, jsx_runtime_1.jsx)(Card_1.CardDescription, { children: "Bitcoin Creator" })] }), (0, jsx_runtime_1.jsxs)(Card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Transparency Score: 95%" }), (0, jsx_runtime_1.jsx)("div", { children: "Campaigns Created: 5" }), (0, jsx_runtime_1.jsx)("div", { children: "Total Raised: 10.5 BTC" })] })] }));
            const card = react_2.screen.getByTestId('profile-card');
            expect(card).toHaveClass('bg-gradient-to-br');
            expect(react_2.screen.getByText('Satoshi Nakamoto')).toBeInTheDocument();
            expect(react_2.screen.getByText('Transparency Score: 95%')).toBeInTheDocument();
        });
        test('should handle interactive card with Bitcoin amount', () => {
            const handleCardClick = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { onClick: handleCardClick, "data-testid": "interactive-card", children: [(0, jsx_runtime_1.jsx)(Card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Donation Card" }) }), (0, jsx_runtime_1.jsx)(Card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { children: "Click to donate 0.01 BTC" }) })] }));
            const card = react_2.screen.getByTestId('interactive-card');
            react_2.fireEvent.click(card);
            expect(handleCardClick).toHaveBeenCalledTimes(1);
        });
        test('should display lightning network info card', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { variant: "elevated", "data-testid": "lightning-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "\u26A1 Lightning Payment" }), (0, jsx_runtime_1.jsx)(Card_1.CardDescription, { children: "Instant Bitcoin transactions" })] }), (0, jsx_runtime_1.jsxs)(Card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Fee: 1 satoshi" }), (0, jsx_runtime_1.jsx)("div", { children: "Speed: Instant" }), (0, jsx_runtime_1.jsx)("div", { children: "Network: Lightning" })] })] }));
            expect(react_2.screen.getByText('⚡ Lightning Payment')).toBeInTheDocument();
            expect(react_2.screen.getByText('Fee: 1 satoshi')).toBeInTheDocument();
            expect(react_2.screen.getByText('Speed: Instant')).toBeInTheDocument();
        });
    });
    describe('🎨 Styling & Accessibility Tests', () => {
        test('should have proper hover and transition styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "card", children: "Transition test" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('hover:shadow-lg', 'transition-all', 'duration-300');
        });
        test('should be keyboard navigable when interactive', () => {
            const handleClick = jest.fn();
            const handleKeyDown = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { onClick: handleClick, onKeyDown: handleKeyDown, tabIndex: 0, "data-testid": "keyboard-card", children: "Keyboard accessible card" }));
            const card = react_2.screen.getByTestId('keyboard-card');
            expect(card).toHaveAttribute('tabIndex', '0');
            react_2.fireEvent.keyDown(card, { key: 'Enter' });
            expect(handleKeyDown).toHaveBeenCalledTimes(1);
        });
        test('should maintain semantic structure', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { role: "article", "aria-labelledby": "card-title", "data-testid": "semantic-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { id: "card-title", children: "Semantic Card Title" }), (0, jsx_runtime_1.jsx)(Card_1.CardDescription, { children: "This card follows semantic HTML principles" })] }), (0, jsx_runtime_1.jsx)(Card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { children: "Card content here" }) })] }));
            const card = react_2.screen.getByTestId('semantic-card');
            expect(card).toHaveAttribute('role', 'article');
            expect(card).toHaveAttribute('aria-labelledby', 'card-title');
            const title = react_2.screen.getByRole('heading', { level: 3 });
            expect(title).toHaveAttribute('id', 'card-title');
        });
        test('should handle empty content gracefully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { "data-testid": "empty-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, {}), (0, jsx_runtime_1.jsx)(Card_1.CardDescription, {})] }), (0, jsx_runtime_1.jsx)(Card_1.CardContent, {})] }));
            const card = react_2.screen.getByTestId('empty-card');
            expect(card).toBeInTheDocument();
        });
        test('should work with complex nested content', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(Card_1.Card, { "data-testid": "complex-card", children: [(0, jsx_runtime_1.jsxs)(Card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(Card_1.CardTitle, { children: ["Complex ", (0, jsx_runtime_1.jsx)("strong", { children: "Bitcoin" }), " Campaign"] }), (0, jsx_runtime_1.jsxs)(Card_1.CardDescription, { children: ["With ", (0, jsx_runtime_1.jsx)("em", { children: "formatting" }), " and ", (0, jsx_runtime_1.jsx)("span", { children: "nested elements" })] })] }), (0, jsx_runtime_1.jsx)(Card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)("li", { children: "Item 1" }), (0, jsx_runtime_1.jsx)("li", { children: "Item 2" })] }), (0, jsx_runtime_1.jsx)("button", { children: "Action Button" })] }) })] }));
            expect(react_2.screen.getByText('Bitcoin')).toBeInTheDocument();
            expect(react_2.screen.getByText('formatting')).toBeInTheDocument();
            expect(react_2.screen.getByText('Action Button')).toBeInTheDocument();
            expect(react_2.screen.getByRole('button')).toBeInTheDocument();
        });
    });
    describe('🔧 Edge Cases & Error Handling', () => {
        test('should handle undefined variant gracefully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { variant: undefined, "data-testid": "card", children: "Undefined variant" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toHaveClass('bg-white', 'rounded-2xl'); // Should fallback to default
        });
        test('should handle invalid variant gracefully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { variant: 'invalid', "data-testid": "card", children: "Invalid variant" }));
            const card = react_2.screen.getByTestId('card');
            expect(card).toBeInTheDocument(); // Should still render
        });
        test('should handle very long content', () => {
            const longText = 'a'.repeat(1000);
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "long-content-card", children: (0, jsx_runtime_1.jsx)(Card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: longText }) }) }));
            expect(react_2.screen.getByTestId('long-content-card')).toBeInTheDocument();
            expect(react_2.screen.getByText(longText)).toBeInTheDocument();
        });
        test('should handle special characters in content', () => {
            const specialContent = '₿ 💰 🚀 !@#$%^&*()';
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: specialContent }) }));
            expect(react_2.screen.getByText(specialContent)).toBeInTheDocument();
        });
        test('should not break with null children', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { "data-testid": "null-children-card", children: null }));
            expect(react_2.screen.getByTestId('null-children-card')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3NyYy9jb21wb25lbnRzL3VpL19fdGVzdHNfXy9DYXJkLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7OztHQUtHO0FBRUgsa0RBQTBCO0FBQzFCLGtEQUFtRTtBQUNuRSxxQ0FBbUM7QUFDbkMsa0NBQW9GO0FBRXBGLFFBQVEsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7SUFDN0QsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtRQUNyQyxJQUFJLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1lBQ3pELElBQUEsY0FBTSxFQUNKLHVCQUFDLFdBQUksY0FDSCxnRUFBNEIsR0FDdkIsQ0FDUixDQUFDO1lBQ0YsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQy9DLElBQUEsY0FBTSxFQUFDLHVCQUFDLFdBQUksbUJBQWEsTUFBTSw2QkFBb0IsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sSUFBSSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7WUFDaEQsSUFBQSxjQUFNLEVBQUMsdUJBQUMsV0FBSSxJQUFDLE9BQU8sRUFBQyxVQUFVLGlCQUFhLE1BQU0sOEJBQXFCLENBQUMsQ0FBQztZQUN6RSxNQUFNLElBQUksR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FB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Q0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtZQUN2RCxNQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQztZQUM1QyxJQUFBLGNBQU0sRUFDSix1QkFBQyxXQUFJLGNBQ0gsdUJBQUMsZ0JBQVMsY0FBRSxjQUFjLEdBQWEsR0FDbEMsQ0FDUixDQUFDO1lBRUYsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxJQUFBLGNBQU0sRUFDSix1QkFBQyxXQUFJLG1CQUFhLG9CQUFvQixZQUNuQyxJQUFJLEdBQ0EsQ0FDUixDQUFDO1lBRUYsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2cvZGV2L29yYW5nZWNhdC9zcmMvY29tcG9uZW50cy91aS9fX3Rlc3RzX18vQ2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENhcmQgQ29tcG9uZW50IFRlc3RzXG4gKiBcbiAqIFRlc3RpbmcgY3JpdGljYWwgY2FyZCBjb21wb25lbnQgdXNlZCB0aHJvdWdob3V0IHRoZSBCaXRjb2luIHBsYXRmb3JtXG4gKiBFc3NlbnRpYWwgZm9yIGRpc3BsYXlpbmcgY2FtcGFpZ25zLCB0cmFuc2FjdGlvbnMsIGFuZCB1c2VyIGluZm9ybWF0aW9uXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5pbXBvcnQgeyBDYXJkLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUsIENhcmREZXNjcmlwdGlvbiwgQ2FyZENvbnRlbnQgfSBmcm9tICcuLi9DYXJkJztcblxuZGVzY3JpYmUoJ/CfjrQgQ2FyZCBDb21wb25lbnQgU3VpdGUgLSBVSSBGb3VuZGF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgn4pyFIENhcmQgQmFzZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBjYXJkIHdpdGggY2hpbGRyZW4gc3VjY2Vzc2Z1bGx5JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZD5cbiAgICAgICAgICA8ZGl2PlRlc3QgY2FyZCBjb250ZW50PC9kaXY+XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGVzdCBjYXJkIGNvbnRlbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhcHBseSBkZWZhdWx0IHZhcmlhbnQgc3R5bGVzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkIGRhdGEtdGVzdGlkPVwiY2FyZFwiPkRlZmF1bHQgY2FyZDwvQ2FyZD4pO1xuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUNsYXNzKCdiZy13aGl0ZScsICdyb3VuZGVkLTJ4bCcsICdib3JkZXInLCAnYm9yZGVyLWdyYXktMTAwJywgJ3NoYWRvdy1zbScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IGVsZXZhdGVkIHZhcmlhbnQgc3R5bGVzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkIHZhcmlhbnQ9XCJlbGV2YXRlZFwiIGRhdGEtdGVzdGlkPVwiY2FyZFwiPkVsZXZhdGVkIGNhcmQ8L0NhcmQ+KTtcbiAgICAgIGNvbnN0IGNhcmQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhcmQnKTtcbiAgICAgIGV4cGVjdChjYXJkKS50b0hhdmVDbGFzcygnYmctd2hpdGUnLCAncm91bmRlZC0yeGwnLCAnYm9yZGVyLTAnLCAnc2hhZG93LWxnJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYXBwbHkgbWluaW1hbCB2YXJpYW50IHN0eWxlcycsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZCB2YXJpYW50PVwibWluaW1hbFwiIGRhdGEtdGVzdGlkPVwiY2FyZFwiPk1pbmltYWwgY2FyZDwvQ2FyZD4pO1xuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUNsYXNzKCdiZy13aGl0ZScsICdyb3VuZGVkLXhsJywgJ2JvcmRlcicsICdib3JkZXItZ3JheS0xMDAnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhcHBseSBncmFkaWVudCB2YXJpYW50IHN0eWxlcycsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZCB2YXJpYW50PVwiZ3JhZGllbnRcIiBkYXRhLXRlc3RpZD1cImNhcmRcIj5HcmFkaWVudCBjYXJkPC9DYXJkPik7XG4gICAgICBjb25zdCBjYXJkID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjYXJkJyk7XG4gICAgICBleHBlY3QoY2FyZCkudG9IYXZlQ2xhc3MoJ2JnLWdyYWRpZW50LXRvLWJyJywgJ2Zyb20td2hpdGUnLCAndmlhLWdyYXktNTAnLCAndG8tZ3JheS0xMDAnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBpbmNsdWRlIGludGVyYWN0aXZlIHRyYW5zZm9ybSBzdHlsZXMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPENhcmQgZGF0YS10ZXN0aWQ9XCJjYXJkXCI+SW50ZXJhY3RpdmUgY2FyZDwvQ2FyZD4pO1xuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUNsYXNzKCdhY3RpdmU6c2NhbGUtWzAuOThdJywgJ3RyYW5zZm9ybScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IGN1c3RvbSBjbGFzc05hbWUnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPENhcmQgY2xhc3NOYW1lPVwiY3VzdG9tLWNhcmQtY2xhc3NcIiBkYXRhLXRlc3RpZD1cImNhcmRcIj5DdXN0b20gY2FyZDwvQ2FyZD4pO1xuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUNsYXNzKCdjdXN0b20tY2FyZC1jbGFzcycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHNwcmVhZCBhZGRpdGlvbmFsIHByb3BzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkIGRhdGEtdGVzdGlkPVwiY2FyZFwiIHJvbGU9XCJhcnRpY2xlXCIgYXJpYS1sYWJlbD1cIlRlc3QgY2FyZFwiPkNhcmQgd2l0aCBwcm9wczwvQ2FyZD4pO1xuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUF0dHJpYnV0ZSgncm9sZScsICdhcnRpY2xlJyk7XG4gICAgICBleHBlY3QoY2FyZCkudG9IYXZlQXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1Rlc3QgY2FyZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjbGljayBldmVudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGVDbGljayA9IGplc3QuZm4oKTtcbiAgICAgIHJlbmRlcig8Q2FyZCBvbkNsaWNrPXtoYW5kbGVDbGlja30gZGF0YS10ZXN0aWQ9XCJjYXJkXCI+Q2xpY2thYmxlIGNhcmQ8L0NhcmQ+KTtcbiAgICAgIGNvbnN0IGNhcmQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhcmQnKTtcbiAgICAgIFxuICAgICAgZmlyZUV2ZW50LmNsaWNrKGNhcmQpO1xuICAgICAgZXhwZWN0KGhhbmRsZUNsaWNrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGFzIGRpdiBlbGVtZW50JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkIGRhdGEtdGVzdGlkPVwiY2FyZFwiPkNhcmQgZWxlbWVudCB0ZXN0PC9DYXJkPik7XG4gICAgICBjb25zdCBjYXJkID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjYXJkJyk7XG4gICAgICBleHBlY3QoY2FyZC50YWdOYW1lKS50b0JlKCdESVYnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ/Cfk4sgQ2FyZEhlYWRlciBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBoZWFkZXIgd2l0aCBjaGlsZHJlbicsICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgICAgPHNwYW4+SGVhZGVyIGNvbnRlbnQ8L3NwYW4+XG4gICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSGVhZGVyIGNvbnRlbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhcHBseSBkZWZhdWx0IHBhZGRpbmcgc3R5bGVzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkSGVhZGVyIGRhdGEtdGVzdGlkPVwiaGVhZGVyXCI+SGVhZGVyIHRlc3Q8L0NhcmRIZWFkZXI+KTtcbiAgICAgIGNvbnN0IGhlYWRlciA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnaGVhZGVyJyk7XG4gICAgICBleHBlY3QoaGVhZGVyKS50b0hhdmVDbGFzcygncC02Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYXBwbHkgY3VzdG9tIGNsYXNzTmFtZScsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZEhlYWRlciBjbGFzc05hbWU9XCJjdXN0b20taGVhZGVyXCIgZGF0YS10ZXN0aWQ9XCJoZWFkZXJcIj5DdXN0b20gaGVhZGVyPC9DYXJkSGVhZGVyPik7XG4gICAgICBjb25zdCBoZWFkZXIgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2hlYWRlcicpO1xuICAgICAgZXhwZWN0KGhlYWRlcikudG9IYXZlQ2xhc3MoJ2N1c3RvbS1oZWFkZXInLCAncC02Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc3ByZWFkIGFkZGl0aW9uYWwgcHJvcHMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPENhcmRIZWFkZXIgZGF0YS10ZXN0aWQ9XCJoZWFkZXJcIiByb2xlPVwiYmFubmVyXCI+SGVhZGVyIHdpdGggcHJvcHM8L0NhcmRIZWFkZXI+KTtcbiAgICAgIGNvbnN0IGhlYWRlciA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnaGVhZGVyJyk7XG4gICAgICBleHBlY3QoaGVhZGVyKS50b0hhdmVBdHRyaWJ1dGUoJ3JvbGUnLCAnYmFubmVyJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGFzIGRpdiBlbGVtZW50JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkSGVhZGVyIGRhdGEtdGVzdGlkPVwiaGVhZGVyXCI+SGVhZGVyIGVsZW1lbnQgdGVzdDwvQ2FyZEhlYWRlcj4pO1xuICAgICAgY29uc3QgaGVhZGVyID0gc2NyZWVuLmdldEJ5VGVzdElkKCdoZWFkZXInKTtcbiAgICAgIGV4cGVjdChoZWFkZXIudGFnTmFtZSkudG9CZSgnRElWJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfwn4+377iPIENhcmRUaXRsZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciB0aXRsZSB3aXRoIGNoaWxkcmVuJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZFRpdGxlPkJpdGNvaW4gQ2FtcGFpZ24gVGl0bGU8L0NhcmRUaXRsZT5cbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQml0Y29pbiBDYW1wYWlnbiBUaXRsZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IHRpdGxlIHN0eWxlcycsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZFRpdGxlIGRhdGEtdGVzdGlkPVwidGl0bGVcIj5UaXRsZSB0ZXN0PC9DYXJkVGl0bGU+KTtcbiAgICAgIGNvbnN0IHRpdGxlID0gc2NyZWVuLmdldEJ5VGVzdElkKCd0aXRsZScpO1xuICAgICAgZXhwZWN0KHRpdGxlKS50b0hhdmVDbGFzcygndGV4dC1sZycsICdmb250LXNlbWlib2xkJywgJ2xlYWRpbmctdGlnaHQnLCAndGV4dC1ncmF5LTkwMCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IGN1c3RvbSBjbGFzc05hbWUnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPENhcmRUaXRsZSBjbGFzc05hbWU9XCJjdXN0b20tdGl0bGVcIiBkYXRhLXRlc3RpZD1cInRpdGxlXCI+Q3VzdG9tIHRpdGxlPC9DYXJkVGl0bGU+KTtcbiAgICAgIGNvbnN0IHRpdGxlID0gc2NyZWVuLmdldEJ5VGVzdElkKCd0aXRsZScpO1xuICAgICAgZXhwZWN0KHRpdGxlKS50b0hhdmVDbGFzcygnY3VzdG9tLXRpdGxlJywgJ3RleHQtbGcnLCAnZm9udC1zZW1pYm9sZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHNwcmVhZCBhZGRpdGlvbmFsIHByb3BzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkVGl0bGUgZGF0YS10ZXN0aWQ9XCJ0aXRsZVwiIGlkPVwibWFpbi10aXRsZVwiPlRpdGxlIHdpdGggcHJvcHM8L0NhcmRUaXRsZT4pO1xuICAgICAgY29uc3QgdGl0bGUgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3RpdGxlJyk7XG4gICAgICBleHBlY3QodGl0bGUpLnRvSGF2ZUF0dHJpYnV0ZSgnaWQnLCAnbWFpbi10aXRsZScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBhcyBoMyBlbGVtZW50JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkVGl0bGUgZGF0YS10ZXN0aWQ9XCJ0aXRsZVwiPlRpdGxlIGVsZW1lbnQgdGVzdDwvQ2FyZFRpdGxlPik7XG4gICAgICBjb25zdCB0aXRsZSA9IHNjcmVlbi5nZXRCeVRlc3RJZCgndGl0bGUnKTtcbiAgICAgIGV4cGVjdCh0aXRsZS50YWdOYW1lKS50b0JlKCdIMycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGJlIGFjY2Vzc2libGUgd2l0aCBwcm9wZXIgaGVhZGluZyBsZXZlbCcsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZFRpdGxlPkNhbXBhaWduIFRpdGxlPC9DYXJkVGl0bGU+KTtcbiAgICAgIGNvbnN0IHRpdGxlID0gc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbGV2ZWw6IDMgfSk7XG4gICAgICBleHBlY3QodGl0bGUpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3QodGl0bGUpLnRvSGF2ZVRleHRDb250ZW50KCdDYW1wYWlnbiBUaXRsZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn8J+TnSBDYXJkRGVzY3JpcHRpb24gQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZW5kZXIgZGVzY3JpcHRpb24gd2l0aCBjaGlsZHJlbicsICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPENhcmREZXNjcmlwdGlvbj5UaGlzIGlzIGEgQml0Y29pbiBmdW5kcmFpc2luZyBjYW1wYWlnbiBkZXNjcmlwdGlvbjwvQ2FyZERlc2NyaXB0aW9uPlxuICAgICAgKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUaGlzIGlzIGEgQml0Y29pbiBmdW5kcmFpc2luZyBjYW1wYWlnbiBkZXNjcmlwdGlvbicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IGRlc2NyaXB0aW9uIHN0eWxlcycsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZERlc2NyaXB0aW9uIGRhdGEtdGVzdGlkPVwiZGVzY3JpcHRpb25cIj5EZXNjcmlwdGlvbiB0ZXN0PC9DYXJkRGVzY3JpcHRpb24+KTtcbiAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdkZXNjcmlwdGlvbicpO1xuICAgICAgZXhwZWN0KGRlc2NyaXB0aW9uKS50b0hhdmVDbGFzcygndGV4dC1zbScsICd0ZXh0LWdyYXktNjAwJywgJ2xlYWRpbmctcmVsYXhlZCcsICdtdC0xJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYXBwbHkgY3VzdG9tIGNsYXNzTmFtZScsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZERlc2NyaXB0aW9uIGNsYXNzTmFtZT1cImN1c3RvbS1kZXNjcmlwdGlvblwiIGRhdGEtdGVzdGlkPVwiZGVzY3JpcHRpb25cIj5DdXN0b20gZGVzY3JpcHRpb248L0NhcmREZXNjcmlwdGlvbj4pO1xuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2Rlc2NyaXB0aW9uJyk7XG4gICAgICBleHBlY3QoZGVzY3JpcHRpb24pLnRvSGF2ZUNsYXNzKCdjdXN0b20tZGVzY3JpcHRpb24nLCAndGV4dC1zbScsICd0ZXh0LWdyYXktNjAwJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc3ByZWFkIGFkZGl0aW9uYWwgcHJvcHMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPENhcmREZXNjcmlwdGlvbiBkYXRhLXRlc3RpZD1cImRlc2NyaXB0aW9uXCIgYXJpYS1sYWJlbD1cIkNhbXBhaWduIGRlc2NyaXB0aW9uXCI+RGVzY3JpcHRpb24gd2l0aCBwcm9wczwvQ2FyZERlc2NyaXB0aW9uPik7XG4gICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZGVzY3JpcHRpb24nKTtcbiAgICAgIGV4cGVjdChkZXNjcmlwdGlvbikudG9IYXZlQXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0NhbXBhaWduIGRlc2NyaXB0aW9uJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGFzIHAgZWxlbWVudCcsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZERlc2NyaXB0aW9uIGRhdGEtdGVzdGlkPVwiZGVzY3JpcHRpb25cIj5EZXNjcmlwdGlvbiBlbGVtZW50IHRlc3Q8L0NhcmREZXNjcmlwdGlvbj4pO1xuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2Rlc2NyaXB0aW9uJyk7XG4gICAgICBleHBlY3QoZGVzY3JpcHRpb24udGFnTmFtZSkudG9CZSgnUCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn8J+ThCBDYXJkQ29udGVudCBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBjb250ZW50IHdpdGggY2hpbGRyZW4nLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICA8ZGl2PkNhbXBhaWduIGRldGFpbHMgYW5kIGRvbmF0aW9uIGluZm88L2Rpdj5cbiAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ2FtcGFpZ24gZGV0YWlscyBhbmQgZG9uYXRpb24gaW5mbycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGFwcGx5IGNvbnRlbnQgcGFkZGluZyBzdHlsZXMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPENhcmRDb250ZW50IGRhdGEtdGVzdGlkPVwiY29udGVudFwiPkNvbnRlbnQgdGVzdDwvQ2FyZENvbnRlbnQ+KTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NvbnRlbnQnKTtcbiAgICAgIGV4cGVjdChjb250ZW50KS50b0hhdmVDbGFzcygncC02JywgJ3B0LTAnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhcHBseSBjdXN0b20gY2xhc3NOYW1lJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkQ29udGVudCBjbGFzc05hbWU9XCJjdXN0b20tY29udGVudFwiIGRhdGEtdGVzdGlkPVwiY29udGVudFwiPkN1c3RvbSBjb250ZW50PC9DYXJkQ29udGVudD4pO1xuICAgICAgY29uc3QgY29udGVudCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY29udGVudCcpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvSGF2ZUNsYXNzKCdjdXN0b20tY29udGVudCcsICdwLTYnLCAncHQtMCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHNwcmVhZCBhZGRpdGlvbmFsIHByb3BzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkQ29udGVudCBkYXRhLXRlc3RpZD1cImNvbnRlbnRcIiByb2xlPVwibWFpblwiPkNvbnRlbnQgd2l0aCBwcm9wczwvQ2FyZENvbnRlbnQ+KTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NvbnRlbnQnKTtcbiAgICAgIGV4cGVjdChjb250ZW50KS50b0hhdmVBdHRyaWJ1dGUoJ3JvbGUnLCAnbWFpbicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBhcyBkaXYgZWxlbWVudCcsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZENvbnRlbnQgZGF0YS10ZXN0aWQ9XCJjb250ZW50XCI+Q29udGVudCBlbGVtZW50IHRlc3Q8L0NhcmRDb250ZW50Pik7XG4gICAgICBjb25zdCBjb250ZW50ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjb250ZW50Jyk7XG4gICAgICBleHBlY3QoY29udGVudC50YWdOYW1lKS50b0JlKCdESVYnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ/CfmoAgQml0Y29pbiBQbGF0Zm9ybSBJbnRlZ3JhdGlvbiBUZXN0cycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGEgY29tcGxldGUgY2FtcGFpZ24gY2FyZCBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkIHZhcmlhbnQ9XCJlbGV2YXRlZFwiIGRhdGEtdGVzdGlkPVwiY2FtcGFpZ24tY2FyZFwiPlxuICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgPENhcmRUaXRsZT5CaXRjb2luIEVkdWNhdGlvbiBJbml0aWF0aXZlPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPlN1cHBvcnRpbmcgQml0Y29pbiBlZHVjYXRpb24gd29ybGR3aWRlPC9DYXJkRGVzY3JpcHRpb24+XG4gICAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxkaXY+VGFyZ2V0OiAxIEJUQzwvZGl2PlxuICAgICAgICAgICAgPGRpdj5SYWlzZWQ6IDAuNSBCVEM8L2Rpdj5cbiAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICA8L0NhcmQ+XG4gICAgICApO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjYW1wYWlnbi1jYXJkJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQml0Y29pbiBFZHVjYXRpb24gSW5pdGlhdGl2ZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1N1cHBvcnRpbmcgQml0Y29pbiBlZHVjYXRpb24gd29ybGR3aWRlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGFyZ2V0OiAxIEJUQycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1JhaXNlZDogMC41IEJUQycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBhIHRyYW5zYWN0aW9uIGNhcmQgc3RydWN0dXJlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZCB2YXJpYW50PVwibWluaW1hbFwiIGRhdGEtdGVzdGlkPVwidHJhbnNhY3Rpb24tY2FyZFwiPlxuICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgPENhcmRUaXRsZT5UcmFuc2FjdGlvbiAjMTIzNDwvQ2FyZFRpdGxlPlxuICAgICAgICAgICAgPENhcmREZXNjcmlwdGlvbj5CaXRjb2luIHBheW1lbnQgY29uZmlybWF0aW9uPC9DYXJkRGVzY3JpcHRpb24+XG4gICAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxkaXY+QW1vdW50OiAwLjAwMSBCVEM8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+U3RhdHVzOiBDb25maXJtZWQ8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+Q29uZmlybWF0aW9uczogNi82PC9kaXY+XG4gICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgndHJhbnNhY3Rpb24tY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUNsYXNzKCdiZy13aGl0ZScsICdyb3VuZGVkLXhsJywgJ2JvcmRlcicpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1RyYW5zYWN0aW9uICMxMjM0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQW1vdW50OiAwLjAwMSBCVEMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTdGF0dXM6IENvbmZpcm1lZCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBhIHVzZXIgcHJvZmlsZSBjYXJkJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZCB2YXJpYW50PVwiZ3JhZGllbnRcIiBkYXRhLXRlc3RpZD1cInByb2ZpbGUtY2FyZFwiPlxuICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgPENhcmRUaXRsZT5TYXRvc2hpIE5ha2Ftb3RvPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPkJpdGNvaW4gQ3JlYXRvcjwvQ2FyZERlc2NyaXB0aW9uPlxuICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8ZGl2PlRyYW5zcGFyZW5jeSBTY29yZTogOTUlPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PkNhbXBhaWducyBDcmVhdGVkOiA1PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlRvdGFsIFJhaXNlZDogMTAuNSBCVEM8L2Rpdj5cbiAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICA8L0NhcmQ+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBjYXJkID0gc2NyZWVuLmdldEJ5VGVzdElkKCdwcm9maWxlLWNhcmQnKTtcbiAgICAgIGV4cGVjdChjYXJkKS50b0hhdmVDbGFzcygnYmctZ3JhZGllbnQtdG8tYnInKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTYXRvc2hpIE5ha2Ftb3RvJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVHJhbnNwYXJlbmN5IFNjb3JlOiA5NSUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaW50ZXJhY3RpdmUgY2FyZCB3aXRoIEJpdGNvaW4gYW1vdW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlQ2FyZENsaWNrID0gamVzdC5mbigpO1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZCBvbkNsaWNrPXtoYW5kbGVDYXJkQ2xpY2t9IGRhdGEtdGVzdGlkPVwiaW50ZXJhY3RpdmUtY2FyZFwiPlxuICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgPENhcmRUaXRsZT5Eb25hdGlvbiBDYXJkPC9DYXJkVGl0bGU+XG4gICAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxkaXY+Q2xpY2sgdG8gZG9uYXRlIDAuMDEgQlRDPC9kaXY+XG4gICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnaW50ZXJhY3RpdmUtY2FyZCcpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGNhcmQpO1xuICAgICAgZXhwZWN0KGhhbmRsZUNhcmRDbGljaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRpc3BsYXkgbGlnaHRuaW5nIG5ldHdvcmsgaW5mbyBjYXJkJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZCB2YXJpYW50PVwiZWxldmF0ZWRcIiBkYXRhLXRlc3RpZD1cImxpZ2h0bmluZy1jYXJkXCI+XG4gICAgICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgICAgICA8Q2FyZFRpdGxlPuKaoSBMaWdodG5pbmcgUGF5bWVudDwvQ2FyZFRpdGxlPlxuICAgICAgICAgICAgPENhcmREZXNjcmlwdGlvbj5JbnN0YW50IEJpdGNvaW4gdHJhbnNhY3Rpb25zPC9DYXJkRGVzY3JpcHRpb24+XG4gICAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxkaXY+RmVlOiAxIHNhdG9zaGk8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+U3BlZWQ6IEluc3RhbnQ8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+TmV0d29yazogTGlnaHRuaW5nPC9kaXY+XG4gICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+KaoSBMaWdodG5pbmcgUGF5bWVudCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0ZlZTogMSBzYXRvc2hpJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU3BlZWQ6IEluc3RhbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ/CfjqggU3R5bGluZyAmIEFjY2Vzc2liaWxpdHkgVGVzdHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhdmUgcHJvcGVyIGhvdmVyIGFuZCB0cmFuc2l0aW9uIHN0eWxlcycsICgpID0+IHtcbiAgICAgIHJlbmRlcig8Q2FyZCBkYXRhLXRlc3RpZD1cImNhcmRcIj5UcmFuc2l0aW9uIHRlc3Q8L0NhcmQ+KTtcbiAgICAgIGNvbnN0IGNhcmQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhcmQnKTtcbiAgICAgIGV4cGVjdChjYXJkKS50b0hhdmVDbGFzcygnaG92ZXI6c2hhZG93LWxnJywgJ3RyYW5zaXRpb24tYWxsJywgJ2R1cmF0aW9uLTMwMCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGJlIGtleWJvYXJkIG5hdmlnYWJsZSB3aGVuIGludGVyYWN0aXZlJywgKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlQ2xpY2sgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkIFxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSBcbiAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJrZXlib2FyZC1jYXJkXCJcbiAgICAgICAgPlxuICAgICAgICAgIEtleWJvYXJkIGFjY2Vzc2libGUgY2FyZFxuICAgICAgICA8L0NhcmQ+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBjYXJkID0gc2NyZWVuLmdldEJ5VGVzdElkKCdrZXlib2FyZC1jYXJkJyk7XG4gICAgICBleHBlY3QoY2FyZCkudG9IYXZlQXR0cmlidXRlKCd0YWJJbmRleCcsICcwJyk7XG4gICAgICBcbiAgICAgIGZpcmVFdmVudC5rZXlEb3duKGNhcmQsIHsga2V5OiAnRW50ZXInIH0pO1xuICAgICAgZXhwZWN0KGhhbmRsZUtleURvd24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBtYWludGFpbiBzZW1hbnRpYyBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkIHJvbGU9XCJhcnRpY2xlXCIgYXJpYS1sYWJlbGxlZGJ5PVwiY2FyZC10aXRsZVwiIGRhdGEtdGVzdGlkPVwic2VtYW50aWMtY2FyZFwiPlxuICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgPENhcmRUaXRsZSBpZD1cImNhcmQtdGl0bGVcIj5TZW1hbnRpYyBDYXJkIFRpdGxlPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPlRoaXMgY2FyZCBmb2xsb3dzIHNlbWFudGljIEhUTUwgcHJpbmNpcGxlczwvQ2FyZERlc2NyaXB0aW9uPlxuICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8ZGl2PkNhcmQgY29udGVudCBoZXJlPC9kaXY+XG4gICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VtYW50aWMtY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvSGF2ZUF0dHJpYnV0ZSgncm9sZScsICdhcnRpY2xlJyk7XG4gICAgICBleHBlY3QoY2FyZCkudG9IYXZlQXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCAnY2FyZC10aXRsZScpO1xuICAgICAgXG4gICAgICBjb25zdCB0aXRsZSA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IGxldmVsOiAzIH0pO1xuICAgICAgZXhwZWN0KHRpdGxlKS50b0hhdmVBdHRyaWJ1dGUoJ2lkJywgJ2NhcmQtdGl0bGUnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgY29udGVudCBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZCBkYXRhLXRlc3RpZD1cImVtcHR5LWNhcmRcIj5cbiAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgIDxDYXJkVGl0bGU+PC9DYXJkVGl0bGU+XG4gICAgICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPjwvQ2FyZERlc2NyaXB0aW9uPlxuICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICA8Q2FyZENvbnRlbnQ+PC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1wdHktY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgd29yayB3aXRoIGNvbXBsZXggbmVzdGVkIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkIGRhdGEtdGVzdGlkPVwiY29tcGxleC1jYXJkXCI+XG4gICAgICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgICAgICA8Q2FyZFRpdGxlPlxuICAgICAgICAgICAgICBDb21wbGV4IDxzdHJvbmc+Qml0Y29pbjwvc3Ryb25nPiBDYW1wYWlnblxuICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICBXaXRoIDxlbT5mb3JtYXR0aW5nPC9lbT4gYW5kIDxzcGFuPm5lc3RlZCBlbGVtZW50czwvc3Bhbj5cbiAgICAgICAgICAgIDwvQ2FyZERlc2NyaXB0aW9uPlxuICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpPkl0ZW0gMTwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPkl0ZW0gMjwvbGk+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDxidXR0b24+QWN0aW9uIEJ1dHRvbjwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0JpdGNvaW4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdmb3JtYXR0aW5nJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQWN0aW9uIEJ1dHRvbicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn8J+UpyBFZGdlIENhc2VzICYgRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB1bmRlZmluZWQgdmFyaWFudCBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkIHZhcmlhbnQ9e3VuZGVmaW5lZCBhcyBhbnl9IGRhdGEtdGVzdGlkPVwiY2FyZFwiPlVuZGVmaW5lZCB2YXJpYW50PC9DYXJkPik7XG4gICAgICBjb25zdCBjYXJkID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjYXJkJyk7XG4gICAgICBleHBlY3QoY2FyZCkudG9IYXZlQ2xhc3MoJ2JnLXdoaXRlJywgJ3JvdW5kZWQtMnhsJyk7IC8vIFNob3VsZCBmYWxsYmFjayB0byBkZWZhdWx0XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgdmFyaWFudCBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDYXJkIHZhcmlhbnQ9eydpbnZhbGlkJyBhcyBhbnl9IGRhdGEtdGVzdGlkPVwiY2FyZFwiPkludmFsaWQgdmFyaWFudDwvQ2FyZD4pO1xuICAgICAgY29uc3QgY2FyZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZCcpO1xuICAgICAgZXhwZWN0KGNhcmQpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIFNob3VsZCBzdGlsbCByZW5kZXJcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdmVyeSBsb25nIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsb25nVGV4dCA9ICdhJy5yZXBlYXQoMTAwMCk7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkIGRhdGEtdGVzdGlkPVwibG9uZy1jb250ZW50LWNhcmRcIj5cbiAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgIDxDYXJkVGl0bGU+e2xvbmdUZXh0fTwvQ2FyZFRpdGxlPlxuICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9uZy1jb250ZW50LWNhcmQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KGxvbmdUZXh0KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzcGVjaWFsQ29udGVudCA9ICfigr8g8J+SsCDwn5qAICFAIyQlXiYqKCknO1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8Q2FyZD5cbiAgICAgICAgICA8Q2FyZFRpdGxlPntzcGVjaWFsQ29udGVudH08L0NhcmRUaXRsZT5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoc3BlY2lhbENvbnRlbnQpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIG5vdCBicmVhayB3aXRoIG51bGwgY2hpbGRyZW4nLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxDYXJkIGRhdGEtdGVzdGlkPVwibnVsbC1jaGlsZHJlbi1jYXJkXCI+XG4gICAgICAgICAge251bGx9XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ251bGwtY2hpbGRyZW4tY2FyZCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyAiXSwidmVyc2lvbiI6M30=