{"file":"/home/g/dev/orangecat/src/stores/__tests__/campaignStore.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/stores/__tests__/campaignStore.comprehensive.test.ts"],"sourcesContent":["/**\n * COMPREHENSIVE CAMPAIGN STORE INTEGRATION TESTS\n * \n * 🎯 CRITICAL FOR FUNDRAISING PLATFORM SECURITY:\n * - Campaign data integrity and state management \n * - Local storage + database synchronization\n * - Campaign lifecycle (draft → published → paused → resumed)\n * - Data validation and error handling\n * - Race condition prevention\n * \n * This covers the MAIN BUSINESS LOGIC of the platform that handles user's\n * campaign data and fundraising operations.\n */\n\nimport { act, renderHook, waitFor } from '@testing-library/react'\n\n// Mock environment variables\nprocess.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co'\nprocess.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key'\n\n// Mock Supabase client with comprehensive chaining support\njest.mock('@supabase/ssr', () => ({\n  createBrowserClient: jest.fn(() => {\n    const mockOperation = {\n      from: jest.fn(),\n      select: jest.fn(),\n      eq: jest.fn(),\n      order: jest.fn(),\n      insert: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      single: jest.fn()\n    };\n\n    // Make each method return the mock object to support chaining\n    Object.keys(mockOperation).forEach(key => {\n      mockOperation[key].mockReturnValue(mockOperation);\n    });\n\n    return mockOperation;\n  })\n}))\n\n// Create separate mock for test manipulation\nconst mockSupabaseOperations = {\n  from: jest.fn(),\n  select: jest.fn(),\n  eq: jest.fn(),\n  order: jest.fn(),\n  insert: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  single: jest.fn()\n};\n\n// Make each method return the mock object to support chaining\nObject.keys(mockSupabaseOperations).forEach(key => {\n  mockSupabaseOperations[key].mockReturnValue(mockSupabaseOperations);\n});\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn()\n}\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n})\n\nimport { useCampaignStore, CampaignFormData, Campaign } from '../campaignStore'\n\ndescribe('🏗️ Campaign Store - COMPREHENSIVE INTEGRATION TESTS', () => {\n  const mockUserId = 'user-123'\n  const mockCampaignId = 'campaign-456'\n\n  const mockFormData: CampaignFormData = {\n    title: 'Bitcoin Education Initiative',\n    description: 'Teaching Bitcoin to the world',\n    bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n    lightning_address: 'education@lightning.network',\n    website_url: 'https://bitcoineducation.org',\n    goal_amount: 2000000, // 2 million sats\n    categories: ['education', 'technology'],\n    images: []\n  }\n\n  const mockDatabaseCampaign = {\n    id: mockCampaignId,\n    user_id: mockUserId,\n    title: 'Bitcoin Education Initiative',\n    description: 'Teaching Bitcoin to the world',\n    bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n    lightning_address: 'education@lightning.network',\n    website_url: 'https://bitcoineducation.org',\n    goal_amount: 2000000,\n    total_funding: 150000,\n    contributor_count: 15,\n    is_active: true,\n    is_public: true,\n    category: 'education',\n    tags: ['technology'],\n    currency: 'BTC',\n    created_at: '2024-01-01T00:00:00.000Z',\n    updated_at: '2024-01-01T00:00:00.000Z',\n    // Campaign interface requirements\n    isDraft: false,\n    isActive: true,\n    isPaused: false,\n    lastModified: '2024-01-01T00:00:00.000Z',\n    syncStatus: 'synced' as const,\n    source: 'database'\n  }\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks()\n    localStorageMock.getItem.mockReturnValue(null)\n    \n    // Reset the mock operation chain - each operation returns the mock for chaining\n    Object.keys(mockSupabaseOperations).forEach(key => {\n      mockSupabaseOperations[key].mockClear();\n      mockSupabaseOperations[key].mockReturnValue(mockSupabaseOperations);\n    });\n    \n    // Set default successful responses\n    mockSupabaseOperations.order.mockResolvedValue({ data: [], error: null });\n    mockSupabaseOperations.single.mockResolvedValue({ data: mockDatabaseCampaign, error: null });\n    mockSupabaseOperations.insert.mockResolvedValue({ data: mockDatabaseCampaign, error: null });\n    mockSupabaseOperations.update.mockResolvedValue({ data: mockDatabaseCampaign, error: null });\n    mockSupabaseOperations.delete.mockResolvedValue({ data: null, error: null });\n  })\n\n  describe('🔄 loadCampaigns - Database Integration', () => {\n    test('should load campaigns from database successfully', async () => {\n      // Mock successful database response\n      mockSupabaseOperations.order.mockResolvedValueOnce({\n        data: [mockDatabaseCampaign],\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.loadCampaigns(mockUserId)\n      })\n\n      expect(result.current.campaigns).toHaveLength(1)\n      expect(result.current.campaigns[0]).toMatchObject({\n        ...mockDatabaseCampaign,\n        source: 'database',\n        isDraft: false,\n        isActive: true,\n        isPaused: false\n      })\n      expect(result.current.isLoading).toBe(false)\n      expect(result.current.error).toBeNull()\n    })\n\n    test('should handle database errors gracefully', async () => {\n      // Mock database error\n      mockSupabaseOperations.order.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Database connection failed' }\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.loadCampaigns(mockUserId)\n      })\n\n      expect(result.current.campaigns).toEqual([])\n      expect(result.current.error).toBe('Error loading campaigns: Database connection failed')\n      expect(result.current.isLoading).toBe(false)\n    })\n\n    test('should merge local drafts with database campaigns', async () => {\n      // Mock local storage with a draft\n      const localDraft = {\n        formData: mockFormData,\n        currentStep: 2,\n        lastSaved: new Date().toISOString(),\n        draftId: 'local-draft-789'\n      }\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(localDraft))\n\n      // Mock database campaigns\n      mockSupabaseOperations.order.mockResolvedValueOnce({\n        data: [mockDatabaseCampaign],\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.loadCampaigns(mockUserId)\n      })\n\n      expect(result.current.campaigns).toHaveLength(2) // 1 from DB + 1 local draft\n      \n      // Check local draft is included\n      const localCampaignExists = result.current.campaigns.some(c => \n        c.id === `local-${mockUserId}` && c.source === 'local'\n      )\n      expect(localCampaignExists).toBe(true)\n    })\n\n    test('should handle invalid user ID', async () => {\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.loadCampaigns('')\n      })\n\n      expect(result.current.error).toBe('Error loading campaigns: User ID is required')\n    })\n  })\n\n  describe('💾 saveDraft - Local Storage Integration', () => {\n    test('should save draft to localStorage successfully', async () => {\n      const { result } = renderHook(() => useCampaignStore())\n      \n      let draftId: string = ''\n      await act(async () => {\n        draftId = await result.current.saveDraft(mockUserId, mockFormData, 2)\n      })\n\n      expect(draftId).toBeTruthy()\n      expect(localStorageMock.setItem).toHaveBeenCalledWith(\n        `funding-draft-${mockUserId}`,\n        expect.stringContaining('\"title\":\"Bitcoin Education Initiative\"')\n      )\n      expect(result.current.currentDraft).toEqual(mockFormData)\n      expect(result.current.currentDraftId).toBe(draftId)\n    })\n\n    test('should update existing draft', async () => {\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Save initial draft\n      await act(async () => {\n        await result.current.saveDraft(mockUserId, mockFormData, 1)\n      })\n\n      // Update the draft\n      const updatedFormData = { ...mockFormData, title: 'Updated Title' }\n      await act(async () => {\n        await result.current.saveDraft(mockUserId, updatedFormData, 3)\n      })\n\n      expect(result.current.currentDraft?.title).toBe('Updated Title')\n      expect(localStorageMock.setItem).toHaveBeenCalledTimes(2)\n    })\n\n    test('should handle localStorage errors', async () => {\n      // Mock localStorage error\n      localStorageMock.setItem.mockImplementation(() => {\n        throw new Error('Storage quota exceeded')\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.saveDraft(mockUserId, mockFormData)\n      })\n\n      expect(result.current.error).toBe('Error saving draft: Storage quota exceeded')\n    })\n  })\n\n  describe('🚀 publishCampaign - Database Publish Integration', () => {\n    test('should publish campaign to database successfully', async () => {\n      // Mock successful database insert\n      mockSupabaseOperations.single.mockResolvedValueOnce({\n        data: { ...mockDatabaseCampaign, id: 'new-campaign-id' },\n        error: null\n      })\n\n      // Set up current draft\n      const { result } = renderHook(() => useCampaignStore())\n      await act(async () => {\n        await result.current.saveDraft(mockUserId, mockFormData)\n      })\n\n      await act(async () => {\n        await result.current.publishCampaign(mockUserId, result.current.currentDraftId!)\n      })\n\n      expect(mockSupabaseOperations.insert).toHaveBeenCalled()\n      expect(result.current.currentDraft).toBeNull()\n      expect(result.current.currentDraftId).toBeNull()\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith(`funding-draft-${mockUserId}`)\n    })\n\n    test('should update existing campaign when publishing', async () => {\n      // Mock successful database update\n      mockSupabaseOperations.single.mockResolvedValueOnce({\n        data: mockDatabaseCampaign,\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Set up existing campaign for editing\n      act(() => {\n        result.current.campaigns = [{\n          ...mockDatabaseCampaign,\n          source: 'database',\n          isDraft: true,\n          isActive: false,\n          isPaused: false\n        } as Campaign]\n      })\n\n      await act(async () => {\n        await result.current.publishCampaign(mockUserId, mockCampaignId)\n      })\n\n      expect(mockSupabaseOperations.update).toHaveBeenCalled()\n    })\n\n    test('should handle publish errors', async () => {\n      // Mock database error\n      mockSupabaseOperations.single.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Validation failed' }\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      await act(async () => {\n        await result.current.saveDraft(mockUserId, mockFormData)\n      })\n\n      await act(async () => {\n        await result.current.publishCampaign(mockUserId, result.current.currentDraftId!)\n      })\n\n      expect(result.current.error).toBe('Error publishing campaign: Validation failed')\n    })\n  })\n\n  describe('⏸️ Campaign Lifecycle Management', () => {\n    test('should pause campaign successfully', async () => {\n      // Mock successful database update\n      mockSupabaseOperations.single.mockResolvedValueOnce({\n        data: { ...mockDatabaseCampaign, is_active: false },\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Set up active campaign\n      act(() => {\n        result.current.campaigns = [{\n          ...mockDatabaseCampaign,\n          source: 'database',\n          isDraft: false,\n          isActive: true,\n          isPaused: false\n        } as Campaign]\n      })\n\n      await act(async () => {\n        await result.current.pauseCampaign(mockUserId, mockCampaignId)\n      })\n\n      expect(mockSupabaseOperations.update).toHaveBeenCalled()\n      \n      // Check campaign was updated in store\n      const updatedCampaign = result.current.campaigns.find(c => c.id === mockCampaignId)\n      expect(updatedCampaign?.isActive).toBe(false)\n      expect(updatedCampaign?.isPaused).toBe(true)\n    })\n\n    test('should resume campaign successfully', async () => {\n      // Mock successful database update\n      mockSupabaseOperations.single.mockResolvedValueOnce({\n        data: { ...mockDatabaseCampaign, is_active: true },\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Set up paused campaign\n      act(() => {\n        result.current.campaigns = [{\n          ...mockDatabaseCampaign,\n          source: 'database',\n          isDraft: false,\n          isActive: false,\n          isPaused: true\n        } as Campaign]\n      })\n\n      await act(async () => {\n        await result.current.resumeCampaign(mockUserId, mockCampaignId)\n      })\n\n      expect(mockSupabaseOperations.update).toHaveBeenCalled()\n      \n      // Check campaign was updated in store\n      const updatedCampaign = result.current.campaigns.find(c => c.id === mockCampaignId)\n      expect(updatedCampaign?.isActive).toBe(true)\n      expect(updatedCampaign?.isPaused).toBe(false)\n    })\n\n    test('should delete campaign successfully', async () => {\n      // Mock successful database delete\n      mockSupabaseOperations.delete.mockResolvedValueOnce({\n        data: null,\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Set up campaign\n      act(() => {\n        result.current.campaigns = [{\n          ...mockDatabaseCampaign,\n          source: 'database',\n          isDraft: false,\n          isActive: true,\n          isPaused: false\n        } as Campaign]\n      })\n\n      await act(async () => {\n        await result.current.deleteCampaign(mockCampaignId)\n      })\n\n      expect(mockSupabaseOperations.delete).toHaveBeenCalled()\n      \n      // Check campaign was removed from store\n      const deletedCampaign = result.current.campaigns.find(c => c.id === mockCampaignId)\n      expect(deletedCampaign).toBeUndefined()\n    })\n  })\n\n  describe('✏️ updateCampaign - Edit Integration', () => {\n    test('should update campaign successfully', async () => {\n      // Mock successful database update\n      const updatedData = { ...mockDatabaseCampaign, title: 'Updated Campaign Title' }\n      mockSupabaseOperations.single.mockResolvedValueOnce({\n        data: updatedData,\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Set up existing campaign\n      act(() => {\n        result.current.campaigns = [{\n          ...mockDatabaseCampaign,\n          source: 'database',\n          isDraft: false,\n          isActive: true,\n          isPaused: false\n        } as Campaign]\n      })\n\n      const updateFormData = { ...mockFormData, title: 'Updated Campaign Title' }\n      \n      await act(async () => {\n        await result.current.updateCampaign(mockUserId, mockCampaignId, updateFormData)\n      })\n\n      expect(mockSupabaseOperations.update).toHaveBeenCalled()\n      \n      // Check campaign was updated in store\n      const updatedCampaign = result.current.campaigns.find(c => c.id === mockCampaignId)\n      expect(updatedCampaign?.title).toBe('Updated Campaign Title')\n    })\n  })\n\n  describe('🔄 syncAll - Full Synchronization', () => {\n    test('should sync all campaigns successfully', async () => {\n      // Mock database response\n      mockSupabaseOperations.order.mockResolvedValueOnce({\n        data: [mockDatabaseCampaign],\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.syncAll(mockUserId)\n      })\n\n      expect(result.current.isSyncing).toBe(false)\n      expect(result.current.lastSync).toBeTruthy()\n      expect(result.current.campaigns).toHaveLength(1)\n    })\n  })\n\n  describe('🛡️ Error Handling & Edge Cases', () => {\n    test('should handle network errors during operations', async () => {\n      // Mock network error\n      mockSupabaseOperations.order.mockRejectedValueOnce(new Error('Network error'))\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.loadCampaigns(mockUserId)\n      })\n\n      expect(result.current.error).toBe('Error loading campaigns: Network error')\n    })\n\n    test('should handle concurrent operations correctly', async () => {\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Start multiple operations concurrently\n      const promises = [\n        result.current.saveDraft(mockUserId, mockFormData),\n        result.current.loadCampaigns(mockUserId),\n        result.current.saveDraft(mockUserId, { ...mockFormData, title: 'Updated' })\n      ]\n\n      await act(async () => {\n        await Promise.allSettled(promises)\n      })\n\n      // Should not crash and should have consistent state\n      expect(result.current).toBeDefined()\n    })\n\n    test('should validate campaign data before operations', async () => {\n      const { result } = renderHook(() => useCampaignStore())\n      \n      // Try to save invalid data\n      const invalidFormData = { ...mockFormData, title: '' }\n      \n      await act(async () => {\n        await result.current.saveDraft(mockUserId, invalidFormData)\n      })\n\n      // Should still save but might have validation warnings\n      expect(result.current.currentDraft?.title).toBe('')\n    })\n  })\n\n  describe('💰 Real-world Campaign Scenarios', () => {\n    test('should handle high-value Bitcoin campaigns', async () => {\n      const highValueCampaign = {\n        ...mockFormData,\n        goal_amount: 21000000000, // 210 BTC in sats\n        title: 'Major Bitcoin Infrastructure Project'\n      }\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.saveDraft(mockUserId, highValueCampaign)\n      })\n\n      expect(result.current.currentDraft?.goal_amount).toBe(21000000000)\n    })\n\n    test('should handle campaigns with special characters', async () => {\n      const specialCharCampaign = {\n        ...mockFormData,\n        title: 'Café ₿itcoin & Lightning ⚡ Workshop 2024! 🚀',\n        description: 'Teaching Bitcoin with émojis & spéciál characters'\n      }\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.saveDraft(mockUserId, specialCharCampaign)\n      })\n\n      expect(result.current.currentDraft?.title).toBe('Café ₿itcoin & Lightning ⚡ Workshop 2024! 🚀')\n    })\n\n    test('should handle multiple simultaneous campaigns', async () => {\n      const campaigns = [\n        { ...mockDatabaseCampaign, id: 'camp-1', title: 'Campaign 1' },\n        { ...mockDatabaseCampaign, id: 'camp-2', title: 'Campaign 2' },\n        { ...mockDatabaseCampaign, id: 'camp-3', title: 'Campaign 3' }\n      ]\n\n      mockSupabaseOperations.order.mockResolvedValueOnce({\n        data: campaigns,\n        error: null\n      })\n\n      const { result } = renderHook(() => useCampaignStore())\n      \n      await act(async () => {\n        await result.current.loadCampaigns(mockUserId)\n      })\n\n      expect(result.current.campaigns).toHaveLength(3)\n      \n      const stats = result.current.getStats()\n      expect(stats.totalCampaigns).toBe(3)\n      expect(stats.totalActive).toBe(3) // All are active by default\n    })\n  })\n}) "],"version":3}