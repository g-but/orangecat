8d1093bc95772341900a77d11b52f214
"use strict";
/**
 * Funding API Endpoint Tests
 *
 * Testing critical funding API that handles funding page transactions
 * Essential for Bitcoin platform transaction processing
 */
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@/services/supabase/server', () => ({
    createServerClient: jest.fn(() => Promise.resolve(mockSupabaseClient))
}));
// Mock the logger
jest.mock('@/utils/logger', () => ({
    logger: {
        warn: jest.fn(),
        error: jest.fn(),
        info: jest.fn(),
    }
}));
const route_1 = require("../funding/route");
// More robust mock for Supabase server client
const mockSupabaseClient = {
    from: jest.fn(),
    auth: {
        getUser: jest.fn(),
    }
};
describe('💰 Funding API Endpoint - Transaction Processing', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Reset all mocks to a default successful state
        const fromChain = {
            select: jest.fn().mockReturnThis(),
            insert: jest.fn().mockReturnThis(),
            eq: jest.fn().mockReturnThis(),
            single: jest.fn().mockResolvedValue({ data: {}, error: null }),
        };
        mockSupabaseClient.from.mockReturnValue(fromChain);
        // Default mock user
        mockSupabaseClient.auth.getUser.mockResolvedValue({
            data: { user: { id: 'test-user-authed' } },
            error: null,
        });
    });
    describe('🔍 GET /api/funding - Funding Pages Retrieval', () => {
        test('should fetch user\'s own funding pages successfully', async () => {
            const mockFundingPages = [
                { id: 'fp-1', title: 'My Project', user_id: 'test-user-authed' },
            ];
            const selectMock = jest.fn().mockResolvedValue({ data: mockFundingPages, error: null });
            mockSupabaseClient.from.mockReturnValue({
                select: jest.fn().mockReturnThis(),
                eq: selectMock, // GET for user's pages uses .eq('user_id', user.id)
            });
            const request = { url: 'http://localhost:3000/api/funding' };
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.fundingPages).toEqual(mockFundingPages);
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('funding_pages');
            // The implementation forces filtering by authenticated user
            expect(selectMock).toHaveBeenCalledWith('user_id', 'test-user-authed');
        });
        test('should return 403 when trying to access another user\'s pages', async () => {
            const request = { url: 'http://localhost:3000/api/funding?userId=other-user' };
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(403);
            expect(data.error).toBe('Cannot access other users\' funding data');
        });
        test('should filter funding pages by status', async () => {
            const mockActiveFundingPages = [{ id: 'fp-active', status: 'active' }];
            const eqMockStatus = jest.fn().mockResolvedValue({ data: mockActiveFundingPages, error: null });
            const eqMockUser = jest.fn().mockReturnValue({ eq: eqMockStatus });
            mockSupabaseClient.from.mockReturnValue({
                select: jest.fn().mockReturnThis(),
                eq: eqMockUser,
            });
            const request = { url: 'http://localhost:3000/api/funding?status=active' };
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.fundingPages).toEqual(mockActiveFundingPages);
            expect(eqMockUser).toHaveBeenCalledWith('user_id', 'test-user-authed');
            expect(eqMockStatus).toHaveBeenCalledWith('status', 'active');
        });
        test('should handle database errors gracefully during GET', async () => {
            mockSupabaseClient.from.mockReturnValue({
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockResolvedValue({ data: null, error: { message: 'DB Error' } }),
            });
            const request = { url: 'http://localhost:3000/api/funding' };
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error).toBe('Failed to fetch funding pages');
        });
    });
    describe('📮 POST /api/funding - Transaction Creation', () => {
        test('should require authentication to create a transaction', async () => {
            mockSupabaseClient.auth.getUser.mockResolvedValue({ data: { user: null }, error: { message: 'No auth' } });
            const request = {
                method: 'POST',
                json: () => Promise.resolve({}),
                url: 'http://localhost:3000/api/funding'
            };
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(401);
            expect(data.error).toBe('Authentication required to create transactions');
        });
        test('should reject transaction with missing fields', async () => {
            const request = {
                method: 'POST',
                json: () => Promise.resolve({ amount: 100, currency: 'BTC' }), // missing fundingPageId and paymentMethod
                url: 'http://localhost:3000/api/funding'
            };
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error).toBe('All fields are required');
        });
        test('should create a transaction successfully', async () => {
            // Clear all previous mocks for this specific test
            jest.clearAllMocks();
            const fundingPageId = 'fp-owned-by-user';
            const transactionData = {
                fundingPageId,
                amount: 1000,
                currency: 'sats',
                paymentMethod: 'lightning',
            };
            // Reset to default successful auth state
            mockSupabaseClient.auth.getUser.mockResolvedValue({
                data: { user: { id: 'test-user-authed' } },
                error: null,
            });
            // Mock funding page ownership check
            mockSupabaseClient.from.mockImplementation((tableName) => {
                if (tableName === 'funding_pages') {
                    return {
                        select: jest.fn().mockReturnThis(),
                        eq: jest.fn().mockReturnThis(),
                        single: jest.fn().mockResolvedValue({
                            data: { user_id: 'test-user-authed', status: 'active' },
                            error: null
                        }),
                    };
                }
                if (tableName === 'transactions') {
                    return {
                        insert: jest.fn().mockReturnThis(),
                        select: jest.fn().mockReturnThis(),
                        single: jest.fn().mockResolvedValue({ data: Object.assign(Object.assign({ id: 'new-tx-id' }, transactionData), { user_id: 'test-user-authed' }), error: null }),
                    };
                }
                return { from: jest.fn() };
            });
            const request = {
                method: 'POST',
                json: () => Promise.resolve(transactionData),
                url: 'http://localhost:3000/api/funding'
            };
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.message).toBe('Transaction created successfully');
            expect(data.transaction.id).toBe('new-tx-id');
        });
        test('should handle database insertion errors during POST', async () => {
            mockSupabaseClient.from.mockReturnValue({
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockResolvedValue({ data: { user_id: 'test-user-authed', status: 'active' }, error: null }),
                insert: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({ data: null, error: { message: 'Insert failed' } }),
            });
            const request = {
                method: 'POST',
                json: () => Promise.resolve({ fundingPageId: 'fp-1', amount: 100, currency: 'BTC', paymentMethod: 'bitcoin' }),
                url: 'http://localhost:3000/api/funding'
            };
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error).toBe('Failed to create transaction');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,