{"file":"/home/g/dev/orangecat/src/app/api/__tests__/funding.api.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/app/api/__tests__/funding.api.test.ts"],"sourcesContent":["/**\n * Funding API Endpoint Tests\n * \n * Testing critical funding API that handles funding page transactions\n * Essential for Bitcoin platform transaction processing\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST } from '../funding/route';\n\n// More robust mock for Supabase server client\nconst mockSupabaseClient = {\n  from: jest.fn(),\n  auth: {\n    getUser: jest.fn(),\n  }\n};\n\njest.mock('@/services/supabase/server', () => ({\n  createServerClient: jest.fn(() => Promise.resolve(mockSupabaseClient))\n}));\n\n// Mock the logger\njest.mock('@/utils/logger', () => ({\n    logger: {\n      warn: jest.fn(),\n      error: jest.fn(),\n      info: jest.fn(),\n    }\n}));\n\n\ndescribe('💰 Funding API Endpoint - Transaction Processing', () => {\n    \n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Reset all mocks to a default successful state\n    const fromChain = {\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      single: jest.fn().mockResolvedValue({ data: {}, error: null }),\n    };\n    mockSupabaseClient.from.mockReturnValue(fromChain);\n    \n    // Default mock user\n    mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'test-user-authed' } },\n        error: null,\n    });\n  });\n\n  describe('🔍 GET /api/funding - Funding Pages Retrieval', () => {\n    \n    test('should fetch user\\'s own funding pages successfully', async () => {\n      const mockFundingPages = [\n        { id: 'fp-1', title: 'My Project', user_id: 'test-user-authed' },\n      ];\n      \n      const selectMock = jest.fn().mockResolvedValue({ data: mockFundingPages, error: null });\n      mockSupabaseClient.from.mockReturnValue({\n          select: jest.fn().mockReturnThis(),\n          eq: selectMock, // GET for user's pages uses .eq('user_id', user.id)\n      });\n\n      const request = { url: 'http://localhost:3000/api/funding' } as any;\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.fundingPages).toEqual(mockFundingPages);\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('funding_pages');\n      // The implementation forces filtering by authenticated user\n      expect(selectMock).toHaveBeenCalledWith('user_id', 'test-user-authed');\n    });\n\n    test('should return 403 when trying to access another user\\'s pages', async () => {\n        const request = { url: 'http://localhost:3000/api/funding?userId=other-user' } as any;\n        const response = await GET(request);\n        const data = await response.json();\n  \n        expect(response.status).toBe(403);\n        expect(data.error).toBe('Cannot access other users\\' funding data');\n    });\n\n    test('should filter funding pages by status', async () => {\n        const mockActiveFundingPages = [{ id: 'fp-active', status: 'active' }];\n        \n        const eqMockStatus = jest.fn().mockResolvedValue({ data: mockActiveFundingPages, error: null });\n        const eqMockUser = jest.fn().mockReturnValue({ eq: eqMockStatus });\n        mockSupabaseClient.from.mockReturnValue({\n            select: jest.fn().mockReturnThis(),\n            eq: eqMockUser,\n        });\n\n        const request = { url: 'http://localhost:3000/api/funding?status=active' } as any;\n        const response = await GET(request);\n        const data = await response.json();\n  \n        expect(response.status).toBe(200);\n        expect(data.fundingPages).toEqual(mockActiveFundingPages);\n        expect(eqMockUser).toHaveBeenCalledWith('user_id', 'test-user-authed');\n        expect(eqMockStatus).toHaveBeenCalledWith('status', 'active');\n    });\n\n    test('should handle database errors gracefully during GET', async () => {\n        mockSupabaseClient.from.mockReturnValue({\n            select: jest.fn().mockReturnThis(),\n            eq: jest.fn().mockResolvedValue({ data: null, error: { message: 'DB Error' } }),\n        });\n        \n        const request = { url: 'http://localhost:3000/api/funding' } as any;\n        const response = await GET(request);\n        const data = await response.json();\n  \n        expect(response.status).toBe(500);\n        expect(data.error).toBe('Failed to fetch funding pages');\n    });\n\n  });\n\n  describe('📮 POST /api/funding - Transaction Creation', () => {\n\n    test('should require authentication to create a transaction', async () => {\n        mockSupabaseClient.auth.getUser.mockResolvedValue({ data: { user: null }, error: { message: 'No auth' } });\n\n        const request = {\n            method: 'POST',\n            json: () => Promise.resolve({}),\n            url: 'http://localhost:3000/api/funding'\n        } as any;\n        const response = await POST(request);\n        const data = await response.json();\n\n        expect(response.status).toBe(401);\n        expect(data.error).toBe('Authentication required to create transactions');\n    });\n\n    test('should reject transaction with missing fields', async () => {\n        const request = {\n            method: 'POST',\n            json: () => Promise.resolve({ amount: 100, currency: 'BTC' }), // missing fundingPageId and paymentMethod\n            url: 'http://localhost:3000/api/funding'\n        } as any;\n        const response = await POST(request);\n        const data = await response.json();\n  \n        expect(response.status).toBe(400);\n        expect(data.error).toBe('All fields are required');\n    });\n    \n    test('should create a transaction successfully', async () => {\n        // Clear all previous mocks for this specific test\n        jest.clearAllMocks();\n\n        const fundingPageId = 'fp-owned-by-user';\n        const transactionData = {\n            fundingPageId,\n            amount: 1000,\n            currency: 'sats',\n            paymentMethod: 'lightning',\n        };\n\n        // Reset to default successful auth state\n        mockSupabaseClient.auth.getUser.mockResolvedValue({\n            data: { user: { id: 'test-user-authed' } },\n            error: null,\n        });\n\n        // Mock funding page ownership check\n        mockSupabaseClient.from.mockImplementation((tableName: string) => {\n            if (tableName === 'funding_pages') {\n                return {\n                    select: jest.fn().mockReturnThis(),\n                    eq: jest.fn().mockReturnThis(),\n                    single: jest.fn().mockResolvedValue({\n                        data: { user_id: 'test-user-authed', status: 'active' },\n                        error: null\n                    }),\n                };\n            }\n            if (tableName === 'transactions') {\n                return {\n                    insert: jest.fn().mockReturnThis(),\n                    select: jest.fn().mockReturnThis(),\n                    single: jest.fn().mockResolvedValue({ data: { id: 'new-tx-id', ...transactionData, user_id: 'test-user-authed' }, error: null }),\n                };\n            }\n            return { from: jest.fn() } as any;\n        });\n\n        const request = {\n            method: 'POST',\n            json: () => Promise.resolve(transactionData),\n            url: 'http://localhost:3000/api/funding'\n        } as any;\n        const response = await POST(request);\n        const data = await response.json();\n        \n        expect(response.status).toBe(200);\n        expect(data.message).toBe('Transaction created successfully');\n        expect(data.transaction.id).toBe('new-tx-id');\n    });\n    \n    test('should handle database insertion errors during POST', async () => {\n        mockSupabaseClient.from.mockReturnValue({\n            select: jest.fn().mockReturnThis(),\n            eq: jest.fn().mockResolvedValue({ data: { user_id: 'test-user-authed', status: 'active' }, error: null }),\n            insert: jest.fn().mockReturnThis(),\n            single: jest.fn().mockResolvedValue({ data: null, error: { message: 'Insert failed' } }),\n        });\n        \n        const request = {\n            method: 'POST',\n            json: () => Promise.resolve({ fundingPageId: 'fp-1', amount: 100, currency: 'BTC', paymentMethod: 'bitcoin' }),\n            url: 'http://localhost:3000/api/funding'\n        } as any;\n\n        const response = await POST(request);\n        const data = await response.json();\n  \n        expect(response.status).toBe(500);\n        expect(data.error).toBe('Failed to create transaction');\n    });\n\n  });\n}); "],"version":3}