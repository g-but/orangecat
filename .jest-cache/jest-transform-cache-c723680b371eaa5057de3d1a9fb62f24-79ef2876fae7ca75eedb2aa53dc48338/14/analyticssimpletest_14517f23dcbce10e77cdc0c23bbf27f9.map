{"file":"/home/g/dev/orangecat/src/services/__tests__/analytics.simple.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/analytics.simple.test.ts"],"sourcesContent":["/**\n * ANALYTICS SERVICE - SIMPLE TEST COVERAGE\n * \n * This test suite provides basic coverage for the Analytics Service,\n * focusing on demo features and basic functionality.\n * \n * Created: 2025-06-08\n * Last Modified: 2025-06-08\n * Last Modified Summary: Initial creation of simple Analytics Service tests\n */\n\nimport { analyticsService } from '../analytics'\n\ndescribe('📊 Analytics Service - Simple Coverage', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Clear cache before each test\n    analyticsService.clearCache()\n  })\n\n  describe('🏢 Demo Feature Metrics', () => {\n    \n    test('should return organizations metrics', () => {\n      const metrics = analyticsService.getOrganizationsMetrics()\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalOrganizations.value).toBeGreaterThan(0)\n      expect(metrics.stats.totalMembers.value).toBeGreaterThan(0)\n      expect(typeof metrics.stats.combinedTreasury.value).toBe('string')\n      expect(metrics.stats.combinedTreasury.value).toContain('BTC')\n      expect(metrics.stats.activeProposals.value).toBeGreaterThanOrEqual(0)\n    })\n\n    test('should return events metrics', () => {\n      const metrics = analyticsService.getEventsMetrics()\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalEvents.value).toBeGreaterThan(0)\n      expect(metrics.stats.totalAttendees.value).toBeGreaterThan(0)\n      expect(typeof metrics.stats.totalRevenue.value).toBe('string')\n      expect(metrics.stats.totalRevenue.value).toContain('BTC')\n      expect(metrics.stats.upcomingEvents.value).toBeGreaterThanOrEqual(0)\n    })\n\n    test('should return projects metrics', () => {\n      const metrics = analyticsService.getProjectsMetrics()\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalProjects.value).toBeGreaterThan(0)\n      expect(metrics.stats.totalContributors.value).toBeGreaterThan(0)\n      expect(typeof metrics.stats.totalFunding.value).toBe('string')\n      expect(metrics.stats.totalFunding.value).toContain('BTC')\n      expect(typeof metrics.stats.avgProgress.value).toBe('string')\n      expect(metrics.stats.avgProgress.value).toContain('%')\n    })\n\n    test('should return assets metrics', () => {\n      const metrics = analyticsService.getAssetsMetrics()\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalAssets.value).toBeGreaterThan(0)\n      expect(typeof metrics.stats.totalEarnings.value).toBe('string')\n      expect(metrics.stats.totalEarnings.value).toContain('BTC')\n      expect(metrics.stats.totalRentals.value).toBeGreaterThanOrEqual(0)\n      expect(metrics.stats.availableAssets.value).toBeGreaterThanOrEqual(0)\n    })\n\n    test('should return people metrics', () => {\n      const metrics = analyticsService.getPeopleMetrics()\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalConnections.value).toBeGreaterThan(0)\n      expect(metrics.stats.friends.value).toBeGreaterThanOrEqual(0)\n      expect(metrics.stats.colleagues.value).toBeGreaterThanOrEqual(0)\n      expect(metrics.stats.mutualConnections.value).toBeGreaterThanOrEqual(0)\n    })\n\n  })\n\n  describe('💰 Wallet Metrics', () => {\n    \n    test('should handle wallet address not provided', async () => {\n      const metrics = await analyticsService.getWalletMetrics()\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalBalance.value).toBe('0.000 BTC')\n      expect(metrics.stats.confirmedBalance.value).toBe('0.000 BTC')\n      expect(metrics.stats.unconfirmedBalance.value).toBe('0.000 BTC')\n      expect(metrics.stats.totalTransactions.value).toBe(0)\n    })\n\n    test('should handle empty wallet address', async () => {\n      const metrics = await analyticsService.getWalletMetrics('')\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalBalance.value).toBe('0.000 BTC')\n    })\n\n    test('should handle whitespace wallet address', async () => {\n      const metrics = await analyticsService.getWalletMetrics('   ')\n\n      expect(metrics.isEnabled).toBe(false)\n      expect(metrics.isDemo).toBe(true)\n      expect(metrics.stats.totalBalance.value).toBe('0.000 BTC')\n    })\n\n  })\n\n  describe('🧮 Safe Calculations', () => {\n    \n    test('should handle safe calculations in demo metrics', () => {\n      // Test that all demo metrics return valid values without crashing\n      const orgMetrics = analyticsService.getOrganizationsMetrics()\n      const eventMetrics = analyticsService.getEventsMetrics()\n      const projectMetrics = analyticsService.getProjectsMetrics()\n      const assetMetrics = analyticsService.getAssetsMetrics()\n      const peopleMetrics = analyticsService.getPeopleMetrics()\n\n      // All should have valid numeric or string values\n      expect(typeof orgMetrics.stats.totalOrganizations.value).toBe('number')\n      expect(typeof eventMetrics.stats.totalEvents.value).toBe('number')\n      expect(typeof projectMetrics.stats.totalProjects.value).toBe('number')\n      expect(typeof assetMetrics.stats.totalAssets.value).toBe('number')\n      expect(typeof peopleMetrics.stats.totalConnections.value).toBe('number')\n    })\n\n    test('should handle edge cases in calculations', () => {\n      // Test that metrics handle edge cases gracefully\n      const orgMetrics = analyticsService.getOrganizationsMetrics()\n      \n      // Should not have NaN or Infinity values\n      expect(Number.isFinite(orgMetrics.stats.totalOrganizations.value)).toBe(true)\n      expect(Number.isFinite(orgMetrics.stats.totalMembers.value)).toBe(true)\n      expect(Number.isFinite(orgMetrics.stats.activeProposals.value)).toBe(true)\n    })\n\n  })\n\n  describe('📈 All Metrics Integration', () => {\n    \n    test('should fetch all metrics with demo data', async () => {\n      const allMetrics = await analyticsService.getAllMetrics('user-123')\n\n      // Should have all metric categories\n      expect(allMetrics.fundraising).toBeDefined()\n      expect(allMetrics.wallet).toBeDefined()\n      expect(allMetrics.organizations).toBeDefined()\n      expect(allMetrics.events).toBeDefined()\n      expect(allMetrics.projects).toBeDefined()\n      expect(allMetrics.assets).toBeDefined()\n      expect(allMetrics.people).toBeDefined()\n\n      // Demo metrics should be enabled as demo\n      expect(allMetrics.organizations.isDemo).toBe(true)\n      expect(allMetrics.events.isDemo).toBe(true)\n      expect(allMetrics.projects.isDemo).toBe(true)\n      expect(allMetrics.assets.isDemo).toBe(true)\n      expect(allMetrics.people.isDemo).toBe(true)\n\n      // Wallet should be demo when no address provided\n      expect(allMetrics.wallet.isDemo).toBe(true)\n    })\n\n    test('should handle user ID validation', async () => {\n      // Should not crash with invalid user IDs\n      const metrics1 = await analyticsService.getAllMetrics('')\n      const metrics2 = await analyticsService.getAllMetrics('   ')\n      const metrics3 = await analyticsService.getAllMetrics('invalid-user-id')\n\n      expect(metrics1).toBeDefined()\n      expect(metrics2).toBeDefined()\n      expect(metrics3).toBeDefined()\n    })\n\n  })\n\n  describe('🗄️ Cache Management', () => {\n    \n    test('should manage cache correctly', () => {\n      const initialStats = analyticsService.getCacheStats()\n      expect(initialStats.size).toBe(0)\n      expect(initialStats.keys).toEqual([])\n    })\n\n    test('should clear cache', () => {\n      // Clear cache should not crash\n      analyticsService.clearCache()\n      \n      const cacheStats = analyticsService.getCacheStats()\n      expect(cacheStats.size).toBe(0)\n      expect(cacheStats.keys).toEqual([])\n    })\n\n    test('should provide cache statistics', () => {\n      const cacheStats = analyticsService.getCacheStats()\n      \n      expect(typeof cacheStats.size).toBe('number')\n      expect(Array.isArray(cacheStats.keys)).toBe(true)\n      expect(cacheStats.size).toBeGreaterThanOrEqual(0)\n    })\n\n  })\n\n  describe('🔧 Metric Value Structure', () => {\n    \n    test('should have consistent metric value structure', () => {\n      const metrics = analyticsService.getOrganizationsMetrics()\n      \n      // Check that all stats have the required MetricValue structure\n      Object.values(metrics.stats).forEach(stat => {\n        expect(stat).toHaveProperty('value')\n        expect(stat).toHaveProperty('confidence')\n        expect(stat).toHaveProperty('lastUpdated')\n        expect(stat).toHaveProperty('source')\n        expect(stat).toHaveProperty('isDemo')\n        \n        expect(stat.lastUpdated).toBeInstanceOf(Date)\n        expect(['high', 'medium', 'low']).toContain(stat.confidence)\n        expect(['database', 'api', 'demo']).toContain(stat.source)\n        expect(typeof stat.isDemo).toBe('boolean')\n      })\n    })\n\n    test('should have consistent timeline information', () => {\n      const metrics = analyticsService.getOrganizationsMetrics()\n      \n      expect(metrics).toHaveProperty('timeline')\n      if (metrics.timeline) {\n        expect(typeof metrics.timeline).toBe('string')\n        expect(metrics.timeline.length).toBeGreaterThan(0)\n      }\n    })\n\n    test('should have consistent feature flags', () => {\n      const orgMetrics = analyticsService.getOrganizationsMetrics()\n      const eventMetrics = analyticsService.getEventsMetrics()\n      const projectMetrics = analyticsService.getProjectsMetrics()\n      const assetMetrics = analyticsService.getAssetsMetrics()\n      const peopleMetrics = analyticsService.getPeopleMetrics()\n\n      // All demo features should be disabled but demo should be true\n      expect(orgMetrics.isEnabled).toBe(false)\n      expect(eventMetrics.isEnabled).toBe(false)\n      expect(projectMetrics.isEnabled).toBe(false)\n      expect(assetMetrics.isEnabled).toBe(false)\n      expect(peopleMetrics.isEnabled).toBe(false)\n\n      expect(orgMetrics.isDemo).toBe(true)\n      expect(eventMetrics.isDemo).toBe(true)\n      expect(projectMetrics.isDemo).toBe(true)\n      expect(assetMetrics.isDemo).toBe(true)\n      expect(peopleMetrics.isDemo).toBe(true)\n    })\n\n  })\n\n  describe('🛡️ Error Handling', () => {\n    \n    test('should handle invalid inputs gracefully', async () => {\n      // Should not crash with null/undefined inputs\n      const metrics1 = await analyticsService.getAllMetrics(null as any)\n      const metrics2 = await analyticsService.getAllMetrics(undefined as any)\n      \n      expect(metrics1).toBeDefined()\n      expect(metrics2).toBeDefined()\n    })\n\n    test('should handle special characters in user ID', async () => {\n      const specialUserIds = [\n        'user@example.com',\n        'user-with-dashes',\n        'user_with_underscores',\n        'user123',\n        'user with spaces'\n      ]\n\n      for (const userId of specialUserIds) {\n        const metrics = await analyticsService.getAllMetrics(userId)\n        expect(metrics).toBeDefined()\n        expect(metrics.organizations).toBeDefined()\n      }\n    })\n\n    test('should handle very long user IDs', async () => {\n      const longUserId = 'a'.repeat(1000)\n      const metrics = await analyticsService.getAllMetrics(longUserId)\n      \n      expect(metrics).toBeDefined()\n      expect(metrics.organizations.isDemo).toBe(true)\n    })\n\n  })\n\n}) "],"version":3}