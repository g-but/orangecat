269a7abaa04f826b742f946c2824f468
"use strict";
/**
 * ANALYTICS SERVICE - SIMPLE TEST COVERAGE
 *
 * This test suite provides basic coverage for the Analytics Service,
 * focusing on demo features and basic functionality.
 *
 * Created: 2025-06-08
 * Last Modified: 2025-06-08
 * Last Modified Summary: Initial creation of simple Analytics Service tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const analytics_1 = require("../analytics");
describe('📊 Analytics Service - Simple Coverage', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Clear cache before each test
        analytics_1.analyticsService.clearCache();
    });
    describe('🏢 Demo Feature Metrics', () => {
        test('should return organizations metrics', () => {
            const metrics = analytics_1.analyticsService.getOrganizationsMetrics();
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalOrganizations.value).toBeGreaterThan(0);
            expect(metrics.stats.totalMembers.value).toBeGreaterThan(0);
            expect(typeof metrics.stats.combinedTreasury.value).toBe('string');
            expect(metrics.stats.combinedTreasury.value).toContain('BTC');
            expect(metrics.stats.activeProposals.value).toBeGreaterThanOrEqual(0);
        });
        test('should return events metrics', () => {
            const metrics = analytics_1.analyticsService.getEventsMetrics();
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalEvents.value).toBeGreaterThan(0);
            expect(metrics.stats.totalAttendees.value).toBeGreaterThan(0);
            expect(typeof metrics.stats.totalRevenue.value).toBe('string');
            expect(metrics.stats.totalRevenue.value).toContain('BTC');
            expect(metrics.stats.upcomingEvents.value).toBeGreaterThanOrEqual(0);
        });
        test('should return projects metrics', () => {
            const metrics = analytics_1.analyticsService.getProjectsMetrics();
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalProjects.value).toBeGreaterThan(0);
            expect(metrics.stats.totalContributors.value).toBeGreaterThan(0);
            expect(typeof metrics.stats.totalFunding.value).toBe('string');
            expect(metrics.stats.totalFunding.value).toContain('BTC');
            expect(typeof metrics.stats.avgProgress.value).toBe('string');
            expect(metrics.stats.avgProgress.value).toContain('%');
        });
        test('should return assets metrics', () => {
            const metrics = analytics_1.analyticsService.getAssetsMetrics();
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalAssets.value).toBeGreaterThan(0);
            expect(typeof metrics.stats.totalEarnings.value).toBe('string');
            expect(metrics.stats.totalEarnings.value).toContain('BTC');
            expect(metrics.stats.totalRentals.value).toBeGreaterThanOrEqual(0);
            expect(metrics.stats.availableAssets.value).toBeGreaterThanOrEqual(0);
        });
        test('should return people metrics', () => {
            const metrics = analytics_1.analyticsService.getPeopleMetrics();
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalConnections.value).toBeGreaterThan(0);
            expect(metrics.stats.friends.value).toBeGreaterThanOrEqual(0);
            expect(metrics.stats.colleagues.value).toBeGreaterThanOrEqual(0);
            expect(metrics.stats.mutualConnections.value).toBeGreaterThanOrEqual(0);
        });
    });
    describe('💰 Wallet Metrics', () => {
        test('should handle wallet address not provided', async () => {
            const metrics = await analytics_1.analyticsService.getWalletMetrics();
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalBalance.value).toBe('0.000 BTC');
            expect(metrics.stats.confirmedBalance.value).toBe('0.000 BTC');
            expect(metrics.stats.unconfirmedBalance.value).toBe('0.000 BTC');
            expect(metrics.stats.totalTransactions.value).toBe(0);
        });
        test('should handle empty wallet address', async () => {
            const metrics = await analytics_1.analyticsService.getWalletMetrics('');
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalBalance.value).toBe('0.000 BTC');
        });
        test('should handle whitespace wallet address', async () => {
            const metrics = await analytics_1.analyticsService.getWalletMetrics('   ');
            expect(metrics.isEnabled).toBe(false);
            expect(metrics.isDemo).toBe(true);
            expect(metrics.stats.totalBalance.value).toBe('0.000 BTC');
        });
    });
    describe('🧮 Safe Calculations', () => {
        test('should handle safe calculations in demo metrics', () => {
            // Test that all demo metrics return valid values without crashing
            const orgMetrics = analytics_1.analyticsService.getOrganizationsMetrics();
            const eventMetrics = analytics_1.analyticsService.getEventsMetrics();
            const projectMetrics = analytics_1.analyticsService.getProjectsMetrics();
            const assetMetrics = analytics_1.analyticsService.getAssetsMetrics();
            const peopleMetrics = analytics_1.analyticsService.getPeopleMetrics();
            // All should have valid numeric or string values
            expect(typeof orgMetrics.stats.totalOrganizations.value).toBe('number');
            expect(typeof eventMetrics.stats.totalEvents.value).toBe('number');
            expect(typeof projectMetrics.stats.totalProjects.value).toBe('number');
            expect(typeof assetMetrics.stats.totalAssets.value).toBe('number');
            expect(typeof peopleMetrics.stats.totalConnections.value).toBe('number');
        });
        test('should handle edge cases in calculations', () => {
            // Test that metrics handle edge cases gracefully
            const orgMetrics = analytics_1.analyticsService.getOrganizationsMetrics();
            // Should not have NaN or Infinity values
            expect(Number.isFinite(orgMetrics.stats.totalOrganizations.value)).toBe(true);
            expect(Number.isFinite(orgMetrics.stats.totalMembers.value)).toBe(true);
            expect(Number.isFinite(orgMetrics.stats.activeProposals.value)).toBe(true);
        });
    });
    describe('📈 All Metrics Integration', () => {
        test('should fetch all metrics with demo data', async () => {
            const allMetrics = await analytics_1.analyticsService.getAllMetrics('user-123');
            // Should have all metric categories
            expect(allMetrics.fundraising).toBeDefined();
            expect(allMetrics.wallet).toBeDefined();
            expect(allMetrics.organizations).toBeDefined();
            expect(allMetrics.events).toBeDefined();
            expect(allMetrics.projects).toBeDefined();
            expect(allMetrics.assets).toBeDefined();
            expect(allMetrics.people).toBeDefined();
            // Demo metrics should be enabled as demo
            expect(allMetrics.organizations.isDemo).toBe(true);
            expect(allMetrics.events.isDemo).toBe(true);
            expect(allMetrics.projects.isDemo).toBe(true);
            expect(allMetrics.assets.isDemo).toBe(true);
            expect(allMetrics.people.isDemo).toBe(true);
            // Wallet should be demo when no address provided
            expect(allMetrics.wallet.isDemo).toBe(true);
        });
        test('should handle user ID validation', async () => {
            // Should not crash with invalid user IDs
            const metrics1 = await analytics_1.analyticsService.getAllMetrics('');
            const metrics2 = await analytics_1.analyticsService.getAllMetrics('   ');
            const metrics3 = await analytics_1.analyticsService.getAllMetrics('invalid-user-id');
            expect(metrics1).toBeDefined();
            expect(metrics2).toBeDefined();
            expect(metrics3).toBeDefined();
        });
    });
    describe('🗄️ Cache Management', () => {
        test('should manage cache correctly', () => {
            const initialStats = analytics_1.analyticsService.getCacheStats();
            expect(initialStats.size).toBe(0);
            expect(initialStats.keys).toEqual([]);
        });
        test('should clear cache', () => {
            // Clear cache should not crash
            analytics_1.analyticsService.clearCache();
            const cacheStats = analytics_1.analyticsService.getCacheStats();
            expect(cacheStats.size).toBe(0);
            expect(cacheStats.keys).toEqual([]);
        });
        test('should provide cache statistics', () => {
            const cacheStats = analytics_1.analyticsService.getCacheStats();
            expect(typeof cacheStats.size).toBe('number');
            expect(Array.isArray(cacheStats.keys)).toBe(true);
            expect(cacheStats.size).toBeGreaterThanOrEqual(0);
        });
    });
    describe('🔧 Metric Value Structure', () => {
        test('should have consistent metric value structure', () => {
            const metrics = analytics_1.analyticsService.getOrganizationsMetrics();
            // Check that all stats have the required MetricValue structure
            Object.values(metrics.stats).forEach(stat => {
                expect(stat).toHaveProperty('value');
                expect(stat).toHaveProperty('confidence');
                expect(stat).toHaveProperty('lastUpdated');
                expect(stat).toHaveProperty('source');
                expect(stat).toHaveProperty('isDemo');
                expect(stat.lastUpdated).toBeInstanceOf(Date);
                expect(['high', 'medium', 'low']).toContain(stat.confidence);
                expect(['database', 'api', 'demo']).toContain(stat.source);
                expect(typeof stat.isDemo).toBe('boolean');
            });
        });
        test('should have consistent timeline information', () => {
            const metrics = analytics_1.analyticsService.getOrganizationsMetrics();
            expect(metrics).toHaveProperty('timeline');
            if (metrics.timeline) {
                expect(typeof metrics.timeline).toBe('string');
                expect(metrics.timeline.length).toBeGreaterThan(0);
            }
        });
        test('should have consistent feature flags', () => {
            const orgMetrics = analytics_1.analyticsService.getOrganizationsMetrics();
            const eventMetrics = analytics_1.analyticsService.getEventsMetrics();
            const projectMetrics = analytics_1.analyticsService.getProjectsMetrics();
            const assetMetrics = analytics_1.analyticsService.getAssetsMetrics();
            const peopleMetrics = analytics_1.analyticsService.getPeopleMetrics();
            // All demo features should be disabled but demo should be true
            expect(orgMetrics.isEnabled).toBe(false);
            expect(eventMetrics.isEnabled).toBe(false);
            expect(projectMetrics.isEnabled).toBe(false);
            expect(assetMetrics.isEnabled).toBe(false);
            expect(peopleMetrics.isEnabled).toBe(false);
            expect(orgMetrics.isDemo).toBe(true);
            expect(eventMetrics.isDemo).toBe(true);
            expect(projectMetrics.isDemo).toBe(true);
            expect(assetMetrics.isDemo).toBe(true);
            expect(peopleMetrics.isDemo).toBe(true);
        });
    });
    describe('🛡️ Error Handling', () => {
        test('should handle invalid inputs gracefully', async () => {
            // Should not crash with null/undefined inputs
            const metrics1 = await analytics_1.analyticsService.getAllMetrics(null);
            const metrics2 = await analytics_1.analyticsService.getAllMetrics(undefined);
            expect(metrics1).toBeDefined();
            expect(metrics2).toBeDefined();
        });
        test('should handle special characters in user ID', async () => {
            const specialUserIds = [
                'user@example.com',
                'user-with-dashes',
                'user_with_underscores',
                'user123',
                'user with spaces'
            ];
            for (const userId of specialUserIds) {
                const metrics = await analytics_1.analyticsService.getAllMetrics(userId);
                expect(metrics).toBeDefined();
                expect(metrics.organizations).toBeDefined();
            }
        });
        test('should handle very long user IDs', async () => {
            const longUserId = 'a'.repeat(1000);
            const metrics = await analytics_1.analyticsService.getAllMetrics(longUserId);
            expect(metrics).toBeDefined();
            expect(metrics.organizations.isDemo).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3NyYy9zZXJ2aWNlcy9fX3Rlc3RzX18vYW5hbHl0aWNzLnNpbXBsZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7O0dBU0c7O0FBRUgsNENBQStDO0FBRS9DLFFBQVEsQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7SUFFdEQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUNwQiwrQkFBK0I7UUFDL0IsNEJBQWdCLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDL0IsQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBRXZDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7WUFDL0MsTUFBTSxPQUFPLEdBQUcsNEJBQWdCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQTtZQUUxRCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNqQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDakUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzRCxNQUFNLENBQUMsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNsRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7WUFD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LENBQUMsV0FBVyxFQUFFLENBQUE7WUFDN0MsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2xELE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDbkMsTUFBTSxPQUFPLEdBQUcsTUFBTSw0QkFBZ0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUE7WUFFaEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqRCxDQUFDLENBQUMsQ0FBQTtJQUVKLENBQUMsQ0FBQyxDQUFBO0FBRUosQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3NyYy9zZXJ2aWNlcy9fX3Rlc3RzX18vYW5hbHl0aWNzLnNpbXBsZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQU5BTFlUSUNTIFNFUlZJQ0UgLSBTSU1QTEUgVEVTVCBDT1ZFUkFHRVxuICogXG4gKiBUaGlzIHRlc3Qgc3VpdGUgcHJvdmlkZXMgYmFzaWMgY292ZXJhZ2UgZm9yIHRoZSBBbmFseXRpY3MgU2VydmljZSxcbiAqIGZvY3VzaW5nIG9uIGRlbW8gZmVhdHVyZXMgYW5kIGJhc2ljIGZ1bmN0aW9uYWxpdHkuXG4gKiBcbiAqIENyZWF0ZWQ6IDIwMjUtMDYtMDhcbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDYtMDhcbiAqIExhc3QgTW9kaWZpZWQgU3VtbWFyeTogSW5pdGlhbCBjcmVhdGlvbiBvZiBzaW1wbGUgQW5hbHl0aWNzIFNlcnZpY2UgdGVzdHNcbiAqL1xuXG5pbXBvcnQgeyBhbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSAnLi4vYW5hbHl0aWNzJ1xuXG5kZXNjcmliZSgn8J+TiiBBbmFseXRpY3MgU2VydmljZSAtIFNpbXBsZSBDb3ZlcmFnZScsICgpID0+IHtcbiAgXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXG4gICAgLy8gQ2xlYXIgY2FjaGUgYmVmb3JlIGVhY2ggdGVzdFxuICAgIGFuYWx5dGljc1NlcnZpY2UuY2xlYXJDYWNoZSgpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ/Cfj6IgRGVtbyBGZWF0dXJlIE1ldHJpY3MnLCAoKSA9PiB7XG4gICAgXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBvcmdhbml6YXRpb25zIG1ldHJpY3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRPcmdhbml6YXRpb25zTWV0cmljcygpXG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRGVtbykudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudG90YWxPcmdhbml6YXRpb25zLnZhbHVlKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLnRvdGFsTWVtYmVycy52YWx1ZSkudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICBleHBlY3QodHlwZW9mIG1ldHJpY3Muc3RhdHMuY29tYmluZWRUcmVhc3VyeS52YWx1ZSkudG9CZSgnc3RyaW5nJylcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLmNvbWJpbmVkVHJlYXN1cnkudmFsdWUpLnRvQ29udGFpbignQlRDJylcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLmFjdGl2ZVByb3Bvc2Fscy52YWx1ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGV2ZW50cyBtZXRyaWNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0RXZlbnRzTWV0cmljcygpXG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRGVtbykudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudG90YWxFdmVudHMudmFsdWUpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudG90YWxBdHRlbmRlZXMudmFsdWUpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgZXhwZWN0KHR5cGVvZiBtZXRyaWNzLnN0YXRzLnRvdGFsUmV2ZW51ZS52YWx1ZSkudG9CZSgnc3RyaW5nJylcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLnRvdGFsUmV2ZW51ZS52YWx1ZSkudG9Db250YWluKCdCVEMnKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudXBjb21pbmdFdmVudHMudmFsdWUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMClcbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBwcm9qZWN0cyBtZXRyaWNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0UHJvamVjdHNNZXRyaWNzKClcblxuICAgICAgZXhwZWN0KG1ldHJpY3MuaXNFbmFibGVkKS50b0JlKGZhbHNlKVxuICAgICAgZXhwZWN0KG1ldHJpY3MuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy50b3RhbFByb2plY3RzLnZhbHVlKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLnRvdGFsQ29udHJpYnV0b3JzLnZhbHVlKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgIGV4cGVjdCh0eXBlb2YgbWV0cmljcy5zdGF0cy50b3RhbEZ1bmRpbmcudmFsdWUpLnRvQmUoJ3N0cmluZycpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy50b3RhbEZ1bmRpbmcudmFsdWUpLnRvQ29udGFpbignQlRDJylcbiAgICAgIGV4cGVjdCh0eXBlb2YgbWV0cmljcy5zdGF0cy5hdmdQcm9ncmVzcy52YWx1ZSkudG9CZSgnc3RyaW5nJylcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLmF2Z1Byb2dyZXNzLnZhbHVlKS50b0NvbnRhaW4oJyUnKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGFzc2V0cyBtZXRyaWNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0QXNzZXRzTWV0cmljcygpXG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRGVtbykudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudG90YWxBc3NldHMudmFsdWUpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgZXhwZWN0KHR5cGVvZiBtZXRyaWNzLnN0YXRzLnRvdGFsRWFybmluZ3MudmFsdWUpLnRvQmUoJ3N0cmluZycpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy50b3RhbEVhcm5pbmdzLnZhbHVlKS50b0NvbnRhaW4oJ0JUQycpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy50b3RhbFJlbnRhbHMudmFsdWUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMClcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLmF2YWlsYWJsZUFzc2V0cy52YWx1ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIHBlb3BsZSBtZXRyaWNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0UGVvcGxlTWV0cmljcygpXG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRGVtbykudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudG90YWxDb25uZWN0aW9ucy52YWx1ZSkudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy5mcmllbmRzLnZhbHVlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy5jb2xsZWFndWVzLnZhbHVlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy5tdXR1YWxDb25uZWN0aW9ucy52YWx1ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKVxuICAgIH0pXG5cbiAgfSlcblxuICBkZXNjcmliZSgn8J+SsCBXYWxsZXQgTWV0cmljcycsICgpID0+IHtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHdhbGxldCBhZGRyZXNzIG5vdCBwcm92aWRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldFdhbGxldE1ldHJpY3MoKVxuXG4gICAgICBleHBlY3QobWV0cmljcy5pc0VuYWJsZWQpLnRvQmUoZmFsc2UpXG4gICAgICBleHBlY3QobWV0cmljcy5pc0RlbW8pLnRvQmUodHJ1ZSlcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLnRvdGFsQmFsYW5jZS52YWx1ZSkudG9CZSgnMC4wMDAgQlRDJylcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN0YXRzLmNvbmZpcm1lZEJhbGFuY2UudmFsdWUpLnRvQmUoJzAuMDAwIEJUQycpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy51bmNvbmZpcm1lZEJhbGFuY2UudmFsdWUpLnRvQmUoJzAuMDAwIEJUQycpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy50b3RhbFRyYW5zYWN0aW9ucy52YWx1ZSkudG9CZSgwKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHdhbGxldCBhZGRyZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IGFuYWx5dGljc1NlcnZpY2UuZ2V0V2FsbGV0TWV0cmljcygnJylcblxuICAgICAgZXhwZWN0KG1ldHJpY3MuaXNFbmFibGVkKS50b0JlKGZhbHNlKVxuICAgICAgZXhwZWN0KG1ldHJpY3MuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QobWV0cmljcy5zdGF0cy50b3RhbEJhbGFuY2UudmFsdWUpLnRvQmUoJzAuMDAwIEJUQycpXG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgd2hpdGVzcGFjZSB3YWxsZXQgYWRkcmVzcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldFdhbGxldE1ldHJpY3MoJyAgICcpXG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChtZXRyaWNzLmlzRGVtbykudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KG1ldHJpY3Muc3RhdHMudG90YWxCYWxhbmNlLnZhbHVlKS50b0JlKCcwLjAwMCBCVEMnKVxuICAgIH0pXG5cbiAgfSlcblxuICBkZXNjcmliZSgn8J+nriBTYWZlIENhbGN1bGF0aW9ucycsICgpID0+IHtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHNhZmUgY2FsY3VsYXRpb25zIGluIGRlbW8gbWV0cmljcycsICgpID0+IHtcbiAgICAgIC8vIFRlc3QgdGhhdCBhbGwgZGVtbyBtZXRyaWNzIHJldHVybiB2YWxpZCB2YWx1ZXMgd2l0aG91dCBjcmFzaGluZ1xuICAgICAgY29uc3Qgb3JnTWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0T3JnYW5pemF0aW9uc01ldHJpY3MoKVxuICAgICAgY29uc3QgZXZlbnRNZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRFdmVudHNNZXRyaWNzKClcbiAgICAgIGNvbnN0IHByb2plY3RNZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRQcm9qZWN0c01ldHJpY3MoKVxuICAgICAgY29uc3QgYXNzZXRNZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRBc3NldHNNZXRyaWNzKClcbiAgICAgIGNvbnN0IHBlb3BsZU1ldHJpY3MgPSBhbmFseXRpY3NTZXJ2aWNlLmdldFBlb3BsZU1ldHJpY3MoKVxuXG4gICAgICAvLyBBbGwgc2hvdWxkIGhhdmUgdmFsaWQgbnVtZXJpYyBvciBzdHJpbmcgdmFsdWVzXG4gICAgICBleHBlY3QodHlwZW9mIG9yZ01ldHJpY3Muc3RhdHMudG90YWxPcmdhbml6YXRpb25zLnZhbHVlKS50b0JlKCdudW1iZXInKVxuICAgICAgZXhwZWN0KHR5cGVvZiBldmVudE1ldHJpY3Muc3RhdHMudG90YWxFdmVudHMudmFsdWUpLnRvQmUoJ251bWJlcicpXG4gICAgICBleHBlY3QodHlwZW9mIHByb2plY3RNZXRyaWNzLnN0YXRzLnRvdGFsUHJvamVjdHMudmFsdWUpLnRvQmUoJ251bWJlcicpXG4gICAgICBleHBlY3QodHlwZW9mIGFzc2V0TWV0cmljcy5zdGF0cy50b3RhbEFzc2V0cy52YWx1ZSkudG9CZSgnbnVtYmVyJylcbiAgICAgIGV4cGVjdCh0eXBlb2YgcGVvcGxlTWV0cmljcy5zdGF0cy50b3RhbENvbm5lY3Rpb25zLnZhbHVlKS50b0JlKCdudW1iZXInKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGVkZ2UgY2FzZXMgaW4gY2FsY3VsYXRpb25zJywgKCkgPT4ge1xuICAgICAgLy8gVGVzdCB0aGF0IG1ldHJpY3MgaGFuZGxlIGVkZ2UgY2FzZXMgZ3JhY2VmdWxseVxuICAgICAgY29uc3Qgb3JnTWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0T3JnYW5pemF0aW9uc01ldHJpY3MoKVxuICAgICAgXG4gICAgICAvLyBTaG91bGQgbm90IGhhdmUgTmFOIG9yIEluZmluaXR5IHZhbHVlc1xuICAgICAgZXhwZWN0KE51bWJlci5pc0Zpbml0ZShvcmdNZXRyaWNzLnN0YXRzLnRvdGFsT3JnYW5pemF0aW9ucy52YWx1ZSkpLnRvQmUodHJ1ZSlcbiAgICAgIGV4cGVjdChOdW1iZXIuaXNGaW5pdGUob3JnTWV0cmljcy5zdGF0cy50b3RhbE1lbWJlcnMudmFsdWUpKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QoTnVtYmVyLmlzRmluaXRlKG9yZ01ldHJpY3Muc3RhdHMuYWN0aXZlUHJvcG9zYWxzLnZhbHVlKSkudG9CZSh0cnVlKVxuICAgIH0pXG5cbiAgfSlcblxuICBkZXNjcmliZSgn8J+TiCBBbGwgTWV0cmljcyBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgZmV0Y2ggYWxsIG1ldHJpY3Mgd2l0aCBkZW1vIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhbGxNZXRyaWNzID0gYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRBbGxNZXRyaWNzKCd1c2VyLTEyMycpXG5cbiAgICAgIC8vIFNob3VsZCBoYXZlIGFsbCBtZXRyaWMgY2F0ZWdvcmllc1xuICAgICAgZXhwZWN0KGFsbE1ldHJpY3MuZnVuZHJhaXNpbmcpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChhbGxNZXRyaWNzLndhbGxldCkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KGFsbE1ldHJpY3Mub3JnYW5pemF0aW9ucykudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KGFsbE1ldHJpY3MuZXZlbnRzKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QoYWxsTWV0cmljcy5wcm9qZWN0cykudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KGFsbE1ldHJpY3MuYXNzZXRzKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QoYWxsTWV0cmljcy5wZW9wbGUpLnRvQmVEZWZpbmVkKClcblxuICAgICAgLy8gRGVtbyBtZXRyaWNzIHNob3VsZCBiZSBlbmFibGVkIGFzIGRlbW9cbiAgICAgIGV4cGVjdChhbGxNZXRyaWNzLm9yZ2FuaXphdGlvbnMuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QoYWxsTWV0cmljcy5ldmVudHMuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QoYWxsTWV0cmljcy5wcm9qZWN0cy5pc0RlbW8pLnRvQmUodHJ1ZSlcbiAgICAgIGV4cGVjdChhbGxNZXRyaWNzLmFzc2V0cy5pc0RlbW8pLnRvQmUodHJ1ZSlcbiAgICAgIGV4cGVjdChhbGxNZXRyaWNzLnBlb3BsZS5pc0RlbW8pLnRvQmUodHJ1ZSlcblxuICAgICAgLy8gV2FsbGV0IHNob3VsZCBiZSBkZW1vIHdoZW4gbm8gYWRkcmVzcyBwcm92aWRlZFxuICAgICAgZXhwZWN0KGFsbE1ldHJpY3Mud2FsbGV0LmlzRGVtbykudG9CZSh0cnVlKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHVzZXIgSUQgdmFsaWRhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFNob3VsZCBub3QgY3Jhc2ggd2l0aCBpbnZhbGlkIHVzZXIgSURzXG4gICAgICBjb25zdCBtZXRyaWNzMSA9IGF3YWl0IGFuYWx5dGljc1NlcnZpY2UuZ2V0QWxsTWV0cmljcygnJylcbiAgICAgIGNvbnN0IG1ldHJpY3MyID0gYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRBbGxNZXRyaWNzKCcgICAnKVxuICAgICAgY29uc3QgbWV0cmljczMgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldEFsbE1ldHJpY3MoJ2ludmFsaWQtdXNlci1pZCcpXG5cbiAgICAgIGV4cGVjdChtZXRyaWNzMSkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KG1ldHJpY3MyKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QobWV0cmljczMpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ/Cfl4TvuI8gQ2FjaGUgTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgbWFuYWdlIGNhY2hlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGluaXRpYWxTdGF0cyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0Q2FjaGVTdGF0cygpXG4gICAgICBleHBlY3QoaW5pdGlhbFN0YXRzLnNpemUpLnRvQmUoMClcbiAgICAgIGV4cGVjdChpbml0aWFsU3RhdHMua2V5cykudG9FcXVhbChbXSlcbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIGNsZWFyIGNhY2hlJywgKCkgPT4ge1xuICAgICAgLy8gQ2xlYXIgY2FjaGUgc2hvdWxkIG5vdCBjcmFzaFxuICAgICAgYW5hbHl0aWNzU2VydmljZS5jbGVhckNhY2hlKClcbiAgICAgIFxuICAgICAgY29uc3QgY2FjaGVTdGF0cyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0Q2FjaGVTdGF0cygpXG4gICAgICBleHBlY3QoY2FjaGVTdGF0cy5zaXplKS50b0JlKDApXG4gICAgICBleHBlY3QoY2FjaGVTdGF0cy5rZXlzKS50b0VxdWFsKFtdKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgcHJvdmlkZSBjYWNoZSBzdGF0aXN0aWNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FjaGVTdGF0cyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0Q2FjaGVTdGF0cygpXG4gICAgICBcbiAgICAgIGV4cGVjdCh0eXBlb2YgY2FjaGVTdGF0cy5zaXplKS50b0JlKCdudW1iZXInKVxuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkoY2FjaGVTdGF0cy5rZXlzKSkudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KGNhY2hlU3RhdHMuc2l6ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKVxuICAgIH0pXG5cbiAgfSlcblxuICBkZXNjcmliZSgn8J+UpyBNZXRyaWMgVmFsdWUgU3RydWN0dXJlJywgKCkgPT4ge1xuICAgIFxuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIGNvbnNpc3RlbnQgbWV0cmljIHZhbHVlIHN0cnVjdHVyZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBhbmFseXRpY3NTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbnNNZXRyaWNzKClcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgdGhhdCBhbGwgc3RhdHMgaGF2ZSB0aGUgcmVxdWlyZWQgTWV0cmljVmFsdWUgc3RydWN0dXJlXG4gICAgICBPYmplY3QudmFsdWVzKG1ldHJpY3Muc3RhdHMpLmZvckVhY2goc3RhdCA9PiB7XG4gICAgICAgIGV4cGVjdChzdGF0KS50b0hhdmVQcm9wZXJ0eSgndmFsdWUnKVxuICAgICAgICBleHBlY3Qoc3RhdCkudG9IYXZlUHJvcGVydHkoJ2NvbmZpZGVuY2UnKVxuICAgICAgICBleHBlY3Qoc3RhdCkudG9IYXZlUHJvcGVydHkoJ2xhc3RVcGRhdGVkJylcbiAgICAgICAgZXhwZWN0KHN0YXQpLnRvSGF2ZVByb3BlcnR5KCdzb3VyY2UnKVxuICAgICAgICBleHBlY3Qoc3RhdCkudG9IYXZlUHJvcGVydHkoJ2lzRGVtbycpXG4gICAgICAgIFxuICAgICAgICBleHBlY3Qoc3RhdC5sYXN0VXBkYXRlZCkudG9CZUluc3RhbmNlT2YoRGF0ZSlcbiAgICAgICAgZXhwZWN0KFsnaGlnaCcsICdtZWRpdW0nLCAnbG93J10pLnRvQ29udGFpbihzdGF0LmNvbmZpZGVuY2UpXG4gICAgICAgIGV4cGVjdChbJ2RhdGFiYXNlJywgJ2FwaScsICdkZW1vJ10pLnRvQ29udGFpbihzdGF0LnNvdXJjZSlcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBzdGF0LmlzRGVtbykudG9CZSgnYm9vbGVhbicpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSBjb25zaXN0ZW50IHRpbWVsaW5lIGluZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0T3JnYW5pemF0aW9uc01ldHJpY3MoKVxuICAgICAgXG4gICAgICBleHBlY3QobWV0cmljcykudG9IYXZlUHJvcGVydHkoJ3RpbWVsaW5lJylcbiAgICAgIGlmIChtZXRyaWNzLnRpbWVsaW5lKSB7XG4gICAgICAgIGV4cGVjdCh0eXBlb2YgbWV0cmljcy50aW1lbGluZSkudG9CZSgnc3RyaW5nJylcbiAgICAgICAgZXhwZWN0KG1ldHJpY3MudGltZWxpbmUubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIGhhdmUgY29uc2lzdGVudCBmZWF0dXJlIGZsYWdzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JnTWV0cmljcyA9IGFuYWx5dGljc1NlcnZpY2UuZ2V0T3JnYW5pemF0aW9uc01ldHJpY3MoKVxuICAgICAgY29uc3QgZXZlbnRNZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRFdmVudHNNZXRyaWNzKClcbiAgICAgIGNvbnN0IHByb2plY3RNZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRQcm9qZWN0c01ldHJpY3MoKVxuICAgICAgY29uc3QgYXNzZXRNZXRyaWNzID0gYW5hbHl0aWNzU2VydmljZS5nZXRBc3NldHNNZXRyaWNzKClcbiAgICAgIGNvbnN0IHBlb3BsZU1ldHJpY3MgPSBhbmFseXRpY3NTZXJ2aWNlLmdldFBlb3BsZU1ldHJpY3MoKVxuXG4gICAgICAvLyBBbGwgZGVtbyBmZWF0dXJlcyBzaG91bGQgYmUgZGlzYWJsZWQgYnV0IGRlbW8gc2hvdWxkIGJlIHRydWVcbiAgICAgIGV4cGVjdChvcmdNZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChldmVudE1ldHJpY3MuaXNFbmFibGVkKS50b0JlKGZhbHNlKVxuICAgICAgZXhwZWN0KHByb2plY3RNZXRyaWNzLmlzRW5hYmxlZCkudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChhc3NldE1ldHJpY3MuaXNFbmFibGVkKS50b0JlKGZhbHNlKVxuICAgICAgZXhwZWN0KHBlb3BsZU1ldHJpY3MuaXNFbmFibGVkKS50b0JlKGZhbHNlKVxuXG4gICAgICBleHBlY3Qob3JnTWV0cmljcy5pc0RlbW8pLnRvQmUodHJ1ZSlcbiAgICAgIGV4cGVjdChldmVudE1ldHJpY3MuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QocHJvamVjdE1ldHJpY3MuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QoYXNzZXRNZXRyaWNzLmlzRGVtbykudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KHBlb3BsZU1ldHJpY3MuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgfSlcblxuICB9KVxuXG4gIGRlc2NyaWJlKCfwn5uh77iPIEVycm9yIEhhbmRsaW5nJywgKCkgPT4ge1xuICAgIFxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCBpbnB1dHMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFNob3VsZCBub3QgY3Jhc2ggd2l0aCBudWxsL3VuZGVmaW5lZCBpbnB1dHNcbiAgICAgIGNvbnN0IG1ldHJpY3MxID0gYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRBbGxNZXRyaWNzKG51bGwgYXMgYW55KVxuICAgICAgY29uc3QgbWV0cmljczIgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldEFsbE1ldHJpY3ModW5kZWZpbmVkIGFzIGFueSlcbiAgICAgIFxuICAgICAgZXhwZWN0KG1ldHJpY3MxKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QobWV0cmljczIpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gdXNlciBJRCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNwZWNpYWxVc2VySWRzID0gW1xuICAgICAgICAndXNlckBleGFtcGxlLmNvbScsXG4gICAgICAgICd1c2VyLXdpdGgtZGFzaGVzJyxcbiAgICAgICAgJ3VzZXJfd2l0aF91bmRlcnNjb3JlcycsXG4gICAgICAgICd1c2VyMTIzJyxcbiAgICAgICAgJ3VzZXIgd2l0aCBzcGFjZXMnXG4gICAgICBdXG5cbiAgICAgIGZvciAoY29uc3QgdXNlcklkIG9mIHNwZWNpYWxVc2VySWRzKSB7XG4gICAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldEFsbE1ldHJpY3ModXNlcklkKVxuICAgICAgICBleHBlY3QobWV0cmljcykudG9CZURlZmluZWQoKVxuICAgICAgICBleHBlY3QobWV0cmljcy5vcmdhbml6YXRpb25zKS50b0JlRGVmaW5lZCgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdmVyeSBsb25nIHVzZXIgSURzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbG9uZ1VzZXJJZCA9ICdhJy5yZXBlYXQoMTAwMClcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldEFsbE1ldHJpY3MobG9uZ1VzZXJJZClcbiAgICAgIFxuICAgICAgZXhwZWN0KG1ldHJpY3MpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChtZXRyaWNzLm9yZ2FuaXphdGlvbnMuaXNEZW1vKS50b0JlKHRydWUpXG4gICAgfSlcblxuICB9KVxuXG59KSAiXSwidmVyc2lvbiI6M30=