5a6f0b5e01e65aa20ef73de9bbb1769e
"use strict";
/**
 * Test Utilities for OrangeCat
 * Shared utilities and helpers for all test types
 *
 * Created: 2025-09-24
 * Last Modified: 2025-09-24
 * Last Modified Summary: Test utilities for comprehensive testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUtils = exports.securityUtils = exports.timeUtils = exports.mockFetch = exports.mockApiResponse = exports.createTestCampaign = exports.createTestUser = void 0;
const globals_1 = require("@jest/globals");
// =============================================================================
// FACTORIES
// =============================================================================
const createTestUser = (overrides = {}) => (Object.assign({ id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, email: `test${Date.now()}@example.com`, username: `testuser${Date.now()}`, full_name: 'Test User', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }, overrides));
exports.createTestUser = createTestUser;
const createTestCampaign = (overrides = {}) => (Object.assign({ id: `campaign_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, title: 'Test Campaign', description: 'Test campaign description', bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', goal_amount: 1000000, raised_amount: 0, categories: ['technology', 'bitcoin'], status: 'active', created_at: new Date().toISOString(), updated_at: new Date().toISOString(), creator_id: 'test-user-id' }, overrides));
exports.createTestCampaign = createTestCampaign;
// =============================================================================
// API MOCK UTILITIES
// =============================================================================
const mockApiResponse = (status = 200, data = {}, headers = {}) => ({
    ok: status >= 200 && status < 300,
    status,
    json: async () => data,
    text: async () => JSON.stringify(data),
    headers: { get: (name) => headers[name] || null }
});
exports.mockApiResponse = mockApiResponse;
const mockFetch = (responses) => {
    const mockResponses = [...responses];
    return globals_1.jest.fn().mockImplementation(() => {
        var _a, _b;
        return Promise.resolve(mockResponses.length > 0
            ? (0, exports.mockApiResponse)(((_a = mockResponses.shift()) === null || _a === void 0 ? void 0 : _a.status) || 200, (_b = mockResponses.shift()) === null || _b === void 0 ? void 0 : _b.data)
            : (0, exports.mockApiResponse)(500, { error: 'No more responses' }));
    });
};
exports.mockFetch = mockFetch;
// =============================================================================
// TIME UTILITIES
// =============================================================================
exports.timeUtils = {
    mockDate: (date) => {
        const mockDate = new Date(date);
        globals_1.jest.spyOn(global, 'Date').mockImplementation(() => mockDate);
        return mockDate;
    },
    restoreDate: () => globals_1.jest.restoreAllMocks(),
    mockTimeout: () => globals_1.jest.useFakeTimers(),
    restoreTimeout: () => globals_1.jest.useRealTimers(),
    advanceTime: (ms) => globals_1.jest.advanceTimersByTime(ms)
};
// =============================================================================
// SECURITY TEST UTILITIES
// =============================================================================
exports.securityUtils = {
    xssVectors: [
        '<script>alert("XSS")</script>',
        'javascript:alert(1)',
        '<img src=x onerror=alert(1)>'
    ],
    testSanitization: (input, sanitized) => {
        expect(sanitized).not.toContain('<script>');
        expect(sanitized).not.toContain('javascript:');
        expect(sanitized).not.toContain('alert(');
    }
};
exports.testUtils = {
    createTestUser: exports.createTestUser,
    createTestCampaign: exports.createTestCampaign,
    mockApiResponse: exports.mockApiResponse,
    mockFetch: exports.mockFetch,
    timeUtils: exports.timeUtils,
    securityUtils: exports.securityUtils
};
exports.default = exports.testUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,