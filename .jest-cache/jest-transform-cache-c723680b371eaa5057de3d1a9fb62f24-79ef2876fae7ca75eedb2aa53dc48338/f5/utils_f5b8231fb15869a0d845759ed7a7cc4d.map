{"file":"/home/g/dev/orangecat/tests/utils.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/tests/utils.ts"],"sourcesContent":["/**\n * Test Utilities for OrangeCat\n * Shared utilities and helpers for all test types\n *\n * Created: 2025-09-24\n * Last Modified: 2025-09-24\n * Last Modified Summary: Test utilities for comprehensive testing\n */\n\nimport { jest } from '@jest/globals';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\nexport interface TestUser {\n  id: string;\n  email: string;\n  username: string;\n  full_name: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface TestCampaign {\n  id: string;\n  title: string;\n  description: string;\n  bitcoin_address: string;\n  goal_amount: number;\n  raised_amount: number;\n  categories: string[];\n  status: 'draft' | 'active' | 'completed';\n  created_at: string;\n  updated_at: string;\n  creator_id: string;\n}\n\n// =============================================================================\n// FACTORIES\n// =============================================================================\n\nexport const createTestUser = (overrides: Partial<TestUser> = {}): TestUser => ({\n  id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  email: `test${Date.now()}@example.com`,\n  username: `testuser${Date.now()}`,\n  full_name: 'Test User',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString(),\n  ...overrides\n});\n\nexport const createTestCampaign = (overrides: Partial<TestCampaign> = {}): TestCampaign => ({\n  id: `campaign_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  title: 'Test Campaign',\n  description: 'Test campaign description',\n  bitcoin_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n  goal_amount: 1000000,\n  raised_amount: 0,\n  categories: ['technology', 'bitcoin'],\n  status: 'active',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString(),\n  creator_id: 'test-user-id',\n  ...overrides\n});\n\n// =============================================================================\n// API MOCK UTILITIES\n// =============================================================================\n\nexport const mockApiResponse = (\n  status: number = 200,\n  data: any = {},\n  headers: Record<string, string> = {}\n) => ({\n  ok: status >= 200 && status < 300,\n  status,\n  json: async () => data,\n  text: async () => JSON.stringify(data),\n  headers: { get: (name: string) => headers[name] || null }\n});\n\nexport const mockFetch = (responses: Array<{ status?: number; data?: any }>) => {\n  const mockResponses = [...responses];\n  return jest.fn().mockImplementation(() =>\n    Promise.resolve(\n      mockResponses.length > 0\n        ? mockApiResponse(mockResponses.shift()?.status || 200, mockResponses.shift()?.data)\n        : mockApiResponse(500, { error: 'No more responses' })\n    )\n  );\n};\n\n// =============================================================================\n// TIME UTILITIES\n// =============================================================================\n\nexport const timeUtils = {\n  mockDate: (date: Date | string) => {\n    const mockDate = new Date(date);\n    jest.spyOn(global, 'Date').mockImplementation(() => mockDate as any);\n    return mockDate;\n  },\n  restoreDate: () => jest.restoreAllMocks(),\n  mockTimeout: () => jest.useFakeTimers(),\n  restoreTimeout: () => jest.useRealTimers(),\n  advanceTime: (ms: number) => jest.advanceTimersByTime(ms)\n};\n\n// =============================================================================\n// SECURITY TEST UTILITIES\n// =============================================================================\n\nexport const securityUtils = {\n  xssVectors: [\n    '<script>alert(\"XSS\")</script>',\n    'javascript:alert(1)',\n    '<img src=x onerror=alert(1)>'\n  ],\n  testSanitization: (input: string, sanitized: string) => {\n    expect(sanitized).not.toContain('<script>');\n    expect(sanitized).not.toContain('javascript:');\n    expect(sanitized).not.toContain('alert(');\n  }\n};\n\nexport const testUtils = {\n  createTestUser,\n  createTestCampaign,\n  mockApiResponse,\n  mockFetch,\n  timeUtils,\n  securityUtils\n};\n\nexport default testUtils;\n\n\n\n\n\n\n"],"version":3}