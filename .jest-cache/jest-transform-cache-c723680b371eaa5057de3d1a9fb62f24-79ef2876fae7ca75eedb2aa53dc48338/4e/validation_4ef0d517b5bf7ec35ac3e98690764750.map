{"file":"/home/g/dev/orangecat/src/utils/validation.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/utils/validation.ts"],"sourcesContent":["import { isProtectedUsername, validateBioForImpersonation } from './verification';\n\n// Pre-compiled regex patterns for performance (avoid creating new regex objects on each call)\nconst BECH32_FORMAT_REGEX = /^bc1[02-9ac-hj-np-z]+$/;\nconst BASE58_FORMAT_REGEX = /^[13][1-9A-HJ-NP-Za-km-z]+$/;\nconst LIGHTNING_FORMAT_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n// Enhanced Bitcoin address validation with comprehensive security\nexport const isValidBitcoinAddress = (address: string): { valid: boolean; error?: string } => {\n  if (!address) {\n    return { valid: false, error: 'Bitcoin address required' };\n  }\n\n  // 1. Prevent testnet addresses on mainnet (check before format validation)\n  if (address.startsWith('tb1') || address.startsWith('bcrt1')) {\n    return { valid: false, error: 'Testnet addresses not allowed' };\n  }\n\n  // 2. Check for known burn addresses FIRST (before format validation)\n  const burnAddresses = [\n    '1111111111111111111114oLvT2',\n    '1BitcoinEaterAddressDontSendf59kuE',\n    'bc1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq9424r'\n  ];\n  if (burnAddresses.includes(address)) {\n    return { valid: false, error: 'Burn addresses not allowed' };\n  }\n\n  // 3. Basic format validation with proper character sets\n  let formatRegex: RegExp;\n  \n  if (address.startsWith('bc1')) {\n    // Bech32 addresses: lowercase only, proper bech32 character set  \n    // Valid bech32 chars: 0-9 and a-z except 1, b, i, o \n    formatRegex = BECH32_FORMAT_REGEX;\n  } else if (address.startsWith('1') || address.startsWith('3')) {\n    // Base58 addresses: exclude 0, O, I, l to prevent confusion\n    formatRegex = BASE58_FORMAT_REGEX;\n  } else {\n    return { valid: false, error: 'Invalid Bitcoin address format' };\n  }\n  \n  if (!formatRegex.test(address)) {\n    return { valid: false, error: 'Invalid Bitcoin address format' };\n  }\n\n  // 3.5. Additional validation for specific invalid patterns\n  if (address.startsWith('bc1')) {\n    // Reject addresses with invalid bech32 patterns\n    // But allow Taproot addresses (bc1p) to have different rules\n    if (address.startsWith('bc1q') && address.endsWith('0')) {\n      return { valid: false, error: 'Invalid Bitcoin address format' };\n    }\n    if (address.includes('0I') || address.includes('Ol')) {\n      return { valid: false, error: 'Invalid Bitcoin address format' };\n    }\n  } else {\n    // Reject Base58 addresses with confusing character combinations\n    if (address.includes('0O') || address.includes('Il') || address.includes('I0')) {\n      return { valid: false, error: 'Invalid Bitcoin address format' };\n    }\n  }\n\n  // 4. Length validation by address type\n  if (address.startsWith('bc1')) {\n    // Bech32 (SegWit) addresses - more strict validation\n    // P2WPKH: exactly 42 chars, P2WSH: exactly 62 chars, Taproot: exactly 62 chars\n    // Anything else in between is likely invalid\n    if (address.length < 42 || address.length > 62) {\n      return { valid: false, error: 'Invalid bech32 address length' };\n    }\n    // Additional check: reject addresses that are not standard lengths\n    if (address.length !== 42 && address.length !== 62) {\n      return { valid: false, error: 'Invalid bech32 address length' };\n    }\n  } else if (address.startsWith('3')) {\n    // P2SH addresses (SegWit wrapped)\n    if (address.length !== 34) {\n      return { valid: false, error: 'Invalid P2SH address length' };\n    }\n  } else if (address.startsWith('1')) {\n    // Legacy P2PKH addresses\n    if (address.length !== 34) {\n      return { valid: false, error: 'Invalid P2PKH address length' };\n    }\n  }\n\n  return { valid: true };\n};\n\n// Enhanced Lightning address validation with security checks\nexport const isValidLightningAddress = (address: string): { valid: boolean; error?: string } => {\n  if (!address) {\n    return { valid: false, error: 'Lightning address required' };\n  }\n\n  // 1. Prevent local/private addresses (check before format validation)\n  const domain = address.split('@')[1];\n  if (domain) {\n    const forbiddenDomains = ['localhost', '127.0.0.1', '0.0.0.0', '10.', '192.168.', '172.'];\n    if (forbiddenDomains.some(forbidden => domain.includes(forbidden))) {\n      return { valid: false, error: 'Local addresses not allowed' };\n    }\n  }\n\n  // 2. Basic format validation\n  if (!LIGHTNING_FORMAT_REGEX.test(address)) {\n    return { valid: false, error: 'Invalid Lightning address format' };\n  }\n\n  // 3. Domain length validation\n  if (domain && domain.length > 253) {\n    return { valid: false, error: 'Domain name too long' };\n  }\n\n  // 4. Prevent obviously suspicious domains\n  const suspiciousDomains = ['tempmail', 'guerrillamail', '10minutemail', 'throwaway'];\n  if (domain && suspiciousDomains.some(suspicious => domain.toLowerCase().includes(suspicious))) {\n    return { valid: false, error: 'Temporary email domains not allowed' };\n  }\n\n  return { valid: true };\n};\n\n// Enhanced username validation with anti-impersonation protection\nexport const isValidUsername = (username: string): { valid: boolean; error?: string; suggestedAlternatives?: string[] } => {\n  if (!username) {\n    return { valid: false, error: 'Username required' };\n  }\n\n  // 1. Length validation\n  if (username.length < 3) {\n    return { valid: false, error: 'Username must be at least 3 characters long' };\n  }\n  if (username.length > 30) {\n    return { valid: false, error: 'Username must be 30 characters or less' };\n  }\n\n  // 2. Check for Unicode attacks and character substitutions FIRST\n  // Check for non-ASCII characters that could be lookalikes\n  if (!/^[\\x00-\\x7F]*$/.test(username)) {\n    return { valid: false, error: 'Cyrillic, Greek, and other non-ASCII characters not allowed' };\n  }\n\n  // 3. Character validation (after Unicode check)\n  const usernameRegex = /^[a-zA-Z0-9_-]+$/;\n  if (!usernameRegex.test(username)) {\n    return { valid: false, error: 'Username can only contain letters, numbers, hyphens, and underscores' };\n  }\n\n  // 4. Check for protected usernames using the verification system\n  const protectionCheck = isProtectedUsername(username);\n  if (protectionCheck.isProtected) {\n    return { \n      valid: false, \n      error: protectionCheck.reason || 'Username is protected',\n      suggestedAlternatives: protectionCheck.suggestedAlternatives\n    };\n  }\n\n  // 5. Reserved usernames (platform-specific)\n  const reservedUsernames = [\n    'admin', 'administrator', 'root', 'mod', 'moderator', 'support',\n    'help', 'api', 'www', 'mail', 'email', 'official', 'verified', \n    'staff', 'team', 'orangecat', 'orange-cat', 'orange_cat'\n  ];\n  \n  if (reservedUsernames.includes(username.toLowerCase())) {\n    return { valid: false, error: 'Username is reserved' };\n  }\n\n  // 6. Check for character substitution patterns that might be celebrity impersonation\n  // Common substitutions: 0->o, 3->e, 4->a, 1->i, 5->s, etc.\n  const substitutionMap: Record<string, string> = {\n    '0': 'o', '3': 'e', '4': 'a', '1': 'i', '5': 's', '6': 'g', '7': 't', '9': 'g'\n  };\n  \n  // Create a version with substitutions reversed to check against protected names\n  let substitutionReversed = username.toLowerCase();\n  for (const [num, letter] of Object.entries(substitutionMap)) {\n    substitutionReversed = substitutionReversed.replace(new RegExp(num, 'g'), letter);\n  }\n  \n  // If the substitution-reversed version is protected, block it\n  if (substitutionReversed !== username.toLowerCase()) {\n    const celebrityCheck = isProtectedUsername(substitutionReversed);\n    if (celebrityCheck.isProtected) {\n      return { \n        valid: false, \n        error: 'Username resembles protected celebrity name',\n        suggestedAlternatives: celebrityCheck.suggestedAlternatives\n      };\n    }\n  }\n\n  return { valid: true };\n};\n\n// Enhanced bio content validation and sanitization\nexport const isValidBio = (bio: string): { valid: boolean; error?: string } => {\n  if (!bio) {\n    return { valid: true }; // Bio is optional\n  }\n\n  // 1. Length limits\n  if (bio.length > 500) {\n    return { valid: false, error: 'Bio must be under 500 characters' };\n  }\n\n  // 2. HTML/Script injection prevention\n  const dangerousPatterns = [\n    /<script[^>]*>.*?<\\/script>/gi,\n    /javascript:/gi,\n    /on\\w+\\s*=/gi,  // onclick, onload, etc.\n    /<iframe/gi,\n    /<object/gi,\n    /<embed/gi,\n    /<link/gi,\n    /<meta/gi\n  ];\n\n  for (const pattern of dangerousPatterns) {\n    if (pattern.test(bio)) {\n      return { valid: false, error: 'Bio contains prohibited content' };\n    }\n  }\n\n  // 3. Prevent alternative Bitcoin address injection\n  const btcAddressPattern = /\\b(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}\\b/g;\n  const foundAddresses = bio.match(btcAddressPattern);\n  if (foundAddresses && foundAddresses.length > 0) {\n    return { valid: false, error: 'Bitcoin addresses not allowed in bio' };\n  }\n\n  // 4. Prevent verification badge spoofing (check before authority terms)\n  const verificationSpoof = /(verified|official|certified|authentic).*[✓✔☑]|[✓✔☑].*(verified|official|certified|authentic)/gi;\n  if (verificationSpoof.test(bio)) {\n    return { valid: false, error: 'Verification claims not allowed' };\n  }\n\n  // 5. Prevent authority impersonation\n  const authorityTerms = [\n    'official bitcoin', 'bitcoin foundation', 'bitcoin core',\n    'satoshi nakamoto', 'bitcoin developer', 'core developer', \n    'lightning labs', 'blockstream', 'bitcoin.org'\n  ];\n\n  const bioLower = bio.toLowerCase();\n  for (const term of authorityTerms) {\n    if (bioLower.includes(term)) {\n      return { valid: false, error: 'Authority claims not allowed in bio' };\n    }\n  }\n\n  // 6. Use verification system for additional impersonation checks\n  const impersonationCheck = validateBioForImpersonation(bio);\n  if (!impersonationCheck.valid) {\n    return impersonationCheck;\n  }\n\n  // 7. Additional celebrity impersonation detection\n  const celebrityImpersonationPatterns = [\n    /i am (elon|jack|satoshi|michael|andreas)/i,\n    /this is (elon|jack|satoshi|michael|andreas)/i,\n    /real (elon|jack|satoshi|michael|andreas)/i,\n    /actual (elon|jack|satoshi|michael|andreas)/i,\n    /genuine (elon|jack|satoshi|michael|andreas)/i,\n    /not fake.*i am/i\n  ];\n\n  for (const pattern of celebrityImpersonationPatterns) {\n    if (pattern.test(bio)) {\n      return { valid: false, error: 'Celebrity impersonation claims not allowed' };\n    }\n  }\n\n  return { valid: true };\n};\n\n// Client-side sanitization for bio display (additional security layer)\nexport const sanitizeBioForDisplay = (bio: string): string => {\n  if (!bio) return '';\n  \n  return bio\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n};\n\n// Legacy compatibility functions (maintain existing API)\nexport const isValidBitcoinAddressLegacy = (address: string): boolean => {\n  const result = isValidBitcoinAddress(address);\n  return result.valid;\n};\n\nexport const isValidLightningAddressLegacy = (address: string): boolean => {\n  const result = isValidLightningAddress(address);\n  return result.valid;\n};\n\n// URL validation utilities for seamless user experience\n\nexport function normalizeUrl(url: string): string {\n  if (!url.trim()) return ''\n  \n  let normalized = url.trim()\n  \n  // Remove any surrounding quotes or spaces\n  normalized = normalized.replace(/^[\"'\\s]+|[\"'\\s]+$/g, '')\n  \n  // If it doesn't start with a protocol, add https://\n  if (normalized && !normalized.match(/^https?:\\/\\//i)) {\n    normalized = `https://${normalized}`\n  }\n  \n  return normalized\n}\n\nexport function validateUrl(url: string): { isValid: boolean; normalized: string; error?: string } {\n  if (!url.trim()) {\n    return { isValid: true, normalized: '' } // Empty is valid (optional field)\n  }\n  \n  const normalized = normalizeUrl(url)\n  \n  try {\n    const urlObj = new URL(normalized)\n    \n    // Check if it's a valid HTTP/HTTPS URL\n    if (!['http:', 'https:'].includes(urlObj.protocol)) {\n      return {\n        isValid: false,\n        normalized,\n        error: 'URL must use http:// or https://'\n      }\n    }\n    \n    // Check if hostname exists\n    if (!urlObj.hostname || urlObj.hostname.length < 3) {\n      return {\n        isValid: false,\n        normalized,\n        error: 'Please enter a valid domain name'\n      }\n    }\n    \n    return { isValid: true, normalized }\n  } catch (error) {\n    return {\n      isValid: false,\n      normalized,\n      error: 'Please enter a valid URL'\n    }\n  }\n}\n\nexport function isValidUrl(url: string): boolean {\n  return validateUrl(url).isValid\n} "],"version":3}