{"version":3,"names":["cov_1vomouabzv","actualCoverage","exports","ensureBlogDirectory","s","getBlogPostSlugs","getBlogPost","getAllBlogPosts","getPublishedPosts","getFeaturedPost","getPostsByTag","getAllTags","createBlogPostTemplate","saveBlogPost","fs_1","__importDefault","require","path_1","gray_matter_1","BLOG_POSTS_PATH","default","join","process","cwd","f","existsSync","b","mkdirSync","recursive","calculateReadingTime","content","wordsPerMinute","words","trim","split","length","time","Math","ceil","readdirSync","filter","filename","endsWith","map","replace","slug","fullPath","fileContents","readFileSync","data","title","excerpt","date","Date","toISOString","readTime","tags","featured","author","published","error","slugs","post","sort","a","getTime","find","tag","some","postTag","toLowerCase","allTags","flatMap","Array","from","Set","writeFileSync"],"sources":["/home/g/dev/orangecat/src/lib/blog.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nexport interface BlogPost {\n  slug: string\n  title: string\n  excerpt: string\n  date: string\n  readTime: string\n  tags: string[]\n  featured?: boolean\n  author?: string\n  published?: boolean\n  content: string\n}\n\nconst BLOG_POSTS_PATH = path.join(process.cwd(), 'content/blog')\n\n// Ensure blog directory exists\nexport function ensureBlogDirectory() {\n  if (!fs.existsSync(BLOG_POSTS_PATH)) {\n    fs.mkdirSync(BLOG_POSTS_PATH, { recursive: true })\n  }\n}\n\n// Calculate reading time based on content\nfunction calculateReadingTime(content: string): string {\n  const wordsPerMinute = 200\n  const words = content.trim().split(/\\s+/).length\n  const time = Math.ceil(words / wordsPerMinute)\n  return `${time} min read`\n}\n\n// Get all blog post slugs\nexport function getBlogPostSlugs(): string[] {\n  ensureBlogDirectory()\n  \n  if (!fs.existsSync(BLOG_POSTS_PATH)) {\n    return []\n  }\n  \n  return fs.readdirSync(BLOG_POSTS_PATH)\n    .filter(filename => filename.endsWith('.mdx'))\n    .map(filename => filename.replace(/\\.mdx$/, ''))\n}\n\n// Get a single blog post by slug\nexport function getBlogPost(slug: string): BlogPost | null {\n  try {\n    ensureBlogDirectory()\n    \n    const fullPath = path.join(BLOG_POSTS_PATH, `${slug}.mdx`)\n    \n    if (!fs.existsSync(fullPath)) {\n      return null\n    }\n    \n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const { data, content } = matter(fileContents)\n    \n    return {\n      slug,\n      title: data.title || 'Untitled',\n      excerpt: data.excerpt || '',\n      date: data.date || new Date().toISOString().split('T')[0],\n      readTime: data.readTime || calculateReadingTime(content),\n      tags: data.tags || [],\n      featured: data.featured || false,\n      author: data.author || 'OrangeCat Team',\n      published: data.published !== false,\n      content\n    }\n  } catch (error) {\n    return null\n  }\n}\n\n// Get all blog posts\nexport function getAllBlogPosts(): BlogPost[] {\n  const slugs = getBlogPostSlugs()\n  \n  return slugs\n    .map(slug => getBlogPost(slug))\n    .filter((post): post is BlogPost => post !== null)\n    .filter(post => post.published)\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n}\n\n// Get published posts only\nexport function getPublishedPosts(): BlogPost[] {\n  return getAllBlogPosts().filter(post => post.published)\n}\n\n// Get featured post\nexport function getFeaturedPost(): BlogPost | null {\n  return getAllBlogPosts().find(post => post.featured) || null\n}\n\n// Get posts by tag\nexport function getPostsByTag(tag: string): BlogPost[] {\n  return getAllBlogPosts().filter(post => \n    post.tags.some(postTag => \n      postTag.toLowerCase() === tag.toLowerCase()\n    )\n  )\n}\n\n// Get all unique tags\nexport function getAllTags(): string[] {\n  const allTags = getAllBlogPosts().flatMap(post => post.tags)\n  return Array.from(new Set(allTags)).sort()\n}\n\n// Create a new blog post (utility function)\nexport function createBlogPostTemplate(\n  slug: string,\n  title: string,\n  excerpt: string,\n  tags: string[] = [],\n  featured: boolean = false\n): string {\n  const date = new Date().toISOString().split('T')[0]\n  \n  return `---\ntitle: \"${title}\"\nexcerpt: \"${excerpt}\"\ndate: \"${date}\"\ntags: [${tags.map(tag => `\"${tag}\"`).join(', ')}]\nfeatured: ${featured}\nauthor: \"OrangeCat Team\"\npublished: true\n---\n\n# ${title}\n\n${excerpt}\n\n## Getting Started\n\nWrite your blog post content here using Markdown syntax.\n\n### Features Available\n\n- **Bold text** and *italic text*\n- [Links](https://example.com)\n- Lists and bullet points\n- Code blocks\n- Custom React components\n\n### Custom Components\n\nYou can use custom components like:\n\n<Alert type=\"info\">\nThis is an info alert with custom styling!\n</Alert>\n\n<SecurityFeature \n  title=\"Enhanced Security\" \n  description=\"This feature improves platform security.\" \n/>\n\n## Conclusion\n\nYour conclusion goes here.\n`\n}\n\n// Save a blog post (utility function for development)\nexport function saveBlogPost(slug: string, content: string): boolean {\n  try {\n    ensureBlogDirectory()\n    \n    const fullPath = path.join(BLOG_POSTS_PATH, `${slug}.mdx`)\n    fs.writeFileSync(fullPath, content, 'utf8')\n    return true\n  } catch (error) {\n    return false\n  }\n} "],"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","ignoreList":[]}