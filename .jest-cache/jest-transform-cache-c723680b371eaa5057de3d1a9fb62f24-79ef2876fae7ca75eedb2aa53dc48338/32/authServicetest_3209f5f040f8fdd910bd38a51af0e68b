0e98af7066d2051d9e79040305a1be38
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@/services/supabase/client', () => {
    return {
        __esModule: true,
        default: {
            auth: {
                signInWithPassword: (...args) => mockSignInWithPassword(...args),
                signUp: (...args) => mockSignUp(...args),
                signOut: (...args) => mockSignOut(...args),
                getSession: (...args) => mockGetSession(...args),
            },
        },
    };
});
const auth_1 = require("@/services/supabase/auth");
const loggerUtils = __importStar(require("@/utils/logger"));
// Mock Supabase client and its auth methods
const mockSignInWithPassword = jest.fn();
const mockSignUp = jest.fn();
const mockSignOut = jest.fn();
const mockGetSession = jest.fn();
describe('Supabase auth service', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('signIn returns data on success & logs without leaking password', async () => {
        const fakeUser = { id: '123', email: 'test@example.com' };
        const fakeSession = { user: fakeUser };
        mockSignInWithPassword.mockResolvedValue({ data: { user: fakeUser, session: fakeSession }, error: null });
        // Spy on logAuth
        const logSpy = jest.spyOn(loggerUtils, 'logAuth');
        const { data, error } = await (0, auth_1.signIn)({ email: 'test@example.com', password: 'super-secret' });
        expect(error).toBeNull();
        expect(data).toEqual({ user: fakeUser, session: fakeSession });
        expect(mockSignInWithPassword).toHaveBeenCalledWith({ email: 'test@example.com', password: 'super-secret' });
        // Ensure no call to logAuth contains the raw password
        const leaked = logSpy.mock.calls.some(([, meta]) => JSON.stringify(meta).includes('super-secret'));
        expect(leaked).toBe(false);
    });
    it('signIn returns error when supabase returns error', async () => {
        const supabaseError = { message: 'Invalid credentials' };
        mockSignInWithPassword.mockResolvedValue({ data: { user: null, session: null }, error: supabaseError });
        const { data, error } = await (0, auth_1.signIn)({ email: 'foo@bar.com', password: 'wrong' });
        expect(error).toEqual(supabaseError);
        expect(data === null || data === void 0 ? void 0 : data.user).toBeNull();
    });
    it('signUp returns user/session on success', async () => {
        const fakeUser = { id: '42', email: 'new@user.com' };
        const fakeSession = { user: fakeUser };
        mockSignUp.mockResolvedValue({ data: { user: fakeUser, session: fakeSession }, error: null });
        const { data, error } = await (0, auth_1.signUp)({ email: fakeUser.email, password: 'Pa55w0rd' });
        expect(error).toBeNull();
        expect(data === null || data === void 0 ? void 0 : data.user).toEqual(fakeUser);
        expect(mockSignUp).toHaveBeenCalled();
    });
    it('signOut propagates supabase error', async () => {
        const supabaseError = { message: 'network error' };
        mockSignOut.mockResolvedValue({ error: supabaseError });
        const { error } = await (0, auth_1.signOut)();
        expect(error).toEqual(supabaseError);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,