{"file":"/home/g/dev/orangecat/tests/auth/authService.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/tests/auth/authService.test.ts"],"sourcesContent":["import { signIn, signUp, signOut } from '@/services/supabase/auth'\nimport * as loggerUtils from '@/utils/logger'\n\n// Mock Supabase client and its auth methods\nconst mockSignInWithPassword = jest.fn()\nconst mockSignUp = jest.fn()\nconst mockSignOut = jest.fn()\nconst mockGetSession = jest.fn()\n\njest.mock('@/services/supabase/client', () => {\n  return {\n    __esModule: true,\n    default: {\n      auth: {\n        signInWithPassword: (...args: unknown[]) => mockSignInWithPassword(...args),\n        signUp: (...args: unknown[]) => mockSignUp(...args),\n        signOut: (...args: unknown[]) => mockSignOut(...args),\n        getSession: (...args: unknown[]) => mockGetSession(...args),\n      },\n    },\n  }\n})\n\ndescribe('Supabase auth service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('signIn returns data on success & logs without leaking password', async () => {\n    const fakeUser = { id: '123', email: 'test@example.com' }\n    const fakeSession = { user: fakeUser }\n    mockSignInWithPassword.mockResolvedValue({ data: { user: fakeUser, session: fakeSession }, error: null })\n\n    // Spy on logAuth\n    const logSpy = jest.spyOn(loggerUtils, 'logAuth')\n\n    const { data, error } = await signIn({ email: 'test@example.com', password: 'super-secret' })\n\n    expect(error).toBeNull()\n    expect(data).toEqual({ user: fakeUser, session: fakeSession })\n    expect(mockSignInWithPassword).toHaveBeenCalledWith({ email: 'test@example.com', password: 'super-secret' })\n\n    // Ensure no call to logAuth contains the raw password\n    const leaked = (logSpy.mock.calls as unknown[][]).some(([, meta]) => JSON.stringify(meta).includes('super-secret'))\n    expect(leaked).toBe(false)\n  })\n\n  it('signIn returns error when supabase returns error', async () => {\n    const supabaseError = { message: 'Invalid credentials' }\n    mockSignInWithPassword.mockResolvedValue({ data: { user: null, session: null }, error: supabaseError })\n\n    const { data, error } = await signIn({ email: 'foo@bar.com', password: 'wrong' })\n\n    expect(error).toEqual(supabaseError)\n    expect(data?.user).toBeNull()\n  })\n\n  it('signUp returns user/session on success', async () => {\n    const fakeUser = { id: '42', email: 'new@user.com' }\n    const fakeSession = { user: fakeUser }\n    mockSignUp.mockResolvedValue({ data: { user: fakeUser, session: fakeSession }, error: null })\n\n    const { data, error } = await signUp({ email: fakeUser.email, password: 'Pa55w0rd' })\n\n    expect(error).toBeNull()\n    expect(data?.user).toEqual(fakeUser)\n    expect(mockSignUp).toHaveBeenCalled()\n  })\n\n  it('signOut propagates supabase error', async () => {\n    const supabaseError = { message: 'network error' }\n    mockSignOut.mockResolvedValue({ error: supabaseError })\n\n    const { error } = await signOut()\n\n    expect(error).toEqual(supabaseError)\n  })\n}) "],"version":3}