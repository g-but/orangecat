{"version":3,"names":["cov_28amnoawkg","actualCoverage","s","exports","middleware","server_1","require","publicRoutes","protectedRoutes","request","f","response","NextResponse","next","headers","set","nextUrl","pathname","url","URL","isExplicitRecovery","b","searchParams","get","hash","includes","has","callbackUrl","forEach","value","key","redirect","confirmUrl","hasResetTokens","isRecoveryType","hasAuthErrors","resetUrl","allCookies","Array","from","cookies","getAll","supabaseAuthCookie","find","cookie","name","startsWith","endsWith","accessToken","_a","_b","_c","hasAuthCookie","some","length","path","route","redirectUrl","error","config","matcher"],"sources":["/home/g/dev/orangecat/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n// List of public routes that don't require auth\nconst publicRoutes = ['/', '/auth', '/auth/reset-password', '/auth/forgot-password', '/login', '/register', '/privacy', '/terms', '/about', '/blog']\n\n// Routes that should redirect to /auth if user is not logged in\nconst protectedRoutes = ['/dashboard', '/profile', '/settings']\n\nexport async function middleware(request: NextRequest) {\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  })\n\n  // Add pathname to headers so layout can access it\n  response.headers.set('x-pathname', request.nextUrl.pathname)\n\n  // Handle password reset flow - redirect from root with reset tokens or error params to reset page\n  const url = new URL(request.url)\n  \n  // Handle Supabase code exchange links (?code=...) by redirecting to /auth/callback\n  // IMPORTANT: Do NOT intercept password recovery links here. Recovery flows should land on\n  // /auth/reset-password to preserve hash tokens for setSession() on the client.\n  const isExplicitRecovery = url.searchParams.get('type') === 'recovery' || url.hash.includes('type=recovery')\n  if (url.searchParams.has('code') && url.pathname === '/') {\n    const callbackUrl = new URL('/auth/callback', request.url)\n    url.searchParams.forEach((value, key) => callbackUrl.searchParams.set(key, value))\n    // Ensure recovery flow lands on reset page\n    if (!callbackUrl.searchParams.has('next') && (isExplicitRecovery || url.searchParams.get('type') === 'recovery')) {\n      callbackUrl.searchParams.set('next', '/auth/reset-password')\n    }\n    return NextResponse.redirect(callbackUrl)\n  }\n\n  // Shim: If Supabase still sends verify links to the root with token_hash&type (OTP/confirm flow),\n  // forward to the confirm route and default next for recovery.\n  if (url.pathname === '/' && url.searchParams.has('token_hash') && url.searchParams.has('type')) {\n    const confirmUrl = new URL('/auth/confirm', request.url)\n    url.searchParams.forEach((value, key) => confirmUrl.searchParams.set(key, value))\n    if (!confirmUrl.searchParams.has('next') && confirmUrl.searchParams.get('type') === 'recovery') {\n      confirmUrl.searchParams.set('next', '/auth/reset-password')\n    }\n    return NextResponse.redirect(confirmUrl)\n  }\n  const hasResetTokens = url.searchParams.has('access_token') || url.searchParams.has('refresh_token') || url.hash.includes('access_token')\n  const isRecoveryType = url.searchParams.get('type') === 'recovery' || url.hash.includes('type=recovery')\n  // Supabase may redirect with only error params when the link is expired/invalid\n  const hasAuthErrors = url.searchParams.has('error') || url.searchParams.has('error_code') || url.hash.includes('error=')\n  \n  if ((hasResetTokens && isRecoveryType || hasAuthErrors) && url.pathname !== '/auth/reset-password') {\n    // Redirect to reset password page while preserving all query params and hash\n    const resetUrl = new URL('/auth/reset-password', request.url)\n    \n    // Copy all query parameters\n    url.searchParams.forEach((value, key) => {\n      resetUrl.searchParams.set(key, value)\n    })\n    \n    // Also preserve hash if present (Supabase v2 may use hash for tokens)\n    if (url.hash) {\n      resetUrl.hash = url.hash\n    }\n    \n    return NextResponse.redirect(resetUrl)\n  }\n\n  try {\n    // Check for authentication by looking for Supabase auth cookies\n    // This is Edge Runtime compatible\n    const allCookies = Array.from(request.cookies.getAll())\n    \n    // Check for the specific Supabase auth token cookie pattern\n    const supabaseAuthCookie = allCookies.find(cookie => \n      cookie.name.startsWith('sb-') && cookie.name.endsWith('-auth-token')\n    )\n    \n    // Also check for legacy formats\n    const accessToken = request.cookies.get('sb-access-token')?.value ||\n                       request.cookies.get('supabase-auth-token')?.value ||\n                       request.cookies.get('supabase.auth.token')?.value ||\n                       supabaseAuthCookie?.value\n\n    // More comprehensive check for any Supabase auth cookies\n    const hasAuthCookie = !!supabaseAuthCookie || !!accessToken || \n                         allCookies.some(cookie => \n                           cookie.name.includes('supabase') && \n                           cookie.name.includes('auth') && \n                           cookie.value && \n                           cookie.value.length > 10\n                         )\n    \n    // Extract the path from the URL\n    const path = request.nextUrl.pathname\n    \n    // If user is not authenticated and trying to access a protected route, redirect to /auth\n    if ((!accessToken && !hasAuthCookie) && protectedRoutes.some(route => path.startsWith(route))) {\n      const redirectUrl = new URL('/auth', request.url)\n      redirectUrl.searchParams.set('mode', 'login')\n      redirectUrl.searchParams.set('from', path)\n      return NextResponse.redirect(redirectUrl)\n    }\n    \n    // Let client-side handle auth page redirects to avoid loops\n    // The auth page will redirect on the client side after hydration\n    // if ((accessToken || hasAuthCookie) && path === '/auth') {\n    //   return NextResponse.redirect(new URL('/dashboard', request.url))\n    // }\n  } catch (error) {\n  }\n\n  return response\n}\n\n// Only run middleware on routes that need authentication checks\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|images|api|.*\\\\..*).*)',\n  ],\n} "],"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","ignoreList":[]}