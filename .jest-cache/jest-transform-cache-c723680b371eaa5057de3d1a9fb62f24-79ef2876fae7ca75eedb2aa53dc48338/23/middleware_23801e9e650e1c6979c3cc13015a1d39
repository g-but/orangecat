2f0d01c5641231b030bb13945a98a0cc
"use strict";

/* istanbul ignore next */
function cov_28amnoawkg() {
  var path = "/home/g/dev/orangecat/src/middleware.ts";
  var hash = "853b16fc4dee3b8764563c72af13d9212e2ff0db";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/middleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 148
        }
      },
      "5": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "6": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "7": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 65
        }
      },
      "8": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "9": {
        start: {
          line: 24,
          column: 31
        },
        end: {
          line: 24,
          column: 112
        }
      },
      "10": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "11": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "12": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 91
        }
      },
      "13": {
        start: {
          line: 27,
          column: 49
        },
        end: {
          line: 27,
          column: 89
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 73
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "17": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "18": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 64
        }
      },
      "19": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 90
        }
      },
      "20": {
        start: {
          line: 38,
          column: 49
        },
        end: {
          line: 38,
          column: 88
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 72
        }
      },
      "23": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 58
        }
      },
      "24": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 141
        }
      },
      "25": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 108
        }
      },
      "26": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 124
        }
      },
      "27": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "28": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 50,
          column: 69
        }
      },
      "29": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "30": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "31": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "32": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 37
        }
      },
      "33": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 56
        }
      },
      "34": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "35": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 63
        }
      },
      "36": {
        start: {
          line: 66,
          column: 35
        },
        end: {
          line: 66,
          column: 130
        }
      },
      "37": {
        start: {
          line: 66,
          column: 61
        },
        end: {
          line: 66,
          column: 129
        }
      },
      "38": {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 71,
          column: 110
        }
      },
      "39": {
        start: {
          line: 73,
          column: 30
        },
        end: {
          line: 77,
          column: 41
        }
      },
      "40": {
        start: {
          line: 74,
          column: 38
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "41": {
        start: {
          line: 79,
          column: 21
        },
        end: {
          line: 79,
          column: 45
        }
      },
      "42": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "43": {
        start: {
          line: 81,
          column: 78
        },
        end: {
          line: 81,
          column: 100
        }
      },
      "44": {
        start: {
          line: 82,
          column: 32
        },
        end: {
          line: 82,
          column: 61
        }
      },
      "45": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 58
        }
      },
      "46": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 55
        }
      },
      "47": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 63
        }
      },
      "48": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 20
        }
      },
      "49": {
        start: {
          line: 98,
          column: 0
        },
        end: {
          line: 102,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "middleware",
        decl: {
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 25
          }
        },
        loc: {
          start: {
            line: 10,
            column: 35
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 33
          },
          end: {
            line: 27,
            column: 34
          }
        },
        loc: {
          start: {
            line: 27,
            column: 49
          },
          end: {
            line: 27,
            column: 89
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 38,
            column: 34
          }
        },
        loc: {
          start: {
            line: 38,
            column: 49
          },
          end: {
            line: 38,
            column: 88
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 33
          },
          end: {
            line: 52,
            column: 34
          }
        },
        loc: {
          start: {
            line: 52,
            column: 49
          },
          end: {
            line: 54,
            column: 9
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 51
          },
          end: {
            line: 66,
            column: 52
          }
        },
        loc: {
          start: {
            line: 66,
            column: 61
          },
          end: {
            line: 66,
            column: 129
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 29
          }
        },
        loc: {
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 77,
            column: 40
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 81,
            column: 69
          },
          end: {
            line: 81,
            column: 70
          }
        },
        loc: {
          start: {
            line: 81,
            column: 78
          },
          end: {
            line: 81,
            column: 100
          }
        },
        line: 81
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 24,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 24,
            column: 74
          }
        }, {
          start: {
            line: 24,
            column: 78
          },
          end: {
            line: 24,
            column: 112
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 36
          }
        }, {
          start: {
            line: 25,
            column: 40
          },
          end: {
            line: 25,
            column: 60
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 49
          }
        }, {
          start: {
            line: 29,
            column: 54
          },
          end: {
            line: 29,
            column: 72
          }
        }, {
          start: {
            line: 29,
            column: 76
          },
          end: {
            line: 29,
            column: 119
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 28
          }
        }, {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 36,
            column: 66
          }
        }, {
          start: {
            line: 36,
            column: 70
          },
          end: {
            line: 36,
            column: 98
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "8": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 48
          }
        }, {
          start: {
            line: 39,
            column: 52
          },
          end: {
            line: 39,
            column: 102
          }
        }],
        line: 39
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 44,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 44,
            column: 63
          }
        }, {
          start: {
            line: 44,
            column: 67
          },
          end: {
            line: 44,
            column: 104
          }
        }, {
          start: {
            line: 44,
            column: 108
          },
          end: {
            line: 44,
            column: 141
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 45,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 45,
            column: 70
          }
        }, {
          start: {
            line: 45,
            column: 74
          },
          end: {
            line: 45,
            column: 108
          }
        }],
        line: 45
      },
      "11": {
        loc: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 55
          }
        }, {
          start: {
            line: 47,
            column: 59
          },
          end: {
            line: 47,
            column: 93
          }
        }, {
          start: {
            line: 47,
            column: 97
          },
          end: {
            line: 47,
            column: 124
          }
        }],
        line: 47
      },
      "12": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "13": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 9
          },
          end: {
            line: 48,
            column: 23
          }
        }, {
          start: {
            line: 48,
            column: 27
          },
          end: {
            line: 48,
            column: 41
          }
        }, {
          start: {
            line: 48,
            column: 45
          },
          end: {
            line: 48,
            column: 58
          }
        }, {
          start: {
            line: 48,
            column: 63
          },
          end: {
            line: 48,
            column: 102
          }
        }],
        line: 48
      },
      "14": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "15": {
        loc: {
          start: {
            line: 66,
            column: 61
          },
          end: {
            line: 66,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 61
          },
          end: {
            line: 66,
            column: 90
          }
        }, {
          start: {
            line: 66,
            column: 94
          },
          end: {
            line: 66,
            column: 129
          }
        }],
        line: 66
      },
      "16": {
        loc: {
          start: {
            line: 68,
            column: 28
          },
          end: {
            line: 71,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 120
          }
        }, {
          start: {
            line: 69,
            column: 13
          },
          end: {
            line: 69,
            column: 108
          }
        }, {
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 70,
            column: 108
          }
        }, {
          start: {
            line: 71,
            column: 13
          },
          end: {
            line: 71,
            column: 109
          }
        }],
        line: 68
      },
      "17": {
        loc: {
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 103
          },
          end: {
            line: 68,
            column: 109
          }
        }, {
          start: {
            line: 68,
            column: 112
          },
          end: {
            line: 68,
            column: 120
          }
        }],
        line: 68
      },
      "18": {
        loc: {
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 83
          }
        }, {
          start: {
            line: 68,
            column: 87
          },
          end: {
            line: 68,
            column: 100
          }
        }],
        line: 68
      },
      "19": {
        loc: {
          start: {
            line: 69,
            column: 13
          },
          end: {
            line: 69,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 91
          },
          end: {
            line: 69,
            column: 97
          }
        }, {
          start: {
            line: 69,
            column: 100
          },
          end: {
            line: 69,
            column: 108
          }
        }],
        line: 69
      },
      "20": {
        loc: {
          start: {
            line: 69,
            column: 13
          },
          end: {
            line: 69,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 13
          },
          end: {
            line: 69,
            column: 71
          }
        }, {
          start: {
            line: 69,
            column: 75
          },
          end: {
            line: 69,
            column: 88
          }
        }],
        line: 69
      },
      "21": {
        loc: {
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 70,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 91
          },
          end: {
            line: 70,
            column: 97
          }
        }, {
          start: {
            line: 70,
            column: 100
          },
          end: {
            line: 70,
            column: 108
          }
        }],
        line: 70
      },
      "22": {
        loc: {
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 70,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 70,
            column: 71
          }
        }, {
          start: {
            line: 70,
            column: 75
          },
          end: {
            line: 70,
            column: 88
          }
        }],
        line: 70
      },
      "23": {
        loc: {
          start: {
            line: 71,
            column: 13
          },
          end: {
            line: 71,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 76
          },
          end: {
            line: 71,
            column: 82
          }
        }, {
          start: {
            line: 71,
            column: 85
          },
          end: {
            line: 71,
            column: 109
          }
        }],
        line: 71
      },
      "24": {
        loc: {
          start: {
            line: 71,
            column: 13
          },
          end: {
            line: 71,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 13
          },
          end: {
            line: 71,
            column: 40
          }
        }, {
          start: {
            line: 71,
            column: 44
          },
          end: {
            line: 71,
            column: 73
          }
        }],
        line: 71
      },
      "25": {
        loc: {
          start: {
            line: 73,
            column: 30
          },
          end: {
            line: 77,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 30
          },
          end: {
            line: 73,
            column: 50
          }
        }, {
          start: {
            line: 73,
            column: 54
          },
          end: {
            line: 73,
            column: 67
          }
        }, {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 77,
            column: 41
          }
        }],
        line: 73
      },
      "26": {
        loc: {
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 77,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 74,
            column: 70
          }
        }, {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 44
          }
        }, {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 76,
            column: 28
          }
        }, {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 77,
            column: 40
          }
        }],
        line: 74
      },
      "27": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "28": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 13
          },
          end: {
            line: 81,
            column: 25
          }
        }, {
          start: {
            line: 81,
            column: 29
          },
          end: {
            line: 81,
            column: 43
          }
        }, {
          start: {
            line: 81,
            column: 48
          },
          end: {
            line: 81,
            column: 101
          }
        }],
        line: 81
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0],
      "26": [0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/middleware.ts",
      mappings: ";;;AASA,gCAwGC;AAjHD,wCAA0C;AAG1C,gDAAgD;AAChD,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;AAEpJ,gEAAgE;AAChE,MAAM,eAAe,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,WAAW,CAAC,CAAA;AAExD,KAAK,UAAU,UAAU,CAAC,OAAoB;;IACnD,IAAI,QAAQ,GAAG,qBAAY,CAAC,IAAI,CAAC;QAC/B,OAAO,EAAE;YACP,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB;KACF,CAAC,CAAA;IAEF,kDAAkD;IAClD,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAE5D,kGAAkG;IAClG,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAEhC,mFAAmF;IACnF,0FAA0F;IAC1F,+EAA+E;IAC/E,MAAM,kBAAkB,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,UAAU,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;IAC5G,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,GAAG,EAAE,CAAC;QACzD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;QAC1D,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAA;QAClF,2CAA2C;QAC3C,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,EAAE,CAAC;YACjH,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAA;QAC9D,CAAC;QACD,OAAO,qBAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAA;IAC3C,CAAC;IAED,kGAAkG;IAClG,8DAA8D;IAC9D,IAAI,GAAG,CAAC,QAAQ,KAAK,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/F,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;QACxD,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAA;QACjF,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE,CAAC;YAC/F,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAA;QAC7D,CAAC;QACD,OAAO,qBAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;IAC1C,CAAC;IACD,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAA;IACzI,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,UAAU,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;IACxG,gFAAgF;IAChF,MAAM,aAAa,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;IAExH,IAAI,CAAC,cAAc,IAAI,cAAc,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,sBAAsB,EAAE,CAAC;QACnG,6EAA6E;QAC7E,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,sBAAsB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;QAE7D,4BAA4B;QAC5B,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACtC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,sEAAsE;QACtE,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAA;QAC1B,CAAC;QAED,OAAO,qBAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;IACxC,CAAC;IAED,IAAI,CAAC;QACH,gEAAgE;QAChE,kCAAkC;QAClC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;QAEvD,4DAA4D;QAC5D,MAAM,kBAAkB,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAClD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CACrE,CAAA;QAED,gCAAgC;QAChC,MAAM,WAAW,GAAG,CAAA,MAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,0CAAE,KAAK;aAC9C,MAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,0CAAE,KAAK,CAAA;aACjD,MAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,0CAAE,KAAK,CAAA;aACjD,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,KAAK,CAAA,CAAA;QAE5C,yDAAyD;QACzD,MAAM,aAAa,GAAG,CAAC,CAAC,kBAAkB,IAAI,CAAC,CAAC,WAAW;YACtC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CACvB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC5B,MAAM,CAAC,KAAK;gBACZ,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CACzB,CAAA;QAEtB,gCAAgC;QAChC,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAA;QAErC,yFAAyF;QACzF,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,aAAa,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAC9F,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;YACjD,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;YAC7C,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;YAC1C,OAAO,qBAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAA;QAC3C,CAAC;QAED,4DAA4D;QAC5D,iEAAiE;QACjE,4DAA4D;QAC5D,qEAAqE;QACrE,IAAI;IACN,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;IACjB,CAAC;IAED,OAAO,QAAQ,CAAA;AACjB,CAAC;AAED,gEAAgE;AACnD,QAAA,MAAM,GAAG;IACpB,OAAO,EAAE;QACP,kEAAkE;KACnE;CACF,CAAA",
      names: [],
      sources: ["/home/g/dev/orangecat/src/middleware.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n// List of public routes that don't require auth\nconst publicRoutes = ['/', '/auth', '/auth/reset-password', '/auth/forgot-password', '/login', '/register', '/privacy', '/terms', '/about', '/blog']\n\n// Routes that should redirect to /auth if user is not logged in\nconst protectedRoutes = ['/dashboard', '/profile', '/settings']\n\nexport async function middleware(request: NextRequest) {\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  })\n\n  // Add pathname to headers so layout can access it\n  response.headers.set('x-pathname', request.nextUrl.pathname)\n\n  // Handle password reset flow - redirect from root with reset tokens or error params to reset page\n  const url = new URL(request.url)\n  \n  // Handle Supabase code exchange links (?code=...) by redirecting to /auth/callback\n  // IMPORTANT: Do NOT intercept password recovery links here. Recovery flows should land on\n  // /auth/reset-password to preserve hash tokens for setSession() on the client.\n  const isExplicitRecovery = url.searchParams.get('type') === 'recovery' || url.hash.includes('type=recovery')\n  if (url.searchParams.has('code') && url.pathname === '/') {\n    const callbackUrl = new URL('/auth/callback', request.url)\n    url.searchParams.forEach((value, key) => callbackUrl.searchParams.set(key, value))\n    // Ensure recovery flow lands on reset page\n    if (!callbackUrl.searchParams.has('next') && (isExplicitRecovery || url.searchParams.get('type') === 'recovery')) {\n      callbackUrl.searchParams.set('next', '/auth/reset-password')\n    }\n    return NextResponse.redirect(callbackUrl)\n  }\n\n  // Shim: If Supabase still sends verify links to the root with token_hash&type (OTP/confirm flow),\n  // forward to the confirm route and default next for recovery.\n  if (url.pathname === '/' && url.searchParams.has('token_hash') && url.searchParams.has('type')) {\n    const confirmUrl = new URL('/auth/confirm', request.url)\n    url.searchParams.forEach((value, key) => confirmUrl.searchParams.set(key, value))\n    if (!confirmUrl.searchParams.has('next') && confirmUrl.searchParams.get('type') === 'recovery') {\n      confirmUrl.searchParams.set('next', '/auth/reset-password')\n    }\n    return NextResponse.redirect(confirmUrl)\n  }\n  const hasResetTokens = url.searchParams.has('access_token') || url.searchParams.has('refresh_token') || url.hash.includes('access_token')\n  const isRecoveryType = url.searchParams.get('type') === 'recovery' || url.hash.includes('type=recovery')\n  // Supabase may redirect with only error params when the link is expired/invalid\n  const hasAuthErrors = url.searchParams.has('error') || url.searchParams.has('error_code') || url.hash.includes('error=')\n  \n  if ((hasResetTokens && isRecoveryType || hasAuthErrors) && url.pathname !== '/auth/reset-password') {\n    // Redirect to reset password page while preserving all query params and hash\n    const resetUrl = new URL('/auth/reset-password', request.url)\n    \n    // Copy all query parameters\n    url.searchParams.forEach((value, key) => {\n      resetUrl.searchParams.set(key, value)\n    })\n    \n    // Also preserve hash if present (Supabase v2 may use hash for tokens)\n    if (url.hash) {\n      resetUrl.hash = url.hash\n    }\n    \n    return NextResponse.redirect(resetUrl)\n  }\n\n  try {\n    // Check for authentication by looking for Supabase auth cookies\n    // This is Edge Runtime compatible\n    const allCookies = Array.from(request.cookies.getAll())\n    \n    // Check for the specific Supabase auth token cookie pattern\n    const supabaseAuthCookie = allCookies.find(cookie => \n      cookie.name.startsWith('sb-') && cookie.name.endsWith('-auth-token')\n    )\n    \n    // Also check for legacy formats\n    const accessToken = request.cookies.get('sb-access-token')?.value ||\n                       request.cookies.get('supabase-auth-token')?.value ||\n                       request.cookies.get('supabase.auth.token')?.value ||\n                       supabaseAuthCookie?.value\n\n    // More comprehensive check for any Supabase auth cookies\n    const hasAuthCookie = !!supabaseAuthCookie || !!accessToken || \n                         allCookies.some(cookie => \n                           cookie.name.includes('supabase') && \n                           cookie.name.includes('auth') && \n                           cookie.value && \n                           cookie.value.length > 10\n                         )\n    \n    // Extract the path from the URL\n    const path = request.nextUrl.pathname\n    \n    // If user is not authenticated and trying to access a protected route, redirect to /auth\n    if ((!accessToken && !hasAuthCookie) && protectedRoutes.some(route => path.startsWith(route))) {\n      const redirectUrl = new URL('/auth', request.url)\n      redirectUrl.searchParams.set('mode', 'login')\n      redirectUrl.searchParams.set('from', path)\n      return NextResponse.redirect(redirectUrl)\n    }\n    \n    // Let client-side handle auth page redirects to avoid loops\n    // The auth page will redirect on the client side after hydration\n    // if ((accessToken || hasAuthCookie) && path === '/auth') {\n    //   return NextResponse.redirect(new URL('/dashboard', request.url))\n    // }\n  } catch (error) {\n  }\n\n  return response\n}\n\n// Only run middleware on routes that need authentication checks\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|images|api|.*\\\\..*).*)',\n  ],\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "853b16fc4dee3b8764563c72af13d9212e2ff0db"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28amnoawkg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28amnoawkg();
cov_28amnoawkg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28amnoawkg().s[1]++;
exports.config = void 0;
/* istanbul ignore next */
cov_28amnoawkg().s[2]++;
exports.middleware = middleware;
const server_1 =
/* istanbul ignore next */
(cov_28amnoawkg().s[3]++, require("next/server"));
// List of public routes that don't require auth
const publicRoutes =
/* istanbul ignore next */
(cov_28amnoawkg().s[4]++, ['/', '/auth', '/auth/reset-password', '/auth/forgot-password', '/login', '/register', '/privacy', '/terms', '/about', '/blog']);
// Routes that should redirect to /auth if user is not logged in
const protectedRoutes =
/* istanbul ignore next */
(cov_28amnoawkg().s[5]++, ['/dashboard', '/profile', '/settings']);
async function middleware(request) {
  /* istanbul ignore next */
  cov_28amnoawkg().f[0]++;
  var _a, _b, _c;
  let response =
  /* istanbul ignore next */
  (cov_28amnoawkg().s[6]++, server_1.NextResponse.next({
    request: {
      headers: request.headers
    }
  }));
  // Add pathname to headers so layout can access it
  /* istanbul ignore next */
  cov_28amnoawkg().s[7]++;
  response.headers.set('x-pathname', request.nextUrl.pathname);
  // Handle password reset flow - redirect from root with reset tokens or error params to reset page
  const url =
  /* istanbul ignore next */
  (cov_28amnoawkg().s[8]++, new URL(request.url));
  // Handle Supabase code exchange links (?code=...) by redirecting to /auth/callback
  // IMPORTANT: Do NOT intercept password recovery links here. Recovery flows should land on
  // /auth/reset-password to preserve hash tokens for setSession() on the client.
  const isExplicitRecovery =
  /* istanbul ignore next */
  (cov_28amnoawkg().s[9]++,
  /* istanbul ignore next */
  (cov_28amnoawkg().b[0][0]++, url.searchParams.get('type') === 'recovery') ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[0][1]++, url.hash.includes('type=recovery')));
  /* istanbul ignore next */
  cov_28amnoawkg().s[10]++;
  if (
  /* istanbul ignore next */
  (cov_28amnoawkg().b[2][0]++, url.searchParams.has('code')) &&
  /* istanbul ignore next */
  (cov_28amnoawkg().b[2][1]++, url.pathname === '/')) {
    /* istanbul ignore next */
    cov_28amnoawkg().b[1][0]++;
    const callbackUrl =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[11]++, new URL('/auth/callback', request.url));
    /* istanbul ignore next */
    cov_28amnoawkg().s[12]++;
    url.searchParams.forEach((value, key) => {
      /* istanbul ignore next */
      cov_28amnoawkg().f[1]++;
      cov_28amnoawkg().s[13]++;
      return callbackUrl.searchParams.set(key, value);
    });
    // Ensure recovery flow lands on reset page
    /* istanbul ignore next */
    cov_28amnoawkg().s[14]++;
    if (
    /* istanbul ignore next */
    (cov_28amnoawkg().b[4][0]++, !callbackUrl.searchParams.has('next')) && (
    /* istanbul ignore next */
    (cov_28amnoawkg().b[4][1]++, isExplicitRecovery) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[4][2]++, url.searchParams.get('type') === 'recovery'))) {
      /* istanbul ignore next */
      cov_28amnoawkg().b[3][0]++;
      cov_28amnoawkg().s[15]++;
      callbackUrl.searchParams.set('next', '/auth/reset-password');
    } else
    /* istanbul ignore next */
    {
      cov_28amnoawkg().b[3][1]++;
    }
    cov_28amnoawkg().s[16]++;
    return server_1.NextResponse.redirect(callbackUrl);
  } else
  /* istanbul ignore next */
  {
    cov_28amnoawkg().b[1][1]++;
  }
  // Shim: If Supabase still sends verify links to the root with token_hash&type (OTP/confirm flow),
  // forward to the confirm route and default next for recovery.
  cov_28amnoawkg().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_28amnoawkg().b[6][0]++, url.pathname === '/') &&
  /* istanbul ignore next */
  (cov_28amnoawkg().b[6][1]++, url.searchParams.has('token_hash')) &&
  /* istanbul ignore next */
  (cov_28amnoawkg().b[6][2]++, url.searchParams.has('type'))) {
    /* istanbul ignore next */
    cov_28amnoawkg().b[5][0]++;
    const confirmUrl =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[18]++, new URL('/auth/confirm', request.url));
    /* istanbul ignore next */
    cov_28amnoawkg().s[19]++;
    url.searchParams.forEach((value, key) => {
      /* istanbul ignore next */
      cov_28amnoawkg().f[2]++;
      cov_28amnoawkg().s[20]++;
      return confirmUrl.searchParams.set(key, value);
    });
    /* istanbul ignore next */
    cov_28amnoawkg().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_28amnoawkg().b[8][0]++, !confirmUrl.searchParams.has('next')) &&
    /* istanbul ignore next */
    (cov_28amnoawkg().b[8][1]++, confirmUrl.searchParams.get('type') === 'recovery')) {
      /* istanbul ignore next */
      cov_28amnoawkg().b[7][0]++;
      cov_28amnoawkg().s[22]++;
      confirmUrl.searchParams.set('next', '/auth/reset-password');
    } else
    /* istanbul ignore next */
    {
      cov_28amnoawkg().b[7][1]++;
    }
    cov_28amnoawkg().s[23]++;
    return server_1.NextResponse.redirect(confirmUrl);
  } else
  /* istanbul ignore next */
  {
    cov_28amnoawkg().b[5][1]++;
  }
  const hasResetTokens =
  /* istanbul ignore next */
  (cov_28amnoawkg().s[24]++,
  /* istanbul ignore next */
  (cov_28amnoawkg().b[9][0]++, url.searchParams.has('access_token')) ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[9][1]++, url.searchParams.has('refresh_token')) ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[9][2]++, url.hash.includes('access_token')));
  const isRecoveryType =
  /* istanbul ignore next */
  (cov_28amnoawkg().s[25]++,
  /* istanbul ignore next */
  (cov_28amnoawkg().b[10][0]++, url.searchParams.get('type') === 'recovery') ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[10][1]++, url.hash.includes('type=recovery')));
  // Supabase may redirect with only error params when the link is expired/invalid
  const hasAuthErrors =
  /* istanbul ignore next */
  (cov_28amnoawkg().s[26]++,
  /* istanbul ignore next */
  (cov_28amnoawkg().b[11][0]++, url.searchParams.has('error')) ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[11][1]++, url.searchParams.has('error_code')) ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[11][2]++, url.hash.includes('error=')));
  /* istanbul ignore next */
  cov_28amnoawkg().s[27]++;
  if ((
  /* istanbul ignore next */
  (cov_28amnoawkg().b[13][0]++, hasResetTokens) &&
  /* istanbul ignore next */
  (cov_28amnoawkg().b[13][1]++, isRecoveryType) ||
  /* istanbul ignore next */
  (cov_28amnoawkg().b[13][2]++, hasAuthErrors)) &&
  /* istanbul ignore next */
  (cov_28amnoawkg().b[13][3]++, url.pathname !== '/auth/reset-password')) {
    /* istanbul ignore next */
    cov_28amnoawkg().b[12][0]++;
    // Redirect to reset password page while preserving all query params and hash
    const resetUrl =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[28]++, new URL('/auth/reset-password', request.url));
    // Copy all query parameters
    /* istanbul ignore next */
    cov_28amnoawkg().s[29]++;
    url.searchParams.forEach((value, key) => {
      /* istanbul ignore next */
      cov_28amnoawkg().f[3]++;
      cov_28amnoawkg().s[30]++;
      resetUrl.searchParams.set(key, value);
    });
    // Also preserve hash if present (Supabase v2 may use hash for tokens)
    /* istanbul ignore next */
    cov_28amnoawkg().s[31]++;
    if (url.hash) {
      /* istanbul ignore next */
      cov_28amnoawkg().b[14][0]++;
      cov_28amnoawkg().s[32]++;
      resetUrl.hash = url.hash;
    } else
    /* istanbul ignore next */
    {
      cov_28amnoawkg().b[14][1]++;
    }
    cov_28amnoawkg().s[33]++;
    return server_1.NextResponse.redirect(resetUrl);
  } else
  /* istanbul ignore next */
  {
    cov_28amnoawkg().b[12][1]++;
  }
  cov_28amnoawkg().s[34]++;
  try {
    // Check for authentication by looking for Supabase auth cookies
    // This is Edge Runtime compatible
    const allCookies =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[35]++, Array.from(request.cookies.getAll()));
    // Check for the specific Supabase auth token cookie pattern
    const supabaseAuthCookie =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[36]++, allCookies.find(cookie => {
      /* istanbul ignore next */
      cov_28amnoawkg().f[4]++;
      cov_28amnoawkg().s[37]++;
      return /* istanbul ignore next */(cov_28amnoawkg().b[15][0]++, cookie.name.startsWith('sb-')) &&
      /* istanbul ignore next */
      (cov_28amnoawkg().b[15][1]++, cookie.name.endsWith('-auth-token'));
    }));
    // Also check for legacy formats
    const accessToken =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[38]++,
    /* istanbul ignore next */
    (cov_28amnoawkg().b[16][0]++,
    /* istanbul ignore next */
    (cov_28amnoawkg().b[18][0]++, (_a = request.cookies.get('sb-access-token')) === null) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[18][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_28amnoawkg().b[17][0]++, void 0) :
    /* istanbul ignore next */
    (cov_28amnoawkg().b[17][1]++, _a.value)) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[16][1]++,
    /* istanbul ignore next */
    (cov_28amnoawkg().b[20][0]++, (_b = request.cookies.get('supabase-auth-token')) === null) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[20][1]++, _b === void 0) ?
    /* istanbul ignore next */
    (cov_28amnoawkg().b[19][0]++, void 0) :
    /* istanbul ignore next */
    (cov_28amnoawkg().b[19][1]++, _b.value)) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[16][2]++,
    /* istanbul ignore next */
    (cov_28amnoawkg().b[22][0]++, (_c = request.cookies.get('supabase.auth.token')) === null) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[22][1]++, _c === void 0) ?
    /* istanbul ignore next */
    (cov_28amnoawkg().b[21][0]++, void 0) :
    /* istanbul ignore next */
    (cov_28amnoawkg().b[21][1]++, _c.value)) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[16][3]++,
    /* istanbul ignore next */
    (cov_28amnoawkg().b[24][0]++, supabaseAuthCookie === null) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[24][1]++, supabaseAuthCookie === void 0) ?
    /* istanbul ignore next */
    (cov_28amnoawkg().b[23][0]++, void 0) :
    /* istanbul ignore next */
    (cov_28amnoawkg().b[23][1]++, supabaseAuthCookie.value)));
    // More comprehensive check for any Supabase auth cookies
    const hasAuthCookie =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[39]++,
    /* istanbul ignore next */
    (cov_28amnoawkg().b[25][0]++, !!supabaseAuthCookie) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[25][1]++, !!accessToken) ||
    /* istanbul ignore next */
    (cov_28amnoawkg().b[25][2]++, allCookies.some(cookie => {
      /* istanbul ignore next */
      cov_28amnoawkg().f[5]++;
      cov_28amnoawkg().s[40]++;
      return /* istanbul ignore next */(cov_28amnoawkg().b[26][0]++, cookie.name.includes('supabase')) &&
      /* istanbul ignore next */
      (cov_28amnoawkg().b[26][1]++, cookie.name.includes('auth')) &&
      /* istanbul ignore next */
      (cov_28amnoawkg().b[26][2]++, cookie.value) &&
      /* istanbul ignore next */
      (cov_28amnoawkg().b[26][3]++, cookie.value.length > 10);
    })));
    // Extract the path from the URL
    const path =
    /* istanbul ignore next */
    (cov_28amnoawkg().s[41]++, request.nextUrl.pathname);
    // If user is not authenticated and trying to access a protected route, redirect to /auth
    /* istanbul ignore next */
    cov_28amnoawkg().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_28amnoawkg().b[28][0]++, !accessToken) &&
    /* istanbul ignore next */
    (cov_28amnoawkg().b[28][1]++, !hasAuthCookie) &&
    /* istanbul ignore next */
    (cov_28amnoawkg().b[28][2]++, protectedRoutes.some(route => {
      /* istanbul ignore next */
      cov_28amnoawkg().f[6]++;
      cov_28amnoawkg().s[43]++;
      return path.startsWith(route);
    }))) {
      /* istanbul ignore next */
      cov_28amnoawkg().b[27][0]++;
      const redirectUrl =
      /* istanbul ignore next */
      (cov_28amnoawkg().s[44]++, new URL('/auth', request.url));
      /* istanbul ignore next */
      cov_28amnoawkg().s[45]++;
      redirectUrl.searchParams.set('mode', 'login');
      /* istanbul ignore next */
      cov_28amnoawkg().s[46]++;
      redirectUrl.searchParams.set('from', path);
      /* istanbul ignore next */
      cov_28amnoawkg().s[47]++;
      return server_1.NextResponse.redirect(redirectUrl);
    } else
    /* istanbul ignore next */
    {
      cov_28amnoawkg().b[27][1]++;
    }
    // Let client-side handle auth page redirects to avoid loops
    // The auth page will redirect on the client side after hydration
    // if ((accessToken || hasAuthCookie) && path === '/auth') {
    //   return NextResponse.redirect(new URL('/dashboard', request.url))
    // }
  } catch (error) {}
  /* istanbul ignore next */
  cov_28amnoawkg().s[48]++;
  return response;
}
// Only run middleware on routes that need authentication checks
/* istanbul ignore next */
cov_28amnoawkg().s[49]++;
exports.config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico|images|api|.*\\..*).*)']
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,