141554d3ab9c20da67279cd839711cd8
"use strict";
/**
 * COMPREHENSIVE SECURITY HARDENING SYSTEM
 *
 * Option C - Security Hardening Implementation
 * Addresses all critical security vulnerabilities identified in the platform
 *
 * Created: 2025-01-14
 * Last Modified: 2025-06-12
 * Last Modified Summary: Complete security hardening for production deployment - Option C completed
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityHardening = exports.ContentSecurityPolicy = exports.SecurityMonitor = exports.SecureErrorHandler = exports.AuthenticationSecurity = exports.RateLimiter = exports.SecuritySchemas = exports.XSSPrevention = void 0;
const server_1 = require("next/server");
const logger_1 = require("@/utils/logger");
const zod_1 = require("zod");
// ==================== INPUT SANITIZATION SYSTEM ====================
/**
 * XSS Prevention - HTML Entity Encoding and Content Sanitization
 *
 * Provides comprehensive protection against Cross-Site Scripting (XSS) attacks
 * by sanitizing user input and encoding dangerous characters.
 *
 * @example
 * ```typescript
 * const safeInput = XSSPrevention.sanitizeHTML('<script>alert("xss")</script>');
 * // Returns: '&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;'
 * ```
 */
class XSSPrevention {
    /**
     * Sanitize HTML content by encoding dangerous characters
     * @param input - Raw HTML content to sanitize
     * @returns Sanitized string safe for HTML display
     */
    static sanitizeHTML(input) {
        if (!input || typeof input !== 'string')
            return '';
        return input.replace(/[&<>"'`=\/]/g, (match) => {
            return this.HTML_ENTITIES[match] || match;
        });
    }
    /**
     * Sanitize input for use in HTML attributes with aggressive filtering
     * @param input - Raw input to sanitize for HTML attributes
     * @returns Sanitized string safe for HTML attributes
     */
    static sanitizeForAttribute(input) {
        if (!input || typeof input !== 'string')
            return '';
        // More aggressive sanitization for HTML attributes
        return input
            .replace(/[&<>"'`=\/\(\)\[\]{}]/g, (match) => {
            return this.HTML_ENTITIES[match] || '';
        })
            .replace(/javascript:/gi, '')
            .replace(/vbscript:/gi, '')
            .replace(/data:/gi, '')
            .replace(/on\w+=/gi, '');
    }
    /**
     * Sanitize plain text content with length limits
     * @param input - Raw text to sanitize
     * @returns Sanitized text safe for display (max 1000 chars)
     */
    static sanitizeText(input) {
        if (!input || typeof input !== 'string')
            return '';
        return input
            .replace(/[<>]/g, (match) => this.HTML_ENTITIES[match])
            .trim()
            .substring(0, 1000); // Limit length
    }
}
exports.XSSPrevention = XSSPrevention;
XSSPrevention.HTML_ENTITIES = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
};
/**
 * Input Validation Schemas with Security Focus
 */
exports.SecuritySchemas = {
    // Email with strict validation
    email: zod_1.z.string()
        .email('Invalid email format')
        .min(5, 'Email too short')
        .max(254, 'Email too long')
        .regex(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/, 'Invalid email format')
        .transform(email => email.toLowerCase().trim()),
    // Bitcoin address with enhanced validation
    bitcoinAddress: zod_1.z.string()
        .min(26, 'Bitcoin address too short')
        .max(62, 'Bitcoin address too long')
        .regex(/^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/, 'Invalid Bitcoin address format')
        .refine(address => {
        // Additional validation for known attack patterns
        const suspiciousPatterns = [
            /script/gi,
            /javascript/gi,
            /vbscript/gi,
            /<|>/gi,
            /\x00/gi // Null bytes
        ];
        return !suspiciousPatterns.some(pattern => pattern.test(address));
    }, 'Bitcoin address contains invalid characters'),
    // Username with anti-impersonation
    username: zod_1.z.string()
        .min(3, 'Username too short')
        .max(30, 'Username too long')
        .regex(/^[a-zA-Z0-9_-]+$/, 'Username can only contain letters, numbers, underscores, and hyphens')
        .refine(username => {
        // Celebrity/brand impersonation prevention
        const reservedNames = [
            'admin', 'administrator', 'root', 'system', 'support', 'help',
            'bitcoin', 'satoshi', 'nakamoto', 'elon', 'musk', 'tesla',
            'apple', 'google', 'microsoft', 'facebook', 'twitter', 'meta',
            'orangecat', 'official', 'verified', 'staff', 'team'
        ];
        return !reservedNames.includes(username.toLowerCase());
    }, 'Username is reserved or may cause impersonation')
        .transform(username => username.toLowerCase().trim()),
    // Bio/description with content filtering
    bio: zod_1.z.string()
        .max(500, 'Bio too long')
        .refine(bio => {
        // Content filtering for spam/malicious content
        const suspiciousPatterns = [
            /(?:https?:\/\/)?(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/gi, // URLs
            /\b(?:buy|sell|invest|profit|money|crypto|trading|forex)\b/gi, // Financial spam
            /<script|javascript:|vbscript:|data:/gi, // Script injection
            /\b(?:telegram|whatsapp|discord)\b.*@/gi // Contact spam
        ];
        const suspiciousCount = suspiciousPatterns.reduce((count, pattern) => {
            return count + (pattern.test(bio) ? 1 : 0);
        }, 0);
        return suspiciousCount < 2; // Allow some flexibility but flag multiple patterns
    }, 'Bio contains suspicious content')
        .transform(bio => XSSPrevention.sanitizeText(bio))
};
/**
 * Rate Limiting System for API Protection
 *
 * Implements sliding window rate limiting to prevent abuse and DoS attacks.
 * Supports different rate limits for different operation types.
 *
 * @example
 * ```typescript
 * const result = await RateLimiter.checkLimit('user@example.com', 'auth');
 * if (!result.allowed) {
 *   throw new Error(`Rate limit exceeded. Try again in ${result.resetTime - Date.now()}ms`);
 * }
 * ```
 */
class RateLimiter {
    /**
     * Check if request is within rate limits
     * @param identifier - Unique identifier (IP, user ID, email)
     * @param limitType - Type of rate limit to apply
     * @returns Rate limit status with remaining requests and reset time
     */
    static async checkLimit(identifier, limitType) {
        const config = this.LIMITS[limitType];
        const now = Date.now();
        const key = `${limitType}:${identifier}`;
        // Clean up expired entries
        this.cleanup();
        const existing = this.requests.get(key);
        if (!existing || now > existing.resetTime) {
            // New window
            this.requests.set(key, {
                count: 1,
                resetTime: now + config.windowMs
            });
            return {
                allowed: true,
                remaining: config.maxRequests - 1,
                resetTime: now + config.windowMs
            };
        }
        if (existing.count >= config.maxRequests) {
            return {
                allowed: false,
                remaining: 0,
                resetTime: existing.resetTime
            };
        }
        existing.count++;
        return {
            allowed: true,
            remaining: config.maxRequests - existing.count,
            resetTime: existing.resetTime
        };
    }
    static cleanup() {
        const now = Date.now();
        for (const [key, value] of this.requests.entries()) {
            if (now > value.resetTime) {
                this.requests.delete(key);
            }
        }
    }
    static getStats() {
        this.cleanup();
        return {
            totalKeys: this.requests.size,
            activeWindows: this.requests.size
        };
    }
}
exports.RateLimiter = RateLimiter;
RateLimiter.requests = new Map();
RateLimiter.LIMITS = {
    // API rate limits
    api: { windowMs: 15 * 60 * 1000, maxRequests: 100 }, // 100 requests per 15 minutes
    auth: { windowMs: 15 * 60 * 1000, maxRequests: 5 }, // 5 auth attempts per 15 minutes
    upload: { windowMs: 60 * 1000, maxRequests: 5 }, // 5 uploads per minute
    search: { windowMs: 60 * 1000, maxRequests: 30 }, // 30 searches per minute
    // Strict limits for sensitive operations
    passwordReset: { windowMs: 60 * 60 * 1000, maxRequests: 3 }, // 3 per hour
    profileUpdate: { windowMs: 5 * 60 * 1000, maxRequests: 10 }, // 10 per 5 minutes
};
// ==================== AUTHENTICATION SECURITY ====================
/**
 * Authentication Security System
 *
 * Provides account lockout protection, password strength validation,
 * and secure token generation for authentication operations.
 *
 * @example
 * ```typescript
 * // Check if account is locked
 * if (AuthenticationSecurity.isAccountLocked('user@example.com')) {
 *   throw new Error('Account temporarily locked due to failed attempts');
 * }
 *
 * // Validate password strength
 * const validation = AuthenticationSecurity.validatePasswordStrength('password123');
 * if (!validation.valid) {
 *   console.log('Password errors:', validation.errors);
 * }
 * ```
 */
class AuthenticationSecurity {
    /**
     * Check if account is locked due to failed authentication attempts
     * @param identifier - Account identifier (email, username)
     * @returns True if account is currently locked
     */
    static isAccountLocked(identifier) {
        const lockTime = this.lockedAccounts.get(identifier);
        if (!lockTime)
            return false;
        if (Date.now() > lockTime) {
            this.lockedAccounts.delete(identifier);
            return false;
        }
        return true;
    }
    /**
     * Record failed authentication attempt and lock account if needed
     * @param identifier - Account identifier that failed authentication
     */
    static recordFailedAttempt(identifier) {
        const lockUntil = Date.now() + this.LOCKOUT_DURATION;
        this.lockedAccounts.set(identifier, lockUntil);
        logger_1.logger.warn('Authentication failure recorded', {
            identifier: identifier.substring(0, 3) + '***', // Partial identifier for privacy
            lockUntil: new Date(lockUntil).toISOString()
        }, 'Security');
    }
    /**
     * Clear failed attempts record on successful authentication
     * @param identifier - Account identifier that successfully authenticated
     */
    static clearFailedAttempts(identifier) {
        this.lockedAccounts.delete(identifier);
    }
    /**
     * Validate password strength against security requirements
     * @param password - Password to validate
     * @returns Validation result with detailed error messages
     */
    static validatePasswordStrength(password) {
        const errors = [];
        if (password.length < 8)
            errors.push('Password must be at least 8 characters');
        if (password.length > 128)
            errors.push('Password too long');
        if (!/[A-Z]/.test(password))
            errors.push('Password must contain uppercase letter');
        if (!/[a-z]/.test(password))
            errors.push('Password must contain lowercase letter');
        if (!/[0-9]/.test(password))
            errors.push('Password must contain number');
        if (!/[^A-Za-z0-9]/.test(password))
            errors.push('Password must contain special character');
        // Check for common weak passwords
        const commonPasswords = [
            'password', '123456', 'qwerty', 'abc123', 'password123',
            'admin', 'letmein', 'welcome', 'monkey', 'dragon'
        ];
        if (commonPasswords.includes(password.toLowerCase())) {
            errors.push('Password is too common');
        }
        return {
            valid: errors.length === 0,
            errors
        };
    }
    /**
     * Generate cryptographically secure random token
     * @param length - Token length (default: 32 characters)
     * @returns Secure random string suitable for tokens
     */
    static generateSecureToken(length = 32) {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }
}
exports.AuthenticationSecurity = AuthenticationSecurity;
AuthenticationSecurity.LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes
AuthenticationSecurity.MAX_ATTEMPTS = 5;
AuthenticationSecurity.lockedAccounts = new Map();
// ==================== ERROR HANDLING SECURITY ====================
class SecureErrorHandler {
    /**
     * Sanitize error messages to prevent information disclosure
     */
    static sanitizeError(error, isProduction = process.env.NODE_ENV === 'production') {
        // In production, never expose internal errors
        if (isProduction) {
            const safeErrors = [
                'Invalid credentials',
                'Access denied',
                'Resource not found',
                'Invalid input',
                'Rate limit exceeded',
                'File too large',
                'Invalid file type'
            ];
            const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || 'An error occurred';
            const isSafeError = safeErrors.some(safe => errorMessage.includes(safe));
            return {
                message: isSafeError ? errorMessage : 'An error occurred',
                code: (error === null || error === void 0 ? void 0 : error.code) || 'INTERNAL_ERROR'
            };
        }
        // In development, provide more details but still sanitize
        return {
            message: (error === null || error === void 0 ? void 0 : error.message) || 'An error occurred',
            code: error === null || error === void 0 ? void 0 : error.code,
            details: (error === null || error === void 0 ? void 0 : error.stack) ? error.stack.split('\n').slice(0, 3) : undefined
        };
    }
    /**
     * Log security events
     */
    static logSecurityEvent(event, details, severity = 'medium') {
        const logData = Object.assign({ event,
            severity, timestamp: new Date().toISOString() }, details);
        if (severity === 'critical' || severity === 'high') {
            logger_1.logger.error(`Security Event: ${event}`, logData, 'Security');
        }
        else {
            logger_1.logger.warn(`Security Event: ${event}`, logData, 'Security');
        }
    }
}
exports.SecureErrorHandler = SecureErrorHandler;
/**
 * Security Event Monitoring System
 *
 * Tracks and analyzes security events for threat detection and incident response.
 * Maintains event history and provides alerting for critical security events.
 *
 * @example
 * ```typescript
 * // Record security event
 * SecurityMonitor.recordEvent('suspicious_login', 'high', {
 *   ip: '192.168.1.1',
 *   userAgent: 'suspicious-bot'
 * });
 *
 * // Get security statistics
 * const stats = SecurityMonitor.getStats();
 * console.log(`Critical events: ${stats.criticalEvents}`);
 * ```
 */
class SecurityMonitor {
    /**
     * Record a security event for monitoring and analysis
     * @param type - Event type identifier
     * @param severity - Event severity level
     * @param details - Additional event context and metadata
     */
    static recordEvent(type, severity, details) {
        const event = {
            id: AuthenticationSecurity.generateSecureToken(16),
            type,
            severity,
            timestamp: Date.now(),
            details
        };
        this.events.push(event);
        // Keep only recent events
        if (this.events.length > this.MAX_EVENTS) {
            this.events = this.events.slice(-this.MAX_EVENTS);
        }
        // Alert on critical events
        if (severity === 'critical') {
            this.alertCriticalEvent(event);
        }
    }
    /**
     * Retrieve security events with filtering and limiting
     * @param severity - Optional severity filter
     * @param limit - Maximum number of events to return (default: 100)
     * @returns Array of security events sorted by timestamp (newest first)
     */
    static getEvents(severity, limit = 100) {
        let filtered = this.events;
        if (severity) {
            filtered = this.events.filter(e => e.severity === severity);
        }
        return filtered
            .sort((a, b) => b.timestamp - a.timestamp)
            .slice(0, limit);
    }
    /**
     * Get security statistics
     */
    static getStats() {
        const now = Date.now();
        const oneHourAgo = now - 60 * 60 * 1000;
        const eventsBySeverity = this.events.reduce((acc, event) => {
            acc[event.severity] = (acc[event.severity] || 0) + 1;
            return acc;
        }, {});
        return {
            totalEvents: this.events.length,
            eventsBySeverity,
            recentEvents: this.events.filter(e => e.timestamp > oneHourAgo).length,
            criticalEvents: this.events.filter(e => e.severity === 'critical').length
        };
    }
    static alertCriticalEvent(event) {
        logger_1.logger.error('CRITICAL SECURITY EVENT', {
            eventId: event.id,
            type: event.type,
            details: event.details
        }, 'Security');
        // In production, this would trigger alerts to security team
        if (process.env.NODE_ENV === 'production') {
            // TODO: Integrate with alerting system (email, Slack, PagerDuty, etc.)
        }
    }
}
exports.SecurityMonitor = SecurityMonitor;
SecurityMonitor.events = [];
SecurityMonitor.MAX_EVENTS = 1000;
// ==================== CONTENT SECURITY POLICY ====================
class ContentSecurityPolicy {
    static getHeaders() {
        const nonce = AuthenticationSecurity.generateSecureToken(16);
        return {
            'Content-Security-Policy': [
                "default-src 'self'",
                "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live https://va.vercel-scripts.com",
                "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
                "font-src 'self' https://fonts.gstatic.com",
                "img-src 'self' data: https: blob:",
                "connect-src 'self' https://*.supabase.co wss://*.supabase.co https://vercel.live",
                "frame-src 'self' https://vercel.live",
                "object-src 'none'",
                "base-uri 'self'",
                "form-action 'self'",
                "frame-ancestors 'none'",
                "upgrade-insecure-requests"
            ].join('; '),
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'DENY',
            'X-XSS-Protection': '1; mode=block',
            'Referrer-Policy': 'strict-origin-when-cross-origin',
            'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',
            // HSTS (HTTP Strict Transport Security)
            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload'
        };
    }
}
exports.ContentSecurityPolicy = ContentSecurityPolicy;
// ==================== MAIN SECURITY MIDDLEWARE ====================
/**
 * Comprehensive Security Hardening Middleware
 *
 * Provides complete security protection for API routes including:
 * - Method validation
 * - Rate limiting
 * - Authentication verification
 * - Input validation
 * - Security event monitoring
 *
 * @example
 * ```typescript
 * // Secure an API route
 * const security = await SecurityHardening.secureAPIRoute(request, {
 *   requireAuth: true,
 *   rateLimit: 'api',
 *   allowedMethods: ['POST'],
 *   validateInput: userUpdateSchema
 * });
 *
 * if (!security.success) {
 *   return security.response; // Security check failed
 * }
 *
 * // Security passed, proceed with API logic
 * const user = security.user;
 * ```
 */
class SecurityHardening {
    /**
     * Apply comprehensive security protection to API routes
     * @param request - Next.js request object
     * @param options - Security configuration options
     * @param options.requireAuth - Whether authentication is required
     * @param options.rateLimit - Rate limit type to apply
     * @param options.validateInput - Zod schema for input validation
     * @param options.allowedMethods - HTTP methods allowed for this route
     * @returns Security check result with user data or error response
     */
    static async secureAPIRoute(request, options = {}) {
        try {
            const { requireAuth = true, rateLimit = 'api', validateInput, allowedMethods = ['GET', 'POST', 'PUT', 'DELETE'] } = options;
            // 1. Method validation
            if (!allowedMethods.includes(request.method)) {
                SecurityMonitor.recordEvent('invalid_method', 'medium', {
                    method: request.method,
                    url: request.url
                });
                return {
                    success: false,
                    response: server_1.NextResponse.json({ error: 'Method not allowed' }, { status: 405 })
                };
            }
            // 2. Rate limiting
            const clientIP = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';
            const rateLimitResult = await RateLimiter.checkLimit(clientIP, rateLimit);
            if (!rateLimitResult.allowed) {
                SecurityMonitor.recordEvent('rate_limit_exceeded', 'high', {
                    ip: clientIP,
                    limitType: rateLimit
                });
                return {
                    success: false,
                    response: server_1.NextResponse.json({ error: 'Rate limit exceeded' }, {
                        status: 429,
                        headers: {
                            'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()
                        }
                    })
                };
            }
            // 3. Authentication check
            let user = null;
            if (requireAuth) {
                try {
                    // Only import and use createServerClient when actually needed
                    const { createServerClient: createClient } = await Promise.resolve().then(() => __importStar(require('@/services/supabase/server')));
                    const supabase = await createClient();
                    const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
                    if (!authUser || authError) {
                        SecurityMonitor.recordEvent('unauthorized_access', 'medium', {
                            ip: clientIP,
                            url: request.url
                        });
                        return {
                            success: false,
                            response: server_1.NextResponse.json({ error: 'Authentication required' }, { status: 401 })
                        };
                    }
                    user = authUser;
                }
                catch (authError) {
                    SecurityMonitor.recordEvent('auth_error', 'high', {
                        ip: clientIP,
                        error: authError.message
                    });
                    return {
                        success: false,
                        response: server_1.NextResponse.json({ error: 'Authentication failed' }, { status: 500 })
                    };
                }
            }
            // 4. Input validation
            if (validateInput && request.method !== 'GET') {
                try {
                    const body = await request.json();
                    validateInput.parse(body);
                }
                catch (validationError) {
                    SecurityMonitor.recordEvent('input_validation_failed', 'medium', {
                        ip: clientIP,
                        error: validationError.message
                    });
                    return {
                        success: false,
                        response: server_1.NextResponse.json({ error: 'Invalid input data' }, { status: 400 })
                    };
                }
            }
            return { success: true, user };
        }
        catch (error) {
            SecurityMonitor.recordEvent('security_middleware_error', 'critical', {
                error: error.message
            });
            return {
                success: false,
                response: server_1.NextResponse.json({ error: 'Security validation failed' }, { status: 500 })
            };
        }
    }
}
exports.SecurityHardening = SecurityHardening;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,