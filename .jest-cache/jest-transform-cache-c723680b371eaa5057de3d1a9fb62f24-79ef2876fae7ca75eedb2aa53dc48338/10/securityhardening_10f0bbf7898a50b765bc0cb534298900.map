{"file":"/home/g/dev/orangecat/src/services/security/security-hardening.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/security/security-hardening.ts"],"sourcesContent":["/**\n * COMPREHENSIVE SECURITY HARDENING SYSTEM\n * \n * Option C - Security Hardening Implementation\n * Addresses all critical security vulnerabilities identified in the platform\n * \n * Created: 2025-01-14\n * Last Modified: 2025-06-12\n * Last Modified Summary: Complete security hardening for production deployment - Option C completed\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { logger } from '@/utils/logger'\nimport { z } from 'zod'\n\n// ==================== INPUT SANITIZATION SYSTEM ====================\n\n/**\n * XSS Prevention - HTML Entity Encoding and Content Sanitization\n * \n * Provides comprehensive protection against Cross-Site Scripting (XSS) attacks\n * by sanitizing user input and encoding dangerous characters.\n * \n * @example\n * ```typescript\n * const safeInput = XSSPrevention.sanitizeHTML('<script>alert(\"xss\")</script>');\n * // Returns: '&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;'\n * ```\n */\nexport class XSSPrevention {\n  private static readonly HTML_ENTITIES: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  }\n\n  /**\n   * Sanitize HTML content by encoding dangerous characters\n   * @param input - Raw HTML content to sanitize\n   * @returns Sanitized string safe for HTML display\n   */\n  static sanitizeHTML(input: string): string {\n    if (!input || typeof input !== 'string') return ''\n    \n    return input.replace(/[&<>\"'`=\\/]/g, (match) => {\n      return this.HTML_ENTITIES[match] || match\n    })\n  }\n\n  /**\n   * Sanitize input for use in HTML attributes with aggressive filtering\n   * @param input - Raw input to sanitize for HTML attributes\n   * @returns Sanitized string safe for HTML attributes\n   */\n  static sanitizeForAttribute(input: string): string {\n    if (!input || typeof input !== 'string') return ''\n    \n    // More aggressive sanitization for HTML attributes\n    return input\n      .replace(/[&<>\"'`=\\/\\(\\)\\[\\]{}]/g, (match) => {\n        return this.HTML_ENTITIES[match] || ''\n      })\n      .replace(/javascript:/gi, '')\n      .replace(/vbscript:/gi, '')\n      .replace(/data:/gi, '')\n      .replace(/on\\w+=/gi, '')\n  }\n\n  /**\n   * Sanitize plain text content with length limits\n   * @param input - Raw text to sanitize\n   * @returns Sanitized text safe for display (max 1000 chars)\n   */\n  static sanitizeText(input: string): string {\n    if (!input || typeof input !== 'string') return ''\n    \n    return input\n      .replace(/[<>]/g, (match) => this.HTML_ENTITIES[match])\n      .trim()\n      .substring(0, 1000) // Limit length\n  }\n}\n\n/**\n * Input Validation Schemas with Security Focus\n */\nexport const SecuritySchemas = {\n  // Email with strict validation\n  email: z.string()\n    .email('Invalid email format')\n    .min(5, 'Email too short')\n    .max(254, 'Email too long')\n    .regex(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, 'Invalid email format')\n    .transform(email => email.toLowerCase().trim()),\n\n  // Bitcoin address with enhanced validation\n  bitcoinAddress: z.string()\n    .min(26, 'Bitcoin address too short')\n    .max(62, 'Bitcoin address too long')\n    .regex(/^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/, 'Invalid Bitcoin address format')\n    .refine(address => {\n      // Additional validation for known attack patterns\n      const suspiciousPatterns = [\n        /script/gi,\n        /javascript/gi,\n        /vbscript/gi,\n        /<|>/gi,\n        /\\x00/gi // Null bytes\n      ]\n      return !suspiciousPatterns.some(pattern => pattern.test(address))\n    }, 'Bitcoin address contains invalid characters'),\n\n  // Username with anti-impersonation\n  username: z.string()\n    .min(3, 'Username too short')\n    .max(30, 'Username too long')\n    .regex(/^[a-zA-Z0-9_-]+$/, 'Username can only contain letters, numbers, underscores, and hyphens')\n    .refine(username => {\n      // Celebrity/brand impersonation prevention\n      const reservedNames = [\n        'admin', 'administrator', 'root', 'system', 'support', 'help',\n        'bitcoin', 'satoshi', 'nakamoto', 'elon', 'musk', 'tesla',\n        'apple', 'google', 'microsoft', 'facebook', 'twitter', 'meta',\n        'orangecat', 'official', 'verified', 'staff', 'team'\n      ]\n      return !reservedNames.includes(username.toLowerCase())\n    }, 'Username is reserved or may cause impersonation')\n    .transform(username => username.toLowerCase().trim()),\n\n  // Bio/description with content filtering\n  bio: z.string()\n    .max(500, 'Bio too long')\n    .refine(bio => {\n      // Content filtering for spam/malicious content\n      const suspiciousPatterns = [\n        /(?:https?:\\/\\/)?(?:www\\.)?[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}/gi, // URLs\n        /\\b(?:buy|sell|invest|profit|money|crypto|trading|forex)\\b/gi, // Financial spam\n        /<script|javascript:|vbscript:|data:/gi, // Script injection\n        /\\b(?:telegram|whatsapp|discord)\\b.*@/gi // Contact spam\n      ]\n      \n      const suspiciousCount = suspiciousPatterns.reduce((count, pattern) => {\n        return count + (pattern.test(bio) ? 1 : 0)\n      }, 0)\n      \n      return suspiciousCount < 2 // Allow some flexibility but flag multiple patterns\n    }, 'Bio contains suspicious content')\n    .transform(bio => XSSPrevention.sanitizeText(bio))\n}\n\n// ==================== RATE LIMITING SYSTEM ====================\n\ninterface RateLimitConfig {\n  windowMs: number\n  maxRequests: number\n  skipSuccessfulRequests?: boolean\n  skipFailedRequests?: boolean\n}\n\n/**\n * Rate Limiting System for API Protection\n * \n * Implements sliding window rate limiting to prevent abuse and DoS attacks.\n * Supports different rate limits for different operation types.\n * \n * @example\n * ```typescript\n * const result = await RateLimiter.checkLimit('user@example.com', 'auth');\n * if (!result.allowed) {\n *   throw new Error(`Rate limit exceeded. Try again in ${result.resetTime - Date.now()}ms`);\n * }\n * ```\n */\nexport class RateLimiter {\n  private static requests = new Map<string, { count: number; resetTime: number }>()\n\n  static readonly LIMITS: Record<string, RateLimitConfig> = {\n    // API rate limits\n    api: { windowMs: 15 * 60 * 1000, maxRequests: 100 }, // 100 requests per 15 minutes\n    auth: { windowMs: 15 * 60 * 1000, maxRequests: 5 }, // 5 auth attempts per 15 minutes\n    upload: { windowMs: 60 * 1000, maxRequests: 5 }, // 5 uploads per minute\n    search: { windowMs: 60 * 1000, maxRequests: 30 }, // 30 searches per minute\n    \n    // Strict limits for sensitive operations\n    passwordReset: { windowMs: 60 * 60 * 1000, maxRequests: 3 }, // 3 per hour\n    profileUpdate: { windowMs: 5 * 60 * 1000, maxRequests: 10 }, // 10 per 5 minutes\n  }\n\n  /**\n   * Check if request is within rate limits\n   * @param identifier - Unique identifier (IP, user ID, email)\n   * @param limitType - Type of rate limit to apply\n   * @returns Rate limit status with remaining requests and reset time\n   */\n  static async checkLimit(\n    identifier: string, \n    limitType: keyof typeof RateLimiter.LIMITS\n  ): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {\n    const config = this.LIMITS[limitType]\n    const now = Date.now()\n    const key = `${limitType}:${identifier}`\n    \n    // Clean up expired entries\n    this.cleanup()\n    \n    const existing = this.requests.get(key)\n    \n    if (!existing || now > existing.resetTime) {\n      // New window\n      this.requests.set(key, {\n        count: 1,\n        resetTime: now + config.windowMs\n      })\n      return {\n        allowed: true,\n        remaining: config.maxRequests - 1,\n        resetTime: now + config.windowMs\n      }\n    }\n    \n    if (existing.count >= config.maxRequests) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: existing.resetTime\n      }\n    }\n    \n    existing.count++\n    return {\n      allowed: true,\n      remaining: config.maxRequests - existing.count,\n      resetTime: existing.resetTime\n    }\n  }\n\n  private static cleanup(): void {\n    const now = Date.now()\n    for (const [key, value] of this.requests.entries()) {\n      if (now > value.resetTime) {\n        this.requests.delete(key)\n      }\n    }\n  }\n\n  static getStats(): { totalKeys: number; activeWindows: number } {\n    this.cleanup()\n    return {\n      totalKeys: this.requests.size,\n      activeWindows: this.requests.size\n    }\n  }\n}\n\n// ==================== AUTHENTICATION SECURITY ====================\n\n/**\n * Authentication Security System\n * \n * Provides account lockout protection, password strength validation,\n * and secure token generation for authentication operations.\n * \n * @example\n * ```typescript\n * // Check if account is locked\n * if (AuthenticationSecurity.isAccountLocked('user@example.com')) {\n *   throw new Error('Account temporarily locked due to failed attempts');\n * }\n * \n * // Validate password strength\n * const validation = AuthenticationSecurity.validatePasswordStrength('password123');\n * if (!validation.valid) {\n *   console.log('Password errors:', validation.errors);\n * }\n * ```\n */\nexport class AuthenticationSecurity {\n  private static readonly LOCKOUT_DURATION = 15 * 60 * 1000 // 15 minutes\n  private static readonly MAX_ATTEMPTS = 5\n  private static lockedAccounts = new Map<string, number>()\n\n  /**\n   * Check if account is locked due to failed authentication attempts\n   * @param identifier - Account identifier (email, username)\n   * @returns True if account is currently locked\n   */\n  static isAccountLocked(identifier: string): boolean {\n    const lockTime = this.lockedAccounts.get(identifier)\n    if (!lockTime) return false\n    \n    if (Date.now() > lockTime) {\n      this.lockedAccounts.delete(identifier)\n      return false\n    }\n    \n    return true\n  }\n\n  /**\n   * Record failed authentication attempt and lock account if needed\n   * @param identifier - Account identifier that failed authentication\n   */\n  static recordFailedAttempt(identifier: string): void {\n    const lockUntil = Date.now() + this.LOCKOUT_DURATION\n    this.lockedAccounts.set(identifier, lockUntil)\n    \n    logger.warn('Authentication failure recorded', {\n      identifier: identifier.substring(0, 3) + '***', // Partial identifier for privacy\n      lockUntil: new Date(lockUntil).toISOString()\n    }, 'Security')\n  }\n\n  /**\n   * Clear failed attempts record on successful authentication\n   * @param identifier - Account identifier that successfully authenticated\n   */\n  static clearFailedAttempts(identifier: string): void {\n    this.lockedAccounts.delete(identifier)\n  }\n\n  /**\n   * Validate password strength against security requirements\n   * @param password - Password to validate\n   * @returns Validation result with detailed error messages\n   */\n  static validatePasswordStrength(password: string): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n    \n    if (password.length < 8) errors.push('Password must be at least 8 characters')\n    if (password.length > 128) errors.push('Password too long')\n    if (!/[A-Z]/.test(password)) errors.push('Password must contain uppercase letter')\n    if (!/[a-z]/.test(password)) errors.push('Password must contain lowercase letter')\n    if (!/[0-9]/.test(password)) errors.push('Password must contain number')\n    if (!/[^A-Za-z0-9]/.test(password)) errors.push('Password must contain special character')\n    \n    // Check for common weak passwords\n    const commonPasswords = [\n      'password', '123456', 'qwerty', 'abc123', 'password123',\n      'admin', 'letmein', 'welcome', 'monkey', 'dragon'\n    ]\n    \n    if (commonPasswords.includes(password.toLowerCase())) {\n      errors.push('Password is too common')\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  /**\n   * Generate cryptographically secure random token\n   * @param length - Token length (default: 32 characters)\n   * @returns Secure random string suitable for tokens\n   */\n  static generateSecureToken(length: number = 32): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    let result = ''\n    \n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length))\n    }\n    \n    return result\n  }\n}\n\n// ==================== ERROR HANDLING SECURITY ====================\n\nexport class SecureErrorHandler {\n  /**\n   * Sanitize error messages to prevent information disclosure\n   */\n  static sanitizeError(error: any, isProduction: boolean = process.env.NODE_ENV === 'production'): {\n    message: string\n    code?: string\n    details?: any\n  } {\n    // In production, never expose internal errors\n    if (isProduction) {\n      const safeErrors = [\n        'Invalid credentials',\n        'Access denied',\n        'Resource not found',\n        'Invalid input',\n        'Rate limit exceeded',\n        'File too large',\n        'Invalid file type'\n      ]\n      \n      const errorMessage = error?.message || 'An error occurred'\n      const isSafeError = safeErrors.some(safe => errorMessage.includes(safe))\n      \n      return {\n        message: isSafeError ? errorMessage : 'An error occurred',\n        code: error?.code || 'INTERNAL_ERROR'\n      }\n    }\n    \n    // In development, provide more details but still sanitize\n    return {\n      message: error?.message || 'An error occurred',\n      code: error?.code,\n      details: error?.stack ? error.stack.split('\\n').slice(0, 3) : undefined\n    }\n  }\n\n  /**\n   * Log security events\n   */\n  static logSecurityEvent(\n    event: string,\n    details: Record<string, any>,\n    severity: 'low' | 'medium' | 'high' | 'critical' = 'medium'\n  ): void {\n    const logData = {\n      event,\n      severity,\n      timestamp: new Date().toISOString(),\n      ...details\n    }\n    \n    if (severity === 'critical' || severity === 'high') {\n      logger.error(`Security Event: ${event}`, logData, 'Security')\n    } else {\n      logger.warn(`Security Event: ${event}`, logData, 'Security')\n    }\n  }\n}\n\n// ==================== SECURITY MONITORING ====================\n\ninterface SecurityEvent {\n  id: string\n  type: string\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  timestamp: number\n  details: Record<string, any>\n}\n\n/**\n * Security Event Monitoring System\n * \n * Tracks and analyzes security events for threat detection and incident response.\n * Maintains event history and provides alerting for critical security events.\n * \n * @example\n * ```typescript\n * // Record security event\n * SecurityMonitor.recordEvent('suspicious_login', 'high', {\n *   ip: '192.168.1.1',\n *   userAgent: 'suspicious-bot'\n * });\n * \n * // Get security statistics\n * const stats = SecurityMonitor.getStats();\n * console.log(`Critical events: ${stats.criticalEvents}`);\n * ```\n */\nexport class SecurityMonitor {\n  private static events: SecurityEvent[] = []\n  private static readonly MAX_EVENTS = 1000\n\n  /**\n   * Record a security event for monitoring and analysis\n   * @param type - Event type identifier\n   * @param severity - Event severity level\n   * @param details - Additional event context and metadata\n   */\n  static recordEvent(\n    type: string,\n    severity: SecurityEvent['severity'],\n    details: Record<string, any>\n  ): void {\n    const event: SecurityEvent = {\n      id: AuthenticationSecurity.generateSecureToken(16),\n      type,\n      severity,\n      timestamp: Date.now(),\n      details\n    }\n    \n    this.events.push(event)\n    \n    // Keep only recent events\n    if (this.events.length > this.MAX_EVENTS) {\n      this.events = this.events.slice(-this.MAX_EVENTS)\n    }\n    \n    // Alert on critical events\n    if (severity === 'critical') {\n      this.alertCriticalEvent(event)\n    }\n  }\n\n  /**\n   * Retrieve security events with filtering and limiting\n   * @param severity - Optional severity filter\n   * @param limit - Maximum number of events to return (default: 100)\n   * @returns Array of security events sorted by timestamp (newest first)\n   */\n  static getEvents(\n    severity?: SecurityEvent['severity'],\n    limit: number = 100\n  ): SecurityEvent[] {\n    let filtered = this.events\n    \n    if (severity) {\n      filtered = this.events.filter(e => e.severity === severity)\n    }\n    \n    return filtered\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, limit)\n  }\n\n  /**\n   * Get security statistics\n   */\n  static getStats(): {\n    totalEvents: number\n    eventsBySeverity: Record<string, number>\n    recentEvents: number\n    criticalEvents: number\n  } {\n    const now = Date.now()\n    const oneHourAgo = now - 60 * 60 * 1000\n    \n    const eventsBySeverity = this.events.reduce((acc, event) => {\n      acc[event.severity] = (acc[event.severity] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n    \n    return {\n      totalEvents: this.events.length,\n      eventsBySeverity,\n      recentEvents: this.events.filter(e => e.timestamp > oneHourAgo).length,\n      criticalEvents: this.events.filter(e => e.severity === 'critical').length\n    }\n  }\n\n  private static alertCriticalEvent(event: SecurityEvent): void {\n    logger.error('CRITICAL SECURITY EVENT', {\n      eventId: event.id,\n      type: event.type,\n      details: event.details\n    }, 'Security')\n    \n    // In production, this would trigger alerts to security team\n    if (process.env.NODE_ENV === 'production') {\n      // TODO: Integrate with alerting system (email, Slack, PagerDuty, etc.)\n    }\n  }\n}\n\n// ==================== CONTENT SECURITY POLICY ====================\n\nexport class ContentSecurityPolicy {\n  static getHeaders(): Record<string, string> {\n    const nonce = AuthenticationSecurity.generateSecureToken(16)\n    \n    return {\n      'Content-Security-Policy': [\n        \"default-src 'self'\",\n        \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live https://va.vercel-scripts.com\",\n        \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com\",\n        \"font-src 'self' https://fonts.gstatic.com\",\n        \"img-src 'self' data: https: blob:\",\n        \"connect-src 'self' https://*.supabase.co wss://*.supabase.co https://vercel.live\",\n        \"frame-src 'self' https://vercel.live\",\n        \"object-src 'none'\",\n        \"base-uri 'self'\",\n        \"form-action 'self'\",\n        \"frame-ancestors 'none'\",\n        \"upgrade-insecure-requests\"\n      ].join('; '),\n      \n      'X-Content-Type-Options': 'nosniff',\n      'X-Frame-Options': 'DENY',\n      'X-XSS-Protection': '1; mode=block',\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\n      'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\n      \n      // HSTS (HTTP Strict Transport Security)\n      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload'\n    }\n  }\n}\n\n// ==================== MAIN SECURITY MIDDLEWARE ====================\n\n/**\n * Comprehensive Security Hardening Middleware\n * \n * Provides complete security protection for API routes including:\n * - Method validation\n * - Rate limiting\n * - Authentication verification\n * - Input validation\n * - Security event monitoring\n * \n * @example\n * ```typescript\n * // Secure an API route\n * const security = await SecurityHardening.secureAPIRoute(request, {\n *   requireAuth: true,\n *   rateLimit: 'api',\n *   allowedMethods: ['POST'],\n *   validateInput: userUpdateSchema\n * });\n * \n * if (!security.success) {\n *   return security.response; // Security check failed\n * }\n * \n * // Security passed, proceed with API logic\n * const user = security.user;\n * ```\n */\nexport class SecurityHardening {\n  /**\n   * Apply comprehensive security protection to API routes\n   * @param request - Next.js request object\n   * @param options - Security configuration options\n   * @param options.requireAuth - Whether authentication is required\n   * @param options.rateLimit - Rate limit type to apply\n   * @param options.validateInput - Zod schema for input validation\n   * @param options.allowedMethods - HTTP methods allowed for this route\n   * @returns Security check result with user data or error response\n   */\n  static async secureAPIRoute(\n    request: NextRequest,\n    options: {\n      requireAuth?: boolean\n      rateLimit?: keyof typeof RateLimiter.LIMITS\n      validateInput?: z.ZodSchema\n      allowedMethods?: string[]\n    } = {}\n  ): Promise<{ success: true; user?: any } | { success: false; response: NextResponse }> {\n    try {\n      const {\n        requireAuth = true,\n        rateLimit = 'api',\n        validateInput,\n        allowedMethods = ['GET', 'POST', 'PUT', 'DELETE']\n      } = options\n\n      // 1. Method validation\n      if (!allowedMethods.includes(request.method)) {\n        SecurityMonitor.recordEvent('invalid_method', 'medium', {\n          method: request.method,\n          url: request.url\n        })\n        \n        return {\n          success: false,\n          response: NextResponse.json(\n            { error: 'Method not allowed' },\n            { status: 405 }\n          )\n        }\n      }\n\n      // 2. Rate limiting\n      const clientIP = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown'\n      const rateLimitResult = await RateLimiter.checkLimit(clientIP, rateLimit)\n      \n      if (!rateLimitResult.allowed) {\n        SecurityMonitor.recordEvent('rate_limit_exceeded', 'high', {\n          ip: clientIP,\n          limitType: rateLimit\n        })\n        \n        return {\n          success: false,\n          response: NextResponse.json(\n            { error: 'Rate limit exceeded' },\n            { \n              status: 429,\n              headers: {\n                'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()\n              }\n            }\n          )\n        }\n      }\n\n      // 3. Authentication check\n      let user = null\n      if (requireAuth) {\n        try {\n          // Only import and use createServerClient when actually needed\n          const { createServerClient: createClient } = await import('@/services/supabase/server')\n          const supabase = await createClient()\n          const { data: { user: authUser }, error: authError } = await supabase.auth.getUser()\n        \n          if (!authUser || authError) {\n            SecurityMonitor.recordEvent('unauthorized_access', 'medium', {\n              ip: clientIP,\n              url: request.url\n            })\n            \n            return {\n              success: false,\n              response: NextResponse.json(\n                { error: 'Authentication required' },\n                { status: 401 }\n              )\n            }\n          }\n          \n          user = authUser\n        } catch (authError) {\n          SecurityMonitor.recordEvent('auth_error', 'high', {\n            ip: clientIP,\n            error: (authError as Error).message\n          })\n          \n          return {\n            success: false,\n            response: NextResponse.json(\n              { error: 'Authentication failed' },\n              { status: 500 }\n            )\n          }\n        }\n      }\n\n      // 4. Input validation\n      if (validateInput && request.method !== 'GET') {\n        try {\n          const body = await request.json()\n          validateInput.parse(body)\n        } catch (validationError) {\n          SecurityMonitor.recordEvent('input_validation_failed', 'medium', {\n            ip: clientIP,\n            error: (validationError as Error).message\n          })\n          \n          return {\n            success: false,\n            response: NextResponse.json(\n              { error: 'Invalid input data' },\n              { status: 400 }\n            )\n          }\n        }\n      }\n\n      return { success: true, user }\n      \n    } catch (error) {\n      SecurityMonitor.recordEvent('security_middleware_error', 'critical', {\n        error: (error as Error).message\n      })\n      \n      return {\n        success: false,\n        response: NextResponse.json(\n          { error: 'Security validation failed' },\n          { status: 500 }\n        )\n      }\n    }\n  }\n}"],"version":3}