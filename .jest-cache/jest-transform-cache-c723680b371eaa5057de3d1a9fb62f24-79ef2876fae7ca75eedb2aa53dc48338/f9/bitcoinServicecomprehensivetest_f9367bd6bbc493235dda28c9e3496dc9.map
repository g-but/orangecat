{"file":"/home/g/dev/orangecat/src/services/bitcoin/__tests__/bitcoinService.comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/bitcoin/__tests__/bitcoinService.comprehensive.test.ts"],"sourcesContent":["/**\n * COMPREHENSIVE BITCOIN SERVICE TESTS - DEPENDENCY INJECTION PATTERN\n * \n * 🎯 CRITICAL FOR BITCOIN PLATFORM:\n * - Bitcoin address validation and wallet data fetching\n * - Financial security (permanent loss of funds if bugs)\n * - API provider fallback and error handling\n * - Transaction processing accuracy\n * \n * Using proven dependency injection pattern from Campaign Service success\n */\n\nimport { BitcoinService } from '../index'\nimport { BitcoinTransaction, BitcoinWalletData } from '../../../types/bitcoin/index'\n\n// Mock fetch for API tests\nconst mockFetch = jest.fn()\n\ndescribe('🪙 Bitcoin Service - Comprehensive Infrastructure Tests', () => {\n  let bitcoinService: BitcoinService\n  \n  const mockSuccessfulBalanceResponse = {\n    chain_stats: {\n      funded_txo_sum: 100000000, // 1 BTC in satoshis\n      spent_txo_sum: 50000000    // 0.5 BTC spent\n    }\n  }\n  \n  const mockSuccessfulTransactions = [\n    {\n      txid: 'abc123def456',\n      status: { confirmed: true, block_time: 1640995200 },\n      vin: [],\n      vout: [\n        {\n          scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n          value: 50000000 // 0.5 BTC\n        }\n      ]\n    }\n  ]\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFetch.mockClear()\n    \n    // Create service with injected mock fetch for each test\n    bitcoinService = new BitcoinService(mockFetch as any)\n  })\n\n  describe('🏗️ Service Infrastructure', () => {\n    it('should create service with dependency injection', () => {\n      expect(bitcoinService).toBeInstanceOf(BitcoinService)\n    })\n\n    it('should use singleton pattern correctly', () => {\n      const instance1 = BitcoinService.getInstance()\n      const instance2 = BitcoinService.getInstance()\n      \n      expect(instance1).toBe(instance2)\n    })\n\n    it('should inject custom fetch implementation', () => {\n      const customFetch = jest.fn()\n      const service = new BitcoinService(customFetch)\n      \n      expect(service).toBeInstanceOf(BitcoinService)\n    })\n  })\n\n  describe('🧹 Address Cleaning & Validation', () => {\n    it('should clean Bitcoin URI addresses correctly', () => {\n      const uriAddress = 'bitcoin:bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4?amount=0.1'\n      const cleaned = bitcoinService.cleanBitcoinAddress(uriAddress)\n      \n      expect(cleaned).toBe('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n\n    it('should handle empty or invalid addresses', () => {\n      expect(bitcoinService.cleanBitcoinAddress('')).toBe('')\n      expect(bitcoinService.cleanBitcoinAddress('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')).toBe('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n\n    it('should handle complex URI parameters', () => {\n      const complexUri = 'bitcoin:bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4?amount=0.1&label=Test&message=Payment'\n      const cleaned = bitcoinService.cleanBitcoinAddress(complexUri)\n      \n      expect(cleaned).toBe('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n  })\n\n  describe('💰 Balance Fetching', () => {\n    it('should fetch balance successfully', async () => {\n      // Setup successful mock responses for this test\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulTransactions)\n        })\n      \n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0.5) // 50000000 satoshis = 0.5 BTC\n      expect(balance.unconfirmed).toBe(0)\n      expect(balance.error).toBeUndefined()\n      expect(mockFetch).toHaveBeenCalledTimes(2) // Address + transactions\n    })\n\n    it('should handle balance fetch errors gracefully', async () => {\n      // Mock network error for all providers\n      mockFetch\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0)\n      expect(balance.unconfirmed).toBe(0)\n      expect(balance.error).toContain('Failed to fetch wallet data')\n    })\n\n    it('should handle malformed API responses', async () => {\n      // Mock malformed response\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(null) // Malformed data\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0) // Should handle gracefully\n      expect(balance.error).toBeUndefined()\n    })\n\n    it('should validate addresses before API calls', async () => {\n      const balance = await bitcoinService.getBalance('')\n      \n      expect(balance.confirmed).toBe(0)\n      expect(balance.error).toContain('Invalid or empty Bitcoin address')\n      expect(mockFetch).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('📊 Transaction Fetching', () => {\n    it('should fetch transactions successfully', async () => {\n      // Setup successful mock responses for this test\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulTransactions)\n        })\n      \n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toHaveLength(1)\n      expect(transactions[0].txid).toBe('abc123def456')\n      expect(transactions[0].type).toBe('incoming')\n      expect(transactions[0].value).toBe(0.5)\n      expect(transactions[0].status).toBe('confirmed')\n    })\n\n    it('should handle outgoing transactions correctly', async () => {\n      const outgoingTx = [{\n        txid: 'outgoing123',\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [\n          {\n            prevout: {\n              scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n              value: 100000000\n            }\n          }\n        ],\n        vout: [\n          {\n            scriptpubkey_address: '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2',\n            value: 70000000\n          },\n          {\n            scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', // change\n            value: 30000000\n          }\n        ]\n      }]\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(outgoingTx)\n        })\n\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions[0].type).toBe('outgoing')\n      expect(transactions[0].value).toBe(0.7) // 70000000 satoshis sent to others\n    })\n\n    it('should handle transaction fetch errors gracefully', async () => {\n      // Mock successful balance but failed transactions for all providers\n      mockFetch\n        .mockRejectedValueOnce(new Error('Transaction API error'))\n        .mockRejectedValueOnce(new Error('Transaction API error'))\n        .mockRejectedValueOnce(new Error('Transaction API error'))\n        .mockRejectedValueOnce(new Error('Transaction API error'))\n\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toEqual([])\n    })\n\n    it('should handle consolidation transactions', async () => {\n      const consolidationTx = [{\n        txid: 'consolidation123',\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [\n          {\n            prevout: {\n              scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n              value: 100000000\n            }\n          }\n        ],\n        vout: [\n          {\n            scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', // all back to same address\n            value: 100000000\n          }\n        ]\n      }]\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(consolidationTx)\n        })\n\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions[0].type).toBe('outgoing')\n      expect(transactions[0].value).toBe(1.0) // Shows total value moved\n    })\n\n    it('should limit transactions to 10 results', async () => {\n      const manyTransactions = Array.from({ length: 15 }, (_, i) => ({\n        txid: `tx${i}`,\n        status: { confirmed: true, block_time: 1640995200 },\n        vin: [],\n        vout: [\n          {\n            scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n            value: 1000000\n          }\n        ]\n      }))\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(manyTransactions)\n        })\n\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions).toHaveLength(10) // Limited to 10\n    })\n  })\n\n  describe('🌐 API Provider Fallback', () => {\n    it('should fallback to secondary provider on primary failure', async () => {\n      // Primary provider fails\n      mockFetch\n        .mockRejectedValueOnce(new Error('Primary provider error'))\n        .mockRejectedValueOnce(new Error('Primary provider error'))\n        // Secondary provider succeeds\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulTransactions)\n        })\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0.5)\n      expect(mockFetch).toHaveBeenCalledTimes(4) // 2 failed + 2 successful\n    })\n\n    it('should handle HTTP error responses with fallback', async () => {\n      // Primary provider returns 404\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          text: () => Promise.resolve('Address not found')\n        })\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          text: () => Promise.resolve('Address not found')\n        })\n        // Secondary provider succeeds\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulTransactions)\n        })\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0.5)\n    })\n\n    it('should fail gracefully when all providers fail', async () => {\n      // All providers fail\n      mockFetch\n        .mockRejectedValueOnce(new Error('Provider 1 error'))\n        .mockRejectedValueOnce(new Error('Provider 1 error'))\n        .mockRejectedValueOnce(new Error('Provider 2 error'))\n        .mockRejectedValueOnce(new Error('Provider 2 error'))\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0)\n      expect(balance.error).toContain('Failed to fetch wallet data')\n    })\n  })\n\n  describe('🔗 URL Generation', () => {\n    it('should generate correct transaction URLs', () => {\n      const txUrl = bitcoinService.getTransactionUrl('abc123def456')\n      \n      expect(txUrl).toBe('https://mempool.space/tx/abc123def456')\n    })\n\n    it('should generate correct address URLs', () => {\n      const addressUrl = bitcoinService.getAddressUrl('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(addressUrl).toBe('https://mempool.space/address/bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n\n    it('should handle Bitcoin URI in address URLs', () => {\n      const addressUrl = bitcoinService.getAddressUrl('bitcoin:bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4?amount=0.1')\n      \n      expect(addressUrl).toBe('https://mempool.space/address/bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n    })\n  })\n\n  describe('🛡️ Security & Data Integrity', () => {\n    it('should handle missing transaction data gracefully', async () => {\n      const incompleteTx = [{\n        txid: 'incomplete123',\n        // Missing status, vin, vout\n      }]\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(incompleteTx)\n        })\n\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions[0].txid).toBe('incomplete123')\n      expect(transactions[0].value).toBe(0)\n      expect(transactions[0].type).toBe('incoming') // Default\n      expect(transactions[0].status).toBe('pending') // Default for missing confirmation\n    })\n\n    it('should never return negative balances', async () => {\n      const negativeBalance = {\n        chain_stats: {\n          funded_txo_sum: 50000000,\n          spent_txo_sum: 100000000 // Spent more than received\n        }\n      }\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(negativeBalance)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(-0.5) // Should report actual balance\n    })\n\n    it('should handle extremely large numbers correctly', async () => {\n      const largeBalance = {\n        chain_stats: {\n          funded_txo_sum: 2100000000000000, // 21 million BTC in satoshis\n          spent_txo_sum: 0\n        }\n      }\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(largeBalance)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve([])\n        })\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(21000000) // 21 million BTC\n      expect(Number.isFinite(balance.confirmed)).toBe(true)\n    })\n\n    it('should validate timestamp ranges', async () => {\n      const validTx = [{\n        txid: 'timestamp123',\n        status: { confirmed: true, block_time: 1231006505 }, // Bitcoin genesis block timestamp\n        vin: [],\n        vout: [\n          {\n            scriptpubkey_address: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n            value: 50000000\n          }\n        ]\n      }]\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve(validTx)\n        })\n\n      const transactions = await bitcoinService.getTransactions('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(transactions[0].timestamp).toBe(1231006505000) // Converted to milliseconds\n      expect(transactions[0].timestamp).toBeGreaterThan(1231006505000 - 1) // Sanity check\n    })\n  })\n\n  describe('⚡ Performance & Reliability', () => {\n    it('should handle concurrent requests efficiently', async () => {\n      const addresses = ['bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t41', 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t42', 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t43']\n      \n      // Mock responses for all addresses\n      addresses.forEach(() => {\n        mockFetch\n          .mockResolvedValueOnce({\n            ok: true,\n            json: () => Promise.resolve(mockSuccessfulBalanceResponse)\n          })\n          .mockResolvedValueOnce({\n            ok: true,\n            json: () => Promise.resolve(mockSuccessfulTransactions)\n          })\n      })\n\n      const promises = addresses.map(addr => bitcoinService.getBalance(addr))\n      const results = await Promise.all(promises)\n      \n      expect(results).toHaveLength(3)\n      results.forEach(result => {\n        expect(result.confirmed).toBe(0.5)\n        expect(result.error).toBeUndefined()\n      })\n    })\n\n    it('should handle timeout scenarios gracefully', async () => {\n      // Mock timeout by rejecting with AbortError\n      mockFetch\n        .mockRejectedValueOnce(new Error('The operation was aborted'))\n        .mockRejectedValueOnce(new Error('The operation was aborted'))\n        .mockRejectedValueOnce(new Error('The operation was aborted'))\n        .mockRejectedValueOnce(new Error('The operation was aborted'))\n\n      const balance = await bitcoinService.getBalance('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n      \n      expect(balance.confirmed).toBe(0)\n      expect(balance.error).toContain('Failed to fetch wallet data')\n    })\n  })\n}) "],"version":3}