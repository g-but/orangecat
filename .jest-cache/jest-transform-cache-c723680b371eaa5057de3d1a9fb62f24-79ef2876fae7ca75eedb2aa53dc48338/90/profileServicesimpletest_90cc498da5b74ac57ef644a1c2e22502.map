{"file":"/home/g/dev/orangecat/src/services/__tests__/profileService.simple.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/__tests__/profileService.simple.test.ts"],"sourcesContent":["/**\n * PROFILE SERVICE - SIMPLE TEST COVERAGE\n * \n * This test suite provides simple coverage for the ProfileService,\n * testing user profile operations without complex Supabase mocking.\n * \n * Created: 2025-01-08\n * Last Modified: 2025-01-08\n * Last Modified Summary: Simple ProfileService tests for user management operations\n */\n\n// Mock Supabase client to return null for all operations\njest.mock('@/services/supabase/client', () => ({\n  __esModule: true,\n  default: {\n    from: jest.fn(() => ({\n      select: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n      update: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n    })),\n    auth: {\n      getUser: jest.fn(() => Promise.resolve({\n        data: { user: null },\n        error: null\n      })),\n      updateUser: jest.fn(() => Promise.resolve({\n        error: null\n      }))\n    },\n    rpc: jest.fn(() => Promise.resolve({\n      data: null,\n      error: { message: 'RPC not available' }\n    }))\n  }\n}))\n\n// Mock other dependencies\njest.mock('@/stores/auth', () => ({\n  useAuthStore: jest.fn()\n}))\n\njest.mock('@/services/supabase/profiles', () => ({\n  updateProfile: jest.fn()\n}))\n\njest.mock('sonner', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn()\n  }\n}))\n\njest.mock('@/utils/logger', () => ({\n  logProfile: jest.fn(),\n  logger: {\n    error: jest.fn(),\n    warn: jest.fn(),\n    info: jest.fn()\n  }\n}))\n\n// Import after mocking\nimport { ProfileService } from '../profileService'\n\ninterface ProfileFormData {\n  username?: string\n  display_name?: string | null\n  bio?: string | null\n  bitcoin_address?: string | null\n  avatar_url?: string | null\n  banner_url?: string | null\n}\n\ndescribe('👤 Profile Service - Simple Coverage', () => {\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('🎯 Core Service Methods', () => {\n    \n    test('should export ProfileService class', () => {\n      expect(ProfileService).toBeDefined()\n      expect(typeof ProfileService).toBe('function')\n    })\n\n    test('should have static getProfile method', () => {\n      expect(typeof ProfileService.getProfile).toBe('function')\n    })\n\n    test('should have static updateProfile method', () => {\n      expect(typeof ProfileService.updateProfile).toBe('function')\n    })\n\n    test('should have static createProfile method', () => {\n      expect(typeof ProfileService.createProfile).toBe('function')\n    })\n\n    test('should have static updatePassword method', () => {\n      expect(typeof ProfileService.updatePassword).toBe('function')\n    })\n\n    test('should have static fallbackProfileUpdate method', () => {\n      expect(typeof ProfileService.fallbackProfileUpdate).toBe('function')\n    })\n\n  })\n\n  describe('👤 Get Profile Functionality', () => {\n    \n    test('should handle empty user ID', async () => {\n      const result = await ProfileService.getProfile('')\n      expect(result).toBeNull()\n    })\n\n    test('should handle null user ID', async () => {\n      const result = await ProfileService.getProfile(null as any)\n      expect(result).toBeNull()\n    })\n\n    test('should handle undefined user ID', async () => {\n      const result = await ProfileService.getProfile(undefined as any)\n      expect(result).toBeNull()\n    })\n\n  })\n\n  describe('✏️ Update Profile Functionality', () => {\n    \n    test('should handle missing user ID', async () => {\n      const formData: ProfileFormData = {\n        username: 'testuser'\n      }\n\n      const result = await ProfileService.updateProfile('', formData)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('User ID is required')\n    })\n\n    test('should handle null user ID', async () => {\n      const formData: ProfileFormData = {\n        username: 'testuser'\n      }\n\n      const result = await ProfileService.updateProfile(null as any, formData)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('User ID is required')\n    })\n\n    test('should handle undefined user ID', async () => {\n      const formData: ProfileFormData = {\n        username: 'testuser'\n      }\n\n      const result = await ProfileService.updateProfile(undefined as any, formData)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('User ID is required')\n    })\n\n  })\n\n  describe('➕ Create Profile Functionality', () => {\n    \n    test('should handle profile creation with minimal data', async () => {\n      const formData: ProfileFormData = {\n        username: 'newuser'\n      }\n\n      const result = await ProfileService.createProfile('user-123', formData)\n\n      // Should not throw errors and return a result\n      expect(result).toBeDefined()\n      expect(typeof result.success).toBe('boolean')\n    })\n\n    test('should handle empty user ID in create', async () => {\n      const formData: ProfileFormData = {\n        username: 'newuser'\n      }\n\n      // Should handle gracefully without throwing\n      const result = await ProfileService.createProfile('', formData)\n      expect(result).toBeDefined()\n    })\n\n  })\n\n  describe('🔐 Password Update Functionality', () => {\n    \n    test('should handle password update call', async () => {\n      const result = await ProfileService.updatePassword('newpassword123')\n      \n      // Should not throw errors and return a result\n      expect(result).toBeDefined()\n      expect(typeof result.success).toBe('boolean')\n    })\n\n    test('should handle empty password', async () => {\n      const result = await ProfileService.updatePassword('')\n      \n      expect(result).toBeDefined()\n      expect(typeof result.success).toBe('boolean')\n    })\n\n  })\n\n  describe('🔄 Fallback Profile Update', () => {\n    \n    test('should handle fallback update call', async () => {\n      const updates = {\n        username: 'testuser',\n        display_name: 'Test User'\n      }\n\n      const result = await ProfileService.fallbackProfileUpdate('user-123', updates)\n\n      // Should not throw errors and return a result\n      expect(result).toBeDefined()\n      expect(typeof result.success).toBe('boolean')\n    })\n\n    test('should handle empty updates object', async () => {\n      const result = await ProfileService.fallbackProfileUpdate('user-123', {})\n\n      expect(result).toBeDefined()\n      expect(typeof result.success).toBe('boolean')\n    })\n\n  })\n\n  describe('🛠️ Data Structure Validation', () => {\n    \n    test('should handle all ProfileFormData fields', () => {\n      const completeFormData: ProfileFormData = {\n        username: 'testuser',\n        display_name: 'Test User',\n        bio: 'Test bio',\n        bitcoin_address: 'bc1qtest',\n        avatar_url: 'https://example.com/avatar.jpg',\n        banner_url: 'https://example.com/banner.jpg'\n      }\n\n      // Validate all fields are present\n      expect(completeFormData).toHaveProperty('username')\n      expect(completeFormData).toHaveProperty('display_name')\n      expect(completeFormData).toHaveProperty('bio')\n      expect(completeFormData).toHaveProperty('bitcoin_address')\n      expect(completeFormData).toHaveProperty('avatar_url')\n      expect(completeFormData).toHaveProperty('banner_url')\n    })\n\n    test('should handle partial ProfileFormData', () => {\n      const partialFormData: ProfileFormData = {\n        username: 'testuser'\n      }\n\n      expect(partialFormData.username).toBe('testuser')\n      expect(partialFormData.display_name).toBeUndefined()\n    })\n\n    test('should handle null values in ProfileFormData', () => {\n      const formData: ProfileFormData = {\n        username: 'testuser',\n        display_name: null,\n        bio: null,\n        bitcoin_address: null,\n        avatar_url: null,\n        banner_url: null\n      }\n\n      expect(formData.username).toBe('testuser')\n      expect(formData.display_name).toBeNull()\n      expect(formData.bio).toBeNull()\n    })\n\n  })\n\n  describe('🧪 Edge Cases', () => {\n    \n    test('should handle special characters in profile data', () => {\n      const formData: ProfileFormData = {\n        username: 'user_with-special.chars',\n        display_name: 'User with émojis 🚀',\n        bio: 'Bio with \"quotes\" and <tags>',\n        bitcoin_address: 'bc1qspecial123'\n      }\n\n      // Should not throw errors during data preparation\n      expect(formData).toBeDefined()\n      expect(formData.username).toContain('special')\n      expect(formData.display_name).toContain('émojis')\n      expect(formData.bio).toContain('quotes')\n    })\n\n    test('should handle extremely long field values', () => {\n      const longString = 'A'.repeat(10000)\n      \n      const formData: ProfileFormData = {\n        username: 'testuser',\n        bio: longString\n      }\n\n      expect(formData.bio).toHaveLength(10000)\n      expect(formData.bio?.[0]).toBe('A')\n      expect(formData.bio?.[9999]).toBe('A')\n    })\n\n    test('should handle unicode characters', () => {\n      const formData: ProfileFormData = {\n        username: 'user123',\n        display_name: '测试用户 🌟 ñáméș',\n        bio: 'Bio with unicode: 你好世界 🚀💰⚡️'\n      }\n\n      expect(formData.display_name).toContain('测试')\n      expect(formData.bio).toContain('你好世界')\n    })\n\n    test('should handle whitespace-only fields', () => {\n      const formData: ProfileFormData = {\n        username: '   ',\n        display_name: '\\t\\n  \\r',\n        bio: '     ',\n        bitcoin_address: '\\n\\t'\n      }\n\n      expect(formData.username).toBe('   ')\n      expect(formData.display_name).toContain('\\t')\n      expect(formData.bio).toContain(' ')\n    })\n\n  })\n\n  describe('🔒 Error Handling', () => {\n    \n    test('should handle function calls without throwing', async () => {\n      // Test all main functions don't throw synchronously\n      expect(() => {\n        ProfileService.getProfile('test')\n        ProfileService.updateProfile('test', {})\n        ProfileService.createProfile('test', {})\n        ProfileService.updatePassword('test')\n        ProfileService.fallbackProfileUpdate('test', {})\n      }).not.toThrow()\n    })\n\n    test('should return results with success property', async () => {\n      const updateResult = await ProfileService.updateProfile('user-123', {})\n      const createResult = await ProfileService.createProfile('user-123', {})\n      const passwordResult = await ProfileService.updatePassword('test')\n      const fallbackResult = await ProfileService.fallbackProfileUpdate('user-123', {})\n\n      expect(updateResult).toHaveProperty('success')\n      expect(createResult).toHaveProperty('success')\n      expect(passwordResult).toHaveProperty('success')\n      expect(fallbackResult).toHaveProperty('success')\n    })\n\n  })\n\n}) "],"version":3}