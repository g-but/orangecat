{"file":"/home/g/dev/orangecat/src/services/profile/reader.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/profile/reader.ts"],"sourcesContent":["/**\n * PROFILE READER MODULE\n * \n * Created: 2025-01-09\n * Last Modified: 2025-01-09\n * Last Modified Summary: Extracted from profileService.ts for modular architecture - handles read operations\n */\n\nimport supabase from '@/services/supabase/client'\nimport { logger, logProfile } from '@/utils/logger'\nimport { ProfileMapper } from './mapper'\nimport type { ScalableProfile } from './types'\n\n// =====================================================================\n// ðŸ“– PROFILE RETRIEVAL OPERATIONS\n// =====================================================================\n\nexport class ProfileReader {\n  \n  /**\n   * Get a complete profile with all scalable fields\n   */\n  static async getProfile(userId: string): Promise<ScalableProfile | null> {\n    // Explicit check for empty/invalid user IDs\n    if (!userId || typeof userId !== 'string' || !userId.trim()) {\n      logger.warn('ProfileReader.getProfile: Invalid or empty user ID provided', { userId })\n      return null\n    }\n\n    try {\n      logProfile('getProfile', { userId })\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          logger.info(`Profile not found for user: ${userId}`)\n          return null\n        }\n        logger.error('ProfileReader.getProfile error:', error)\n        return null\n      }\n\n      if (!data) {\n        return null\n      }\n\n      const profile = ProfileMapper.mapDatabaseToProfile(data);\n      logProfile('getProfile success', { userId, hasProfile: true })\n      return profile\n\n    } catch (err) {\n      logger.error('ProfileReader.getProfile unexpected error:', err)\n      return null\n    }\n  }\n\n  /**\n   * Get multiple profiles with pagination and filtering\n   */\n  static async getProfiles(options: {\n    limit?: number\n    offset?: number\n    orderBy?: string\n    orderDirection?: 'asc' | 'desc'\n  } = {}): Promise<ScalableProfile[]> {\n    try {\n      const {\n        limit = 20,\n        offset = 0,\n        orderBy = 'created_at',\n        orderDirection = 'desc'\n      } = options\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .order(orderBy, { ascending: orderDirection === 'asc' })\n        .range(offset, offset + limit - 1)\n\n      if (error) {\n        logger.error('ProfileReader.getProfiles error:', { message: error.message, code: error.code })\n        return []\n      }\n\n      return data?.map(profile => ProfileMapper.mapDatabaseToProfile(profile)) || []\n\n    } catch (err) {\n      logger.error('ProfileReader.getProfiles unexpected error:', err)\n      return []\n    }\n  }\n\n  /**\n   * Search profiles with basic text search\n   */\n  static async searchProfiles(\n    searchTerm: string,\n    limit: number = 20,\n    offset: number = 0\n  ): Promise<ScalableProfile[]> {\n    if (!searchTerm?.trim()) {\n      return []\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .or(`username.ilike.%${searchTerm}%,full_name.ilike.%${searchTerm}%`)\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n\n      if (error) {\n        logger.error('ProfileReader.searchProfiles error:', error)\n        return []\n      }\n\n      return data?.map(profile => ProfileMapper.mapDatabaseToProfile(profile)) || []\n\n    } catch (err) {\n      logger.error('ProfileReader.searchProfiles unexpected error:', err)\n      return []\n    }\n  }\n\n  /**\n   * Get all profiles (admin function)\n   */\n  static async getAllProfiles(): Promise<ScalableProfile[]> {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        logger.error('ProfileReader.getAllProfiles error:', error)\n        return []\n      }\n\n      return data?.map(profile => ProfileMapper.mapDatabaseToProfile(profile)) || []\n\n    } catch (err) {\n      logger.error('ProfileReader.getAllProfiles unexpected error:', err)\n      return []\n    }\n  }\n\n  /**\n   * Increment profile views (read-adjacent operation)\n   */\n  static async incrementProfileViews(userId: string): Promise<void> {\n    if (!userId?.trim()) return\n\n    try {\n      // Get current view count\n      const profile = await this.getProfile(userId)\n      if (!profile) return\n\n      const currentViews = profile.profile_views || 0\n      \n      // Update view count\n      await supabase\n        .from('profiles')\n        .update({ \n          website: JSON.stringify({\n            ...JSON.parse(profile.website || '{}'),\n            profile_views: currentViews + 1,\n            last_viewed_at: new Date().toISOString()\n          })\n        })\n        .eq('id', userId)\n\n    } catch (err) {\n      logger.error('ProfileReader.incrementProfileViews error:', err)\n    }\n  }\n} "],"version":3}