1bb1840ff14e807f751c49fb9b3204cf
"use strict";
/**
 * PRODUCTION-SAFE LOGGER WITH ERROR TRACKING
 *
 * Replaces console.log statements with proper logging
 * that's safe for production use and provides structured logging.
 *
 * ENHANCED: Comprehensive error tracking and monitoring
 * - Error categorization and severity levels
 * - Error rate monitoring and alerting
 * - User session error tracking
 * - Performance error tracking
 * - Error recovery suggestions
 *
 * Created: 2025-06-30
 * Purpose: Eliminate console.log statements and provide structured logging
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
exports.safeLog = safeLog;
exports.logError = logError;
exports.logTiming = logTiming;
exports.logAuth = logAuth;
exports.logSupabase = logSupabase;
exports.logProfile = logProfile;
exports.logPerformance = logPerformance;
// =====================================================================
// üîß LOGGER CONFIGURATION
// =====================================================================
const LOGGER_CONFIG = {
    // Only log errors and warnings in production
    productionLevel: 'warn',
    // Log everything in development
    developmentLevel: 'debug',
    // Get current environment
    get environment() {
        return process.env.NODE_ENV || 'development';
    },
    // Get active log level
    get activeLevel() {
        return this.environment === 'production' ? this.productionLevel : this.developmentLevel;
    }
};
const LOG_LEVELS = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3
};
// =====================================================================
// üîß LOGGER IMPLEMENTATION
// =====================================================================
class Logger {
    constructor() {
        this.errorMetrics = {
            totalErrors: 0,
            errorsByCategory: {
                authentication: 0,
                authorization: 0,
                validation: 0,
                network: 0,
                database: 0,
                performance: 0,
                security: 0,
                user_input: 0,
                system: 0,
                unknown: 0
            },
            errorsBySeverity: {
                low: 0,
                medium: 0,
                high: 0,
                critical: 0
            },
            recentErrors: [],
            errorRate: 0,
            lastErrorTime: 0
        };
    }
    shouldLog(level) {
        return LOG_LEVELS[level] >= LOG_LEVELS[LOGGER_CONFIG.activeLevel];
    }
    formatLogEntry(level, message, data, source, options) {
        const entry = {
            timestamp: new Date().toISOString(),
            level,
            message,
            data,
            source,
            category: options === null || options === void 0 ? void 0 : options.category,
            severity: options === null || options === void 0 ? void 0 : options.severity,
            userId: options === null || options === void 0 ? void 0 : options.userId,
            sessionId: options === null || options === void 0 ? void 0 : options.sessionId,
            userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : undefined,
            url: typeof window !== 'undefined' ? window.location.href : undefined,
            stack: options === null || options === void 0 ? void 0 : options.stack,
            recoverySuggestions: options === null || options === void 0 ? void 0 : options.recoverySuggestions,
            errorCode: options === null || options === void 0 ? void 0 : options.errorCode,
            context: options === null || options === void 0 ? void 0 : options.context
        };
        // Track error metrics if this is an error
        if (level === 'error' && (options === null || options === void 0 ? void 0 : options.category)) {
            this.trackError(entry);
        }
        return entry;
    }
    trackError(entry) {
        this.errorMetrics.totalErrors++;
        this.errorMetrics.lastErrorTime = Date.now();
        // Update category counts
        if (entry.category) {
            this.errorMetrics.errorsByCategory[entry.category]++;
        }
        else {
            this.errorMetrics.errorsByCategory.unknown++;
        }
        // Update severity counts
        if (entry.severity) {
            this.errorMetrics.errorsBySeverity[entry.severity]++;
        }
        // Add to recent errors (keep last 100)
        this.errorMetrics.recentErrors.unshift(entry);
        if (this.errorMetrics.recentErrors.length > 100) {
            this.errorMetrics.recentErrors.pop();
        }
        // Calculate error rate (errors per minute)
        const timeWindow = 60000; // 1 minute
        const recentErrors = this.errorMetrics.recentErrors.filter(e => Date.now() - new Date(e.timestamp).getTime() < timeWindow);
        this.errorMetrics.errorRate = recentErrors.length;
        // Check for error rate thresholds and alert if needed
        this.checkErrorThresholds();
    }
    checkErrorThresholds() {
        const { errorRate, errorsBySeverity } = this.errorMetrics;
        // Alert on high error rates
        if (errorRate > 10) {
            this.warn('High error rate detected', {
                errorRate,
                threshold: 10,
                severity: 'high'
            }, 'ErrorMonitoring');
        }
        // Alert on critical errors
        if (errorsBySeverity.critical > 0) {
            this.error('Critical errors detected', {
                criticalCount: errorsBySeverity.critical,
                recentErrors: this.errorMetrics.recentErrors.slice(0, 5)
            }, 'ErrorMonitoring');
        }
    }
    // Get current error metrics
    getErrorMetrics() {
        return Object.assign({}, this.errorMetrics);
    }
    // Reset error metrics (for testing)
    resetErrorMetrics() {
        this.errorMetrics = {
            totalErrors: 0,
            errorsByCategory: {
                authentication: 0,
                authorization: 0,
                validation: 0,
                network: 0,
                database: 0,
                performance: 0,
                security: 0,
                user_input: 0,
                system: 0,
                unknown: 0
            },
            errorsBySeverity: {
                low: 0,
                medium: 0,
                high: 0,
                critical: 0
            },
            recentErrors: [],
            errorRate: 0,
            lastErrorTime: 0
        };
    }
    output(entry) {
        const { timestamp, level, message, data, source } = entry;
        // Check if we're in a server environment (has process object)
        const isServer = typeof process !== 'undefined' && process.stdout && process.stderr;
        // In production, use structured logging
        if (LOGGER_CONFIG.environment === 'production') {
            // Send to proper logging service in production
            // For now, use console for critical errors only
            if (level === 'error') {
                // Use process.stderr.write to avoid console overrides (server only)
                if (isServer) {
                    process.stderr.write(JSON.stringify(entry) + '\n');
                }
                else {
                    console.error(JSON.stringify(entry));
                }
            }
            return;
        }
        // Development logging with colors and formatting
        const prefix = `[${timestamp}] ${level.toUpperCase()}`;
        const sourceInfo = source ? ` (${source})` : '';
        // Use process.stdout/stderr to avoid console overrides (server only)
        const logMessage = `${prefix}${sourceInfo}: ${message}${data ? ' ' + JSON.stringify(data) : ''}\n`;
        if (isServer) {
            switch (level) {
                case 'debug':
                    process.stdout.write(`üîç ${logMessage}`);
                    break;
                case 'info':
                    process.stdout.write(`‚ÑπÔ∏è  ${logMessage}`);
                    break;
                case 'warn':
                    process.stdout.write(`‚ö†Ô∏è  ${logMessage}`);
                    break;
                case 'error':
                    process.stderr.write(`‚ùå ${logMessage}`);
                    break;
            }
        }
        else {
            // Browser environment - use console methods with emojis
            switch (level) {
                case 'debug':
                    console.debug(`üîç ${prefix}${sourceInfo}:`, message, data || '');
                    break;
                case 'info':
                    console.info(`‚ÑπÔ∏è  ${prefix}${sourceInfo}:`, message, data || '');
                    break;
                case 'warn':
                    console.warn(`‚ö†Ô∏è  ${prefix}${sourceInfo}:`, message, data || '');
                    break;
                case 'error':
                    console.error(`‚ùå ${prefix}${sourceInfo}:`, message, data || '');
                    break;
            }
        }
    }
    debug(message, data, source) {
        if (!this.shouldLog('debug'))
            return;
        this.output(this.formatLogEntry('debug', message, data, source));
    }
    info(message, data, source) {
        if (!this.shouldLog('info'))
            return;
        this.output(this.formatLogEntry('info', message, data, source));
    }
    warn(message, data, source) {
        if (!this.shouldLog('warn'))
            return;
        this.output(this.formatLogEntry('warn', message, data, source));
    }
    error(message, data, source) {
        if (!this.shouldLog('error'))
            return;
        this.output(this.formatLogEntry('error', message, data, source));
    }
    // Enhanced error tracking methods
    errorWithContext(message, error, source, options) {
        const stack = (error === null || error === void 0 ? void 0 : error.stack) || new Error().stack;
        const contextData = Object.assign(Object.assign({ originalError: (error === null || error === void 0 ? void 0 : error.message) || String(error), errorType: (error === null || error === void 0 ? void 0 : error.name) || 'Error' }, data), options === null || options === void 0 ? void 0 : options.context);
        this.output(this.formatLogEntry('error', message, contextData, source, {
            category: (options === null || options === void 0 ? void 0 : options.category) || 'system',
            severity: (options === null || options === void 0 ? void 0 : options.severity) || 'medium',
            userId: options === null || options === void 0 ? void 0 : options.userId,
            sessionId: options === null || options === void 0 ? void 0 : options.sessionId,
            stack,
            recoverySuggestions: options === null || options === void 0 ? void 0 : options.recoverySuggestions,
            errorCode: options === null || options === void 0 ? void 0 : options.errorCode,
            context: options === null || options === void 0 ? void 0 : options.context
        }));
    }
    trackAuthError(message, error, userId, context) {
        this.errorWithContext(message, error, 'Auth', {
            category: 'authentication',
            severity: 'high',
            userId,
            recoverySuggestions: [
                'Check your internet connection',
                'Verify your email and password',
                'Try resetting your password',
                'Contact support if the issue persists'
            ],
            errorCode: 'AUTH_ERROR',
            context
        });
    }
    trackSecurityError(message, error, userId, context) {
        this.errorWithContext(message, error, 'Security', {
            category: 'security',
            severity: 'critical',
            userId,
            recoverySuggestions: [
                'Security violation detected',
                'Account temporarily locked',
                'Contact security team immediately',
                'Check for suspicious activity'
            ],
            errorCode: 'SECURITY_ERROR',
            context
        });
    }
    trackNetworkError(message, error, context) {
        this.errorWithContext(message, error, 'Network', {
            category: 'network',
            severity: 'medium',
            recoverySuggestions: [
                'Check your internet connection',
                'Try again in a few moments',
                'Contact support if issue persists'
            ],
            errorCode: 'NETWORK_ERROR',
            context
        });
    }
    trackDatabaseError(message, error, context) {
        this.errorWithContext(message, error, 'Database', {
            category: 'database',
            severity: 'high',
            recoverySuggestions: [
                'Database temporarily unavailable',
                'Try again in a few moments',
                'Contact support if issue persists'
            ],
            errorCode: 'DATABASE_ERROR',
            context
        });
    }
    // Specialized logging methods
    supabase(message, data) {
        this.info(`[Supabase] ${message}`, data, 'supabase');
    }
    auth(message, data) {
        this.info(`[Auth] ${message}`, data, 'auth');
    }
    api(message, data) {
        this.info(`[API] ${message}`, data, 'api');
    }
    database(message, data) {
        this.info(`[Database] ${message}`, data, 'database');
    }
    performance(message, data) {
        this.debug(`[Performance] ${message}`, data, 'performance');
    }
}
// =====================================================================
// üîß SINGLETON EXPORT
// =====================================================================
// Enhanced logger with error tracking capabilities
const loggerInstance = new Logger();
exports.logger = {
    debug: loggerInstance.debug.bind(loggerInstance),
    info: loggerInstance.info.bind(loggerInstance),
    warn: loggerInstance.warn.bind(loggerInstance),
    error: loggerInstance.error.bind(loggerInstance),
    // Enhanced error tracking methods
    errorWithContext: loggerInstance.errorWithContext.bind(loggerInstance),
    trackAuthError: loggerInstance.trackAuthError.bind(loggerInstance),
    trackSecurityError: loggerInstance.trackSecurityError.bind(loggerInstance),
    trackNetworkError: loggerInstance.trackNetworkError.bind(loggerInstance),
    trackDatabaseError: loggerInstance.trackDatabaseError.bind(loggerInstance),
    // Get error metrics
    getErrorMetrics: loggerInstance.getErrorMetrics.bind(loggerInstance),
    resetErrorMetrics: loggerInstance.resetErrorMetrics.bind(loggerInstance),
    // Specialized logging methods
    auth: (message, data) => loggerInstance.info(`[Auth] ${message}`, data, 'Auth'),
    supabase: (message, data) => loggerInstance.info(`[Supabase] ${message}`, data, 'Supabase'),
    performance: (message, data) => loggerInstance.info(`[Performance] ${message}`, data, 'Performance'),
};
// =====================================================================
// üîß HELPER FUNCTIONS
// =====================================================================
/**
 * Migration helper to replace console.log calls
 * Use this to gradually replace console.log throughout the codebase
 */
function safeLog(message, data, level = 'debug') {
    exports.logger[level](message, data);
}
/**
 * Error boundary logger
 */
function logError(error, context) {
    exports.logger.error(`Error in ${context || 'application'}`, {
        message: error.message,
        stack: error.stack,
        name: error.name
    }, context);
}
/**
 * Performance timing logger
 */
function logTiming(operation, startTime) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    exports.logger.performance(`${operation} completed in ${duration}ms`);
}
// =====================================================================
// üîÑ BACKWARD COMPATIBILITY - OLD LOGGER FUNCTIONS
// =====================================================================
// TODO: Gradually migrate these to use logger.auth(), logger.supabase(), etc.
/**
 * @deprecated Use logger.auth() instead
 */
function logAuth(message, data) {
    exports.logger.auth(message, data);
}
/**
 * @deprecated Use logger.supabase() instead
 */
function logSupabase(message, data) {
    exports.logger.supabase(message, data);
}
/**
 * @deprecated Use logger.info() or logger.debug() instead
 */
function logProfile(message, data) {
    exports.logger.info(`[Profile] ${message}`, data);
}
/**
 * @deprecated Use logger.performance() instead
 */
function logPerformance(metricName, value) {
    exports.logger.performance(`${metricName}: ${value}ms`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,