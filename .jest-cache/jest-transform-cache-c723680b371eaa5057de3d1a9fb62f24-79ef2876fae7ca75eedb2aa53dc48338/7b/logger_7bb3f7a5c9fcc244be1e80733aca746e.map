{"file":"/home/g/dev/orangecat/src/utils/logger.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/utils/logger.ts"],"sourcesContent":["/**\n * PRODUCTION-SAFE LOGGER WITH ERROR TRACKING\n *\n * Replaces console.log statements with proper logging\n * that's safe for production use and provides structured logging.\n *\n * ENHANCED: Comprehensive error tracking and monitoring\n * - Error categorization and severity levels\n * - Error rate monitoring and alerting\n * - User session error tracking\n * - Performance error tracking\n * - Error recovery suggestions\n *\n * Created: 2025-06-30\n * Purpose: Eliminate console.log statements and provide structured logging\n */\n\n// =====================================================================\n// 🎯 LOGGER TYPES\n// =====================================================================\n\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error'\n\ninterface LogEntry {\n  timestamp: string\n  level: LogLevel\n  message: string\n  data?: any\n  source?: string\n  category?: ErrorCategory\n  severity?: ErrorSeverity\n  userId?: string\n  sessionId?: string\n  userAgent?: string\n  url?: string\n  stack?: string\n  recoverySuggestions?: string[]\n  errorCode?: string\n  context?: Record<string, any>\n}\n\ntype ErrorCategory =\n  | 'authentication'\n  | 'authorization'\n  | 'validation'\n  | 'network'\n  | 'database'\n  | 'performance'\n  | 'security'\n  | 'user_input'\n  | 'system'\n  | 'unknown'\n\ntype ErrorSeverity = 'low' | 'medium' | 'high' | 'critical'\n\ninterface ErrorMetrics {\n  totalErrors: number\n  errorsByCategory: Record<ErrorCategory, number>\n  errorsBySeverity: Record<ErrorSeverity, number>\n  recentErrors: LogEntry[]\n  errorRate: number\n  lastErrorTime: number\n}\n\n// =====================================================================\n// 🔧 LOGGER CONFIGURATION\n// =====================================================================\n\nconst LOGGER_CONFIG = {\n  // Only log errors and warnings in production\n  productionLevel: 'warn' as LogLevel,\n  \n  // Log everything in development\n  developmentLevel: 'debug' as LogLevel,\n  \n  // Get current environment\n  get environment() {\n    return process.env.NODE_ENV || 'development'\n  },\n  \n  // Get active log level\n  get activeLevel() {\n    return this.environment === 'production' ? this.productionLevel : this.developmentLevel\n  }\n}\n\nconst LOG_LEVELS = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n}\n\n// =====================================================================\n// 🔧 LOGGER IMPLEMENTATION\n// =====================================================================\n\nclass Logger {\n  private errorMetrics: ErrorMetrics = {\n    totalErrors: 0,\n    errorsByCategory: {\n      authentication: 0,\n      authorization: 0,\n      validation: 0,\n      network: 0,\n      database: 0,\n      performance: 0,\n      security: 0,\n      user_input: 0,\n      system: 0,\n      unknown: 0\n    },\n    errorsBySeverity: {\n      low: 0,\n      medium: 0,\n      high: 0,\n      critical: 0\n    },\n    recentErrors: [],\n    errorRate: 0,\n    lastErrorTime: 0\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return LOG_LEVELS[level] >= LOG_LEVELS[LOGGER_CONFIG.activeLevel]\n  }\n\n  private formatLogEntry(\n    level: LogLevel,\n    message: string,\n    data?: any,\n    source?: string,\n    options?: {\n      category?: ErrorCategory\n      severity?: ErrorSeverity\n      userId?: string\n      sessionId?: string\n      url?: string\n      stack?: string\n      recoverySuggestions?: string[]\n      errorCode?: string\n      context?: Record<string, any>\n    }\n  ): LogEntry {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      data,\n      source,\n      category: options?.category,\n      severity: options?.severity,\n      userId: options?.userId,\n      sessionId: options?.sessionId,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : undefined,\n      url: typeof window !== 'undefined' ? window.location.href : undefined,\n      stack: options?.stack,\n      recoverySuggestions: options?.recoverySuggestions,\n      errorCode: options?.errorCode,\n      context: options?.context\n    }\n\n    // Track error metrics if this is an error\n    if (level === 'error' && options?.category) {\n      this.trackError(entry)\n    }\n\n    return entry\n  }\n\n  private trackError(entry: LogEntry): void {\n    this.errorMetrics.totalErrors++\n    this.errorMetrics.lastErrorTime = Date.now()\n\n    // Update category counts\n    if (entry.category) {\n      this.errorMetrics.errorsByCategory[entry.category]++\n    } else {\n      this.errorMetrics.errorsByCategory.unknown++\n    }\n\n    // Update severity counts\n    if (entry.severity) {\n      this.errorMetrics.errorsBySeverity[entry.severity]++\n    }\n\n    // Add to recent errors (keep last 100)\n    this.errorMetrics.recentErrors.unshift(entry)\n    if (this.errorMetrics.recentErrors.length > 100) {\n      this.errorMetrics.recentErrors.pop()\n    }\n\n    // Calculate error rate (errors per minute)\n    const timeWindow = 60000 // 1 minute\n    const recentErrors = this.errorMetrics.recentErrors.filter(\n      e => Date.now() - new Date(e.timestamp).getTime() < timeWindow\n    )\n    this.errorMetrics.errorRate = recentErrors.length\n\n    // Check for error rate thresholds and alert if needed\n    this.checkErrorThresholds()\n  }\n\n  private checkErrorThresholds(): void {\n    const { errorRate, errorsBySeverity } = this.errorMetrics\n\n    // Alert on high error rates\n    if (errorRate > 10) {\n      this.warn('High error rate detected', {\n        errorRate,\n        threshold: 10,\n        severity: 'high'\n      }, 'ErrorMonitoring')\n    }\n\n    // Alert on critical errors\n    if (errorsBySeverity.critical > 0) {\n      this.error('Critical errors detected', {\n        criticalCount: errorsBySeverity.critical,\n        recentErrors: this.errorMetrics.recentErrors.slice(0, 5)\n      }, 'ErrorMonitoring')\n    }\n  }\n\n  // Get current error metrics\n  getErrorMetrics(): ErrorMetrics {\n    return { ...this.errorMetrics }\n  }\n\n  // Reset error metrics (for testing)\n  resetErrorMetrics(): void {\n    this.errorMetrics = {\n      totalErrors: 0,\n      errorsByCategory: {\n        authentication: 0,\n        authorization: 0,\n        validation: 0,\n        network: 0,\n        database: 0,\n        performance: 0,\n        security: 0,\n        user_input: 0,\n        system: 0,\n        unknown: 0\n      },\n      errorsBySeverity: {\n        low: 0,\n        medium: 0,\n        high: 0,\n        critical: 0\n      },\n      recentErrors: [],\n      errorRate: 0,\n      lastErrorTime: 0\n    }\n  }\n\n  private output(entry: LogEntry): void {\n    const { timestamp, level, message, data, source } = entry\n\n    // Check if we're in a server environment (has process object)\n    const isServer = typeof process !== 'undefined' && process.stdout && process.stderr\n\n    // In production, use structured logging\n    if (LOGGER_CONFIG.environment === 'production') {\n      // Send to proper logging service in production\n      // For now, use console for critical errors only\n      if (level === 'error') {\n        // Use process.stderr.write to avoid console overrides (server only)\n        if (isServer) {\n          process.stderr.write(JSON.stringify(entry) + '\\n')\n        } else {\n          console.error(JSON.stringify(entry))\n        }\n      }\n      return\n    }\n\n    // Development logging with colors and formatting\n    const prefix = `[${timestamp}] ${level.toUpperCase()}`\n    const sourceInfo = source ? ` (${source})` : ''\n\n    // Use process.stdout/stderr to avoid console overrides (server only)\n    const logMessage = `${prefix}${sourceInfo}: ${message}${data ? ' ' + JSON.stringify(data) : ''}\\n`\n\n    if (isServer) {\n      switch (level) {\n        case 'debug':\n          process.stdout.write(`🔍 ${logMessage}`)\n          break\n        case 'info':\n          process.stdout.write(`ℹ️  ${logMessage}`)\n          break\n        case 'warn':\n          process.stdout.write(`⚠️  ${logMessage}`)\n          break\n        case 'error':\n          process.stderr.write(`❌ ${logMessage}`)\n          break\n      }\n    } else {\n      // Browser environment - use console methods with emojis\n      switch (level) {\n        case 'debug':\n          console.debug(`🔍 ${prefix}${sourceInfo}:`, message, data || '')\n          break\n        case 'info':\n          console.info(`ℹ️  ${prefix}${sourceInfo}:`, message, data || '')\n          break\n        case 'warn':\n          console.warn(`⚠️  ${prefix}${sourceInfo}:`, message, data || '')\n          break\n        case 'error':\n          console.error(`❌ ${prefix}${sourceInfo}:`, message, data || '')\n          break\n      }\n    }\n  }\n\n  debug(message: string, data?: any, source?: string): void {\n    if (!this.shouldLog('debug')) return\n    this.output(this.formatLogEntry('debug', message, data, source))\n  }\n\n  info(message: string, data?: any, source?: string): void {\n    if (!this.shouldLog('info')) return\n    this.output(this.formatLogEntry('info', message, data, source))\n  }\n\n  warn(message: string, data?: any, source?: string): void {\n    if (!this.shouldLog('warn')) return\n    this.output(this.formatLogEntry('warn', message, data, source))\n  }\n\n  error(message: string, data?: any, source?: string): void {\n    if (!this.shouldLog('error')) return\n    this.output(this.formatLogEntry('error', message, data, source))\n  }\n\n  // Enhanced error tracking methods\n  errorWithContext(\n    message: string,\n    error: Error | any,\n    source?: string,\n    options?: {\n      category?: ErrorCategory\n      severity?: ErrorSeverity\n      userId?: string\n      sessionId?: string\n      recoverySuggestions?: string[]\n      errorCode?: string\n      context?: Record<string, any>\n    }\n  ): void {\n    const stack = error?.stack || new Error().stack\n    const contextData = {\n      originalError: error?.message || String(error),\n      errorType: error?.name || 'Error',\n      ...data,\n      ...options?.context\n    }\n\n    this.output(this.formatLogEntry('error', message, contextData, source, {\n      category: options?.category || 'system',\n      severity: options?.severity || 'medium',\n      userId: options?.userId,\n      sessionId: options?.sessionId,\n      stack,\n      recoverySuggestions: options?.recoverySuggestions,\n      errorCode: options?.errorCode,\n      context: options?.context\n    }))\n  }\n\n  trackAuthError(\n    message: string,\n    error: any,\n    userId?: string,\n    context?: Record<string, any>\n  ): void {\n    this.errorWithContext(message, error, 'Auth', {\n      category: 'authentication',\n      severity: 'high',\n      userId,\n      recoverySuggestions: [\n        'Check your internet connection',\n        'Verify your email and password',\n        'Try resetting your password',\n        'Contact support if the issue persists'\n      ],\n      errorCode: 'AUTH_ERROR',\n      context\n    })\n  }\n\n  trackSecurityError(\n    message: string,\n    error: any,\n    userId?: string,\n    context?: Record<string, any>\n  ): void {\n    this.errorWithContext(message, error, 'Security', {\n      category: 'security',\n      severity: 'critical',\n      userId,\n      recoverySuggestions: [\n        'Security violation detected',\n        'Account temporarily locked',\n        'Contact security team immediately',\n        'Check for suspicious activity'\n      ],\n      errorCode: 'SECURITY_ERROR',\n      context\n    })\n  }\n\n  trackNetworkError(\n    message: string,\n    error: any,\n    context?: Record<string, any>\n  ): void {\n    this.errorWithContext(message, error, 'Network', {\n      category: 'network',\n      severity: 'medium',\n      recoverySuggestions: [\n        'Check your internet connection',\n        'Try again in a few moments',\n        'Contact support if issue persists'\n      ],\n      errorCode: 'NETWORK_ERROR',\n      context\n    })\n  }\n\n  trackDatabaseError(\n    message: string,\n    error: any,\n    context?: Record<string, any>\n  ): void {\n    this.errorWithContext(message, error, 'Database', {\n      category: 'database',\n      severity: 'high',\n      recoverySuggestions: [\n        'Database temporarily unavailable',\n        'Try again in a few moments',\n        'Contact support if issue persists'\n      ],\n      errorCode: 'DATABASE_ERROR',\n      context\n    })\n  }\n\n  // Specialized logging methods\n  supabase(message: string, data?: any): void {\n    this.info(`[Supabase] ${message}`, data, 'supabase')\n  }\n\n  auth(message: string, data?: any): void {\n    this.info(`[Auth] ${message}`, data, 'auth')\n  }\n\n  api(message: string, data?: any): void {\n    this.info(`[API] ${message}`, data, 'api')\n  }\n\n  database(message: string, data?: any): void {\n    this.info(`[Database] ${message}`, data, 'database')\n  }\n\n  performance(message: string, data?: any): void {\n    this.debug(`[Performance] ${message}`, data, 'performance')\n  }\n}\n\n// =====================================================================\n// 🔧 SINGLETON EXPORT\n// =====================================================================\n\n// Enhanced logger with error tracking capabilities\nconst loggerInstance = new Logger()\n\nexport const logger = {\n  debug: loggerInstance.debug.bind(loggerInstance),\n  info: loggerInstance.info.bind(loggerInstance),\n  warn: loggerInstance.warn.bind(loggerInstance),\n  error: loggerInstance.error.bind(loggerInstance),\n\n  // Enhanced error tracking methods\n  errorWithContext: loggerInstance.errorWithContext.bind(loggerInstance),\n  trackAuthError: loggerInstance.trackAuthError.bind(loggerInstance),\n  trackSecurityError: loggerInstance.trackSecurityError.bind(loggerInstance),\n  trackNetworkError: loggerInstance.trackNetworkError.bind(loggerInstance),\n  trackDatabaseError: loggerInstance.trackDatabaseError.bind(loggerInstance),\n\n  // Get error metrics\n  getErrorMetrics: loggerInstance.getErrorMetrics.bind(loggerInstance),\n  resetErrorMetrics: loggerInstance.resetErrorMetrics.bind(loggerInstance),\n\n  // Specialized logging methods\n  auth: (message: string, data?: any) => loggerInstance.info(`[Auth] ${message}`, data, 'Auth'),\n  supabase: (message: string, data?: any) => loggerInstance.info(`[Supabase] ${message}`, data, 'Supabase'),\n  performance: (message: string, data?: any) => loggerInstance.info(`[Performance] ${message}`, data, 'Performance'),\n}\n\n// =====================================================================\n// 🔧 HELPER FUNCTIONS\n// =====================================================================\n\n/**\n * Migration helper to replace console.log calls\n * Use this to gradually replace console.log throughout the codebase\n */\nexport function safeLog(message: string, data?: any, level: LogLevel = 'debug'): void {\n  logger[level](message, data)\n}\n\n/**\n * Error boundary logger\n */\nexport function logError(error: Error, context?: string): void {\n  logger.error(\n    `Error in ${context || 'application'}`, \n    {\n      message: error.message,\n      stack: error.stack,\n      name: error.name\n    },\n    context\n  )\n}\n\n/**\n * Performance timing logger\n */\nexport function logTiming(operation: string, startTime: number): void {\n  const endTime = Date.now()\n  const duration = endTime - startTime\n  logger.performance(`${operation} completed in ${duration}ms`)\n}\n\n// =====================================================================\n// 🔄 BACKWARD COMPATIBILITY - OLD LOGGER FUNCTIONS\n// =====================================================================\n// TODO: Gradually migrate these to use logger.auth(), logger.supabase(), etc.\n\n/**\n * @deprecated Use logger.auth() instead\n */\nexport function logAuth(message: string, data?: any): void {\n  logger.auth(message, data)\n}\n\n/**\n * @deprecated Use logger.supabase() instead\n */\nexport function logSupabase(message: string, data?: any): void {\n  logger.supabase(message, data)\n}\n\n/**\n * @deprecated Use logger.info() or logger.debug() instead\n */\nexport function logProfile(message: string, data?: any): void {\n  logger.info(`[Profile] ${message}`, data)\n}\n\n/**\n * @deprecated Use logger.performance() instead\n */\nexport function logPerformance(metricName: string, value: number): void {\n  logger.performance(`${metricName}: ${value}ms`)\n}\n\n// =====================================================================\n// 🔧 TYPE EXPORTS\n// =====================================================================\n\nexport type { ErrorCategory, ErrorSeverity, ErrorMetrics, LogEntry } "],"version":3}