ef4f8c478c36cf4f162040be94db7547
"use strict";
/**
 * PROFILE READER MODULE
 *
 * Created: 2025-01-09
 * Last Modified: 2025-01-09
 * Last Modified Summary: Extracted from profileService.ts for modular architecture - handles read operations
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileReader = void 0;
const client_1 = __importDefault(require("@/services/supabase/client"));
const logger_1 = require("@/utils/logger");
const mapper_1 = require("./mapper");
// =====================================================================
// ðŸ“– PROFILE RETRIEVAL OPERATIONS
// =====================================================================
class ProfileReader {
    /**
     * Get a complete profile with all scalable fields
     */
    static async getProfile(userId) {
        // Explicit check for empty/invalid user IDs
        if (!userId || typeof userId !== 'string' || !userId.trim()) {
            logger_1.logger.warn('ProfileReader.getProfile: Invalid or empty user ID provided', { userId });
            return null;
        }
        try {
            (0, logger_1.logProfile)('getProfile', { userId });
            const { data, error } = await client_1.default
                .from('profiles')
                .select('*')
                .eq('id', userId)
                .single();
            if (error) {
                if (error.code === 'PGRST116') {
                    logger_1.logger.info(`Profile not found for user: ${userId}`);
                    return null;
                }
                logger_1.logger.error('ProfileReader.getProfile error:', error);
                return null;
            }
            if (!data) {
                return null;
            }
            const profile = mapper_1.ProfileMapper.mapDatabaseToProfile(data);
            (0, logger_1.logProfile)('getProfile success', { userId, hasProfile: true });
            return profile;
        }
        catch (err) {
            logger_1.logger.error('ProfileReader.getProfile unexpected error:', err);
            return null;
        }
    }
    /**
     * Get multiple profiles with pagination and filtering
     */
    static async getProfiles(options = {}) {
        try {
            const { limit = 20, offset = 0, orderBy = 'created_at', orderDirection = 'desc' } = options;
            const { data, error } = await client_1.default
                .from('profiles')
                .select('*')
                .order(orderBy, { ascending: orderDirection === 'asc' })
                .range(offset, offset + limit - 1);
            if (error) {
                logger_1.logger.error('ProfileReader.getProfiles error:', { message: error.message, code: error.code });
                return [];
            }
            return (data === null || data === void 0 ? void 0 : data.map(profile => mapper_1.ProfileMapper.mapDatabaseToProfile(profile))) || [];
        }
        catch (err) {
            logger_1.logger.error('ProfileReader.getProfiles unexpected error:', err);
            return [];
        }
    }
    /**
     * Search profiles with basic text search
     */
    static async searchProfiles(searchTerm, limit = 20, offset = 0) {
        if (!(searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.trim())) {
            return [];
        }
        try {
            const { data, error } = await client_1.default
                .from('profiles')
                .select('*')
                .or(`username.ilike.%${searchTerm}%,full_name.ilike.%${searchTerm}%`)
                .order('created_at', { ascending: false })
                .range(offset, offset + limit - 1);
            if (error) {
                logger_1.logger.error('ProfileReader.searchProfiles error:', error);
                return [];
            }
            return (data === null || data === void 0 ? void 0 : data.map(profile => mapper_1.ProfileMapper.mapDatabaseToProfile(profile))) || [];
        }
        catch (err) {
            logger_1.logger.error('ProfileReader.searchProfiles unexpected error:', err);
            return [];
        }
    }
    /**
     * Get all profiles (admin function)
     */
    static async getAllProfiles() {
        try {
            const { data, error } = await client_1.default
                .from('profiles')
                .select('*')
                .order('created_at', { ascending: false });
            if (error) {
                logger_1.logger.error('ProfileReader.getAllProfiles error:', error);
                return [];
            }
            return (data === null || data === void 0 ? void 0 : data.map(profile => mapper_1.ProfileMapper.mapDatabaseToProfile(profile))) || [];
        }
        catch (err) {
            logger_1.logger.error('ProfileReader.getAllProfiles unexpected error:', err);
            return [];
        }
    }
    /**
     * Increment profile views (read-adjacent operation)
     */
    static async incrementProfileViews(userId) {
        if (!(userId === null || userId === void 0 ? void 0 : userId.trim()))
            return;
        try {
            // Get current view count
            const profile = await this.getProfile(userId);
            if (!profile)
                return;
            const currentViews = profile.profile_views || 0;
            // Update view count
            await client_1.default
                .from('profiles')
                .update({
                website: JSON.stringify(Object.assign(Object.assign({}, JSON.parse(profile.website || '{}')), { profile_views: currentViews + 1, last_viewed_at: new Date().toISOString() }))
            })
                .eq('id', userId);
        }
        catch (err) {
            logger_1.logger.error('ProfileReader.incrementProfileViews error:', err);
        }
    }
}
exports.ProfileReader = ProfileReader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,