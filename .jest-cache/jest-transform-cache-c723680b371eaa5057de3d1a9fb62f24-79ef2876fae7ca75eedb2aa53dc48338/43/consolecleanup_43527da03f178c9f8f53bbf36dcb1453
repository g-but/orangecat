844de7655c5a4a237ef268c7eb5a9b7f
"use strict";

/**
 * CONSOLE LOG CLEANUP UTILITY
 *
 * Security hardening: Remove all console.log statements for production
 * Prevents sensitive information disclosure in production logs
 *
 * Created: 2025-01-14
 * Last Modified: 2025-01-14
 * Last Modified Summary: Production security - console log removal
 */
/* istanbul ignore next */
function cov_28vomypchx() {
  var path = "/home/g/dev/orangecat/src/utils/console-cleanup.ts";
  var hash = "8d24d218f35d7ec39ded964148f59f8e96c427d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/g/dev/orangecat/src/utils/console-cleanup.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 85
        }
      },
      "2": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "3": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "4": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "5": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 72
        }
      },
      "6": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 33
        }
      },
      "7": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "8": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 73
        }
      },
      "9": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 34
        }
      },
      "10": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 68
        }
      },
      "11": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "12": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "13": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 55
        }
      },
      "14": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 63,
          column: 46
        }
      },
      "15": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 64,
          column: 71
        }
      },
      "16": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 111,
          column: 2
        }
      },
      "17": {
        start: {
          line: 116,
          column: 45
        },
        end: {
          line: 116,
          column: 70
        }
      },
      "18": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "19": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 130,
          column: 6
        }
      },
      "20": {
        start: {
          line: 135,
          column: 0
        },
        end: {
          line: 162,
          column: 2
        }
      },
      "21": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "22": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 42
        }
      },
      "23": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "24": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 71
        }
      },
      "25": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "26": {
        start: {
          line: 164,
          column: 0
        },
        end: {
          line: 167,
          column: 1
        }
      },
      "27": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 166,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 24
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 25
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 24
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 54
      },
      "4": {
        name: "auditConsoleUsage",
        decl: {
          start: {
            line: 115,
            column: 9
          },
          end: {
            line: 115,
            column: 26
          }
        },
        loc: {
          start: {
            line: 115,
            column: 29
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 115
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 139,
            column: 9
          },
          end: {
            line: 139,
            column: 10
          }
        },
        loc: {
          start: {
            line: 139,
            column: 22
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 139
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 10
          },
          end: {
            line: 147,
            column: 11
          }
        },
        loc: {
          start: {
            line: 147,
            column: 29
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 153,
            column: 14
          },
          end: {
            line: 153,
            column: 15
          }
        },
        loc: {
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 153
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 159,
            column: 11
          },
          end: {
            line: 159,
            column: 12
          }
        },
        loc: {
          start: {
            line: 159,
            column: 30
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 159
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: 29,
            column: 13
          },
          end: {
            line: 32,
            column: 9
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: 41,
            column: 13
          },
          end: {
            line: 43,
            column: 9
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "4": {
        loc: {
          start: {
            line: 164,
            column: 0
          },
          end: {
            line: 167,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 0
          },
          end: {
            line: 167,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "/home/g/dev/orangecat/src/utils/console-cleanup.ts",
      mappings: "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",
      names: [],
      sources: ["/home/g/dev/orangecat/src/utils/console-cleanup.ts"],
      sourcesContent: ["/**\n * CONSOLE LOG CLEANUP UTILITY\n * \n * Security hardening: Remove all console.log statements for production\n * Prevents sensitive information disclosure in production logs\n * \n * Created: 2025-01-14\n * Last Modified: 2025-01-14\n * Last Modified Summary: Production security - console log removal\n */\n\nimport { logger } from '@/utils/logger'\n\n/**\n * Production-safe console replacement\n * Replaces console.log with proper logger in production\n */\nexport class ProductionConsole {\n  private static isProduction = process.env.NODE_ENV === 'production'\n\n  /**\n   * Safe logging that uses proper logger in production\n   */\n  static log(...args: any[]): void {\n    if (this.isProduction) {\n      // In production, use proper logger instead of console.log\n      logger.info('Console output', { args }, 'Console')\n    } else {\n      // In development, allow console.log\n      console.log(...args)\n    }\n  }\n\n  /**\n   * Safe warning that uses proper logger in production\n   */\n  static warn(...args: any[]): void {\n    if (this.isProduction) {\n      logger.warn('Console warning', { args }, 'Console')\n    } else {\n      console.warn(...args)\n    }\n  }\n\n  /**\n   * Safe error logging (always use proper logger)\n   */\n  static error(...args: any[]): void {\n    logger.error('Console error', { args }, 'Console')\n  }\n\n  /**\n   * Initialize production console replacement\n   */\n  static initialize(): void {\n    if (this.isProduction) {\n      // Replace global console methods in production\n      global.console.log = this.log.bind(this)\n      global.console.warn = this.warn.bind(this)\n      // Keep console.error for critical issues\n    }\n  }\n}\n\n/**\n * List of console.log statements found in codebase that need attention\n */\nexport const CONSOLE_LOG_AUDIT = {\n  // Test files (acceptable - for test output)\n  testFiles: [\n    'src/utils/__tests__/bitcoinValidation.test.ts',\n    'src/app/api/__tests__/file-upload-security.test.ts',\n    'src/app/api/__tests__/profile-security-enhanced.test.ts',\n    'src/app/api/__tests__/profile-security.test.ts',\n    'src/app/api/__tests__/funding-security.test.ts',\n    'src/services/performance/performance-test.ts'\n  ],\n\n  // Development utilities (acceptable - for development)\n  devUtilities: [\n    'src/utils/dev-seed.ts',\n    'src/utils/debugUtils.ts',\n    'scripts/cleanup-branches.js',\n    'scripts/fix-profiles-schema.js',\n    'scripts/get_current_datetime.js',\n    'scripts/performance-check.js'\n  ],\n\n  // Production code (NEEDS FIXING)\n  productionCode: [\n    'src/components/AuthProvider.tsx',\n    'src/app/layout.tsx',\n    'src/app/auth/signout/route.ts',\n    'src/utils/monitoring.ts',\n    'src/utils/migrateLegacyDrafts.ts',\n    'supabase/functions/cors-proxy/index.ts'\n  ],\n\n  // Security assessment\n  securityRisk: {\n    high: [\n      'src/app/auth/signout/route.ts' // Auth-related logging\n    ],\n    medium: [\n      'src/components/AuthProvider.tsx', // User state logging\n      'src/app/layout.tsx' // Session logging\n    ],\n    low: [\n      'src/utils/monitoring.ts', // Already commented\n      'src/utils/migrateLegacyDrafts.ts', // Migration utility\n      'supabase/functions/cors-proxy/index.ts' // Edge function\n    ]\n  }\n}\n\n/**\n * Clean up console.log statements in production code\n */\nexport function auditConsoleUsage(): {\n  totalFound: number\n  productionRisk: number\n  highRisk: number\n  recommendations: string[]\n} {\n  const { productionCode, securityRisk } = CONSOLE_LOG_AUDIT\n  \n  const recommendations = [\n    'Replace console.log with logger.info() in production code',\n    'Remove sensitive data logging in authentication flows',\n    'Use conditional logging based on NODE_ENV',\n    'Implement proper log levels (info, warn, error)',\n    'Add log sanitization for user data',\n    'Configure log retention policies for production'\n  ]\n\n  return {\n    totalFound: productionCode.length,\n    productionRisk: productionCode.length,\n    highRisk: securityRisk.high.length,\n    recommendations\n  }\n}\n\n/**\n * Security-safe console replacement for specific use cases\n */\nexport const SafeConsole = {\n  /**\n   * Development-only logging\n   */\n  dev: (...args: any[]) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[DEV]', ...args)\n    }\n  },\n\n  /**\n   * Performance logging (safe for production)\n   */\n  perf: (message: string, data?: any) => {\n    logger.info(`Performance: ${message}`, data, 'Performance')\n  },\n\n  /**\n   * Security event logging (always use proper logger)\n   */\n  security: (message: string, data?: any) => {\n    logger.warn(`Security: ${message}`, data, 'Security')\n  },\n\n  /**\n   * Audit trail logging (always use proper logger)\n   */\n  audit: (message: string, data?: any) => {\n    logger.info(`Audit: ${message}`, data, 'Audit')\n  }\n}\n\n// Initialize production console replacement\nif (typeof window === 'undefined') {\n  // Server-side only\n  ProductionConsole.initialize()\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8d24d218f35d7ec39ded964148f59f8e96c427d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28vomypchx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28vomypchx();
cov_28vomypchx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28vomypchx().s[1]++;
exports.SafeConsole = exports.CONSOLE_LOG_AUDIT = exports.ProductionConsole = void 0;
/* istanbul ignore next */
cov_28vomypchx().s[2]++;
exports.auditConsoleUsage = auditConsoleUsage;
const logger_1 =
/* istanbul ignore next */
(cov_28vomypchx().s[3]++, require("@/utils/logger"));
/**
 * Production-safe console replacement
 * Replaces console.log with proper logger in production
 */
class ProductionConsole {
  /**
   * Safe logging that uses proper logger in production
   */
  static log(...args) {
    /* istanbul ignore next */
    cov_28vomypchx().f[0]++;
    cov_28vomypchx().s[4]++;
    if (this.isProduction) {
      /* istanbul ignore next */
      cov_28vomypchx().b[0][0]++;
      cov_28vomypchx().s[5]++;
      // In production, use proper logger instead of console.log
      logger_1.logger.info('Console output', {
        args
      }, 'Console');
    } else {
      /* istanbul ignore next */
      cov_28vomypchx().b[0][1]++;
      cov_28vomypchx().s[6]++;
      // In development, allow console.log
      console.log(...args);
    }
  }
  /**
   * Safe warning that uses proper logger in production
   */
  static warn(...args) {
    /* istanbul ignore next */
    cov_28vomypchx().f[1]++;
    cov_28vomypchx().s[7]++;
    if (this.isProduction) {
      /* istanbul ignore next */
      cov_28vomypchx().b[1][0]++;
      cov_28vomypchx().s[8]++;
      logger_1.logger.warn('Console warning', {
        args
      }, 'Console');
    } else {
      /* istanbul ignore next */
      cov_28vomypchx().b[1][1]++;
      cov_28vomypchx().s[9]++;
      console.warn(...args);
    }
  }
  /**
   * Safe error logging (always use proper logger)
   */
  static error(...args) {
    /* istanbul ignore next */
    cov_28vomypchx().f[2]++;
    cov_28vomypchx().s[10]++;
    logger_1.logger.error('Console error', {
      args
    }, 'Console');
  }
  /**
   * Initialize production console replacement
   */
  static initialize() {
    /* istanbul ignore next */
    cov_28vomypchx().f[3]++;
    cov_28vomypchx().s[11]++;
    if (this.isProduction) {
      /* istanbul ignore next */
      cov_28vomypchx().b[2][0]++;
      cov_28vomypchx().s[12]++;
      // Replace global console methods in production
      global.console.log = this.log.bind(this);
      /* istanbul ignore next */
      cov_28vomypchx().s[13]++;
      global.console.warn = this.warn.bind(this);
      // Keep console.error for critical issues
    } else
    /* istanbul ignore next */
    {
      cov_28vomypchx().b[2][1]++;
    }
  }
}
/* istanbul ignore next */
cov_28vomypchx().s[14]++;
exports.ProductionConsole = ProductionConsole;
/* istanbul ignore next */
cov_28vomypchx().s[15]++;
ProductionConsole.isProduction = process.env.NODE_ENV === 'production';
/**
 * List of console.log statements found in codebase that need attention
 */
/* istanbul ignore next */
cov_28vomypchx().s[16]++;
exports.CONSOLE_LOG_AUDIT = {
  // Test files (acceptable - for test output)
  testFiles: ['src/utils/__tests__/bitcoinValidation.test.ts', 'src/app/api/__tests__/file-upload-security.test.ts', 'src/app/api/__tests__/profile-security-enhanced.test.ts', 'src/app/api/__tests__/profile-security.test.ts', 'src/app/api/__tests__/funding-security.test.ts', 'src/services/performance/performance-test.ts'],
  // Development utilities (acceptable - for development)
  devUtilities: ['src/utils/dev-seed.ts', 'src/utils/debugUtils.ts', 'scripts/cleanup-branches.js', 'scripts/fix-profiles-schema.js', 'scripts/get_current_datetime.js', 'scripts/performance-check.js'],
  // Production code (NEEDS FIXING)
  productionCode: ['src/components/AuthProvider.tsx', 'src/app/layout.tsx', 'src/app/auth/signout/route.ts', 'src/utils/monitoring.ts', 'src/utils/migrateLegacyDrafts.ts', 'supabase/functions/cors-proxy/index.ts'],
  // Security assessment
  securityRisk: {
    high: ['src/app/auth/signout/route.ts' // Auth-related logging
    ],
    medium: ['src/components/AuthProvider.tsx',
    // User state logging
    'src/app/layout.tsx' // Session logging
    ],
    low: ['src/utils/monitoring.ts',
    // Already commented
    'src/utils/migrateLegacyDrafts.ts',
    // Migration utility
    'supabase/functions/cors-proxy/index.ts' // Edge function
    ]
  }
};
/**
 * Clean up console.log statements in production code
 */
function auditConsoleUsage() {
  /* istanbul ignore next */
  cov_28vomypchx().f[4]++;
  const {
    productionCode,
    securityRisk
  } =
  /* istanbul ignore next */
  (cov_28vomypchx().s[17]++, exports.CONSOLE_LOG_AUDIT);
  const recommendations =
  /* istanbul ignore next */
  (cov_28vomypchx().s[18]++, ['Replace console.log with logger.info() in production code', 'Remove sensitive data logging in authentication flows', 'Use conditional logging based on NODE_ENV', 'Implement proper log levels (info, warn, error)', 'Add log sanitization for user data', 'Configure log retention policies for production']);
  /* istanbul ignore next */
  cov_28vomypchx().s[19]++;
  return {
    totalFound: productionCode.length,
    productionRisk: productionCode.length,
    highRisk: securityRisk.high.length,
    recommendations
  };
}
/**
 * Security-safe console replacement for specific use cases
 */
/* istanbul ignore next */
cov_28vomypchx().s[20]++;
exports.SafeConsole = {
  /**
   * Development-only logging
   */
  dev: (...args) => {
    /* istanbul ignore next */
    cov_28vomypchx().f[5]++;
    cov_28vomypchx().s[21]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_28vomypchx().b[3][0]++;
      cov_28vomypchx().s[22]++;
      console.log('[DEV]', ...args);
    } else
    /* istanbul ignore next */
    {
      cov_28vomypchx().b[3][1]++;
    }
  },
  /**
   * Performance logging (safe for production)
   */
  perf: (message, data) => {
    /* istanbul ignore next */
    cov_28vomypchx().f[6]++;
    cov_28vomypchx().s[23]++;
    logger_1.logger.info(`Performance: ${message}`, data, 'Performance');
  },
  /**
   * Security event logging (always use proper logger)
   */
  security: (message, data) => {
    /* istanbul ignore next */
    cov_28vomypchx().f[7]++;
    cov_28vomypchx().s[24]++;
    logger_1.logger.warn(`Security: ${message}`, data, 'Security');
  },
  /**
   * Audit trail logging (always use proper logger)
   */
  audit: (message, data) => {
    /* istanbul ignore next */
    cov_28vomypchx().f[8]++;
    cov_28vomypchx().s[25]++;
    logger_1.logger.info(`Audit: ${message}`, data, 'Audit');
  }
};
// Initialize production console replacement
/* istanbul ignore next */
cov_28vomypchx().s[26]++;
if (typeof window === 'undefined') {
  /* istanbul ignore next */
  cov_28vomypchx().b[4][0]++;
  cov_28vomypchx().s[27]++;
  // Server-side only
  ProductionConsole.initialize();
} else
/* istanbul ignore next */
{
  cov_28vomypchx().b[4][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,