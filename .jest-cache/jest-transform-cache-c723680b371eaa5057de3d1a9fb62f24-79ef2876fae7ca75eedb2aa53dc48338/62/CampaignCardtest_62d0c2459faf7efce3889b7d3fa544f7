707135d78b749f0e26c49088aa96b893
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the icons
jest.mock('lucide-react', () => ({
    Handshake: ({ className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "handshake-icon", className: className }),
    Users: ({ className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "users-icon", className: className }),
    Target: ({ className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "target-icon", className: className }),
    Settings: ({ className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "settings-icon", className: className }),
    BarChart3: ({ className }) => (0, jsx_runtime_1.jsx)("div", { "data-testid": "barchart-icon", className: className })
}));
// Mock the ComingSoonModal
jest.mock('@/components/ui/ComingSoonModal', () => {
    return function MockComingSoonModal({ isOpen, onClose, featureName, timeline, learnMoreUrl }) {
        if (!isOpen)
            return null;
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "coming-soon-modal", children: [(0, jsx_runtime_1.jsxs)("div", { children: ["Feature: ", featureName] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Timeline: ", timeline] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Learn More: ", learnMoreUrl] }), (0, jsx_runtime_1.jsx)("button", { onClick: onClose, children: "Close" })] }));
    };
});
/**
 * CampaignCard Component Tests
 *
 * Testing critical fundraising display component for the Bitcoin platform
 * Handles financial data, progress tracking, and campaign management actions
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const CampaignCard_1 = __importDefault(require("../CampaignCard"));
describe('ðŸ’³ CampaignCard Component - Bitcoin Fundraising Display', () => {
    // Test data for different campaign scenarios
    const activeCampaign = {
        id: 1,
        title: 'Bitcoin Education Initiative',
        type: 'Education',
        status: 'Active',
        raised: 150000,
        goal: 250000,
        supporters: 42,
        daysLeft: 15,
        progress: 60,
        color: 'bg-blue-100 text-blue-700'
    };
    const completedCampaign = {
        id: 2,
        title: 'Lightning Network Workshop',
        type: 'Technology',
        status: 'Completed',
        raised: 100000,
        goal: 100000,
        supporters: 28,
        daysLeft: 0,
        progress: 100,
        color: 'bg-green-100 text-green-700'
    };
    const draftCampaign = {
        id: 3,
        title: 'Bitcoin Community Meetup',
        type: 'Community',
        status: 'Draft',
        raised: 0,
        goal: 50000,
        supporters: 0,
        daysLeft: 30,
        progress: 0,
        color: 'bg-purple-100 text-purple-700'
    };
    describe('âœ… Basic Campaign Information Display', () => {
        test('should render campaign title correctly', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText('Bitcoin Education Initiative')).toBeInTheDocument();
        });
        test('should display campaign type with correct styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const typeElement = react_2.screen.getByText('Education');
            expect(typeElement).toBeInTheDocument();
            expect(typeElement).toHaveClass('bg-blue-100', 'text-blue-700');
        });
        test('should show handshake icon for campaigns', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByTestId('handshake-icon')).toBeInTheDocument();
        });
        test('should display campaign status with correct color coding', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const statusElement = react_2.screen.getByText('Active');
            expect(statusElement).toBeInTheDocument();
            expect(statusElement).toHaveClass('bg-green-100', 'text-green-700');
        });
    });
    describe('ðŸ’° Financial Data Display - Critical for Bitcoin Platform', () => {
        test('should display raised amount in sats with proper formatting', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText("150,000 sats")).toBeInTheDocument();
        });
        test('should display goal amount in sats with proper formatting', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText("250,000 sats")).toBeInTheDocument();
        });
        test('should handle large amounts with proper locale formatting', () => {
            const largeCampaign = Object.assign(Object.assign({}, activeCampaign), { raised: 1500000, goal: 2000000 });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: largeCampaign }));
            expect(react_2.screen.getByText("1,500,000 sats")).toBeInTheDocument();
            expect(react_2.screen.getByText("2,000,000 sats")).toBeInTheDocument();
        });
        test('should display zero amounts correctly', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: draftCampaign }));
            expect(react_2.screen.getByText('0 sats')).toBeInTheDocument();
        });
        test('should show supporters count', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText('42')).toBeInTheDocument();
        });
        test('should handle zero supporters', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: draftCampaign }));
            const supportersValue = react_2.screen.getAllByText('0').find(el => { var _a, _b; return (_b = (_a = el.closest('div')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.includes('Supporters'); });
            expect(supportersValue).toBeInTheDocument();
        });
    });
    describe('ðŸ“Š Progress Tracking - Campaign Success Metrics', () => {
        test('should display progress percentage', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText('60%')).toBeInTheDocument();
        });
        test('should render progress bar with correct width', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const progressBar = document.querySelector('.bg-teal-600');
            expect(progressBar).toHaveStyle({ width: '60%' });
        });
        test('should handle 100% completion', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: completedCampaign }));
            expect(react_2.screen.getByText('100%')).toBeInTheDocument();
            const progressBar = document.querySelector('.bg-teal-600');
            expect(progressBar).toHaveStyle({ width: '100%' });
        });
        test('should handle 0% progress', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: draftCampaign }));
            expect(react_2.screen.getByText('0%')).toBeInTheDocument();
            const progressBar = document.querySelector('.bg-teal-600');
            expect(progressBar).toHaveStyle({ width: '0%' });
        });
        test('should show days left for active campaigns', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText('15')).toBeInTheDocument();
        });
        test('should show "Completed" for finished campaigns', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: completedCampaign }));
            const statusElements = react_2.screen.getAllByText('Completed');
            expect(statusElements).toHaveLength(2); // Should appear in both status badge and days left
        });
    });
    describe('ðŸŽ¨ Status Color Coding - UX Enhancement', () => {
        test('should apply correct styling for Active status', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const statusElement = react_2.screen.getByText('Active');
            expect(statusElement).toHaveClass('bg-green-100', 'text-green-700');
        });
        test('should apply correct styling for Completed status', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: completedCampaign }));
            const statusElements = react_2.screen.getAllByText('Completed');
            const statusElement = statusElements.find(el => el.className.includes('px-2 py-1'));
            expect(statusElement).toHaveClass('bg-blue-100', 'text-blue-700');
        });
        test('should apply correct styling for Draft status', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: draftCampaign }));
            const statusElement = react_2.screen.getByText('Draft');
            expect(statusElement).toHaveClass('bg-gray-100', 'text-gray-700');
        });
    });
    describe('ðŸ”„ Interactive Elements - Campaign Management', () => {
        test('should render Analytics button with icon', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText('Analytics')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('barchart-icon')).toBeInTheDocument();
        });
        test('should render Manage button with icon', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByText('Manage')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('settings-icon')).toBeInTheDocument();
        });
        test('should open modal when Analytics button is clicked', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const analyticsButton = react_2.screen.getByText('Analytics');
            react_2.fireEvent.click(analyticsButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByTestId('coming-soon-modal')).toBeInTheDocument();
                expect(react_2.screen.getByText('Feature: Advanced Fundraising')).toBeInTheDocument();
                expect(react_2.screen.getByText('Timeline: Q1 2025')).toBeInTheDocument();
                expect(react_2.screen.getByText('Learn More: /fundraising')).toBeInTheDocument();
            });
        });
        test('should open modal when Manage button is clicked', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const manageButton = react_2.screen.getByText('Manage');
            react_2.fireEvent.click(manageButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByTestId('coming-soon-modal')).toBeInTheDocument();
            });
        });
        test('should close modal when close button is clicked', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            react_2.fireEvent.click(react_2.screen.getByText('Analytics'));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByTestId('coming-soon-modal')).toBeInTheDocument();
            });
            react_2.fireEvent.click(react_2.screen.getByText('Close'));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByTestId('coming-soon-modal')).not.toBeInTheDocument();
            });
        });
    });
    describe('ðŸŽ¨ Visual Design & Animations', () => {
        test('should have hover shadow effect', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const card = document.querySelector('.hover\\:shadow-md');
            expect(card).toBeInTheDocument();
            expect(card).toHaveClass('transition-shadow');
        });
        test('should have gradient background for icon', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const iconContainer = document.querySelector('.bg-gradient-to-r');
            expect(iconContainer).toBeInTheDocument();
            expect(iconContainer).toHaveClass('from-teal-100', 'to-cyan-100');
        });
        test('should have progress bar animation classes', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const progressBar = document.querySelector('.bg-teal-600');
            expect(progressBar).toHaveClass('transition-all', 'duration-300');
        });
    });
    describe('â™¿ Accessibility & Semantic Structure', () => {
        test('should have proper heading structure', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            const heading = react_2.screen.getByRole('heading', { level: 3 });
            expect(heading).toHaveTextContent('Bitcoin Education Initiative');
        });
        test('should have accessible button labels', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            expect(react_2.screen.getByRole('button', { name: /Analytics/ })).toBeInTheDocument();
            expect(react_2.screen.getByRole('button', { name: /Manage/ })).toBeInTheDocument();
        });
        test('should use semantic elements for data display', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: activeCampaign }));
            // Check that financial data is properly structured
            expect(react_2.screen.getByText('Raised')).toBeInTheDocument();
            expect(react_2.screen.getByText('Goal')).toBeInTheDocument();
            expect(react_2.screen.getByText('Supporters')).toBeInTheDocument();
            expect(react_2.screen.getByText('Progress')).toBeInTheDocument();
        });
    });
    describe('ðŸ’¼ Real-world Campaign Scenarios', () => {
        test('should handle new campaign (just started)', () => {
            const newCampaign = Object.assign(Object.assign({}, activeCampaign), { raised: 1000, progress: 1, supporters: 1 });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: newCampaign }));
            expect(react_2.screen.getByText("1,000 sats")).toBeInTheDocument();
            expect(react_2.screen.getByText('1%')).toBeInTheDocument();
            expect(react_2.screen.getByText('1')).toBeInTheDocument();
        });
        test('should handle nearly completed campaign', () => {
            const nearlyComplete = Object.assign(Object.assign({}, activeCampaign), { raised: 245000, progress: 98, daysLeft: 1 });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: nearlyComplete }));
            expect(react_2.screen.getByText('245,000 sats')).toBeInTheDocument();
            expect(react_2.screen.getByText('98%')).toBeInTheDocument();
            expect(react_2.screen.getByText('1')).toBeInTheDocument();
        });
        test('should handle overfunded campaign', () => {
            const overfunded = Object.assign(Object.assign({}, activeCampaign), { raised: 300000, progress: 120 });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: overfunded }));
            expect(react_2.screen.getByText('300,000 sats')).toBeInTheDocument();
            expect(react_2.screen.getByText('120%')).toBeInTheDocument();
        });
        test('should handle long campaign titles', () => {
            const longTitle = Object.assign(Object.assign({}, activeCampaign), { title: 'Very Long Campaign Title That Should Still Display Properly In The Card Layout' });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: longTitle }));
            expect(react_2.screen.getByText('Very Long Campaign Title That Should Still Display Properly In The Card Layout')).toBeInTheDocument();
        });
        test('should handle different campaign types', () => {
            const techCampaign = Object.assign(Object.assign({}, activeCampaign), { type: 'Technology', color: 'bg-purple-100 text-purple-700' });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: techCampaign }));
            const typeElement = react_2.screen.getByText('Technology');
            expect(typeElement).toHaveClass('bg-purple-100', 'text-purple-700');
        });
    });
    describe('ðŸ”§ Error Handling & Edge Cases', () => {
        test('should handle missing or undefined progress', () => {
            const noProg = Object.assign(Object.assign({}, activeCampaign), { progress: undefined });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: noProg }));
            // Should not crash and show 0% or handle gracefully
            const progressBar = document.querySelector('.bg-teal-600');
            expect(progressBar).toBeInTheDocument();
        });
        test('should handle negative days left', () => {
            const overdue = Object.assign(Object.assign({}, activeCampaign), { daysLeft: -5 });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: overdue }));
            expect(react_2.screen.getByText('Completed')).toBeInTheDocument();
        });
        test('should handle very large numbers', () => {
            const hugeCampaign = Object.assign(Object.assign({}, activeCampaign), { raised: 999999999, goal: 1000000000, supporters: 10000 });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(CampaignCard_1.default, { campaign: hugeCampaign }));
            expect(react_2.screen.getByText('999,999,999 sats')).toBeInTheDocument();
            expect(react_2.screen.getByText('1,000,000,000 sats')).toBeInTheDocument();
            expect(react_2.screen.getByText('10,000')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,