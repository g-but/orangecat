{"file":"/home/g/dev/orangecat/src/app/api/__tests__/funding-security.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/app/api/__tests__/funding-security.test.ts"],"sourcesContent":["/**\n * Funding API Security Vulnerability Analysis\n * \n * This test suite documents critical security flaws in the funding API\n * that pose immediate risks to Bitcoin transaction security and user data.\n */\n\ndescribe('🚨 Funding API Security Vulnerability Assessment', () => {\n  describe('CRITICAL VULNERABILITY 1: Unauthenticated Transaction Creation', () => {\n    test('documents missing authentication in POST /api/funding', () => {\n      // ANALYSIS: The funding API allows ANY user to create transactions\n      const currentCode = `\n        export async function POST(request: Request) {\n          try {\n            const { fundingPageId, amount, currency, paymentMethod } = await request.json();\n            const supabase = createServerClient();\n            \n            // ❌ MISSING: Authentication check\n            // ❌ ANY anonymous user can create Bitcoin transactions!\n            \n            const { data, error } = await supabase\n              .from('transactions')\n              .insert({\n                funding_page_id: fundingPageId,\n                amount,\n                currency,\n                payment_method: paymentMethod,\n                status: 'pending'\n              })\n      `\n\n      // Security Impact Assessment\n      const securityImpact = {\n        severity: 'CRITICAL',\n        impact: 'Financial',\n        exploitability: 'Trivial',\n        risks: [\n          'Anonymous users can create fake Bitcoin transactions',\n          'Spam attacks on transaction database',\n          'False funding records',\n          'DoS through transaction flooding'\n        ]\n      }\n\n      expect(securityImpact.severity).toBe('CRITICAL')\n      expect(securityImpact.risks).toHaveLength(4)\n\n      console.warn('🚨 CRITICAL SECURITY FLAW: No authentication required for transaction creation!')\n      console.warn('Anyone can create Bitcoin transactions without being logged in!')\n    })\n\n    test('provides secure implementation fix', () => {\n      const secureImplementation = `\n        export async function POST(request: Request) {\n          try {\n            const supabase = createServerClient();\n            \n            // ✅ REQUIRED FIX: Add authentication\n            const { data: { user }, error: userError } = await supabase.auth.getUser();\n            if (!user || userError) {\n              return NextResponse.json(\n                { error: 'Authentication required' },\n                { status: 401 }\n              );\n            }\n            \n            const { fundingPageId, amount, currency, paymentMethod } = await request.json();\n            // ... continue with authenticated user\n      `\n\n      expect(secureImplementation).toContain('supabase.auth.getUser()')\n      expect(secureImplementation).toContain('Authentication required')\n      \n      console.log('✅ SECURITY FIX: Add authentication check before processing transactions')\n    })\n  })\n\n  describe('CRITICAL VULNERABILITY 2: Unauthorized Data Access', () => {\n    test('documents authorization bypass in GET /api/funding', () => {\n      const currentCode = `\n        export async function GET(request: Request) {\n          const { searchParams } = new URL(request.url);\n          const userId = searchParams.get('userId');\n          \n          // ❌ MISSING: Ownership verification\n          // ❌ ANY user can access ANY other user's funding data!\n          \n          let query = supabase\n            .from('funding_pages')\n            .select('*');\n            \n          if (userId) {\n            query = query.eq('user_id', userId); // No verification!\n          }\n      `\n\n      const privacyRisks = [\n        'Users can access competitors\\' funding information',\n        'Private funding goals exposed',\n        'Bitcoin addresses leaked',\n        'Business strategy intelligence theft'\n      ]\n\n      expect(privacyRisks).toHaveLength(4)\n      \n      console.warn('🚨 PRIVACY BREACH: Users can access other users\\' private funding data!')\n      privacyRisks.forEach(risk => console.warn(`  - ${risk}`))\n    })\n\n    test('provides authorization fix', () => {\n      const secureAccess = `\n        export async function GET(request: Request) {\n          const supabase = createServerClient();\n          \n          // ✅ REQUIRED FIX: Verify user authentication\n          const { data: { user }, error: userError } = await supabase.auth.getUser();\n          if (!user) {\n            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n          }\n          \n          const { searchParams } = new URL(request.url);\n          const requestedUserId = searchParams.get('userId');\n          \n          // ✅ REQUIRED FIX: Verify ownership\n          if (requestedUserId && requestedUserId !== user.id) {\n            return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n          }\n          \n          // Only return current user's data\n          const query = supabase\n            .from('funding_pages')\n            .select('*')\n            .eq('user_id', user.id);\n      `\n\n      expect(secureAccess).toContain('requestedUserId !== user.id')\n      \n      console.log('✅ AUTHORIZATION FIX: Verify user owns requested data')\n    })\n  })\n\n  describe('HIGH VULNERABILITY 3: Input Validation Failures', () => {\n    test('documents missing financial input validation', () => {\n      const dangerousInputs = [\n        { input: { amount: -50000 }, attack: 'Negative amount injection' },\n        { input: { amount: 0 }, attack: 'Zero amount bypass' },\n        { input: { amount: '∞' }, attack: 'Infinity injection' },\n        { input: { amount: 'DROP TABLE transactions' }, attack: 'SQL injection attempt' },\n        { input: { currency: 'MONOPOLY_MONEY' }, attack: 'Invalid currency' },\n        { input: { paymentMethod: '<script>steal()</script>' }, attack: 'XSS injection' }\n      ]\n\n      dangerousInputs.forEach(({ input, attack }) => {\n        console.warn(`🚨 VALIDATION MISSING: ${attack} - ${JSON.stringify(input)}`)\n      })\n\n      expect(dangerousInputs).toHaveLength(6)\n      \n      console.warn('Current API accepts ALL these dangerous inputs without validation!')\n    })\n\n    test('provides comprehensive input validation fix', () => {\n      const secureValidation = `\n        // ✅ REQUIRED FIX: Comprehensive input validation\n        const { fundingPageId, amount, currency, paymentMethod } = await request.json();\n        \n        // Validate amount\n        if (typeof amount !== 'number' || amount <= 0) {\n          return NextResponse.json({ error: 'Amount must be positive number' }, { status: 400 });\n        }\n        \n        if (amount > 21000000 * 100000000) { // Max Bitcoin in satoshis\n          return NextResponse.json({ error: 'Amount exceeds maximum' }, { status: 400 });\n        }\n        \n        // Validate currency\n        const validCurrencies = ['BTC', 'sats'];\n        if (!validCurrencies.includes(currency)) {\n          return NextResponse.json({ error: 'Invalid currency' }, { status: 400 });\n        }\n        \n        // Validate payment method\n        const validMethods = ['bitcoin', 'lightning'];\n        if (!validMethods.includes(paymentMethod)) {\n          return NextResponse.json({ error: 'Invalid payment method' }, { status: 400 });\n        }\n        \n        // Validate funding page ID format\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n        if (!uuidRegex.test(fundingPageId)) {\n          return NextResponse.json({ error: 'Invalid funding page ID' }, { status: 400 });\n        }\n      `\n\n      expect(secureValidation).toContain('amount > 0')\n      expect(secureValidation).toContain('validCurrencies.includes')\n      \n      console.log('✅ INPUT VALIDATION FIX: Validate all financial inputs')\n    })\n  })\n\n  describe('MEDIUM VULNERABILITY 4: Information Disclosure', () => {\n    test('documents error message information leakage', () => {\n      const currentErrorHandling = `\n        if (error) {\n          return NextResponse.json(\n            { error: error.message }, // ❌ EXPOSES INTERNAL DETAILS\n            { status: 400 }\n          );\n        }\n      `\n\n      const leakageRisks = [\n        'Database schema information',\n        'Internal server paths',\n        'Connection string details',\n        'SQL constraint names'\n      ]\n\n      expect(leakageRisks).toHaveLength(4)\n      \n      console.warn('🚨 INFO DISCLOSURE: Raw database errors exposed to users!')\n      leakageRisks.forEach(risk => console.warn(`  - ${risk} could be leaked`))\n    })\n\n    test('provides secure error handling fix', () => {\n      const secureErrorHandling = `\n        // ✅ REQUIRED FIX: Sanitized error handling\n        if (error) {\n          console.error('Database error:', error); // Log internally only\n          \n          return NextResponse.json(\n            { error: 'Transaction could not be processed' }, // Generic message\n            { status: 400 }\n          );\n        }\n      `\n\n      expect(secureErrorHandling).toContain('console.error')\n      expect(secureErrorHandling).toContain('Generic message')\n      \n      console.log('✅ ERROR HANDLING FIX: Sanitize error messages to users')\n    })\n  })\n\n  describe('HIGH VULNERABILITY 5: Missing Security Controls', () => {\n    test('documents missing rate limiting and abuse protection', () => {\n      const missingControls = [\n        'Rate limiting on transaction creation',\n        'Request size limits',\n        'User session validation',\n        'CAPTCHA for high-value transactions',\n        'Suspicious activity monitoring',\n        'IP-based abuse detection'\n      ]\n\n      missingControls.forEach(control => {\n        console.warn(`🚨 MISSING: ${control}`)\n      })\n\n      expect(missingControls).toHaveLength(6)\n      \n      console.warn('These missing controls allow for API abuse and DoS attacks!')\n    })\n\n    test('provides comprehensive security enhancement plan', () => {\n      const securityEnhancements = `\n        // ✅ REQUIRED: Rate limiting middleware\n        const rateLimiter = rateLimit({\n          windowMs: 15 * 60 * 1000, // 15 minutes\n          max: 10, // 10 transactions per window\n          message: 'Too many transaction attempts'\n        });\n        \n        // ✅ REQUIRED: Request size limiting\n        const maxRequestSize = 1024; // 1KB limit\n        \n        // ✅ REQUIRED: Security headers\n        response.headers.set('X-Content-Type-Options', 'nosniff');\n        response.headers.set('X-Frame-Options', 'DENY');\n        response.headers.set('X-XSS-Protection', '1; mode=block');\n        \n        // ✅ REQUIRED: Activity monitoring\n        await logTransactionAttempt(user.id, amount, timestamp);\n      `\n\n      expect(securityEnhancements).toContain('rateLimit')\n      expect(securityEnhancements).toContain('X-Content-Type-Options')\n      \n      console.log('✅ SECURITY ENHANCEMENT PLAN: Comprehensive protection strategy')\n    })\n  })\n\n  describe('📊 VULNERABILITY IMPACT SUMMARY', () => {\n    test('calculates total security risk score', () => {\n      const vulnerabilities = [\n        { name: 'Unauthenticated Transaction Creation', severity: 10, exploitability: 10 },\n        { name: 'Unauthorized Data Access', severity: 9, exploitability: 10 },\n        { name: 'Input Validation Failures', severity: 8, exploitability: 8 },\n        { name: 'Information Disclosure', severity: 6, exploitability: 7 },\n        { name: 'Missing Security Controls', severity: 7, exploitability: 9 }\n      ]\n\n      const totalRiskScore = vulnerabilities.reduce((sum, vuln) => \n        sum + (vuln.severity * vuln.exploitability), 0\n      )\n\n      const maxPossibleScore = vulnerabilities.length * 10 * 10\n\n      console.warn('🚨 SECURITY RISK ASSESSMENT:')\n      vulnerabilities.forEach(vuln => {\n        console.warn(`  ${vuln.name}: ${vuln.severity * vuln.exploitability}/100`)\n      })\n      console.warn(`TOTAL RISK SCORE: ${totalRiskScore}/${maxPossibleScore}`)\n      console.warn(`RISK LEVEL: ${totalRiskScore > 400 ? 'EXTREME' : 'HIGH'}`)\n\n      expect(totalRiskScore).toBeGreaterThan(400) // Should be extreme risk\n      expect(vulnerabilities).toHaveLength(5)\n    })\n  })\n}) "],"version":3}