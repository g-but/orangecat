{"version":3,"names":["cov_18gzpiqqrx","actualCoverage","s","exports","createErrorResponse","createSuccessResponse","withErrorHandling","server_1","require","logger_1","ErrorTypes","AUTHENTICATION_REQUIRED","AUTHORIZATION_FAILED","VALIDATION_ERROR","NOT_FOUND","RATE_LIMIT_EXCEEDED","INTERNAL_SERVER_ERROR","BAD_REQUEST","CONFLICT","FILE_TOO_LARGE","UNSUPPORTED_MEDIA_TYPE","HttpStatus","OK","CREATED","ACCEPTED","NO_CONTENT","UNAUTHORIZED","FORBIDDEN","PAYLOAD_TOO_LARGE","RATE_LIMITED","SERVICE_UNAVAILABLE","message","status","type","details","f","responseData","error","timestamp","Date","toISOString","b","NextResponse","json","data","meta","success","undefined","ApiResponses","authenticationRequired","authorizationFailed","validationError","badRequest","notFound","resource","conflict","rateLimitExceeded","internalServerError","serviceUnavailable","fileTooLarge","maxSize","unsupportedMediaType","supportedTypes","join","created","accepted","noContent","operation","errorMessage","logger","stack","name","code"],"sources":["/home/g/dev/orangecat/src/lib/api/responses.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { logger } from '@/utils/logger'\n\n/**\n * Standardized API Response Helpers\n * \n * Eliminates DRY violations by providing consistent error and success responses.\n * Used across all API routes for consistent response formatting.\n * \n * ♻️ REFACTORED: Eliminates ~35 instances of similar error responses\n */\n\n// Standard error types\nexport const ErrorTypes = {\n  AUTHENTICATION_REQUIRED: 'AUTHENTICATION_REQUIRED',\n  AUTHORIZATION_FAILED: 'AUTHORIZATION_FAILED',\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  NOT_FOUND: 'NOT_FOUND',\n  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',\n  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',\n  BAD_REQUEST: 'BAD_REQUEST',\n  CONFLICT: 'CONFLICT',\n  FILE_TOO_LARGE: 'FILE_TOO_LARGE',\n  UNSUPPORTED_MEDIA_TYPE: 'UNSUPPORTED_MEDIA_TYPE'\n} as const\n\n// Standard HTTP status codes\nexport const HttpStatus = {\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  CONFLICT: 409,\n  PAYLOAD_TOO_LARGE: 413,\n  UNSUPPORTED_MEDIA_TYPE: 415,\n  RATE_LIMITED: 429,\n  INTERNAL_SERVER_ERROR: 500,\n  SERVICE_UNAVAILABLE: 503\n} as const\n\ninterface ErrorResponseData {\n  error: string\n  type?: string\n  details?: any\n  timestamp?: string\n  requestId?: string\n}\n\ninterface SuccessResponseData {\n  success?: boolean\n  data?: any\n  message?: string\n  meta?: any\n  timestamp?: string\n}\n\n/**\n * Create standardized error response\n */\nexport function createErrorResponse(\n  message: string,\n  status: number,\n  type?: string,\n  details?: any\n): NextResponse {\n  const responseData: ErrorResponseData = {\n    error: message,\n    timestamp: new Date().toISOString()\n  }\n\n  if (type) responseData.type = type\n  if (details) responseData.details = details\n\n  return NextResponse.json(responseData, { status })\n}\n\n/**\n * Create standardized success response\n */\nexport function createSuccessResponse(\n  data?: any,\n  status: number = HttpStatus.OK,\n  message?: string,\n  meta?: any\n): NextResponse {\n  const responseData: SuccessResponseData = {\n    success: true,\n    timestamp: new Date().toISOString()\n  }\n\n  if (data !== undefined) responseData.data = data\n  if (message) responseData.message = message\n  if (meta) responseData.meta = meta\n\n  return NextResponse.json(responseData, { status })\n}\n\n// Pre-configured error responses for common scenarios\nexport const ApiResponses = {\n  // Authentication & Authorization\n  authenticationRequired: () => createErrorResponse(\n    'Authentication required',\n    HttpStatus.UNAUTHORIZED,\n    ErrorTypes.AUTHENTICATION_REQUIRED\n  ),\n\n  authorizationFailed: (message = 'Insufficient permissions') => createErrorResponse(\n    message,\n    HttpStatus.FORBIDDEN,\n    ErrorTypes.AUTHORIZATION_FAILED\n  ),\n\n  // Validation\n  validationError: (message: string, details?: any) => createErrorResponse(\n    message,\n    HttpStatus.BAD_REQUEST,\n    ErrorTypes.VALIDATION_ERROR,\n    details\n  ),\n\n  badRequest: (message = 'Bad request') => createErrorResponse(\n    message,\n    HttpStatus.BAD_REQUEST,\n    ErrorTypes.BAD_REQUEST\n  ),\n\n  // Resource handling\n  notFound: (resource = 'Resource') => createErrorResponse(\n    `${resource} not found`,\n    HttpStatus.NOT_FOUND,\n    ErrorTypes.NOT_FOUND\n  ),\n\n  conflict: (message = 'Resource conflict') => createErrorResponse(\n    message,\n    HttpStatus.CONFLICT,\n    ErrorTypes.CONFLICT\n  ),\n\n  // Rate limiting\n  rateLimitExceeded: (message = 'Rate limit exceeded') => createErrorResponse(\n    message,\n    HttpStatus.RATE_LIMITED,\n    ErrorTypes.RATE_LIMIT_EXCEEDED\n  ),\n\n  // Server errors\n  internalServerError: (message = 'Internal server error') => createErrorResponse(\n    message,\n    HttpStatus.INTERNAL_SERVER_ERROR,\n    ErrorTypes.INTERNAL_SERVER_ERROR\n  ),\n\n  serviceUnavailable: (message = 'Service temporarily unavailable') => createErrorResponse(\n    message,\n    HttpStatus.SERVICE_UNAVAILABLE\n  ),\n\n  // File upload errors\n  fileTooLarge: (maxSize?: string) => createErrorResponse(\n    `File too large${maxSize ? `. Maximum size: ${maxSize}` : ''}`,\n    HttpStatus.PAYLOAD_TOO_LARGE,\n    ErrorTypes.FILE_TOO_LARGE\n  ),\n\n  unsupportedMediaType: (supportedTypes?: string[]) => createErrorResponse(\n    `Unsupported media type${supportedTypes ? `. Supported: ${supportedTypes.join(', ')}` : ''}`,\n    HttpStatus.UNSUPPORTED_MEDIA_TYPE,\n    ErrorTypes.UNSUPPORTED_MEDIA_TYPE\n  ),\n\n  // Success responses\n  success: (data?: any, message?: string) => createSuccessResponse(\n    data,\n    HttpStatus.OK,\n    message\n  ),\n\n  created: (data?: any, message?: string) => createSuccessResponse(\n    data,\n    HttpStatus.CREATED,\n    message || 'Resource created successfully'\n  ),\n\n  accepted: (message = 'Request accepted for processing') => createSuccessResponse(\n    undefined,\n    HttpStatus.ACCEPTED,\n    message\n  ),\n\n  noContent: () => new NextResponse(null, { status: HttpStatus.NO_CONTENT })\n}\n\n/**\n * Utility to handle async operations with standardized error handling\n */\nexport async function withErrorHandling<T>(\n  operation: () => Promise<T>,\n  errorMessage?: string\n): Promise<T | NextResponse> {\n  try {\n    return await operation()\n  } catch (error: any) {\n    logger.error('API operation failed', { error: error?.message, stack: error?.stack }, 'API')\n    \n    // Handle specific error types\n    if (error.name === 'ValidationError') {\n      return ApiResponses.validationError(error.message, error.details)\n    }\n    \n    if (error.code === 'PGRST116') { // Supabase not found\n      return ApiResponses.notFound()\n    }\n    \n    if (error.status === 429) {\n      return ApiResponses.rateLimitExceeded()\n    }\n    \n    return ApiResponses.internalServerError(errorMessage)\n  }\n}"],"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","ignoreList":[]}