{"file":"/home/g/dev/orangecat/tests/auth/AuthPage.test.tsx","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/tests/auth/AuthPage.test.tsx"],"sourcesContent":["import React from 'react'\nimport userEvent from '@testing-library/user-event'\nimport { render, screen, waitFor } from '../utils'\n\n// Dynamically control the auth page mode via query param mock\nlet mode: 'login' | 'register' = 'register'\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: jest.fn() }),\n  useSearchParams: () => ({\n    get: (key: string) => (key === 'mode' ? mode : null),\n  }),\n}))\n\n// Mock toast notifications to avoid side-effects in the test environment\njest.mock('sonner', () => ({ toast: { loading: jest.fn(), error: jest.fn(), success: jest.fn() } }))\n\n// Mock useAuth and related hook behaviour\nconst signInMock = jest.fn().mockResolvedValue({ data: { user: { id: '1', email: 'a@b.com' }, session: {} }, error: null })\nconst signUpMock = jest.fn().mockResolvedValue({ data: { user: { id: '2', email: 'a@b.com' }, session: {} }, error: null })\n\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => ({\n    signIn: (...args: unknown[]) => signInMock(...args),\n    signUp: (...args: unknown[]) => signUpMock(...args),\n    isLoading: false,\n    hydrated: true,\n    session: null,\n    profile: null,\n  }),\n  useRedirectIfAuthenticated: () => ({ isLoading: false }),\n}))\n\njest.mock('@/services/supabase/client', () => ({\n  __esModule: true,\n  default: { auth: {} },\n}))\n\n// Import after mocks are set up â€“ resolve default/named compatibly\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst AuthPageModule = require('@/app/auth/page')\nconst AuthPage = (AuthPageModule && (AuthPageModule.default || AuthPageModule.AuthPage)) || AuthPageModule\n\ndescribe('AuthPage component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('shows error when passwords do not match during registration', async () => {\n    // Debug export shape\n    // eslint-disable-next-line no-console\n    console.log('AuthPage export typeof:', typeof AuthPage, 'keys:', Object.keys(AuthPageModule || {}))\n    mode = 'register'\n    const user = userEvent.setup()\n    render(<AuthPage />)\n\n    await user.type(screen.getByLabelText('Email address'), 'test@example.com')\n    await user.type(screen.getByLabelText('Password'), 'password1')\n    await user.type(screen.getByLabelText('Confirm Password'), 'password2')\n\n    await user.click(screen.getByRole('button', { name: /Create account/i }))\n\n    expect(await screen.findByText(/Passwords do not match/i)).toBeInTheDocument()\n    expect(signUpMock).not.toHaveBeenCalled()\n  })\n\n  it('invokes signIn on valid login submission', async () => {\n    mode = 'login'\n    const user = userEvent.setup()\n    render(<AuthPage />)\n\n    await user.type(screen.getByLabelText('Email address'), 'login@example.com')\n    await user.type(screen.getByLabelText('Password'), 'super-secret')\n\n    await user.click(screen.getByRole('button', { name: /Sign in/i }))\n\n    await waitFor(() => expect(signInMock).toHaveBeenCalledWith('login@example.com', 'super-secret'))\n  })\n}) "],"version":3}