f8dd136ce7625565d49383040615f159
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('next/navigation', () => ({
    useRouter: () => ({ push: jest.fn() }),
    useSearchParams: () => ({
        get: (key) => (key === 'mode' ? mode : null),
    }),
}));
// Mock toast notifications to avoid side-effects in the test environment
jest.mock('sonner', () => ({ toast: { loading: jest.fn(), error: jest.fn(), success: jest.fn() } }));
jest.mock('@/hooks/useAuth', () => ({
    useAuth: () => ({
        signIn: (...args) => signInMock(...args),
        signUp: (...args) => signUpMock(...args),
        isLoading: false,
        hydrated: true,
        session: null,
        profile: null,
    }),
    useRedirectIfAuthenticated: () => ({ isLoading: false }),
}));
jest.mock('@/services/supabase/client', () => ({
    __esModule: true,
    default: { auth: {} },
}));
const react_1 = __importDefault(require("react"));
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const utils_1 = require("../utils");
// Dynamically control the auth page mode via query param mock
let mode = 'register';
// Mock useAuth and related hook behaviour
const signInMock = jest.fn().mockResolvedValue({ data: { user: { id: '1', email: 'a@b.com' }, session: {} }, error: null });
const signUpMock = jest.fn().mockResolvedValue({ data: { user: { id: '2', email: 'a@b.com' }, session: {} }, error: null });
// Import after mocks are set up â€“ resolve default/named compatibly
// eslint-disable-next-line @typescript-eslint/no-var-requires
const AuthPageModule = require('@/app/auth/page');
const AuthPage = (AuthPageModule && (AuthPageModule.default || AuthPageModule.AuthPage)) || AuthPageModule;
describe('AuthPage component', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('shows error when passwords do not match during registration', async () => {
        // Debug export shape
        // eslint-disable-next-line no-console
        console.log('AuthPage export typeof:', typeof AuthPage, 'keys:', Object.keys(AuthPageModule || {}));
        mode = 'register';
        const user = user_event_1.default.setup();
        (0, utils_1.render)((0, jsx_runtime_1.jsx)(AuthPage, {}));
        await user.type(utils_1.screen.getByLabelText('Email address'), 'test@example.com');
        await user.type(utils_1.screen.getByLabelText('Password'), 'password1');
        await user.type(utils_1.screen.getByLabelText('Confirm Password'), 'password2');
        await user.click(utils_1.screen.getByRole('button', { name: /Create account/i }));
        expect(await utils_1.screen.findByText(/Passwords do not match/i)).toBeInTheDocument();
        expect(signUpMock).not.toHaveBeenCalled();
    });
    it('invokes signIn on valid login submission', async () => {
        mode = 'login';
        const user = user_event_1.default.setup();
        (0, utils_1.render)((0, jsx_runtime_1.jsx)(AuthPage, {}));
        await user.type(utils_1.screen.getByLabelText('Email address'), 'login@example.com');
        await user.type(utils_1.screen.getByLabelText('Password'), 'super-secret');
        await user.click(utils_1.screen.getByRole('button', { name: /Sign in/i }));
        await (0, utils_1.waitFor)(() => expect(signInMock).toHaveBeenCalledWith('login@example.com', 'super-secret'));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,