{"file":"/home/g/dev/orangecat/src/services/profile/writer.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/services/profile/writer.ts"],"sourcesContent":["/**\n * PROFILE WRITER MODULE\n * \n * Created: 2025-01-09\n * Last Modified: 2025-01-09\n * Last Modified Summary: Extracted from profileService.ts for modular architecture - handles write operations\n */\n\nimport supabase from '@/services/supabase/client'\nimport { logger, logProfile } from '@/utils/logger'\nimport { ProfileMapper } from './mapper'\nimport { ProfileReader } from './reader'\nimport type { ScalableProfile, ScalableProfileFormData, ProfileAnalytics, ProfileServiceResponse } from './types'\n\n// =====================================================================\n// ✏️ PROFILE WRITE OPERATIONS\n// =====================================================================\n\nexport class ProfileWriter {\n  \n  /**\n   * Update profile with comprehensive field support\n   */\n  static async updateProfile(\n    userId: string,\n    formData: ScalableProfileFormData\n  ): Promise<ProfileServiceResponse<ScalableProfile>> {\n    if (!userId?.trim()) {\n      return { success: false, error: 'User ID is required' }\n    }\n\n    try {\n      // Verify authentication\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n      \n      if (authError || !user) {\n        return { success: false, error: 'No authenticated user. Please log in again.' }\n      }\n\n      if (user.id !== userId) {\n        return { success: false, error: 'Permission denied: You can only update your own profile' }\n      }\n\n      logProfile('updateProfile', { userId, formData })\n\n      // Get current profile to merge with updates\n      const currentProfile = await ProfileReader.getProfile(userId);\n      \n      // Merge current profile with form data\n      const updatedProfile: Partial<ScalableProfile> = {\n        ...currentProfile,\n        ...formData,\n        updated_at: new Date().toISOString(),\n        last_active_at: new Date().toISOString(),\n      }\n\n      // Map to database format\n      const updateData = ProfileMapper.mapProfileToDatabase(updatedProfile);\n\n      // Perform the update\n      const { data, error } = await supabase\n        .from('profiles')\n        .update(updateData)\n        .eq('id', userId)\n        .select('*')\n        .single()\n\n      if (error) {\n        logger.error('ProfileWriter.updateProfile database error:', error)\n        \n        // Handle specific error cases\n        if (error.code === '23505' && error.message?.includes('duplicate')) {\n          return { success: false, error: 'Username is already taken. Please choose another username.' }\n        }\n        \n        if (error.message?.includes(\"'avatar_url'\")) {\n          // Column missing, but treat as non-fatal and warn\n          return { success: true, warning: 'avatar_url column missing, profile saved without avatar', data: updatedProfile as any } as any\n        }\n        return { success: false, error: 'Failed to update profile. Please try again.' }\n      }\n\n      if (!data) {\n        // Update succeeded but no data returned (likely RLS policy issue)\n        // Fetch the updated profile separately\n        const fetched = await ProfileReader.getProfile(userId);\n        if (fetched) {\n          logProfile('updateProfile success (via separate fetch)', { userId, profile: fetched })\n          return { success: true, data: fetched }\n        } else {\n          return { success: false, error: 'Profile update succeeded but could not retrieve updated data' }\n        }\n      }\n\n      const finalProfile = ProfileMapper.mapDatabaseToProfile(data);\n      logProfile('updateProfile success', { userId, profile: finalProfile })\n\n      return { success: true, data: finalProfile }\n\n    } catch (err) {\n      logger.error('ProfileWriter.updateProfile unexpected error:', err)\n      return { success: false, error: 'An unexpected error occurred while updating profile' }\n    }\n  }\n\n  /**\n   * Create a new profile\n   */\n  static async createProfile(\n    userId: string,\n    formData: ScalableProfileFormData\n  ): Promise<ProfileServiceResponse<ScalableProfile>> {\n    if (!userId?.trim()) {\n      return { success: false, error: 'User ID is required' }\n    }\n\n    try {\n      logProfile('createProfile', { userId, formData })\n\n      // Prepare profile data\n      const profileData: Partial<ScalableProfile> = {\n        id: userId,\n        ...formData,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        last_active_at: new Date().toISOString(),\n        status: 'active',\n        onboarding_completed: false,\n        profile_views: 0,\n        follower_count: 0,\n        following_count: 0,\n        campaign_count: 0,\n        total_raised: 0,\n        total_donated: 0\n      }\n\n      // Map to database format\n      const insertData = ProfileMapper.mapProfileToDatabase(profileData);\n      insertData.id = userId; // Ensure ID is set\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .insert(insertData)\n        .select('*')\n        .single()\n\n      if (error) {\n        logger.error('ProfileWriter.createProfile database error:', error)\n        \n        if (error.code === '23505') {\n          return { success: false, error: 'Profile already exists or username is taken' }\n        }\n        \n        return { success: false, error: 'Failed to create profile. Please try again.' }\n      }\n\n      const newProfile = ProfileMapper.mapDatabaseToProfile(data);\n      logProfile('createProfile success', { userId, profile: newProfile })\n\n      return { success: true, data: newProfile }\n\n    } catch (err) {\n      logger.error('ProfileWriter.createProfile unexpected error:', err)\n      return { success: false, error: 'An unexpected error occurred while creating profile' }\n    }\n  }\n\n  /**\n   * Update profile analytics\n   */\n  static async updateAnalytics(\n    userId: string,\n    analytics: ProfileAnalytics\n  ): Promise<ProfileServiceResponse<void>> {\n    if (!userId?.trim()) {\n      return { success: false, error: 'User ID is required' }\n    }\n\n    try {\n      // Get current profile\n      const currentProfile = await ProfileReader.getProfile(userId);\n      if (!currentProfile) {\n        return { success: false, error: 'Profile not found' }\n      }\n\n      // Merge analytics\n      const updatedProfile: Partial<ScalableProfile> = {\n        ...currentProfile,\n        ...analytics,\n        updated_at: new Date().toISOString()\n      }\n\n      // Map to database format\n      const updateData = ProfileMapper.mapProfileToDatabase(updatedProfile);\n\n      const { error } = await supabase\n        .from('profiles')\n        .update(updateData)\n        .eq('id', userId)\n\n      if (error) {\n        logger.error('ProfileWriter.updateAnalytics error:', error)\n        return { success: false, error: 'Failed to update analytics' }\n      }\n\n      return { success: true }\n\n    } catch (err) {\n      logger.error('ProfileWriter.updateAnalytics unexpected error:', err)\n      return { success: false, error: 'An unexpected error occurred while updating analytics' }\n    }\n  }\n\n  /**\n   * Delete profile\n   */\n  static async deleteProfile(userId: string): Promise<ProfileServiceResponse<void>> {\n    if (!userId?.trim()) {\n      return { success: false, error: 'User ID is required' }\n    }\n\n    try {\n      // Verify authentication\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n      \n      if (authError || !user) {\n        return { success: false, error: 'Authentication required' }\n      }\n\n      if (user.id !== userId) {\n        return { success: false, error: 'Permission denied: Can only delete your own profile' }\n      }\n\n      logProfile('deleteProfile', { userId })\n\n      const { error } = await supabase\n        .from('profiles')\n        .delete()\n        .eq('id', userId)\n\n      if (error) {\n        logger.error('ProfileWriter.deleteProfile error:', error)\n        return { success: false, error: 'Failed to delete profile' }\n      }\n\n      logProfile('deleteProfile success', { userId })\n      return { success: true }\n\n    } catch (err) {\n      logger.error('ProfileWriter.deleteProfile unexpected error:', err)\n      return { success: false, error: 'An unexpected error occurred while deleting profile' }\n    }\n  }\n\n  /**\n   * Fallback profile update (direct database update)\n   */\n  static async fallbackUpdate(\n    userId: string,\n    updates: Record<string, any>\n  ): Promise<ProfileServiceResponse<any>> {\n    if (!userId?.trim()) {\n      return { success: false, error: 'User ID is required' }\n    }\n\n    try {\n      // Prefer Postgres function for atomic profile update when available\n      const { data, error } = await supabase.rpc('update_profile', {\n        profile_data: updates\n      })\n\n      if (error) {\n        logger.error('ProfileWriter.fallbackUpdate error:', error)\n        return { success: false, error: 'All profile update methods failed: ' + error.message }\n      }\n\n      return { success: true, data }\n\n    } catch (err) {\n      logger.error('ProfileWriter.fallbackUpdate unexpected error:', err)\n      return { success: false, error: 'An unexpected error occurred during fallback update' }\n    }\n  }\n} "],"version":3}