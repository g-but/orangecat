c1086fdf293b93ed1935508d291e836a
"use strict";
/**
 * PROFILE WRITER MODULE
 *
 * Created: 2025-01-09
 * Last Modified: 2025-01-09
 * Last Modified Summary: Extracted from profileService.ts for modular architecture - handles write operations
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileWriter = void 0;
const client_1 = __importDefault(require("@/services/supabase/client"));
const logger_1 = require("@/utils/logger");
const mapper_1 = require("./mapper");
const reader_1 = require("./reader");
// =====================================================================
// ✏️ PROFILE WRITE OPERATIONS
// =====================================================================
class ProfileWriter {
    /**
     * Update profile with comprehensive field support
     */
    static async updateProfile(userId, formData) {
        var _a, _b;
        if (!(userId === null || userId === void 0 ? void 0 : userId.trim())) {
            return { success: false, error: 'User ID is required' };
        }
        try {
            // Verify authentication
            const { data: { user }, error: authError } = await client_1.default.auth.getUser();
            if (authError || !user) {
                return { success: false, error: 'No authenticated user. Please log in again.' };
            }
            if (user.id !== userId) {
                return { success: false, error: 'Permission denied: You can only update your own profile' };
            }
            (0, logger_1.logProfile)('updateProfile', { userId, formData });
            // Get current profile to merge with updates
            const currentProfile = await reader_1.ProfileReader.getProfile(userId);
            // Merge current profile with form data
            const updatedProfile = Object.assign(Object.assign(Object.assign({}, currentProfile), formData), { updated_at: new Date().toISOString(), last_active_at: new Date().toISOString() });
            // Map to database format
            const updateData = mapper_1.ProfileMapper.mapProfileToDatabase(updatedProfile);
            // Perform the update
            const { data, error } = await client_1.default
                .from('profiles')
                .update(updateData)
                .eq('id', userId)
                .select('*')
                .single();
            if (error) {
                logger_1.logger.error('ProfileWriter.updateProfile database error:', error);
                // Handle specific error cases
                if (error.code === '23505' && ((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('duplicate'))) {
                    return { success: false, error: 'Username is already taken. Please choose another username.' };
                }
                if ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes("'avatar_url'")) {
                    // Column missing, but treat as non-fatal and warn
                    return { success: true, warning: 'avatar_url column missing, profile saved without avatar', data: updatedProfile };
                }
                return { success: false, error: 'Failed to update profile. Please try again.' };
            }
            if (!data) {
                // Update succeeded but no data returned (likely RLS policy issue)
                // Fetch the updated profile separately
                const fetched = await reader_1.ProfileReader.getProfile(userId);
                if (fetched) {
                    (0, logger_1.logProfile)('updateProfile success (via separate fetch)', { userId, profile: fetched });
                    return { success: true, data: fetched };
                }
                else {
                    return { success: false, error: 'Profile update succeeded but could not retrieve updated data' };
                }
            }
            const finalProfile = mapper_1.ProfileMapper.mapDatabaseToProfile(data);
            (0, logger_1.logProfile)('updateProfile success', { userId, profile: finalProfile });
            return { success: true, data: finalProfile };
        }
        catch (err) {
            logger_1.logger.error('ProfileWriter.updateProfile unexpected error:', err);
            return { success: false, error: 'An unexpected error occurred while updating profile' };
        }
    }
    /**
     * Create a new profile
     */
    static async createProfile(userId, formData) {
        if (!(userId === null || userId === void 0 ? void 0 : userId.trim())) {
            return { success: false, error: 'User ID is required' };
        }
        try {
            (0, logger_1.logProfile)('createProfile', { userId, formData });
            // Prepare profile data
            const profileData = Object.assign(Object.assign({ id: userId }, formData), { created_at: new Date().toISOString(), updated_at: new Date().toISOString(), last_active_at: new Date().toISOString(), status: 'active', onboarding_completed: false, profile_views: 0, follower_count: 0, following_count: 0, campaign_count: 0, total_raised: 0, total_donated: 0 });
            // Map to database format
            const insertData = mapper_1.ProfileMapper.mapProfileToDatabase(profileData);
            insertData.id = userId; // Ensure ID is set
            const { data, error } = await client_1.default
                .from('profiles')
                .insert(insertData)
                .select('*')
                .single();
            if (error) {
                logger_1.logger.error('ProfileWriter.createProfile database error:', error);
                if (error.code === '23505') {
                    return { success: false, error: 'Profile already exists or username is taken' };
                }
                return { success: false, error: 'Failed to create profile. Please try again.' };
            }
            const newProfile = mapper_1.ProfileMapper.mapDatabaseToProfile(data);
            (0, logger_1.logProfile)('createProfile success', { userId, profile: newProfile });
            return { success: true, data: newProfile };
        }
        catch (err) {
            logger_1.logger.error('ProfileWriter.createProfile unexpected error:', err);
            return { success: false, error: 'An unexpected error occurred while creating profile' };
        }
    }
    /**
     * Update profile analytics
     */
    static async updateAnalytics(userId, analytics) {
        if (!(userId === null || userId === void 0 ? void 0 : userId.trim())) {
            return { success: false, error: 'User ID is required' };
        }
        try {
            // Get current profile
            const currentProfile = await reader_1.ProfileReader.getProfile(userId);
            if (!currentProfile) {
                return { success: false, error: 'Profile not found' };
            }
            // Merge analytics
            const updatedProfile = Object.assign(Object.assign(Object.assign({}, currentProfile), analytics), { updated_at: new Date().toISOString() });
            // Map to database format
            const updateData = mapper_1.ProfileMapper.mapProfileToDatabase(updatedProfile);
            const { error } = await client_1.default
                .from('profiles')
                .update(updateData)
                .eq('id', userId);
            if (error) {
                logger_1.logger.error('ProfileWriter.updateAnalytics error:', error);
                return { success: false, error: 'Failed to update analytics' };
            }
            return { success: true };
        }
        catch (err) {
            logger_1.logger.error('ProfileWriter.updateAnalytics unexpected error:', err);
            return { success: false, error: 'An unexpected error occurred while updating analytics' };
        }
    }
    /**
     * Delete profile
     */
    static async deleteProfile(userId) {
        if (!(userId === null || userId === void 0 ? void 0 : userId.trim())) {
            return { success: false, error: 'User ID is required' };
        }
        try {
            // Verify authentication
            const { data: { user }, error: authError } = await client_1.default.auth.getUser();
            if (authError || !user) {
                return { success: false, error: 'Authentication required' };
            }
            if (user.id !== userId) {
                return { success: false, error: 'Permission denied: Can only delete your own profile' };
            }
            (0, logger_1.logProfile)('deleteProfile', { userId });
            const { error } = await client_1.default
                .from('profiles')
                .delete()
                .eq('id', userId);
            if (error) {
                logger_1.logger.error('ProfileWriter.deleteProfile error:', error);
                return { success: false, error: 'Failed to delete profile' };
            }
            (0, logger_1.logProfile)('deleteProfile success', { userId });
            return { success: true };
        }
        catch (err) {
            logger_1.logger.error('ProfileWriter.deleteProfile unexpected error:', err);
            return { success: false, error: 'An unexpected error occurred while deleting profile' };
        }
    }
    /**
     * Fallback profile update (direct database update)
     */
    static async fallbackUpdate(userId, updates) {
        if (!(userId === null || userId === void 0 ? void 0 : userId.trim())) {
            return { success: false, error: 'User ID is required' };
        }
        try {
            // Prefer Postgres function for atomic profile update when available
            const { data, error } = await client_1.default.rpc('update_profile', {
                profile_data: updates
            });
            if (error) {
                logger_1.logger.error('ProfileWriter.fallbackUpdate error:', error);
                return { success: false, error: 'All profile update methods failed: ' + error.message };
            }
            return { success: true, data };
        }
        catch (err) {
            logger_1.logger.error('ProfileWriter.fallbackUpdate unexpected error:', err);
            return { success: false, error: 'An unexpected error occurred during fallback update' };
        }
    }
}
exports.ProfileWriter = ProfileWriter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,