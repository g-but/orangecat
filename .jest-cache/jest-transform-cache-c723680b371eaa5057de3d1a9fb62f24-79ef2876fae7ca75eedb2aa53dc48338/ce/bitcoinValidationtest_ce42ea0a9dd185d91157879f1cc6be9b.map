{"file":"/home/g/dev/orangecat/src/utils/__tests__/bitcoinValidation.test.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/utils/__tests__/bitcoinValidation.test.ts"],"sourcesContent":["/**\n * Bitcoin Address Validation - Comprehensive Security Tests\n * \n * CRITICAL FOR FINANCIAL SECURITY - Bitcoin transactions are irreversible\n * Testing all Bitcoin address validation logic to prevent fund loss\n * \n * Coverage Areas:\n * - All Bitcoin address formats (Legacy, P2SH, SegWit, Taproot)\n * - Testnet address prevention\n * - Burn address detection\n * - Malformed address rejection\n * - Length validation by address type\n * - Edge cases and attack vectors\n */\n\nimport { isValidBitcoinAddress, isValidLightningAddress } from '../validation'\n\ndescribe('🔐 Bitcoin Address Validation - Financial Security Tests', () => {\n  \n  describe('✅ Valid Bitcoin Address Acceptance', () => {\n    test('should accept valid Legacy (P2PKH) addresses', () => {\n      const validLegacyAddresses = [\n        '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2',\n        '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', // Genesis block address\n        '1JArS6jzE3AJ9sZ3aFij1BmTcpFGgN86hA',\n        '1FeexV6bAHb8ybZjqjAn4uw3m4HGsw8ABn',\n        '1111111111111111111114oLvT2' // Known burn address (will be rejected separately)\n      ]\n\n      validLegacyAddresses.slice(0, -1).forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(true)\n        expect(result.error).toBeUndefined()\n      })\n    })\n\n    test('should accept valid P2SH (Pay-to-Script-Hash) addresses', () => {\n      const validP2SHAddresses = [\n        '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy',\n        '3QJmV3qfvL9SuYo34YihAf3sRCW3qSinyC',\n        '33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk',\n        '37VucYSaXLCAsVSPPSHqHdHhPVG8qMbLMt'\n      ]\n\n      validP2SHAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(true)\n        expect(result.error).toBeUndefined()\n      })\n    })\n\n    test('should accept valid Bech32 (Native SegWit) addresses', () => {\n      const validBech32Addresses = [\n        'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n        'bc1qrp33g0alq08tx9pep2rg7kzzv9twp5dklxcl75',\n        'bc1q34aq5drpuwy3wgl5gzv7j3z3k4k0jls7wm33kj',\n        'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh'\n      ]\n\n      validBech32Addresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(true)\n        expect(result.error).toBeUndefined()\n      })\n    })\n\n    test('should accept valid Taproot (P2TR) addresses', () => {\n      const validTaprootAddresses = [\n        'bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297',\n        'bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqzk5jj0'\n      ]\n\n      validTaprootAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(true)\n        expect(result.error).toBeUndefined()\n      })\n    })\n  })\n\n  describe('🚫 Testnet Address Prevention', () => {\n    test('should reject Bitcoin testnet addresses', () => {\n      const testnetAddresses = [\n        'tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx',\n        'tb1qrp33g0alq08tx9pep2rg7kzzv9twp5dklxcl75',\n        'tb1q34aq5drpuwy3wgl5gzv7j3z3k4k0jls7wm33kj'\n      ]\n\n      testnetAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Testnet addresses not allowed')\n      })\n    })\n\n    test('should reject Bitcoin regtest addresses', () => {\n      const regtestAddresses = [\n        'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6',\n        'bcrt1qrp33g0alq08tx9pep2rg7kzzv9twp5dklxcl75'\n      ]\n\n      regtestAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Testnet addresses not allowed')\n      })\n    })\n  })\n\n  describe('🔥 Burn Address Detection', () => {\n    test('should reject known burn addresses', () => {\n      const burnAddresses = [\n        '1111111111111111111114oLvT2',\n        '1BitcoinEaterAddressDontSendf59kuE',\n        'bc1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq9424r'\n      ]\n\n      burnAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Burn addresses not allowed')\n      })\n    })\n\n    test('should reject addresses with suspicious patterns', () => {\n      const suspiciousAddresses = [\n        'bc1' + 'q'.repeat(50), // All q's - likely invalid\n        '1' + '1'.repeat(33),   // All 1's\n        'bc1' + '0'.repeat(50)  // All 0's\n      ]\n\n      suspiciousAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        // These might pass format validation but should be flagged\n        if (result.valid) {\n          console.warn(`⚠️ Suspicious address passed: ${address}`)\n        }\n      })\n    })\n  })\n\n  describe('❌ Invalid Format Rejection', () => {\n    test('should reject addresses with invalid characters', () => {\n      const invalidCharacterAddresses = [\n        'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t0', // Contains '0' (invalid in bech32)\n        'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3tI', // Contains 'I' (invalid in bech32)\n        '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNO0', // Contains 'O' and '0' (invalid in base58)\n        '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVNI'  // Contains 'I' (invalid in base58)\n      ]\n\n      invalidCharacterAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Invalid Bitcoin address format')\n      })\n    })\n\n    test('should reject addresses with wrong length', () => {\n      const wrongLengthAddresses = [\n        // Too short\n        'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t',\n        '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL',\n        '1BvBMSEYstWetqTFn5Au4m4GFg7xJaN',\n        \n        // Too long\n        'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4444444444444444444',\n        '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy444444444',\n        '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2444444444'\n      ]\n\n      wrongLengthAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toMatch(/length|Invalid/)\n      })\n    })\n\n    test('should reject completely malformed addresses', () => {\n      const malformedAddresses = [\n        '', // Empty\n        ' ', // Whitespace\n        'not-a-bitcoin-address',\n        'bitcoin:bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', // URI format\n        'BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4', // Wrong case for bech32\n        '2J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy', // Starts with '2' (invalid)\n        '0BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2', // Starts with '0' (invalid)\n        'xc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4' // Wrong prefix\n      ]\n\n      malformedAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toBeDefined()\n      })\n    })\n  })\n\n  describe('📏 Length Validation by Address Type', () => {\n    test('should validate P2PKH address length exactly', () => {\n      const shortP2PKH = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN' // 33 chars (too short)\n      const correctP2PKH = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2' // 34 chars (correct)\n      const longP2PKH = '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN23' // 35 chars (too long)\n\n      expect(isValidBitcoinAddress(shortP2PKH).valid).toBe(false)\n      expect(isValidBitcoinAddress(correctP2PKH).valid).toBe(true)\n      expect(isValidBitcoinAddress(longP2PKH).valid).toBe(false)\n    })\n\n    test('should validate P2SH address length exactly', () => {\n      const shortP2SH = '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL' // 33 chars (too short)\n      const correctP2SH = '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy' // 34 chars (correct)\n      const longP2SH = '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy4' // 35 chars (too long)\n\n      expect(isValidBitcoinAddress(shortP2SH).valid).toBe(false)\n      expect(isValidBitcoinAddress(correctP2SH).valid).toBe(true)\n      expect(isValidBitcoinAddress(longP2SH).valid).toBe(false)\n    })\n\n    test('should validate Bech32 address length range', () => {\n      const tooShortBech32 = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t' // 41 chars (too short)\n      const validShortBech32 = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4' // 42 chars (valid min)\n      const validLongBech32 = 'bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297' // 62 chars (valid max)\n      const tooLongBech32 = 'bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg32974' // 63 chars (too long)\n\n      expect(isValidBitcoinAddress(tooShortBech32).valid).toBe(false)\n      expect(isValidBitcoinAddress(validShortBech32).valid).toBe(true)\n      expect(isValidBitcoinAddress(validLongBech32).valid).toBe(true)\n      expect(isValidBitcoinAddress(tooLongBech32).valid).toBe(false)\n    })\n  })\n\n  describe('🎯 Edge Cases & Attack Vectors', () => {\n    test('should handle null and undefined inputs', () => {\n      expect(isValidBitcoinAddress(null as any).valid).toBe(false)\n      expect(isValidBitcoinAddress(undefined as any).valid).toBe(false)\n      expect(isValidBitcoinAddress('').valid).toBe(false)\n    })\n\n    test('should handle whitespace and formatting issues', () => {\n      const addressWithWhitespace = ' bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4 '\n      const addressWithTabs = '\\tbc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\\t'\n      const addressWithNewlines = '\\nbc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\\n'\n\n      // These should be rejected unless the validation function trims them\n      const results = [\n        isValidBitcoinAddress(addressWithWhitespace),\n        isValidBitcoinAddress(addressWithTabs),\n        isValidBitcoinAddress(addressWithNewlines)\n      ]\n\n      results.forEach(result => {\n        if (result.valid) {\n          console.warn('⚠️ Validation accepts whitespace - should probably trim input first')\n        }\n      })\n    })\n\n    test('should handle case sensitivity correctly', () => {\n      // Bech32 should be lowercase only\n      const uppercaseBech32 = 'BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4'\n      const mixedCaseBech32 = 'Bc1qW508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'\n\n      expect(isValidBitcoinAddress(uppercaseBech32).valid).toBe(false)\n      expect(isValidBitcoinAddress(mixedCaseBech32).valid).toBe(false)\n\n      // Legacy and P2SH addresses are case-sensitive but mixed case is valid\n      const uppercaseLegacy = '1BVBMSEYSWETQTFN5AU4M4GFG7XJANVN2'\n      // This might still be valid depending on checksum, but let's test\n      const result = isValidBitcoinAddress(uppercaseLegacy)\n      // The validation logic will determine if this passes\n    })\n\n    test('should reject addresses that look like other cryptocurrencies', () => {\n      const otherCryptoAddresses = [\n        '0x742d35Cc6634C0532925a3b8D581C6e017A4f4EB', // Ethereum\n        'LdP8Qox1VAhCzLJNqrr74YovaWYyNBUWvL',         // Litecoin\n        'DH5yaieqoZN36fDVciNyRueRGvGLR3mr7L',         // Dogecoin\n        'rXCBbqf4qkqGZfLZqXyKFkrpKGmNfK3aq',          // Ripple\n        'tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx'        // Tezos\n      ]\n\n      otherCryptoAddresses.forEach(address => {\n        const result = isValidBitcoinAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Invalid Bitcoin address format')\n      })\n    })\n\n    test('should handle very long strings without crashing', () => {\n      const veryLongString = 'bc1' + 'q'.repeat(1000)\n      const result = isValidBitcoinAddress(veryLongString)\n      \n      expect(result.valid).toBe(false)\n      expect(result.error).toBeDefined()\n      // Should not throw an error, should handle gracefully\n    })\n\n    test('should prevent injection attacks in error messages', () => {\n      const maliciousInput = '<script>alert(\"xss\")</script>'\n      const result = isValidBitcoinAddress(maliciousInput)\n      \n      expect(result.valid).toBe(false)\n      expect(result.error).toBeDefined()\n      // Error message should not contain the malicious script\n      expect(result.error).not.toContain('<script>')\n    })\n  })\n\n  describe('⚡ Lightning Address Validation', () => {\n    test('should accept valid Lightning addresses', () => {\n      const validLightningAddresses = [\n        'test@getalby.com',\n        'user@strike.me',\n        'satoshi@wallet.com',\n        'lightning@bitcoin.org'\n      ]\n\n      validLightningAddresses.forEach(address => {\n        const result = isValidLightningAddress(address)\n        expect(result.valid).toBe(true)\n        expect(result.error).toBeUndefined()\n      })\n    })\n\n    test('should reject Lightning addresses with local domains', () => {\n      const localDomainAddresses = [\n        'user@localhost',\n        'user@127.0.0.1',\n        'user@192.168.1.1',\n        'user@10.0.0.1'\n      ]\n\n      localDomainAddresses.forEach(address => {\n        const result = isValidLightningAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Local addresses not allowed')\n      })\n    })\n\n    test('should reject Lightning addresses with suspicious domains', () => {\n      const suspiciousDomains = [\n        'user@tempmail.com',\n        'user@guerrillamail.info',\n        'user@10minutemail.net',\n        'user@throwaway.email'\n      ]\n\n      suspiciousDomains.forEach(address => {\n        const result = isValidLightningAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Temporary email domains not allowed')\n      })\n    })\n\n    test('should reject malformed Lightning addresses', () => {\n      const malformedAddresses = [\n        'usergetalby.com', // Missing @\n        '@getalby.com',    // Missing user\n        'user@',           // Missing domain\n        'user@@getalby.com', // Double @\n        'user@domain',     // No TLD\n        'user@.com'        // Missing domain name\n      ]\n\n      malformedAddresses.forEach(address => {\n        const result = isValidLightningAddress(address)\n        expect(result.valid).toBe(false)\n        expect(result.error).toContain('Invalid Lightning address format')\n      })\n    })\n  })\n\n  describe('🔍 Performance & Security Tests', () => {\n    test('should validate addresses quickly (performance test)', () => {\n      const testAddresses = [\n        'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',\n        '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy',\n        '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2'\n      ]\n\n      const startTime = performance.now()\n      \n      for (let i = 0; i < 1000; i++) {\n        testAddresses.forEach(address => {\n          isValidBitcoinAddress(address)\n        })\n      }\n      \n      const endTime = performance.now()\n      const totalTime = endTime - startTime\n      \n      // Should validate 3000 addresses in under 100ms\n      expect(totalTime).toBeLessThan(100)\n      console.log(`✅ Performance: Validated 3000 addresses in ${totalTime.toFixed(2)}ms`)\n    })\n\n    test('should not leak memory on repeated validations', () => {\n      const initialMemory = process.memoryUsage().heapUsed\n      \n      // Run many validations\n      for (let i = 0; i < 10000; i++) {\n        isValidBitcoinAddress('bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4')\n        isValidBitcoinAddress('invalid-address-' + i)\n      }\n      \n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc()\n      }\n      \n      const finalMemory = process.memoryUsage().heapUsed\n      const memoryIncrease = finalMemory - initialMemory\n      \n      // Memory increase should be minimal (less than 5MB for CI environments)\n      expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024)\n      console.log(`✅ Memory: Increased by ${(memoryIncrease / 1024).toFixed(2)}KB after 10,000 validations`)\n    })\n  })\n}) "],"version":3}