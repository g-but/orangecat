f7abd852aeaffe3d638297f87efc145f
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * SOCIAL PAGES UI TESTS
 *
 * Comprehensive test suite for People, Organizations, and Projects page components
 * including empty states, search functionality, and user interactions.
 *
 * Created: 2025-01-08
 * Last Modified: 2025-01-08
 * Last Modified Summary: Complete UI test coverage for social collaboration pages
 */
const globals_1 = require("@jest/globals");
globals_1.jest.mock('@/contexts/AuthContext', () => ({
    useAuth: () => mockAuthContext
}));
globals_1.jest.mock('@/services/socialService', () => ({
    PeopleService: mockPeopleService,
    OrganizationService: mockOrganizationService,
    ProjectService: mockProjectService,
    EmptyStateService: mockEmptyStateService
}));
globals_1.jest.mock('@/components/ui/button', () => ({
    Button: (_a) => {
        var { children, onClick, className } = _a, props = __rest(_a, ["children", "onClick", "className"]);
        return ((0, jsx_runtime_1.jsx)("button", Object.assign({ onClick: onClick, className: className }, props, { children: children })));
    }
}));
globals_1.jest.mock('@/components/ui/input', () => ({
    Input: (_a) => {
        var { value, onChange, placeholder } = _a, props = __rest(_a, ["value", "onChange", "placeholder"]);
        return ((0, jsx_runtime_1.jsx)("input", Object.assign({ value: value, onChange: onChange, placeholder: placeholder }, props)));
    }
}));
globals_1.jest.mock('@/components/ui/card', () => ({
    Card: ({ children, className }) => ((0, jsx_runtime_1.jsx)("div", { className: className, children: children })),
    CardContent: ({ children, className }) => ((0, jsx_runtime_1.jsx)("div", { className: className, children: children })),
    CardHeader: ({ children }) => (0, jsx_runtime_1.jsx)("div", { children: children }),
    CardTitle: ({ children }) => (0, jsx_runtime_1.jsx)("h3", { children: children })
}));
globals_1.jest.mock('@/components/ui/badge', () => ({
    Badge: ({ children, variant, className }) => ((0, jsx_runtime_1.jsx)("span", { className: `badge ${variant} ${className}`, children: children }))
}));
globals_1.jest.mock('@/components/ui/avatar', () => ({
    Avatar: ({ children, className }) => ((0, jsx_runtime_1.jsx)("div", { className: `avatar ${className}`, children: children })),
    AvatarImage: ({ src, alt }) => ((0, jsx_runtime_1.jsx)("img", { src: src, alt: alt })),
    AvatarFallback: ({ children, className }) => ((0, jsx_runtime_1.jsx)("div", { className: `avatar-fallback ${className}`, children: children }))
}));
globals_1.jest.mock('@/components/ui/tabs', () => ({
    Tabs: ({ children, value, onValueChange }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "tabs", "data-value": value, children: children })),
    TabsList: ({ children }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "tabs-list", children: children })),
    TabsTrigger: ({ children, value, onClick }) => ((0, jsx_runtime_1.jsx)("button", { "data-testid": `tab-${value}`, onClick: onClick, children: children })),
    TabsContent: ({ children, value }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": `tab-content-${value}`, children: children }))
}));
globals_1.jest.mock('@/components/ui/progress', () => ({
    Progress: ({ value, className }) => ((0, jsx_runtime_1.jsx)("div", { className: `progress ${className}`, "data-value": value, children: (0, jsx_runtime_1.jsx)("div", { style: { width: `${value}%` } }) }))
}));
// Mock Lucide React icons
globals_1.jest.mock('lucide-react', () => ({
    Search: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "search-icon", children: "\uD83D\uDD0D" }),
    Users: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "users-icon", children: "\uD83D\uDC65" }),
    UserPlus: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "user-plus-icon", children: "\u2795\uD83D\uDC64" }),
    Filter: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "filter-icon", children: "\uD83D\uDD3D" }),
    MapPin: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "map-pin-icon", children: "\uD83D\uDCCD" }),
    Star: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "star-icon", children: "\u2B50" }),
    Building: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "building-icon", children: "\uD83C\uDFE2" }),
    Plus: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "plus-icon", children: "\u2795" }),
    Bitcoin: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "bitcoin-icon", children: "\u20BF" }),
    Wallet: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "wallet-icon", children: "\uD83D\uDCB0" }),
    Globe: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "globe-icon", children: "\uD83C\uDF0D" }),
    Rocket: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "rocket-icon", children: "\uD83D\uDE80" }),
    Target: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "target-icon", children: "\uD83C\uDFAF" }),
    Calendar: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "calendar-icon", children: "\uD83D\uDCC5" }),
    TrendingUp: () => (0, jsx_runtime_1.jsx)("span", { "data-testid": "trending-up-icon", children: "\uD83D\uDCC8" })
}));
// Mock the auth store
globals_1.jest.mock('@/stores/auth', () => ({
    useAuthStore: () => ({
        user: { id: '1', email: 'test@example.com' },
        profile: null
    })
}));
const react_1 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_router_dom_1 = require("react-router-dom");
const page_1 = __importDefault(require("@/app/(authenticated)/people/page"));
const page_2 = __importDefault(require("@/app/(authenticated)/organizations/page"));
const page_3 = __importDefault(require("@/app/(authenticated)/projects/page"));
const react_2 = __importDefault(require("react"));
require("@testing-library/jest-dom");
// Mock the auth context
const mockAuthContext = {
    user: {
        id: 'test-user-id',
        email: 'test@example.com'
    },
    profile: {
        id: 'test-user-id',
        username: 'testuser',
        full_name: 'Test User'
    },
    loading: false,
    hydrated: true
};
// Mock the social services
const mockPeopleService = {
    searchPeople: globals_1.jest.fn(() => Promise.resolve([])),
    getConnections: globals_1.jest.fn(() => Promise.resolve([])),
    sendConnectionRequest: globals_1.jest.fn(() => Promise.resolve({ id: 'conn-1', status: 'pending' }))
};
const mockOrganizationService = {
    getUserOrganizations: globals_1.jest.fn(() => Promise.resolve([])),
    searchOrganizations: globals_1.jest.fn(() => Promise.resolve([])),
    joinOrganization: globals_1.jest.fn(() => Promise.resolve())
};
const mockProjectService = {
    getUserProjects: globals_1.jest.fn(() => Promise.resolve([])),
    searchProjects: globals_1.jest.fn(() => Promise.resolve([])),
    joinProject: globals_1.jest.fn(() => Promise.resolve())
};
const mockEmptyStateService = {
    getEmptyStateContent: globals_1.jest.fn((section) => ({
        title: `No ${section.charAt(0).toUpperCase() + section.slice(1)} Yet`,
        description: `You haven't connected with any ${section} yet.`,
        primaryAction: {
            label: `Search ${section.charAt(0).toUpperCase() + section.slice(1)}`,
            action: `/${section}/search`
        },
        secondaryAction: {
            label: 'Complete Profile',
            action: '/profile/edit'
        },
        benefits: [
            'Collaborate on Bitcoin projects',
            'Join organizations and DAOs',
            'Share knowledge and resources'
        ],
        examples: [
            'Connect with Bitcoin developers',
            'Find co-founders for startup',
            'Join local Bitcoin meetups'
        ]
    }))
};
// Test wrapper component
const TestWrapper = ({ children }) => ((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: children }));
(0, globals_1.describe)('PeoplePage', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should render page header correctly', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        (0, globals_1.expect)(react_1.screen.getByText('People')).toBeInTheDocument();
        (0, globals_1.expect)(react_1.screen.getByText('Connect with Bitcoin enthusiasts, builders, and changemakers worldwide')).toBeInTheDocument();
    });
    (0, globals_1.it)('should display empty state when no connections', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('No People Yet')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Search People')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Complete Profile')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should display benefits and examples in empty state', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('Why Connect?')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Connection Examples')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Collaborate on Bitcoin projects')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Connect with Bitcoin developers')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should handle search functionality', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        // Wait for component to load
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByPlaceholderText(/search people/i)).toBeInTheDocument();
        });
        const searchInput = react_1.screen.getByPlaceholderText(/search people/i);
        const searchButton = react_1.screen.getByText('Search');
        await user.type(searchInput, 'bitcoin developer');
        await user.click(searchButton);
        (0, globals_1.expect)(mockPeopleService.searchPeople).toHaveBeenCalledWith({
            query: 'bitcoin developer',
            limit: 20
        });
    });
    (0, globals_1.it)('should handle connection requests', async () => {
        const mockPeople = [
            {
                id: 'user-1',
                username: 'bitcoindev',
                full_name: 'Bitcoin Developer',
                display_name: 'Bitcoin Developer',
                avatar_url: 'https://example.com/avatar.jpg',
                bio: 'Bitcoin core contributor',
                location: 'San Francisco',
                connections_count: 150,
                skills: ['Bitcoin', 'Lightning', 'JavaScript'],
                verification_status: 'verified'
            }
        ];
        mockPeopleService.searchPeople.mockResolvedValue(mockPeople);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('Bitcoin Developer')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('@bitcoindev')).toBeInTheDocument();
        });
        const connectButton = react_1.screen.getByText('Connect');
        react_1.fireEvent.click(connectButton);
        (0, globals_1.expect)(mockPeopleService.sendConnectionRequest).toHaveBeenCalledWith({
            recipient_id: 'user-1',
            message: 'Hi! I would like to connect with you on OrangeCat.'
        });
    });
    (0, globals_1.it)('should display person cards with correct information', async () => {
        const mockPeople = [
            {
                id: 'user-1',
                username: 'bitcoindev',
                full_name: 'Bitcoin Developer',
                display_name: 'Bitcoin Developer',
                avatar_url: 'https://example.com/avatar.jpg',
                bio: 'Bitcoin core contributor and Lightning Network enthusiast',
                location: 'San Francisco, CA',
                connections_count: 150,
                skills: ['Bitcoin', 'Lightning', 'JavaScript', 'Go', 'Rust'],
                verification_status: 'verified'
            }
        ];
        mockPeopleService.searchPeople.mockResolvedValue(mockPeople);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('Bitcoin Developer')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('@bitcoindev')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Bitcoin core contributor and Lightning Network enthusiast')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('San Francisco, CA')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('150 connections')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Bitcoin')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Lightning')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('JavaScript')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('+2 more')).toBeInTheDocument(); // Shows only first 3 skills
            (0, globals_1.expect)(react_1.screen.getByText('Verified')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should handle loading states', async () => {
        // Mock a delayed response
        mockPeopleService.searchPeople.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve([]), 100)));
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        (0, globals_1.expect)(react_1.screen.getByText('Loading people...')).toBeInTheDocument();
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.queryByText('Loading people...')).not.toBeInTheDocument();
        });
    });
});
(0, globals_1.describe)('OrganizationsPage', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should render page header correctly', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_2.default, {}) }));
        (0, globals_1.expect)(react_1.screen.getByText('Organizations')).toBeInTheDocument();
        (0, globals_1.expect)(react_1.screen.getByText('Join or create organizations with shared Bitcoin wallets and collaborative governance')).toBeInTheDocument();
    });
    (0, globals_1.it)('should display empty state for organizations', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_2.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('No Organizations Yet')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Create Organization')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Browse Organizations')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should display organization cards with Bitcoin wallet info', async () => {
        const mockOrganizations = [
            {
                id: 'org-1',
                name: 'Bitcoin Builders Collective',
                description: 'A community of Bitcoin developers and educators',
                type: 'community',
                status: 'active',
                member_count: 25,
                total_raised: 500000000, // 5 BTC in satoshis
                bitcoin_address: 'bc1qorg123456789abcdef',
                location: 'Global',
                logo_url: 'https://example.com/org-logo.jpg'
            }
        ];
        mockOrganizationService.searchOrganizations.mockResolvedValue(mockOrganizations);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_2.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('Bitcoin Builders Collective')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('A community of Bitcoin developers and educators')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('community')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('25 members')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('5.00 BTC raised')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Global')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('bc1qorg12...6789abcdef')).toBeInTheDocument(); // Truncated address
            (0, globals_1.expect)(react_1.screen.getByText('active')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should handle organization join requests', async () => {
        const mockOrganizations = [
            {
                id: 'org-1',
                name: 'Bitcoin Builders',
                description: 'Bitcoin community',
                type: 'community',
                status: 'active',
                member_count: 10,
                total_raised: 100000000,
                bitcoin_address: 'bc1qtest123',
                location: 'Global'
            }
        ];
        mockOrganizationService.searchOrganizations.mockResolvedValue(mockOrganizations);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_2.default, {}) }));
        await (0, react_1.waitFor)(() => {
            const joinButton = react_1.screen.getByText('Join');
            react_1.fireEvent.click(joinButton);
        });
        (0, globals_1.expect)(mockOrganizationService.joinOrganization).toHaveBeenCalledWith('org-1');
    });
    (0, globals_1.it)('should switch between discover and my organizations tabs', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_2.default, {}) }));
        (0, globals_1.expect)(react_1.screen.getByTestId('tab-discover')).toBeInTheDocument();
        (0, globals_1.expect)(react_1.screen.getByTestId('tab-my-orgs')).toBeInTheDocument();
        const myOrgsTab = react_1.screen.getByTestId('tab-my-orgs');
        react_1.fireEvent.click(myOrgsTab);
        (0, globals_1.expect)(mockOrganizationService.getUserOrganizations).toHaveBeenCalledWith('test-user-id');
    });
});
(0, globals_1.describe)('ProjectsPage', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should render page header correctly', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        (0, globals_1.expect)(react_1.screen.getByText('Projects')).toBeInTheDocument();
        (0, globals_1.expect)(react_1.screen.getByText('Discover and support Bitcoin-powered projects with dedicated fundraising wallets')).toBeInTheDocument();
    });
    (0, globals_1.it)('should display empty state for projects', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('No Projects Yet')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Create Project')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Explore Projects')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should display project cards with funding progress', async () => {
        const mockProjects = [
            {
                id: 'project-1',
                name: 'Bitcoin Education Platform',
                description: 'Interactive learning platform for Bitcoin newcomers',
                category: 'education',
                status: 'active',
                team_size: 5,
                funding_goal: 500000000, // 5 BTC in satoshis
                total_raised: 150000000, // 1.5 BTC in satoshis
                deadline: '2025-06-30T23:59:59Z',
                tags: ['education', 'bitcoin', 'learning'],
                logo_url: 'https://example.com/project-logo.jpg'
            }
        ];
        mockProjectService.searchProjects.mockResolvedValue(mockProjects);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('Bitcoin Education Platform')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Interactive learning platform for Bitcoin newcomers')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('education')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('5 members')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('30.0%')).toBeInTheDocument(); // Funding progress
            (0, globals_1.expect)(react_1.screen.getByText('0.1500 BTC raised')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Goal: 5.0000 BTC')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('6/30/2025')).toBeInTheDocument(); // Deadline
            (0, globals_1.expect)(react_1.screen.getByText('active')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should display project tags correctly', async () => {
        const mockProjects = [
            {
                id: 'project-1',
                name: 'Test Project',
                description: 'Test description',
                category: 'development',
                status: 'active',
                team_size: 3,
                tags: ['bitcoin', 'lightning', 'education', 'community', 'development'],
                deadline: '2025-12-31T23:59:59Z'
            }
        ];
        mockProjectService.searchProjects.mockResolvedValue(mockProjects);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('bitcoin')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('lightning')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('+3')).toBeInTheDocument(); // Shows only first 2 tags, then +count
        });
    });
    (0, globals_1.it)('should handle project join requests', async () => {
        const mockProjects = [
            {
                id: 'project-1',
                name: 'Test Project',
                description: 'Test description',
                category: 'development',
                status: 'active',
                team_size: 3,
                tags: ['bitcoin'],
                deadline: '2025-12-31T23:59:59Z'
            }
        ];
        mockProjectService.searchProjects.mockResolvedValue(mockProjects);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        await (0, react_1.waitFor)(() => {
            const joinButton = react_1.screen.getByText('Join');
            react_1.fireEvent.click(joinButton);
        });
        (0, globals_1.expect)(mockProjectService.joinProject).toHaveBeenCalledWith('project-1');
    });
    (0, globals_1.it)('should display funding progress bar correctly', async () => {
        const mockProjects = [
            {
                id: 'project-1',
                name: 'Funded Project',
                description: 'A well-funded project',
                category: 'development',
                status: 'active',
                team_size: 3,
                funding_goal: 100000000, // 1 BTC
                total_raised: 75000000, // 0.75 BTC (75% funded)
                tags: ['bitcoin'],
                deadline: '2025-12-31T23:59:59Z'
            }
        ];
        mockProjectService.searchProjects.mockResolvedValue(mockProjects);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        await (0, react_1.waitFor)(() => {
            const progressBar = react_1.screen.getByTestId('progress');
            (0, globals_1.expect)(progressBar).toHaveAttribute('data-value', '75');
            (0, globals_1.expect)(react_1.screen.getByText('75.0%')).toBeInTheDocument();
        });
    });
    (0, globals_1.it)('should switch between discover and my projects tabs', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        (0, globals_1.expect)(react_1.screen.getByTestId('tab-discover')).toBeInTheDocument();
        (0, globals_1.expect)(react_1.screen.getByTestId('tab-my-projects')).toBeInTheDocument();
        const myProjectsTab = react_1.screen.getByTestId('tab-my-projects');
        react_1.fireEvent.click(myProjectsTab);
        (0, globals_1.expect)(mockProjectService.getUserProjects).toHaveBeenCalledWith('test-user-id');
    });
});
// Integration Tests
(0, globals_1.describe)('Social Pages Integration', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should handle navigation between pages', async () => {
        // Test that empty state buttons work correctly
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            const searchButton = react_1.screen.getByText('Search People');
            (0, globals_1.expect)(searchButton).toBeInTheDocument();
            // Simulate clicking the button (would navigate in real app)
            react_1.fireEvent.click(searchButton);
        });
    });
    (0, globals_1.it)('should maintain consistent empty state design across pages', async () => {
        const pages = [
            { component: page_1.default, title: 'No People Yet' },
            { component: page_2.default, title: 'No Organizations Yet' },
            { component: page_3.default, title: 'No Projects Yet' }
        ];
        for (const { component: PageComponent, title } of pages) {
            const { unmount } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(PageComponent, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(title)).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText('Why Connect?' || 'Organization Benefits' || 'Project Benefits')).toBeInTheDocument();
            });
            unmount();
        }
    });
    (0, globals_1.it)('should handle error states gracefully', async () => {
        // Mock service errors
        mockPeopleService.searchPeople.mockRejectedValue(new Error('Network error'));
        mockOrganizationService.searchOrganizations.mockRejectedValue(new Error('Network error'));
        mockProjectService.searchProjects.mockRejectedValue(new Error('Network error'));
        const { unmount: unmountPeople } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        // Should still show empty state even with errors
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('No People Yet')).toBeInTheDocument();
        });
        unmountPeople();
        const { unmount: unmountOrgs } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_2.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('No Organizations Yet')).toBeInTheDocument();
        });
        unmountOrgs();
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_3.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('No Projects Yet')).toBeInTheDocument();
        });
    });
});
// Accessibility Tests
(0, globals_1.describe)('Accessibility Tests', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should have proper heading structure', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        const mainHeading = react_1.screen.getByRole('heading', { level: 1 });
        (0, globals_1.expect)(mainHeading).toHaveTextContent('People');
        await (0, react_1.waitFor)(() => {
            const subHeadings = react_1.screen.getAllByRole('heading', { level: 3 });
            (0, globals_1.expect)(subHeadings.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.it)('should have accessible form controls', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        const searchInput = react_1.screen.getByRole('textbox');
        (0, globals_1.expect)(searchInput).toHaveAttribute('placeholder');
        const searchButton = react_1.screen.getByRole('button', { name: /search/i });
        (0, globals_1.expect)(searchButton).toBeInTheDocument();
    });
    (0, globals_1.it)('should have proper button labels', async () => {
        const mockPeople = [
            {
                id: 'user-1',
                username: 'testuser',
                full_name: 'Test User',
                display_name: 'Test User',
                connections_count: 0,
                skills: []
            }
        ];
        mockPeopleService.searchPeople.mockResolvedValue(mockPeople);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            const connectButton = react_1.screen.getByRole('button', { name: /connect/i });
            (0, globals_1.expect)(connectButton).toBeInTheDocument();
        });
    });
});
// Performance Tests
(0, globals_1.describe)('Performance Tests', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should render large lists efficiently', async () => {
        // Mock large dataset
        const largePeopleList = Array.from({ length: 100 }, (_, i) => ({
            id: `user-${i}`,
            username: `user${i}`,
            full_name: `User ${i}`,
            display_name: `User ${i}`,
            connections_count: i * 10,
            skills: ['Bitcoin', 'Lightning']
        }));
        mockPeopleService.searchPeople.mockResolvedValue(largePeopleList);
        const startTime = performance.now();
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        await (0, react_1.waitFor)(() => {
            (0, globals_1.expect)(react_1.screen.getByText('User 0')).toBeInTheDocument();
        });
        const endTime = performance.now();
        const renderTime = endTime - startTime;
        // Should render within reasonable time (adjust threshold as needed)
        (0, globals_1.expect)(renderTime).toBeLessThan(2000); // 2 seconds
    });
    (0, globals_1.it)('should handle rapid user interactions', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page_1.default, {}) }));
        const searchInput = react_1.screen.getByPlaceholderText(/search people/i);
        // Rapid typing should not cause issues
        await user.type(searchInput, 'bitcoin developer lightning network');
        (0, globals_1.expect)(searchInput).toHaveValue('bitcoin developer lightning network');
    });
});
(0, globals_1.describe)('Social Pages', () => {
    (0, globals_1.describe)('OrganizationsPage', () => {
        (0, globals_1.it)('renders organizations page', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_2.default, {}));
            (0, globals_1.expect)(react_1.screen.getByText('Organizations')).toBeInTheDocument();
        });
        (0, globals_1.it)('shows create organization button', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_2.default, {}));
            (0, globals_1.expect)(react_1.screen.getByText('Create Organization')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('PeoplePage', () => {
        (0, globals_1.it)('renders people page', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            (0, globals_1.expect)(react_1.screen.getByText('People')).toBeInTheDocument();
        });
        (0, globals_1.it)('shows search functionality', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_1.default, {}));
            (0, globals_1.expect)(react_1.screen.getByPlaceholderText('Search people...')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('ProjectsPage', () => {
        (0, globals_1.it)('renders projects page', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_3.default, {}));
            (0, globals_1.expect)(react_1.screen.getByText('Projects')).toBeInTheDocument();
        });
        (0, globals_1.it)('shows submit project button', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(page_3.default, {}));
            (0, globals_1.expect)(react_1.screen.getByText('Submit Project')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,