0c8721b97ccd26a31a6739dd3de08243
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Input Component Tests
 *
 * Testing critical form input component used throughout the Bitcoin platform
 * Essential for user authentication, donations, and campaign creation
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const lucide_react_1 = require("lucide-react");
const Input_1 = __importDefault(require("../Input"));
describe('🎨 Input Component - Form Foundation Tests', () => {
    describe('✅ Basic Rendering', () => {
        test('should render input field successfully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Enter text" }));
            expect(react_2.screen.getByPlaceholderText('Enter text')).toBeInTheDocument();
        });
        test('should render with label when provided', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { label: "Email Address", placeholder: "Enter email" }));
            expect(react_2.screen.getByLabelText('Email Address')).toBeInTheDocument();
            expect(react_2.screen.getByText('Email Address')).toBeInTheDocument();
        });
        test('should render without label when not provided', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "No label input" }));
            expect(react_2.screen.getByPlaceholderText('No label input')).toBeInTheDocument();
            // Should not have any label elements
            expect(react_2.screen.queryByText('label')).not.toBeInTheDocument();
        });
        test('should apply custom className', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Custom class", className: "custom-input" }));
            const input = react_2.screen.getByPlaceholderText('Custom class');
            expect(input).toHaveClass('custom-input');
        });
        test('should forward ref correctly', () => {
            var _a;
            const ref = react_1.default.createRef();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { ref: ref, placeholder: "Ref test" }));
            expect(ref.current).toBeDefined();
            expect((_a = ref.current) === null || _a === void 0 ? void 0 : _a.tagName).toBe('INPUT');
        });
    });
    describe('🔐 Input Types & Validation', () => {
        test('should handle email input type', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { type: "email", placeholder: "Enter email" }));
            const input = react_2.screen.getByPlaceholderText('Enter email');
            expect(input).toHaveAttribute('type', 'email');
        });
        test('should handle password input type', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { type: "password", placeholder: "Enter password" }));
            const input = react_2.screen.getByPlaceholderText('Enter password');
            expect(input).toHaveAttribute('type', 'password');
        });
        test('should handle number input type for Bitcoin amounts', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { type: "number", placeholder: "Enter amount", min: "0", step: "0.00000001" }));
            const input = react_2.screen.getByPlaceholderText('Enter amount');
            expect(input).toHaveAttribute('type', 'number');
            expect(input).toHaveAttribute('min', '0');
            expect(input).toHaveAttribute('step', '0.00000001');
        });
        test('should handle text input with pattern validation', () => {
            const bitcoinAddressPattern = '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,87}$';
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { type: "text", pattern: bitcoinAddressPattern, placeholder: "Bitcoin address" }));
            const input = react_2.screen.getByPlaceholderText('Bitcoin address');
            expect(input).toHaveAttribute('pattern', bitcoinAddressPattern);
        });
        test('should handle required fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { required: true, placeholder: "Required field" }));
            const input = react_2.screen.getByPlaceholderText('Required field');
            expect(input).toHaveAttribute('required');
        });
        test('should handle disabled state', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { disabled: true, placeholder: "Disabled input" }));
            const input = react_2.screen.getByPlaceholderText('Disabled input');
            expect(input).toBeDisabled();
        });
        test('should handle readonly state', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { readOnly: true, value: "Read only value" }));
            const input = react_2.screen.getByDisplayValue('Read only value');
            expect(input).toHaveAttribute('readonly');
        });
    });
    describe('🔍 Icon Integration', () => {
        test('should render with email icon', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.Mail, placeholder: "Email with icon" }));
            const input = react_2.screen.getByPlaceholderText('Email with icon');
            expect(input).toHaveClass('pl-10');
            expect(react_2.screen.getByPlaceholderText('Email with icon')).toBeInTheDocument();
        });
        test('should render with lock icon for password', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.Lock, type: "password", placeholder: "Password with icon" }));
            const input = react_2.screen.getByPlaceholderText('Password with icon');
            expect(input).toHaveClass('pl-10');
        });
        test('should render with Bitcoin icon for Bitcoin fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.Bitcoin, placeholder: "Bitcoin amount" }));
            const input = react_2.screen.getByPlaceholderText('Bitcoin amount');
            expect(input).not.toHaveClass('pl-10');
        });
        test('should render with user icon for profile fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.User, placeholder: "Username" }));
            const input = react_2.screen.getByPlaceholderText('Username');
            expect(input).toHaveClass('pl-10');
        });
        test('should render with search icon for search fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.Search, placeholder: "Search campaigns" }));
            const input = react_2.screen.getByPlaceholderText('Search campaigns');
            expect(input).toHaveClass('pl-10');
        });
        test('should adjust padding when icon is present', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.Mail, placeholder: "With icon padding" }));
            const input = react_2.screen.getByPlaceholderText('With icon padding');
            expect(input).toHaveClass('pl-10');
        });
        test('should not have icon padding when no icon', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "No icon padding" }));
            const input = react_2.screen.getByPlaceholderText('No icon padding');
            expect(input).not.toHaveClass('pl-10');
        });
    });
    describe('🎮 User Interactions', () => {
        test('should handle typing in input field', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Type here" }));
            const input = react_2.screen.getByPlaceholderText('Type here');
            await user.type(input, 'Hello Bitcoin!');
            expect(input).toHaveValue('Hello Bitcoin!');
        });
        test('should handle focus and blur events', async () => {
            const user = user_event_1.default.setup();
            const onFocus = jest.fn();
            const onBlur = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { onFocus: onFocus, onBlur: onBlur, placeholder: "Focus test" }));
            const input = react_2.screen.getByPlaceholderText('Focus test');
            await user.click(input);
            expect(onFocus).toHaveBeenCalledTimes(1);
            await user.tab(); // Move focus away
            expect(onBlur).toHaveBeenCalledTimes(1);
        });
        test('should handle onChange events', async () => {
            const user = user_event_1.default.setup();
            const onChange = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { onChange: onChange, placeholder: "Change test" }));
            const input = react_2.screen.getByPlaceholderText('Change test');
            await user.type(input, 'test');
            expect(onChange).toHaveBeenCalledTimes(4); // One call per character
        });
        test('should handle controlled input', async () => {
            const user = user_event_1.default.setup();
            const TestComponent = () => {
                const [value, setValue] = react_1.default.useState('');
                return ((0, jsx_runtime_1.jsx)(Input_1.default, { value: value, onChange: (e) => setValue(e.target.value), placeholder: "Controlled input" }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestComponent, {}));
            const input = react_2.screen.getByPlaceholderText('Controlled input');
            await user.type(input, 'controlled');
            expect(input).toHaveValue('controlled');
        });
        test('should handle clear input', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { defaultValue: "Initial value", placeholder: "Clear test" }));
            const input = react_2.screen.getByPlaceholderText('Clear test');
            expect(input).toHaveValue('Initial value');
            await user.clear(input);
            expect(input).toHaveValue('');
        });
    });
    describe('💰 Bitcoin Platform Specific Tests', () => {
        test('should handle Bitcoin address input', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: lucide_react_1.Bitcoin, placeholder: "Enter Bitcoin address", pattern: "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,87}$", label: "Bitcoin Address" }));
            const input = react_2.screen.getByLabelText('Bitcoin Address');
            const validAddress = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4';
            await user.type(input, validAddress);
            expect(input).toHaveValue(validAddress);
        });
        test('should handle satoshi amount input', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { type: "number", min: "1", max: "2100000000000000", step: "1", placeholder: "Amount in satoshis", label: "Donation Amount (sats)" }));
            const input = react_2.screen.getByLabelText('Donation Amount (sats)');
            await user.type(input, '100000');
            expect(input).toHaveValue(100000);
        });
        test('should handle campaign title input', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { maxLength: 100, placeholder: "Enter campaign title", label: "Campaign Title", required: true }));
            const input = react_2.screen.getByPlaceholderText('Enter campaign title');
            await user.type(input, 'Bitcoin Education Initiative');
            expect(input).toHaveValue('Bitcoin Education Initiative');
            expect(input).toHaveAttribute('maxLength', '100');
            expect(input).toHaveAttribute('required');
        });
        test('should handle email registration input', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { type: "email", icon: lucide_react_1.Mail, placeholder: "Enter your email", label: "Email Address", required: true }));
            const input = react_2.screen.getByPlaceholderText('Enter your email');
            await user.type(input, 'bitcoiner@example.com');
            expect(input).toHaveValue('bitcoiner@example.com');
            expect(input).toHaveAttribute('type', 'email');
            expect(input).toHaveAttribute('required');
        });
        test('should handle password input with visibility toggle simulation', async () => {
            const user = user_event_1.default.setup();
            const TestComponent = () => {
                const [showPassword, setShowPassword] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(Input_1.default, { type: showPassword ? 'text' : 'password', icon: lucide_react_1.Lock, placeholder: "Enter password", label: "Password" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setShowPassword(!showPassword), children: showPassword ? 'Hide' : 'Show' })] }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestComponent, {}));
            const input = react_2.screen.getByLabelText('Password');
            const toggleButton = react_2.screen.getByText('Show');
            await user.type(input, 'mySecurePassword123!');
            expect(input).toHaveAttribute('type', 'password');
            await user.click(toggleButton);
            expect(input).toHaveAttribute('type', 'text');
        });
    });
    describe('🎨 Styling & Accessibility', () => {
        test('should have proper focus styles', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Focus styles test" }));
            const input = react_2.screen.getByPlaceholderText('Focus styles test');
            expect(input).toHaveClass('focus:border-tiffany-500', 'focus:ring-tiffany-500');
        });
        test('should have proper base styling', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Base styles test" }));
            const input = react_2.screen.getByPlaceholderText('Base styles test');
            expect(input).toHaveClass('block', 'w-full', 'rounded-md', 'border-gray-300', 'shadow-sm');
        });
        test('should be accessible with proper label association', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { label: "Accessible Input", placeholder: "Test accessibility" }));
            const input = react_2.screen.getByLabelText('Accessible Input');
            expect(input).toBeInTheDocument();
        });
        test('should support aria attributes', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "ARIA test", "aria-describedby": "help-text", "aria-invalid": "true" }));
            const input = react_2.screen.getByPlaceholderText('ARIA test');
            expect(input).toHaveAttribute('aria-describedby', 'help-text');
            expect(input).toHaveAttribute('aria-invalid', 'true');
        });
        test('should handle long labels gracefully', () => {
            const longLabel = 'This is a very long label that might wrap to multiple lines in the UI';
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { label: longLabel, placeholder: "Long label test" }));
            expect(react_2.screen.getByText(longLabel)).toBeInTheDocument();
            expect(react_2.screen.getByLabelText(longLabel)).toBeInTheDocument();
        });
    });
    describe('🔧 Edge Cases & Error Handling', () => {
        test('should handle empty props gracefully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, {}));
            const input = react_2.screen.getByRole('textbox');
            expect(input).toBeInTheDocument();
        });
        test('should handle undefined values', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { value: undefined, placeholder: "Undefined value" }));
            const input = react_2.screen.getByPlaceholderText('Undefined value');
            expect(input).toBeInTheDocument();
        });
        test('should handle null icon gracefully', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { icon: undefined, placeholder: "No icon" }));
            const input = react_2.screen.getByPlaceholderText('No icon');
            expect(input).toBeInTheDocument();
            expect(input).not.toHaveClass('pl-10');
        });
        test('should handle special characters in input', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Special chars test" }));
            const input = react_2.screen.getByPlaceholderText('Special chars test');
            const specialText = '₿ 💰 🚀 !@#$%^&*()';
            await user.type(input, specialText);
            expect(input).toHaveValue(specialText);
        });
        test('should handle long input values', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Long input test" }));
            const input = react_2.screen.getByPlaceholderText('Long input test');
            const longText = 'a'.repeat(100); // Reduced size for performance
            await user.type(input, longText);
            expect(input).toHaveValue(longText);
        });
        test('should handle rapid typing', async () => {
            const user = user_event_1.default.setup();
            const onChange = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { onChange: onChange, placeholder: "Rapid typing test" }));
            const input = react_2.screen.getByPlaceholderText('Rapid typing test');
            // Simulate typing without delay option
            await user.type(input, 'rapid');
            expect(input).toHaveValue('rapid');
            expect(onChange).toHaveBeenCalledTimes(5);
        });
    });
    describe('🔒 Security & Validation Edge Cases', () => {
        test('should prevent XSS in placeholder', () => {
            const maliciousPlaceholder = '<script>alert("xss")</script>';
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: maliciousPlaceholder }));
            const input = react_2.screen.getByPlaceholderText(maliciousPlaceholder);
            expect(input).toBeInTheDocument();
            // Placeholder should be treated as text, not executed
        });
        test('should prevent XSS in label', () => {
            const maliciousLabel = '<img src=x onerror=alert("xss")>';
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { label: maliciousLabel, placeholder: "XSS test" }));
            expect(react_2.screen.getByText(maliciousLabel)).toBeInTheDocument();
            // Label should be treated as text
        });
        test('should handle paste events with large content', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(Input_1.default, { placeholder: "Paste test" }));
            const input = react_2.screen.getByPlaceholderText('Paste test');
            const largeContent = 'x'.repeat(100); // Reduced size for performance
            await user.click(input);
            await user.paste(largeContent);
            expect(input).toHaveValue(largeContent);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,