{"file":"/home/g/dev/orangecat/src/utils/verification.ts","mappings":"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","names":[],"sources":["/home/g/dev/orangecat/src/utils/verification.ts"],"sourcesContent":["/**\n * Verification System for OrangeCat Platform\n * \n * Handles official account verification, celebrity account protection,\n * and verification badge management to prevent impersonation.\n */\n\nexport interface VerificationStatus {\n  isVerified: boolean;\n  verificationLevel: number;\n  verificationBadge?: 'official' | 'verified' | 'creator' | 'celebrity';\n  verifiedAt?: Date;\n  verifierUserId?: string;\n}\n\nexport interface CelebrityProtectionResult {\n  isProtected: boolean;\n  reason?: string;\n  suggestedAlternatives?: string[];\n}\n\n/**\n * Verification levels:\n * 0 - Unverified\n * 1 - Basic verification (email verified)\n * 2 - Identity verified (documents submitted)\n * 3 - Official account (manually verified by admin)\n * 4 - Celebrity/VIP (special protection status)\n */\nexport const VERIFICATION_LEVELS = {\n  UNVERIFIED: 0,\n  BASIC: 1,\n  IDENTITY: 2,\n  OFFICIAL: 3,\n  CELEBRITY: 4\n} as const;\n\n/**\n * Protected celebrity and public figure usernames\n * These require special admin approval to claim\n */\nexport const PROTECTED_USERNAMES = new Set([\n  // Bitcoin Legends\n  'satoshi', 'satoshinakamoto', 'hal', 'halfinney', 'nickszabo',\n  \n  // Bitcoin Core Developers\n  'gmaxwell', 'sipa', 'petertodd', 'jonasschnelli', 'laanwj',\n  'achow101', 'fanquake', 'meshcollider', 'promag', 'ryanofsky',\n  'adam3us',\n  \n  // Lightning Network Developers  \n  'roasbeef', 'laolu', 'bitconner', 'cfromknecht', 'halseth',\n  'joostjager', 'bhandras', 'wpaulino', 'yyforyongyu',\n  \n  // Bitcoin Companies (Official)\n  'bitcoin', 'bitcoincore', 'bitcoinfoundation', 'blockstream',\n  'lightninglabs', 'square', 'cashapp', 'strike', 'river',\n  'unchained', 'casa', 'coldcard', 'trezor', 'ledger',\n  \n  // Prominent Bitcoin Figures\n  'aantonop', 'jameson', 'lopp', 'hodlonaut', 'dergigi',\n  'saifedean', 'nic', 'carter', 'preston', 'pysh', 'stephan',\n  'livera', 'marty', 'bent', 'matt', 'odell', 'knut', 'svanholm',\n  \n  // Celebrities/Public Figures\n  'elonmusk', 'elon', 'jackdorsey', 'jack', 'saylor',\n  'michaelsaylor', 'cathie', 'wood', 'naval', 'balaji',\n  'tim', 'cook', 'jeff', 'bezos', 'bill', 'gates', 'warren', 'buffett',\n  'microsoft', 'apple', 'google', 'meta', 'facebook',\n  \n  // Government/Institutional\n  'fed', 'treasury', 'sec', 'cftc', 'biden', 'trump', 'yellen', 'powell',\n  \n  // Platform Reserved\n  'admin', 'administrator', 'moderator', 'support', 'help',\n  'official', 'verified', 'orangecat', 'staff', 'team'\n]);\n\n/**\n * Check if a username is protected and requires special verification\n */\nexport function isProtectedUsername(username: string): CelebrityProtectionResult {\n  const lowerUsername = username.toLowerCase();\n  \n  // First check exact match (case-insensitive)\n  if (PROTECTED_USERNAMES.has(lowerUsername)) {\n    return {\n      isProtected: true,\n      reason: 'Celebrity names not allowed - username is protected',\n      suggestedAlternatives: generateUsernameAlternatives(username)\n    };\n  }\n  \n  // Then check normalized version (removing separators but keeping numbers for usernames like adam3us)\n  const normalizedUsername = lowerUsername.replace(/[-_]/g, '');\n  if (PROTECTED_USERNAMES.has(normalizedUsername)) {\n    return {\n      isProtected: true,\n      reason: 'Celebrity names not allowed - username is protected',\n      suggestedAlternatives: generateUsernameAlternatives(username)\n    };\n  }\n  \n  // Check for variations with numbers/separators added to protected names\n  for (const protectedName of Array.from(PROTECTED_USERNAMES)) {\n    // Check if username starts with protected name + separator/number\n    if (lowerUsername.startsWith(protectedName)) {\n      const suffix = lowerUsername.slice(protectedName.length);\n      // Allow if suffix is clearly not impersonation (like _builder, _fan, etc.)\n      if (suffix && /^[_-]?(builder|dev|developer|fan|follower|user|community|unofficial|btc|bitcoin)$/.test(suffix)) {\n        continue; // This is a legitimate variation\n      }\n      // Block if it's just numbers or single characters (like elonmusk1, satoshi_)\n      if (suffix && /^[_-]?[0-9]*[_-]?$/.test(suffix)) {\n        return {\n          isProtected: true,\n          reason: `Username too similar to protected name \"${protectedName}\"`,\n          suggestedAlternatives: generateUsernameAlternatives(username)\n        };\n      }\n    }\n    \n    // Check if protected name can be formed by adding separators (elon_musk -> elonmusk)\n    const usernameWithoutSeparators = lowerUsername.replace(/[-_]/g, '');\n    if (usernameWithoutSeparators === protectedName) {\n      return {\n        isProtected: true,\n        reason: `Username too similar to protected name \"${protectedName}\"`,\n        suggestedAlternatives: generateUsernameAlternatives(username)\n      };\n    }\n    \n    // Special handling for compound names like \"elon_musk\" -> \"elonmusk\"\n    // Check if username with separators matches any protected compound name\n    const compoundVariations = [\n      lowerUsername.replace(/[-_]/g, ''),  // elon_musk -> elonmusk\n      lowerUsername.replace(/[-_]/g, ' '), // elon_musk -> elon musk (then check if \"elonmusk\" exists)\n    ];\n    \n    for (const variation of compoundVariations) {\n      if (PROTECTED_USERNAMES.has(variation.replace(/\\s/g, ''))) {\n        return {\n          isProtected: true,\n          reason: `Username too similar to protected name \"${variation.replace(/\\s/g, '')}\"`,\n          suggestedAlternatives: generateUsernameAlternatives(username)\n        };\n      }\n    }\n  }\n  \n  // Check for lookalike variations\n  for (const protectedName of Array.from(PROTECTED_USERNAMES)) {\n    if (isLookalikeName(lowerUsername, protectedName)) {\n      return {\n        isProtected: true,\n        reason: `Username too similar to protected name \"${protectedName}\"`,\n        suggestedAlternatives: generateUsernameAlternatives(username)\n      };\n    }\n  }\n  \n  return { isProtected: false };\n}\n\n/**\n * Check if two usernames are lookalikes (similarity-based impersonation)\n */\nfunction isLookalikeName(candidate: string, protectedName: string): boolean {\n  // Exact match\n  if (candidate === protectedName) return true;\n  \n  // Common character substitutions\n  const substitutions: Record<string, string[]> = {\n    'o': ['0', 'ο', 'о'], // Latin o, digit 0, Greek omicron, Cyrillic o\n    'a': ['@', 'α', 'а'], // Latin a, at symbol, Greek alpha, Cyrillic a\n    'e': ['3', 'е'],      // Latin e, digit 3, Cyrillic e\n    'i': ['1', 'l', 'і'], // Latin i, digit 1, lowercase L, Cyrillic i\n    'u': ['υ', 'и'],      // Latin u, Greek upsilon, Cyrillic n\n    's': ['$', '5'],      // Latin s, dollar sign, digit 5\n    'g': ['6', '9'],      // Latin g, digits 6 and 9\n  };\n  \n  // Generate variations of the protected name\n  const variations = generateNameVariations(protectedName, substitutions);\n  \n  return variations.includes(candidate);\n}\n\n/**\n * Generate common variations of a name for lookalike detection\n */\nfunction generateNameVariations(name: string, substitutions: Record<string, string[]>): string[] {\n  const variations = new Set([name]);\n  \n  // Add single character substitutions\n  for (let i = 0; i < name.length; i++) {\n    const char = name[i];\n    const subs = substitutions[char];\n    \n    if (subs) {\n      for (const sub of subs) {\n        const variation = name.slice(0, i) + sub + name.slice(i + 1);\n        variations.add(variation);\n      }\n    }\n  }\n  \n  return Array.from(variations);\n}\n\n/**\n * Generate alternative username suggestions\n */\nfunction generateUsernameAlternatives(originalUsername: string): string[] {\n  const base = originalUsername.toLowerCase().replace(/[^a-z0-9]/g, '');\n  \n  return [\n    `${base}_dev`,\n    `${base}_builder`,\n    `${base}_btc`,\n    `${base}_fan`,\n    `bitcoin_${base}`,\n    `${base}_unofficial`,\n    `${base}_user`,\n    `${base}_community`\n  ].slice(0, 5); // Return top 5 suggestions\n}\n\n/**\n * Check if user can claim a verification badge\n */\nexport function canClaimVerificationBadge(\n  username: string, \n  currentVerificationLevel: number\n): { canClaim: boolean; reason?: string } {\n  const protection = isProtectedUsername(username);\n  \n  if (protection.isProtected) {\n    return {\n      canClaim: false,\n      reason: 'Protected username requires admin verification'\n    };\n  }\n  \n  if (currentVerificationLevel < VERIFICATION_LEVELS.IDENTITY) {\n    return {\n      canClaim: false,\n      reason: 'Identity verification required before claiming verification badge'\n    };\n  }\n  \n  return { canClaim: true };\n}\n\n/**\n * Determine appropriate verification badge type\n */\nexport function getVerificationBadgeType(\n  verificationLevel: number,\n  isOfficialAccount: boolean = false\n): VerificationStatus['verificationBadge'] | null {\n  if (isOfficialAccount || verificationLevel >= VERIFICATION_LEVELS.OFFICIAL) {\n    return 'official';\n  }\n  \n  if (verificationLevel >= VERIFICATION_LEVELS.IDENTITY) {\n    return 'verified';\n  }\n  \n  if (verificationLevel >= VERIFICATION_LEVELS.BASIC) {\n    return 'creator';\n  }\n  \n  return null;\n}\n\n/**\n * Validate verification request\n */\nexport interface VerificationRequest {\n  username: string;\n  requestedLevel: number;\n  documentation?: string[];\n  reason?: string;\n}\n\nexport function validateVerificationRequest(\n  request: VerificationRequest\n): { valid: boolean; error?: string } {\n  const { username, requestedLevel } = request;\n  \n  // Check if username is available for verification\n  const protection = isProtectedUsername(username);\n  if (protection.isProtected && requestedLevel >= VERIFICATION_LEVELS.OFFICIAL) {\n    return {\n      valid: false,\n      error: 'Username requires special admin approval for official verification'\n    };\n  }\n  \n  // Validate requested level\n  if (requestedLevel < VERIFICATION_LEVELS.BASIC || \n      requestedLevel > VERIFICATION_LEVELS.CELEBRITY) {\n    return {\n      valid: false,\n      error: 'Invalid verification level requested'\n    };\n  }\n  \n  // High-level verifications require documentation\n  if (requestedLevel >= VERIFICATION_LEVELS.IDENTITY && \n      (!request.documentation || request.documentation.length === 0)) {\n    return {\n      valid: false,\n      error: 'Documentation required for identity verification'\n    };\n  }\n  \n  return { valid: true };\n}\n\n/**\n * Anti-impersonation bio content validation\n */\nexport function validateBioForImpersonation(bio: string): { valid: boolean; error?: string } {\n  if (!bio) return { valid: true };\n  \n  const lowerBio = bio.toLowerCase();\n  \n  // Check for verification claims\n  const verificationClaims = [\n    'verified account', 'official account', 'authentic account',\n    'real account', 'legitimate account', 'approved account',\n    'certified by', 'endorsed by', 'validated by'\n  ];\n  \n  for (const claim of verificationClaims) {\n    if (lowerBio.includes(claim)) {\n      return {\n        valid: false,\n        error: 'Verification claims not allowed in bio'\n      };\n    }\n  }\n  \n  // Check for celebrity impersonation claims\n  const impersonationClaims = [\n    'i am', 'this is', 'real', 'actual', 'genuine',\n    'not fake', 'authentic', 'original'\n  ];\n  \n  const celebrityNames = Array.from(PROTECTED_USERNAMES);\n  \n  for (const claim of impersonationClaims) {\n    for (const celebrity of celebrityNames) {\n      if (lowerBio.includes(`${claim} ${celebrity}`) || \n          lowerBio.includes(`${celebrity} ${claim}`)) {\n        return {\n          valid: false,\n          error: 'Celebrity impersonation claims not allowed'\n        };\n      }\n    }\n  }\n  \n  return { valid: true };\n}\n\n/**\n * Get verification badge display properties\n */\nexport function getVerificationBadgeDisplay(badge: VerificationStatus['verificationBadge']) {\n  const badgeConfig = {\n    official: {\n      icon: '✓',\n      color: '#1DA1F2', // Twitter blue\n      label: 'Official',\n      description: 'This account has been verified as an official representative'\n    },\n    verified: {\n      icon: '✓',\n      color: '#10B981', // Green\n      label: 'Verified',\n      description: 'This account has been verified through identity documentation'\n    },\n    creator: {\n      icon: '⭐',\n      color: '#F59E0B', // Amber\n      label: 'Creator',\n      description: 'This account belongs to a content creator or community member'\n    },\n    celebrity: {\n      icon: '👑',\n      color: '#8B5CF6', // Purple\n      label: 'Celebrity',\n      description: 'This account belongs to a notable public figure'\n    }\n  };\n  \n  return badge ? badgeConfig[badge] : null;\n} "],"version":3}