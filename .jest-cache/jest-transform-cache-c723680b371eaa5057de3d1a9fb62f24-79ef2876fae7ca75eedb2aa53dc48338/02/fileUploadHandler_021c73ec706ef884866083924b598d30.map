{"version":3,"names":["cov_2by7az0xg7","actualCoverage","exports","createFileUploadHandler","server_1","s","require","admin_1","__importDefault","server_2","logger_1","fileUploadValidation_1","security_1","config","f","handleFileUpload","req","securityResult","secureUploadRoute","b","supabase","createServerClient","data","user","error","authError","auth","getUser","logger","logPrefix","message","NextResponse","json","status","formData","file","get","requestedUserId","id","warn","sanitizedUserId","replace","userProfile","profileError","from","select","eq","single","upload_enabled","buffer","Buffer","arrayBuffer","validationConfig","FileUploadValidator","getConfig","validationType","validation","validateFile","valid","processedResult","processImage","processedImage","timestamp","Date","now","filePath","uploadError","default","storage","bucketName","upload","contentType","upsert","cacheControl","getPublicUrl","info","fileSize","length","originalFileName","name","fileType","type","dimensions","userAgent","headers","ip","publicUrl","size","processed","securityValidated","userId"],"sources":["/home/g/dev/orangecat/src/lib/api/fileUploadHandler.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport supabaseAdmin from '@/services/supabase/admin'\nimport { createServerClient } from '@/services/supabase/server'\nimport { logger } from '@/utils/logger'\nimport { FileUploadValidator } from '@/utils/fileUploadValidation'\nimport { secureUploadRoute } from '@/middleware/security'\n\n/**\n * Generic File Upload Handler\n * \n * Eliminates DRY violations by centralizing file upload logic.\n * Used by avatar, banner, and other file upload APIs.\n * \n * 🔒 SECURITY: Authentication required, comprehensive validation\n * ♻️ REFACTORED: Eliminates 66 lines of duplicate code per API route\n */\n\nexport interface FileUploadConfig {\n  bucketName: string\n  logPrefix: string\n  validationType: 'avatar' | 'banner' | 'document'\n}\n\nexport async function createFileUploadHandler(config: FileUploadConfig) {\n  return async function handleFileUpload(req: NextRequest): Promise<NextResponse> {\n    // Apply security middleware first\n    const securityResult = await secureUploadRoute(req)\n    if (securityResult) {\n      return securityResult\n    }\n\n    try {\n      // CRITICAL SECURITY FIX: Mandatory authentication verification\n      const supabase = await createServerClient()\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n\n      if (!user || authError) {\n        logger.error(`${config.logPrefix} Upload failed: Authentication required`, { error: authError?.message }, 'Security')\n        return NextResponse.json({ error: 'Authentication required' }, { status: 401 })\n      }\n\n      const formData = await req.formData()\n      const file = formData.get('file') as File | null\n      const requestedUserId = formData.get('userId') as string | null\n\n      // CRITICAL SECURITY FIX: Verify user can only upload for themselves\n      if (!requestedUserId || requestedUserId !== user.id) {\n        logger.warn(`${config.logPrefix} Upload blocked: User ${user.id} attempted to upload for user ${requestedUserId}`, {}, 'Security')\n        return NextResponse.json(\n          { error: 'Cannot upload files for other users' },\n          { status: 403 }\n        )\n      }\n\n      // CRITICAL SECURITY FIX: Sanitize userId to prevent path traversal\n      const sanitizedUserId = user.id.replace(/[^a-zA-Z0-9-]/g, '')\n      if (sanitizedUserId !== user.id) {\n        logger.warn(`${config.logPrefix} Upload blocked: Invalid user ID format for user ${user.id}`, {}, 'Security')\n        return NextResponse.json(\n          { error: 'Invalid user ID format' },\n          { status: 400 }\n        )\n      }\n\n      // CRITICAL SECURITY FIX: Check user permissions for file uploads\n      const { data: userProfile, error: profileError } = await supabase\n        .from('profiles')\n        .select('id, upload_enabled')\n        .eq('id', user.id)\n        .single()\n\n      if (profileError || !userProfile?.upload_enabled) {\n        logger.warn(`${config.logPrefix} Upload blocked: Uploads disabled for user ${user.id}`, {}, 'Security')\n        return NextResponse.json(\n          { error: 'File uploads disabled for your account' },\n          { status: 403 }\n        )\n      }\n\n      if (!file) {\n        logger.warn(`${config.logPrefix} Upload failed: No file provided for user ${user.id}`, {}, 'Security')\n        return NextResponse.json({ error: 'No file provided' }, { status: 400 })\n      }\n\n      // ── Centralized File Validation ──────────────────────────────────────────────\n      const buffer = Buffer.from(await file.arrayBuffer())\n      const validationConfig = FileUploadValidator.getConfig(config.validationType)\n      const validation = await FileUploadValidator.validateFile(file, buffer, validationConfig)\n      \n      if (!validation.valid) {\n        return NextResponse.json({ error: validation.error }, { status: 400 })\n      }\n\n      // ── Secure Image Processing ──────────────────────────────────────────────\n      const processedResult = await FileUploadValidator.processImage(buffer, validationConfig, 'webp')\n      const processedImage = processedResult.buffer\n\n      // ── Generate Secure File Path ──────────────────────────────────────────────\n      const timestamp = Date.now()\n      const filePath = `${sanitizedUserId}/${timestamp}.webp`\n\n      // ── Upload to Supabase Storage ──────────────────────────────────────────────\n      const { error: uploadError } = await supabaseAdmin.storage\n        .from(config.bucketName)\n        .upload(filePath, processedImage, {\n          contentType: 'image/webp',\n          upsert: true,\n          cacheControl: '3600'\n        })\n\n      if (uploadError) {\n        logger.error(`${config.logPrefix} Upload failed:`, { error: uploadError.message }, 'Upload')\n        return NextResponse.json({ error: 'Upload failed' }, { status: 500 })\n      }\n\n      // ── Get public URL ──────────────────────────────────────────────────────────\n      const { data } = supabaseAdmin.storage.from(config.bucketName).getPublicUrl(filePath)\n\n      // CRITICAL SECURITY FIX: Comprehensive audit logging\n      logger.info(`${config.logPrefix} upload completed for user ${user.id}`, {\n        filePath,\n        fileSize: processedImage.length,\n        originalFileName: file.name,\n        fileType: file.type,\n        dimensions: validationConfig.dimensions,\n        userAgent: req.headers.get('user-agent'),\n        ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown'\n      }, 'Security')\n\n      return NextResponse.json({\n        publicUrl: data.publicUrl,\n        size: processedImage.length,\n        dimensions: validationConfig.dimensions,\n        processed: true,\n        securityValidated: true,\n        userId: user.id // Return the verified userId for client confirmation\n      })\n\n    } catch (error: any) {\n      logger.error(`${config.logPrefix} Upload error:`, { error: error.message }, 'Security')\n      return NextResponse.json({ error: 'Upload failed' }, { status: 500 })\n    }\n  }\n}"],"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","ignoreList":[]}