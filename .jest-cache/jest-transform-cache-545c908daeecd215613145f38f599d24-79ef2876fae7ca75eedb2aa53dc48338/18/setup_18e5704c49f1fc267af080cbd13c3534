eb9b7b1a6dad091ead86724ad06e7b79
"use strict";
/**
 * Global Test Setup for OrangeCat
 * Initialize test environment before any tests run
 *
 * Created: 2025-09-24
 * Last Modified: 2025-09-24
 * Last Modified Summary: Global test setup for comprehensive testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalSetup;
/**
 * Global setup function
 * This runs before any tests start
 */
async function globalSetup() {
    console.log('üöÄ Global test setup starting...');
    try {
        // Set up test environment variables
        process.env.NODE_ENV = 'test';
        process.env.JEST_WORKER_ID = process.env.JEST_WORKER_ID || '1';
        // Set up test database if needed
        if (!process.env.TEST_DATABASE_URL) {
            process.env.TEST_DATABASE_URL = process.env.DATABASE_URL || 'postgresql://test:test@localhost:5432/orangecat_test';
            console.log('Using test database:', process.env.TEST_DATABASE_URL);
        }
        // Set up test Supabase configuration
        if (!process.env.TEST_SUPABASE_URL) {
            process.env.TEST_SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://test.supabase.co';
            console.log('Using test Supabase URL:', process.env.TEST_SUPABASE_URL);
        }
        // Set up test directories
        const fs = require('fs');
        const path = require('path');
        const testDirs = ['test-results', 'coverage', 'playwright-report'];
        testDirs.forEach(dir => {
            const dirPath = path.join(process.cwd(), dir);
            if (!fs.existsSync(dirPath)) {
                fs.mkdirSync(dirPath, { recursive: true });
                console.log(`Created test directory: ${dir}`);
            }
        });
        // Initialize test database
        console.log('Initializing test database...');
        // Add database initialization logic here
        // Set up mock servers if needed
        if (process.env.USE_MOCK_SERVERS) {
            console.log('Setting up mock servers...');
            // Add mock server setup logic here
        }
        console.log('‚úÖ Global test setup completed successfully');
    }
    catch (error) {
        console.error('‚ùå Global test setup failed:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZy9kZXYvb3JhbmdlY2F0L3Rlc3RzL3NldHVwLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztHQU9HOztBQU1ILDhCQWdEQztBQXBERDs7O0dBR0c7QUFDWSxLQUFLLFVBQVUsV0FBVztJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFFaEQsSUFBSSxDQUFDO1FBQ0gsb0NBQW9DO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxHQUFHLENBQUM7UUFFL0QsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxzREFBc0QsQ0FBQztZQUNuSCxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBRUQscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLDBCQUEwQixDQUFDO1lBQ25HLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFFRCwwQkFBMEI7UUFDMUIsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU3QixNQUFNLFFBQVEsR0FBRyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUNuRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQzVCLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDaEQsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsMkJBQTJCO1FBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUM3Qyx5Q0FBeUM7UUFFekMsZ0NBQWdDO1FBQ2hDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUMxQyxtQ0FBbUM7UUFDckMsQ0FBQztRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsTUFBTSxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9nL2Rldi9vcmFuZ2VjYXQvdGVzdHMvc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHbG9iYWwgVGVzdCBTZXR1cCBmb3IgT3JhbmdlQ2F0XG4gKiBJbml0aWFsaXplIHRlc3QgZW52aXJvbm1lbnQgYmVmb3JlIGFueSB0ZXN0cyBydW5cbiAqXG4gKiBDcmVhdGVkOiAyMDI1LTA5LTI0XG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTA5LTI0XG4gKiBMYXN0IE1vZGlmaWVkIFN1bW1hcnk6IEdsb2JhbCB0ZXN0IHNldHVwIGZvciBjb21wcmVoZW5zaXZlIHRlc3RpbmdcbiAqL1xuXG4vKipcbiAqIEdsb2JhbCBzZXR1cCBmdW5jdGlvblxuICogVGhpcyBydW5zIGJlZm9yZSBhbnkgdGVzdHMgc3RhcnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2xvYmFsU2V0dXAoKSB7XG4gIGNvbnNvbGUubG9nKCfwn5qAIEdsb2JhbCB0ZXN0IHNldHVwIHN0YXJ0aW5nLi4uJyk7XG5cbiAgdHJ5IHtcbiAgICAvLyBTZXQgdXAgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgICBwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRCA9IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEIHx8ICcxJztcblxuICAgIC8vIFNldCB1cCB0ZXN0IGRhdGFiYXNlIGlmIG5lZWRlZFxuICAgIGlmICghcHJvY2Vzcy5lbnYuVEVTVF9EQVRBQkFTRV9VUkwpIHtcbiAgICAgIHByb2Nlc3MuZW52LlRFU1RfREFUQUJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8ICdwb3N0Z3Jlc3FsOi8vdGVzdDp0ZXN0QGxvY2FsaG9zdDo1NDMyL29yYW5nZWNhdF90ZXN0JztcbiAgICAgIGNvbnNvbGUubG9nKCdVc2luZyB0ZXN0IGRhdGFiYXNlOicsIHByb2Nlc3MuZW52LlRFU1RfREFUQUJBU0VfVVJMKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgdXAgdGVzdCBTdXBhYmFzZSBjb25maWd1cmF0aW9uXG4gICAgaWYgKCFwcm9jZXNzLmVudi5URVNUX1NVUEFCQVNFX1VSTCkge1xuICAgICAgcHJvY2Vzcy5lbnYuVEVTVF9TVVBBQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vdGVzdC5zdXBhYmFzZS5jbyc7XG4gICAgICBjb25zb2xlLmxvZygnVXNpbmcgdGVzdCBTdXBhYmFzZSBVUkw6JywgcHJvY2Vzcy5lbnYuVEVTVF9TVVBBQkFTRV9VUkwpO1xuICAgIH1cblxuICAgIC8vIFNldCB1cCB0ZXN0IGRpcmVjdG9yaWVzXG4gICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgIGNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbiAgICBjb25zdCB0ZXN0RGlycyA9IFsndGVzdC1yZXN1bHRzJywgJ2NvdmVyYWdlJywgJ3BsYXl3cmlnaHQtcmVwb3J0J107XG4gICAgdGVzdERpcnMuZm9yRWFjaChkaXIgPT4ge1xuICAgICAgY29uc3QgZGlyUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBkaXIpO1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpclBhdGgpKSB7XG4gICAgICAgIGZzLm1rZGlyU3luYyhkaXJQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgY29uc29sZS5sb2coYENyZWF0ZWQgdGVzdCBkaXJlY3Rvcnk6ICR7ZGlyfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0ZXN0IGRhdGFiYXNlXG4gICAgY29uc29sZS5sb2coJ0luaXRpYWxpemluZyB0ZXN0IGRhdGFiYXNlLi4uJyk7XG4gICAgLy8gQWRkIGRhdGFiYXNlIGluaXRpYWxpemF0aW9uIGxvZ2ljIGhlcmVcblxuICAgIC8vIFNldCB1cCBtb2NrIHNlcnZlcnMgaWYgbmVlZGVkXG4gICAgaWYgKHByb2Nlc3MuZW52LlVTRV9NT0NLX1NFUlZFUlMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIHVwIG1vY2sgc2VydmVycy4uLicpO1xuICAgICAgLy8gQWRkIG1vY2sgc2VydmVyIHNldHVwIGxvZ2ljIGhlcmVcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn4pyFIEdsb2JhbCB0ZXN0IHNldHVwIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgR2xvYmFsIHRlc3Qgc2V0dXAgZmFpbGVkOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==